
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800c870  0800c870  0001c870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd8c  0800cd8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd8c  0800cd8c  0001cd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd94  0800cd94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001e0  0800cf7c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800cf7c  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168ae  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e10  00000000  00000000  00036abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  000398d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0003af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a892  00000000  00000000  0003c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bc7  00000000  00000000  00066c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b674  00000000  00000000  0007e851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00189ec5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007618  00000000  00000000  00189f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c858 	.word	0x0800c858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c858 	.word	0x0800c858

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2102      	movs	r1, #2
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <BMP280_Read8+0x4c>)
 80010b6:	f003 fc13 	bl	80048e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <BMP280_Read8+0x50>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	f107 010c 	add.w	r1, r7, #12
 80010c6:	230a      	movs	r3, #10
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2302      	movs	r3, #2
 80010cc:	f004 ffd1 	bl	8006072 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2102      	movs	r1, #2
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <BMP280_Read8+0x4c>)
 80010d6:	f003 fc03 	bl	80048e0 <HAL_GPIO_WritePin>
	return tmp[1];
 80010da:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48000800 	.word	0x48000800
 80010e8:	200001fc 	.word	0x200001fc

080010ec <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010fa:	7b3b      	ldrb	r3, [r7, #12]
 80010fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001100:	b2db      	uxtb	r3, r3
 8001102:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2102      	movs	r1, #2
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <BMP280_Read16+0x5c>)
 800110a:	f003 fbe9 	bl	80048e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <BMP280_Read16+0x60>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	f107 010c 	add.w	r1, r7, #12
 800111a:	230a      	movs	r3, #10
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2303      	movs	r3, #3
 8001120:	f004 ffa7 	bl	8006072 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2102      	movs	r1, #2
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <BMP280_Read16+0x5c>)
 800112a:	f003 fbd9 	bl	80048e0 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 800112e:	7b7b      	ldrb	r3, [r7, #13]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21b      	sxth	r3, r3
 800113c:	b29b      	uxth	r3, r3
#endif
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	48000800 	.word	0x48000800
 800114c:	200001fc 	.word	0x200001fc

08001150 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffc5 	bl	80010ec <BMP280_Read16>
 8001162:	4603      	mov	r3, r0
 8001164:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b21a      	sxth	r2, r3
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29b      	uxth	r3, r3
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8001198:	7b3b      	ldrb	r3, [r7, #12]
 800119a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2102      	movs	r1, #2
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <BMP280_Write8+0x54>)
 80011ac:	f003 fb98 	bl	80048e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <BMP280_Write8+0x58>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f107 020c 	add.w	r2, r7, #12
 80011b8:	f107 010c 	add.w	r1, r7, #12
 80011bc:	230a      	movs	r3, #10
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2302      	movs	r3, #2
 80011c2:	f004 ff56 	bl	8006072 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2102      	movs	r1, #2
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <BMP280_Write8+0x54>)
 80011cc:	f003 fb88 	bl	80048e0 <HAL_GPIO_WritePin>
#endif
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	48000800 	.word	0x48000800
 80011dc:	200001fc 	.word	0x200001fc

080011e0 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2102      	movs	r1, #2
 80011fc:	480e      	ldr	r0, [pc, #56]	; (8001238 <BMP280_Read24+0x58>)
 80011fe:	f003 fb6f 	bl	80048e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <BMP280_Read24+0x5c>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	f107 010c 	add.w	r1, r7, #12
 800120e:	230a      	movs	r3, #10
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2303      	movs	r3, #3
 8001214:	f004 ff2d 	bl	8006072 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2102      	movs	r1, #2
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <BMP280_Read24+0x58>)
 800121e:	f003 fb5f 	bl	80048e0 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8001222:	7b7b      	ldrb	r3, [r7, #13]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	4313      	orrs	r3, r2
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	4313      	orrs	r3, r2
#endif
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	48000800 	.word	0x48000800
 800123c:	200001fc 	.word	0x200001fc

08001240 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	70fb      	strb	r3, [r7, #3]
 8001252:	460b      	mov	r3, r1
 8001254:	70bb      	strb	r3, [r7, #2]
 8001256:	4613      	mov	r3, r2
 8001258:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 800125a:	4a4e      	ldr	r2, [pc, #312]	; (8001394 <BMP280_Init+0x154>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2102      	movs	r1, #2
 8001264:	484c      	ldr	r0, [pc, #304]	; (8001398 <BMP280_Init+0x158>)
 8001266:	f003 fb3b 	bl	80048e0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800126a:	2005      	movs	r0, #5
 800126c:	f001 fc94 	bl	8002b98 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	4848      	ldr	r0, [pc, #288]	; (8001398 <BMP280_Init+0x158>)
 8001276:	f003 fb33 	bl	80048e0 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 800127a:	787b      	ldrb	r3, [r7, #1]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d901      	bls.n	8001284 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8001280:	2303      	movs	r3, #3
 8001282:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001284:	4a45      	ldr	r2, [pc, #276]	; (800139c <BMP280_Init+0x15c>)
 8001286:	787b      	ldrb	r3, [r7, #1]
 8001288:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800128a:	787b      	ldrb	r3, [r7, #1]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8001290:	2300      	movs	r3, #0
 8001292:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b05      	cmp	r3, #5
 8001298:	d901      	bls.n	800129e <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800129a:	2305      	movs	r3, #5
 800129c:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800129e:	4a40      	ldr	r2, [pc, #256]	; (80013a0 <BMP280_Init+0x160>)
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012a4:	78bb      	ldrb	r3, [r7, #2]
 80012a6:	2b05      	cmp	r3, #5
 80012a8:	d901      	bls.n	80012ae <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012aa:	2305      	movs	r3, #5
 80012ac:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012ae:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <BMP280_Init+0x164>)
 80012b0:	78bb      	ldrb	r3, [r7, #2]
 80012b2:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012b4:	bf00      	nop
 80012b6:	20d0      	movs	r0, #208	; 0xd0
 80012b8:	f7ff feee 	bl	8001098 <BMP280_Read8>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b58      	cmp	r3, #88	; 0x58
 80012c0:	d1f9      	bne.n	80012b6 <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80012c2:	2088      	movs	r0, #136	; 0x88
 80012c4:	f7ff ff44 	bl	8001150 <BMP280_Read16LE>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <BMP280_Init+0x168>)
 80012ce:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80012d0:	208a      	movs	r0, #138	; 0x8a
 80012d2:	f7ff ff3d 	bl	8001150 <BMP280_Read16LE>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <BMP280_Init+0x16c>)
 80012dc:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80012de:	208c      	movs	r0, #140	; 0x8c
 80012e0:	f7ff ff36 	bl	8001150 <BMP280_Read16LE>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <BMP280_Init+0x170>)
 80012ea:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80012ec:	208e      	movs	r0, #142	; 0x8e
 80012ee:	f7ff ff2f 	bl	8001150 <BMP280_Read16LE>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <BMP280_Init+0x174>)
 80012f8:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80012fa:	2090      	movs	r0, #144	; 0x90
 80012fc:	f7ff ff28 	bl	8001150 <BMP280_Read16LE>
 8001300:	4603      	mov	r3, r0
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <BMP280_Init+0x178>)
 8001306:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001308:	2092      	movs	r0, #146	; 0x92
 800130a:	f7ff ff21 	bl	8001150 <BMP280_Read16LE>
 800130e:	4603      	mov	r3, r0
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <BMP280_Init+0x17c>)
 8001314:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001316:	2094      	movs	r0, #148	; 0x94
 8001318:	f7ff ff1a 	bl	8001150 <BMP280_Read16LE>
 800131c:	4603      	mov	r3, r0
 800131e:	b21a      	sxth	r2, r3
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <BMP280_Init+0x180>)
 8001322:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001324:	2096      	movs	r0, #150	; 0x96
 8001326:	f7ff ff13 	bl	8001150 <BMP280_Read16LE>
 800132a:	4603      	mov	r3, r0
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <BMP280_Init+0x184>)
 8001330:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001332:	2098      	movs	r0, #152	; 0x98
 8001334:	f7ff ff0c 	bl	8001150 <BMP280_Read16LE>
 8001338:	4603      	mov	r3, r0
 800133a:	b21a      	sxth	r2, r3
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <BMP280_Init+0x188>)
 800133e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001340:	209a      	movs	r0, #154	; 0x9a
 8001342:	f7ff ff05 	bl	8001150 <BMP280_Read16LE>
 8001346:	4603      	mov	r3, r0
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <BMP280_Init+0x18c>)
 800134c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800134e:	209c      	movs	r0, #156	; 0x9c
 8001350:	f7ff fefe 	bl	8001150 <BMP280_Read16LE>
 8001354:	4603      	mov	r3, r0
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <BMP280_Init+0x190>)
 800135a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800135c:	209e      	movs	r0, #158	; 0x9e
 800135e:	f7ff fef7 	bl	8001150 <BMP280_Read16LE>
 8001362:	4603      	mov	r3, r0
 8001364:	b21a      	sxth	r2, r3
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <BMP280_Init+0x194>)
 8001368:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	015b      	lsls	r3, r3, #5
 800136e:	b25a      	sxtb	r2, r3
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b25a      	sxtb	r2, r3
 800137a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800137e:	4313      	orrs	r3, r2
 8001380:	b25b      	sxtb	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4619      	mov	r1, r3
 8001386:	20f4      	movs	r0, #244	; 0xf4
 8001388:	f7ff fefc 	bl	8001184 <BMP280_Write8>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001fc 	.word	0x200001fc
 8001398:	48000800 	.word	0x48000800
 800139c:	20000202 	.word	0x20000202
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000201 	.word	0x20000201
 80013a8:	20000218 	.word	0x20000218
 80013ac:	20000204 	.word	0x20000204
 80013b0:	20000206 	.word	0x20000206
 80013b4:	2000021a 	.word	0x2000021a
 80013b8:	20000208 	.word	0x20000208
 80013bc:	2000020a 	.word	0x2000020a
 80013c0:	2000020c 	.word	0x2000020c
 80013c4:	2000020e 	.word	0x2000020e
 80013c8:	20000210 	.word	0x20000210
 80013cc:	20000212 	.word	0x20000212
 80013d0:	20000214 	.word	0x20000214
 80013d4:	20000216 	.word	0x20000216

080013d8 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <BMP280_ReadTemperature+0xfc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d16d      	bne.n	80014c2 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80013e6:	20f4      	movs	r0, #244	; 0xf4
 80013e8:	f7ff fe56 	bl	8001098 <BMP280_Read8>
 80013ec:	4603      	mov	r3, r0
 80013ee:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	f023 0303 	bic.w	r3, r3, #3
 80013f6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	4619      	mov	r1, r3
 8001404:	20f4      	movs	r0, #244	; 0xf4
 8001406:	f7ff febd 	bl	8001184 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800140a:	20f4      	movs	r0, #244	; 0xf4
 800140c:	f7ff fe44 	bl	8001098 <BMP280_Read8>
 8001410:	4603      	mov	r3, r0
 8001412:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001414:	7dbb      	ldrb	r3, [r7, #22]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800141c:	7dbb      	ldrb	r3, [r7, #22]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d14f      	bne.n	80014c2 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001422:	20f4      	movs	r0, #244	; 0xf4
 8001424:	f7ff fe38 	bl	8001098 <BMP280_Read8>
 8001428:	4603      	mov	r3, r0
 800142a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800142c:	7dbb      	ldrb	r3, [r7, #22]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001434:	7dbb      	ldrb	r3, [r7, #22]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d000      	beq.n	800143c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800143a:	e7f2      	b.n	8001422 <BMP280_ReadTemperature+0x4a>
				  break;
 800143c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800143e:	20fa      	movs	r0, #250	; 0xfa
 8001440:	f7ff fece 	bl	80011e0 <BMP280_Read24>
 8001444:	4603      	mov	r3, r0
 8001446:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	111b      	asrs	r3, r3, #4
 800144c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	10da      	asrs	r2, r3, #3
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <BMP280_ReadTemperature+0x100>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <BMP280_ReadTemperature+0x104>)
 800145c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	12db      	asrs	r3, r3, #11
 8001466:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	111b      	asrs	r3, r3, #4
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <BMP280_ReadTemperature+0x100>)
 800146e:	8812      	ldrh	r2, [r2, #0]
 8001470:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	1112      	asrs	r2, r2, #4
 8001476:	4918      	ldr	r1, [pc, #96]	; (80014d8 <BMP280_ReadTemperature+0x100>)
 8001478:	8809      	ldrh	r1, [r1, #0]
 800147a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800147c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001480:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <BMP280_ReadTemperature+0x108>)
 8001484:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001488:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800148c:	139b      	asrs	r3, r3, #14
 800148e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <BMP280_ReadTemperature+0x10c>)
 8001498:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <BMP280_ReadTemperature+0x10c>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3380      	adds	r3, #128	; 0x80
 80014a6:	121b      	asrs	r3, r3, #8
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80014e8 <BMP280_ReadTemperature+0x110>
 80014bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014c0:	e001      	b.n	80014c6 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -1;
 80014c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
}
 80014c6:	eef0 7a47 	vmov.f32	s15, s14
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000202 	.word	0x20000202
 80014d8:	20000218 	.word	0x20000218
 80014dc:	20000204 	.word	0x20000204
 80014e0:	20000206 	.word	0x20000206
 80014e4:	2000021c 	.word	0x2000021c
 80014e8:	42c80000 	.word	0x42c80000

080014ec <BMP280_ReadPressure>:
	  return p;
}
#endif
#ifdef BMP280
int32_t BMP280_ReadPressure(void)
{
 80014ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f0:	b0ca      	sub	sp, #296	; 0x128
 80014f2:	af00      	add	r7, sp, #0
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  BMP280_ReadTemperature();
 80014f4:	f7ff ff70 	bl	80013d8 <BMP280_ReadTemperature>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80014f8:	20f7      	movs	r0, #247	; 0xf7
 80014fa:	f7ff fe71 	bl	80011e0 <BMP280_Read24>
 80014fe:	4603      	mov	r3, r0
 8001500:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  adc_P >>= 4;
 8001504:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001508:	111b      	asrs	r3, r3, #4
 800150a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	  var1 = ((int64_t)t_fine) - 128000;
 800150e:	4baf      	ldr	r3, [pc, #700]	; (80017cc <BMP280_ReadPressure+0x2e0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	17da      	asrs	r2, r3, #31
 8001514:	4698      	mov	r8, r3
 8001516:	4691      	mov	r9, r2
 8001518:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 800151c:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001520:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
	  var2 = var1 * var1 * (int64_t)p6;
 8001524:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001528:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800152c:	fb03 f102 	mul.w	r1, r3, r2
 8001530:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001534:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	18ca      	adds	r2, r1, r3
 800153e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001542:	fba3 4503 	umull	r4, r5, r3, r3
 8001546:	1953      	adds	r3, r2, r5
 8001548:	461d      	mov	r5, r3
 800154a:	4ba1      	ldr	r3, [pc, #644]	; (80017d0 <BMP280_ReadPressure+0x2e4>)
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	b21b      	sxth	r3, r3
 8001552:	17da      	asrs	r2, r3, #31
 8001554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001558:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800155c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001560:	4603      	mov	r3, r0
 8001562:	fb03 f205 	mul.w	r2, r3, r5
 8001566:	460b      	mov	r3, r1
 8001568:	fb04 f303 	mul.w	r3, r4, r3
 800156c:	4413      	add	r3, r2
 800156e:	4602      	mov	r2, r0
 8001570:	fba4 1202 	umull	r1, r2, r4, r2
 8001574:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001578:	460a      	mov	r2, r1
 800157a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800157e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001582:	4413      	add	r3, r2
 8001584:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001588:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800158c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8001590:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001594:	4b8f      	ldr	r3, [pc, #572]	; (80017d4 <BMP280_ReadPressure+0x2e8>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	b21b      	sxth	r3, r3
 800159c:	17da      	asrs	r2, r3, #31
 800159e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015a2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015aa:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015ae:	462a      	mov	r2, r5
 80015b0:	fb02 f203 	mul.w	r2, r2, r3
 80015b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80015b8:	4621      	mov	r1, r4
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	441a      	add	r2, r3
 80015c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015c4:	4621      	mov	r1, r4
 80015c6:	fba3 1301 	umull	r1, r3, r3, r1
 80015ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015ce:	460b      	mov	r3, r1
 80015d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015d8:	18d3      	adds	r3, r2, r3
 80015da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015de:	f04f 0000 	mov.w	r0, #0
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015ea:	462b      	mov	r3, r5
 80015ec:	0459      	lsls	r1, r3, #17
 80015ee:	4623      	mov	r3, r4
 80015f0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80015f4:	4623      	mov	r3, r4
 80015f6:	0458      	lsls	r0, r3, #17
 80015f8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80015fc:	1814      	adds	r4, r2, r0
 80015fe:	643c      	str	r4, [r7, #64]	; 0x40
 8001600:	414b      	adcs	r3, r1
 8001602:	647b      	str	r3, [r7, #68]	; 0x44
 8001604:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001608:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  var2 = var2 + (((int64_t)p4)<<35);
 800160c:	4b72      	ldr	r3, [pc, #456]	; (80017d8 <BMP280_ReadPressure+0x2ec>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	b21b      	sxth	r3, r3
 8001614:	17da      	asrs	r2, r3, #31
 8001616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800161a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800161e:	f04f 0000 	mov.w	r0, #0
 8001622:	f04f 0100 	mov.w	r1, #0
 8001626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800162a:	00d9      	lsls	r1, r3, #3
 800162c:	2000      	movs	r0, #0
 800162e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001632:	1814      	adds	r4, r2, r0
 8001634:	63bc      	str	r4, [r7, #56]	; 0x38
 8001636:	414b      	adcs	r3, r1
 8001638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800163a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800163e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001642:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001646:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800164a:	fb03 f102 	mul.w	r1, r3, r2
 800164e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001652:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	18ca      	adds	r2, r1, r3
 800165c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001660:	fba3 1303 	umull	r1, r3, r3, r3
 8001664:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001668:	460b      	mov	r3, r1
 800166a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800166e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001672:	18d3      	adds	r3, r2, r3
 8001674:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001678:	4b58      	ldr	r3, [pc, #352]	; (80017dc <BMP280_ReadPressure+0x2f0>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	b21b      	sxth	r3, r3
 8001680:	17da      	asrs	r2, r3, #31
 8001682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001686:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800168a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800168e:	462b      	mov	r3, r5
 8001690:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001694:	4642      	mov	r2, r8
 8001696:	fb02 f203 	mul.w	r2, r2, r3
 800169a:	464b      	mov	r3, r9
 800169c:	4621      	mov	r1, r4
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	4622      	mov	r2, r4
 80016a6:	4641      	mov	r1, r8
 80016a8:	fba2 1201 	umull	r1, r2, r2, r1
 80016ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016b0:	460a      	mov	r2, r1
 80016b2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016ba:	4413      	add	r3, r2
 80016bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016c0:	f04f 0000 	mov.w	r0, #0
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80016cc:	4623      	mov	r3, r4
 80016ce:	0a18      	lsrs	r0, r3, #8
 80016d0:	462b      	mov	r3, r5
 80016d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016d6:	462b      	mov	r3, r5
 80016d8:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <BMP280_ReadPressure+0x2f4>)
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	17da      	asrs	r2, r3, #31
 80016e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016f0:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80016f4:	464a      	mov	r2, r9
 80016f6:	fb02 f203 	mul.w	r2, r2, r3
 80016fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016fe:	4644      	mov	r4, r8
 8001700:	fb04 f303 	mul.w	r3, r4, r3
 8001704:	441a      	add	r2, r3
 8001706:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800170a:	4644      	mov	r4, r8
 800170c:	fba3 4304 	umull	r4, r3, r3, r4
 8001710:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001714:	4623      	mov	r3, r4
 8001716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800171a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800171e:	18d3      	adds	r3, r2, r3
 8001720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001730:	464c      	mov	r4, r9
 8001732:	0323      	lsls	r3, r4, #12
 8001734:	4644      	mov	r4, r8
 8001736:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800173a:	4644      	mov	r4, r8
 800173c:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800173e:	1884      	adds	r4, r0, r2
 8001740:	633c      	str	r4, [r7, #48]	; 0x30
 8001742:	eb41 0303 	adc.w	r3, r1, r3
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
 8001748:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800174c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001750:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001754:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001758:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800175c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <BMP280_ReadPressure+0x2f8>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	2200      	movs	r2, #0
 8001768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800176c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001770:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001774:	462b      	mov	r3, r5
 8001776:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800177a:	4642      	mov	r2, r8
 800177c:	fb02 f203 	mul.w	r2, r2, r3
 8001780:	464b      	mov	r3, r9
 8001782:	4621      	mov	r1, r4
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	4622      	mov	r2, r4
 800178c:	4641      	mov	r1, r8
 800178e:	fba2 1201 	umull	r1, r2, r2, r1
 8001792:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001796:	460a      	mov	r2, r1
 8001798:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800179c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017a0:	4413      	add	r3, r2
 80017a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017b2:	4629      	mov	r1, r5
 80017b4:	104a      	asrs	r2, r1, #1
 80017b6:	4629      	mov	r1, r5
 80017b8:	17cb      	asrs	r3, r1, #31
 80017ba:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  if (var1 == 0) {
 80017be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017c2:	4313      	orrs	r3, r2
 80017c4:	d110      	bne.n	80017e8 <BMP280_ReadPressure+0x2fc>
	    return 0;  // avoid exception caused by division by zero
 80017c6:	2300      	movs	r3, #0
 80017c8:	e158      	b.n	8001a7c <BMP280_ReadPressure+0x590>
 80017ca:	bf00      	nop
 80017cc:	2000021c 	.word	0x2000021c
 80017d0:	20000210 	.word	0x20000210
 80017d4:	2000020e 	.word	0x2000020e
 80017d8:	2000020c 	.word	0x2000020c
 80017dc:	2000020a 	.word	0x2000020a
 80017e0:	20000208 	.word	0x20000208
 80017e4:	2000021a 	.word	0x2000021a
	  }
	  p = 1048576 - adc_P;
 80017e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017ec:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80017f0:	17da      	asrs	r2, r3, #31
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017fa:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	  p = (((p<<31) - var2)*3125) / var1;
 80017fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001802:	105b      	asrs	r3, r3, #1
 8001804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800180c:	07db      	lsls	r3, r3, #31
 800180e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001812:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001816:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800181a:	4621      	mov	r1, r4
 800181c:	1a89      	subs	r1, r1, r2
 800181e:	67b9      	str	r1, [r7, #120]	; 0x78
 8001820:	4629      	mov	r1, r5
 8001822:	eb61 0303 	sbc.w	r3, r1, r3
 8001826:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001828:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800182c:	4622      	mov	r2, r4
 800182e:	462b      	mov	r3, r5
 8001830:	1891      	adds	r1, r2, r2
 8001832:	6239      	str	r1, [r7, #32]
 8001834:	415b      	adcs	r3, r3
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800183c:	4621      	mov	r1, r4
 800183e:	1851      	adds	r1, r2, r1
 8001840:	61b9      	str	r1, [r7, #24]
 8001842:	4629      	mov	r1, r5
 8001844:	414b      	adcs	r3, r1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001854:	4649      	mov	r1, r9
 8001856:	018b      	lsls	r3, r1, #6
 8001858:	4641      	mov	r1, r8
 800185a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185e:	4641      	mov	r1, r8
 8001860:	018a      	lsls	r2, r1, #6
 8001862:	4641      	mov	r1, r8
 8001864:	1889      	adds	r1, r1, r2
 8001866:	6139      	str	r1, [r7, #16]
 8001868:	4649      	mov	r1, r9
 800186a:	eb43 0101 	adc.w	r1, r3, r1
 800186e:	6179      	str	r1, [r7, #20]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800187c:	4649      	mov	r1, r9
 800187e:	008b      	lsls	r3, r1, #2
 8001880:	4641      	mov	r1, r8
 8001882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001886:	4641      	mov	r1, r8
 8001888:	008a      	lsls	r2, r1, #2
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	4603      	mov	r3, r0
 8001890:	4622      	mov	r2, r4
 8001892:	189b      	adds	r3, r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	460b      	mov	r3, r1
 8001898:	462a      	mov	r2, r5
 800189a:	eb42 0303 	adc.w	r3, r2, r3
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018ac:	4649      	mov	r1, r9
 80018ae:	008b      	lsls	r3, r1, #2
 80018b0:	4641      	mov	r1, r8
 80018b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018b6:	4641      	mov	r1, r8
 80018b8:	008a      	lsls	r2, r1, #2
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	4622      	mov	r2, r4
 80018c2:	189b      	adds	r3, r3, r2
 80018c4:	673b      	str	r3, [r7, #112]	; 0x70
 80018c6:	462b      	mov	r3, r5
 80018c8:	460a      	mov	r2, r1
 80018ca:	eb42 0303 	adc.w	r3, r2, r3
 80018ce:	677b      	str	r3, [r7, #116]	; 0x74
 80018d0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018d8:	f7ff f9d6 	bl	8000c88 <__aeabi_ldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <BMP280_ReadPressure+0x59c>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	17da      	asrs	r2, r3, #31
 80018ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80018f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018f2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80018f6:	f04f 0000 	mov.w	r0, #0
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	0b50      	lsrs	r0, r2, #13
 8001900:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001904:	1359      	asrs	r1, r3, #13
 8001906:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800190a:	462b      	mov	r3, r5
 800190c:	fb00 f203 	mul.w	r2, r0, r3
 8001910:	4623      	mov	r3, r4
 8001912:	fb03 f301 	mul.w	r3, r3, r1
 8001916:	4413      	add	r3, r2
 8001918:	4622      	mov	r2, r4
 800191a:	fba2 1200 	umull	r1, r2, r2, r0
 800191e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001922:	460a      	mov	r2, r1
 8001924:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001928:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800192c:	4413      	add	r3, r2
 800192e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001932:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	0b50      	lsrs	r0, r2, #13
 8001940:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001944:	1359      	asrs	r1, r3, #13
 8001946:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800194a:	462b      	mov	r3, r5
 800194c:	fb00 f203 	mul.w	r2, r0, r3
 8001950:	4623      	mov	r3, r4
 8001952:	fb03 f301 	mul.w	r3, r3, r1
 8001956:	4413      	add	r3, r2
 8001958:	4622      	mov	r2, r4
 800195a:	fba2 1200 	umull	r1, r2, r2, r0
 800195e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001962:	460a      	mov	r2, r1
 8001964:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001968:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800196c:	4413      	add	r3, r2
 800196e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800197e:	4621      	mov	r1, r4
 8001980:	0e4a      	lsrs	r2, r1, #25
 8001982:	4629      	mov	r1, r5
 8001984:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001988:	4629      	mov	r1, r5
 800198a:	164b      	asrs	r3, r1, #25
 800198c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	  var2 = (((int64_t)p8) * p) >> 19;
 8001990:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <BMP280_ReadPressure+0x5a0>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	b21b      	sxth	r3, r3
 8001998:	17da      	asrs	r2, r3, #31
 800199a:	663b      	str	r3, [r7, #96]	; 0x60
 800199c:	667a      	str	r2, [r7, #100]	; 0x64
 800199e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019a2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019a6:	462a      	mov	r2, r5
 80019a8:	fb02 f203 	mul.w	r2, r2, r3
 80019ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019b0:	4621      	mov	r1, r4
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80019bc:	4621      	mov	r1, r4
 80019be:	fba2 1201 	umull	r1, r2, r2, r1
 80019c2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80019c6:	460a      	mov	r2, r1
 80019c8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80019cc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019d0:	4413      	add	r3, r2
 80019d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80019e2:	4621      	mov	r1, r4
 80019e4:	0cca      	lsrs	r2, r1, #19
 80019e6:	4629      	mov	r1, r5
 80019e8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019ec:	4629      	mov	r1, r5
 80019ee:	14cb      	asrs	r3, r1, #19
 80019f0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80019f4:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80019f8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019fc:	1884      	adds	r4, r0, r2
 80019fe:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a00:	eb41 0303 	adc.w	r3, r1, r3
 8001a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001a0a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1889      	adds	r1, r1, r2
 8001a12:	6539      	str	r1, [r7, #80]	; 0x50
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb43 0101 	adc.w	r1, r3, r1
 8001a1a:	6579      	str	r1, [r7, #84]	; 0x54
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a28:	4623      	mov	r3, r4
 8001a2a:	0a18      	lsrs	r0, r3, #8
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a32:	462b      	mov	r3, r5
 8001a34:	1219      	asrs	r1, r3, #8
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <BMP280_ReadPressure+0x5a4>)
 8001a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	17da      	asrs	r2, r3, #31
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a50:	464c      	mov	r4, r9
 8001a52:	0123      	lsls	r3, r4, #4
 8001a54:	4644      	mov	r4, r8
 8001a56:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a5a:	4644      	mov	r4, r8
 8001a5c:	0122      	lsls	r2, r4, #4
 8001a5e:	1884      	adds	r4, r0, r2
 8001a60:	603c      	str	r4, [r7, #0]
 8001a62:	eb41 0303 	adc.w	r3, r1, r3
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a6c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	  return (int32_t)p/256;
 8001a70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da00      	bge.n	8001a7a <BMP280_ReadPressure+0x58e>
 8001a78:	33ff      	adds	r3, #255	; 0xff
 8001a7a:	121b      	asrs	r3, r3, #8
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a82:	46bd      	mov	sp, r7
 8001a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a88:	20000216 	.word	0x20000216
 8001a8c:	20000214 	.word	0x20000214
 8001a90:	20000212 	.word	0x20000212

08001a94 <_write>:

/*Funkcja printf wywołuje funckje _write która jest funkcją
 *z atrybutem weak w bibliotece stdio.h, co powoduje że można
 *ją zastąpić własną implementacją, która służy do komunikacji
 *za pomocą UART.*/
int _write ( int file , char *ptr , int len ) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2 , (uint8_t*)ptr , len , 50) ;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	2332      	movs	r3, #50	; 0x32
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <_write+0x24>)
 8001aaa:	f005 fbb7 	bl	800721c <HAL_UART_Transmit>
	return len;
 8001aae:	687b      	ldr	r3, [r7, #4]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000400 	.word	0x20000400

08001abc <delay_us>:
/*Funkcja odpowiedzialna za generowanie opóżnień które
 * służa w komunikacji z czujnikiem DHT11. Ustawia timer
 * na wartosć 0 po czym sprawdza czy wartość timera
 * jest większa niż oczekiwane opóżnienie*/
void delay_us (uint16_t us)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <delay_us+0x30>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8001ace:	bf00      	nop
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <delay_us+0x30>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d3f9      	bcc.n	8001ad0 <delay_us+0x14>
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000334 	.word	0x20000334

08001af0 <Set_Pin_Output>:

/* Funkcja odpowiedzialna za ustawienie danego pinu
* jako wyjście. */
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f002 fd1c 	bl	800455c <HAL_GPIO_Init>
}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <Set_Pin_Input>:

/*
 * Funkcja odpowiedzialna za ustawienie pinu jako wejście*/
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f002 fcfe 	bl	800455c <HAL_GPIO_Init>
}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <DHT11_Start>:
 * DHT11 jako wyjście i ustawienie stanu niskiego
 * który będzie trwał 18 ms, następnie pin
 * konfigurowany jest jako wejście, aby odczytać
 * odpowiedź czujnika.*/
void DHT11_Start (void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b70:	4809      	ldr	r0, [pc, #36]	; (8001b98 <DHT11_Start+0x30>)
 8001b72:	f7ff ffbd 	bl	8001af0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7c:	4806      	ldr	r0, [pc, #24]	; (8001b98 <DHT11_Start+0x30>)
 8001b7e:	f002 feaf 	bl	80048e0 <HAL_GPIO_WritePin>
	 delay_us(18000);  // wait for 18ms
 8001b82:	f244 6050 	movw	r0, #18000	; 0x4650
 8001b86:	f7ff ff99 	bl	8001abc <delay_us>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b8e:	4802      	ldr	r0, [pc, #8]	; (8001b98 <DHT11_Start+0x30>)
 8001b90:	f7ff ffcc 	bl	8001b2c <Set_Pin_Input>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	48000800 	.word	0x48000800

08001b9c <Check_Response>:
 * po 80 ms sprawdza się czy stan jest wysoki.
 * Oczekiwanie na stan niski co powoduje
 * początek wysłania danych.
 * */
uint8_t Check_Response (void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	71fb      	strb	r3, [r7, #7]
	 delay_us(40);
 8001ba6:	2028      	movs	r0, #40	; 0x28
 8001ba8:	f7ff ff88 	bl	8001abc <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb0:	4811      	ldr	r0, [pc, #68]	; (8001bf8 <Check_Response+0x5c>)
 8001bb2:	f002 fe7d 	bl	80048b0 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10f      	bne.n	8001bdc <Check_Response+0x40>
	{
		 delay_us(80);
 8001bbc:	2050      	movs	r0, #80	; 0x50
 8001bbe:	f7ff ff7d 	bl	8001abc <delay_us>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <Check_Response+0x5c>)
 8001bc8:	f002 fe72 	bl	80048b0 <HAL_GPIO_ReadPin>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <Check_Response+0x3c>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	71fb      	strb	r3, [r7, #7]
 8001bd6:	e001      	b.n	8001bdc <Check_Response+0x40>
		else Response = -1;
 8001bd8:	23ff      	movs	r3, #255	; 0xff
 8001bda:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001bdc:	bf00      	nop
 8001bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <Check_Response+0x5c>)
 8001be4:	f002 fe64 	bl	80048b0 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f7      	bne.n	8001bde <Check_Response+0x42>

	return Response;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	48000800 	.word	0x48000800

08001bfc <DHT11_Read>:
 * Jeśli czas trwania stanu wysokiego wynosi 26-28 us
 * oznacza logiczne zero, natomiast jeżeli 40 s oznacza
 * logiczną jednykę.
 * */
uint8_t DHT11_Read (void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	71bb      	strb	r3, [r7, #6]
 8001c06:	e03a      	b.n	8001c7e <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001c08:	bf00      	nop
 8001c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c0e:	4820      	ldr	r0, [pc, #128]	; (8001c90 <DHT11_Read+0x94>)
 8001c10:	f002 fe4e 	bl	80048b0 <HAL_GPIO_ReadPin>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f7      	beq.n	8001c0a <DHT11_Read+0xe>
		delay_us(40);   // wait for 40 us
 8001c1a:	2028      	movs	r0, #40	; 0x28
 8001c1c:	f7ff ff4e 	bl	8001abc <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c24:	481a      	ldr	r0, [pc, #104]	; (8001c90 <DHT11_Read+0x94>)
 8001c26:	f002 fe43 	bl	80048b0 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2201      	movs	r2, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	4013      	ands	r3, r2
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	e00b      	b.n	8001c66 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001c4e:	79bb      	ldrb	r3, [r7, #6]
 8001c50:	f1c3 0307 	rsb	r3, r3, #7
 8001c54:	2201      	movs	r2, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	b25a      	sxtb	r2, r3
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001c66:	bf00      	nop
 8001c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <DHT11_Read+0x94>)
 8001c6e:	f002 fe1f 	bl	80048b0 <HAL_GPIO_ReadPin>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f7      	bne.n	8001c68 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8001c78:	79bb      	ldrb	r3, [r7, #6]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	71bb      	strb	r3, [r7, #6]
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	2b07      	cmp	r3, #7
 8001c82:	d9c1      	bls.n	8001c08 <DHT11_Read+0xc>
	}
	return i;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	48000800 	.word	0x48000800

08001c94 <HAL_TIM_PeriodElapsedCallback>:

/*Wywolanie przerwania, spawdzane jest czy przerwanie wywołał
 * timer2.*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca4:	d102      	bne.n	8001cac <HAL_TIM_PeriodElapsedCallback+0x18>
		FlagInterruption = 1;
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
	}
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000528 	.word	0x20000528

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f000 feed 	bl	8002aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc6:	f000 f8cf 	bl	8001e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f000 fb2f 	bl	800232c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cce:	f000 fad7 	bl	8002280 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001cd2:	f000 f953 	bl	8001f7c <MX_ADC1_Init>
  MX_SPI2_Init();
 8001cd6:	f000 f9c9 	bl	800206c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001cda:	f000 faa1 	bl	8002220 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001cde:	f000 faff 	bl	80022e0 <MX_DMA_Init>
  MX_TIM3_Init();
 8001ce2:	f000 fa4f 	bl	8002184 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001ce6:	f000 f9ff 	bl	80020e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001cea:	217f      	movs	r1, #127	; 0x7f
 8001cec:	484a      	ldr	r0, [pc, #296]	; (8001e18 <main+0x15c>)
 8001cee:	f002 f86e 	bl	8003dce <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001cf2:	4849      	ldr	r0, [pc, #292]	; (8001e18 <main+0x15c>)
 8001cf4:	f001 fab0 	bl	8003258 <HAL_ADC_Start>

  HAL_TIM_Base_Start(&htim3);
 8001cf8:	4848      	ldr	r0, [pc, #288]	; (8001e1c <main+0x160>)
 8001cfa:	f004 fd81 	bl	8006800 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001cfe:	4848      	ldr	r0, [pc, #288]	; (8001e20 <main+0x164>)
 8001d00:	f004 fde6 	bl	80068d0 <HAL_TIM_Base_Start_IT>


  BMP280_Init(&hspi2, BMP280_TEMPERATURE_16BIT, BMP280_ULTRAHIGHRES, BMP280_NORMALMODE);
 8001d04:	2303      	movs	r3, #3
 8001d06:	2205      	movs	r2, #5
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4846      	ldr	r0, [pc, #280]	; (8001e24 <main+0x168>)
 8001d0c:	f7ff fa98 	bl	8001240 <BMP280_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(FlagInterruption == 1){
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <main+0x16c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d1fb      	bne.n	8001d10 <main+0x54>

	  	uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001d18:	483f      	ldr	r0, [pc, #252]	; (8001e18 <main+0x15c>)
 8001d1a:	f001 fb57 	bl	80033cc <HAL_ADC_GetValue>
 8001d1e:	6078      	str	r0, [r7, #4]
	  	float temp = adc_value * 330.0f / 4096.0f;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001e2c <main+0x170>
 8001d2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d32:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001e30 <main+0x174>
 8001d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d3a:	edc7 7a00 	vstr	s15, [r7]

	  	DHT11_Start();
 8001d3e:	f7ff ff13 	bl	8001b68 <DHT11_Start>
	  	Presence=Check_Response();
 8001d42:	f7ff ff2b 	bl	8001b9c <Check_Response>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <main+0x178>)
 8001d4c:	701a      	strb	r2, [r3, #0]
	  	RH_byte1=DHT11_Read();
 8001d4e:	f7ff ff55 	bl	8001bfc <DHT11_Read>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <main+0x17c>)
 8001d58:	701a      	strb	r2, [r3, #0]
	  	RH_byte2=DHT11_Read();
 8001d5a:	f7ff ff4f 	bl	8001bfc <DHT11_Read>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <main+0x180>)
 8001d64:	701a      	strb	r2, [r3, #0]
	  	Temp_byte1=DHT11_Read();
 8001d66:	f7ff ff49 	bl	8001bfc <DHT11_Read>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <main+0x184>)
 8001d70:	701a      	strb	r2, [r3, #0]
	  	Temp_byte2=DHT11_Read();
 8001d72:	f7ff ff43 	bl	8001bfc <DHT11_Read>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <main+0x188>)
 8001d7c:	701a      	strb	r2, [r3, #0]
	  	SUM=DHT11_Read();
 8001d7e:	f7ff ff3d 	bl	8001bfc <DHT11_Read>
 8001d82:	4603      	mov	r3, r0
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <main+0x18c>)
 8001d88:	801a      	strh	r2, [r3, #0]

	  	Te=Temp_byte1;
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <main+0x184>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <main+0x190>)
 8001d92:	801a      	strh	r2, [r3, #0]
	  	RH=RH_byte1;
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <main+0x17c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <main+0x194>)
 8001d9c:	801a      	strh	r2, [r3, #0]
	  	Temperature= (float) Te;
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <main+0x190>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <main+0x198>)
 8001dac:	edc3 7a00 	vstr	s15, [r3]
	  	Humidity=(float) RH;
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <main+0x194>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <main+0x19c>)
 8001dbe:	edc3 7a00 	vstr	s15, [r3]



	  	HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, 1);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	4825      	ldr	r0, [pc, #148]	; (8001e5c <main+0x1a0>)
 8001dc8:	f002 fd8a 	bl	80048e0 <HAL_GPIO_WritePin>
	    pressure = BMP280_ReadPressure();
 8001dcc:	f7ff fb8e 	bl	80014ec <BMP280_ReadPressure>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <main+0x1a4>)
 8001dd4:	6013      	str	r3, [r2, #0]
	  	HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2102      	movs	r1, #2
 8001dda:	4820      	ldr	r0, [pc, #128]	; (8001e5c <main+0x1a0>)
 8001ddc:	f002 fd80 	bl	80048e0 <HAL_GPIO_WritePin>




	  	printf("!, T = %.1f C, RH = %.0f %, P= %d Pa \r\n", adc_value, temp, Humidity,  pressure);
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f7fe fbb1 	bl	8000548 <__aeabi_f2d>
 8001de6:	4604      	mov	r4, r0
 8001de8:	460d      	mov	r5, r1
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <main+0x19c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4919      	ldr	r1, [pc, #100]	; (8001e60 <main+0x1a4>)
 8001dfa:	6809      	ldr	r1, [r1, #0]
 8001dfc:	9102      	str	r1, [sp, #8]
 8001dfe:	e9cd 2300 	strd	r2, r3, [sp]
 8001e02:	4622      	mov	r2, r4
 8001e04:	462b      	mov	r3, r5
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4816      	ldr	r0, [pc, #88]	; (8001e64 <main+0x1a8>)
 8001e0a:	f006 ff17 	bl	8008c3c <iprintf>

	  	FlagInterruption = 0;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <main+0x16c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
	  if(FlagInterruption == 1){
 8001e14:	e77c      	b.n	8001d10 <main+0x54>
 8001e16:	bf00      	nop
 8001e18:	20000220 	.word	0x20000220
 8001e1c:	20000334 	.word	0x20000334
 8001e20:	200002e8 	.word	0x200002e8
 8001e24:	20000284 	.word	0x20000284
 8001e28:	20000528 	.word	0x20000528
 8001e2c:	43a50000 	.word	0x43a50000
 8001e30:	45800000 	.word	0x45800000
 8001e34:	20000524 	.word	0x20000524
 8001e38:	20000510 	.word	0x20000510
 8001e3c:	20000511 	.word	0x20000511
 8001e40:	20000512 	.word	0x20000512
 8001e44:	20000513 	.word	0x20000513
 8001e48:	20000514 	.word	0x20000514
 8001e4c:	20000518 	.word	0x20000518
 8001e50:	20000516 	.word	0x20000516
 8001e54:	2000051c 	.word	0x2000051c
 8001e58:	20000520 	.word	0x20000520
 8001e5c:	48000800 	.word	0x48000800
 8001e60:	2000052c 	.word	0x2000052c
 8001e64:	0800c870 	.word	0x0800c870

08001e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b8      	sub	sp, #224	; 0xe0
 8001e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e72:	2244      	movs	r2, #68	; 0x44
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f006 f85e 	bl	8007f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2288      	movs	r2, #136	; 0x88
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f006 f850 	bl	8007f38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eac:	2302      	movs	r3, #2
 8001eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fd7c 	bl	80049d8 <HAL_RCC_OscConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ee6:	f000 fa9d 	bl	8002424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eea:	230f      	movs	r3, #15
 8001eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 f94a 	bl	80051a8 <HAL_RCC_ClockConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001f1a:	f000 fa83 	bl	8002424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001f1e:	f244 0303 	movw	r3, #16387	; 0x4003
 8001f22:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f24:	2300      	movs	r3, #0
 8001f26:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f30:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001f32:	2302      	movs	r3, #2
 8001f34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f3e:	2307      	movs	r3, #7
 8001f40:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f42:	2302      	movs	r3, #2
 8001f44:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f4e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f50:	463b      	mov	r3, r7
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fb2e 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001f5e:	f000 fa61 	bl	8002424 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f66:	f002 fce1 	bl	800492c <HAL_PWREx_ControlVoltageScaling>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001f70:	f000 fa58 	bl	8002424 <Error_Handler>
  }
}
 8001f74:	bf00      	nop
 8001f76:	37e0      	adds	r7, #224	; 0xe0
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
 8001f9c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fa0:	4a30      	ldr	r2, [pc, #192]	; (8002064 <MX_ADC1_Init+0xe8>)
 8001fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001ff2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <MX_ADC1_Init+0xe4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002000:	4817      	ldr	r0, [pc, #92]	; (8002060 <MX_ADC1_Init+0xe4>)
 8002002:	f000 ffd5 	bl	8002fb0 <HAL_ADC_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800200c:	f000 fa0a 	bl	8002424 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	4811      	ldr	r0, [pc, #68]	; (8002060 <MX_ADC1_Init+0xe4>)
 800201c:	f001 ff38 	bl	8003e90 <HAL_ADCEx_MultiModeConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002026:	f000 f9fd 	bl	8002424 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <MX_ADC1_Init+0xec>)
 800202c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800202e:	2306      	movs	r3, #6
 8002030:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002032:	2307      	movs	r3, #7
 8002034:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002036:	237f      	movs	r3, #127	; 0x7f
 8002038:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800203a:	2304      	movs	r3, #4
 800203c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <MX_ADC1_Init+0xe4>)
 8002048:	f001 f9ce 	bl	80033e8 <HAL_ADC_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8002052:	f000 f9e7 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000220 	.word	0x20000220
 8002064:	50040000 	.word	0x50040000
 8002068:	04300002 	.word	0x04300002

0800206c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <MX_SPI2_Init+0x74>)
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <MX_SPI2_Init+0x78>)
 8002074:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <MX_SPI2_Init+0x74>)
 8002078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800207c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_SPI2_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_SPI2_Init+0x74>)
 8002086:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800208a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <MX_SPI2_Init+0x74>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <MX_SPI2_Init+0x74>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <MX_SPI2_Init+0x74>)
 800209a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <MX_SPI2_Init+0x74>)
 80020a2:	2218      	movs	r2, #24
 80020a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <MX_SPI2_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <MX_SPI2_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <MX_SPI2_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MX_SPI2_Init+0x74>)
 80020ba:	2207      	movs	r2, #7
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <MX_SPI2_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MX_SPI2_Init+0x74>)
 80020c6:	2208      	movs	r2, #8
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020ca:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_SPI2_Init+0x74>)
 80020cc:	f003 ff2e 	bl	8005f2c <HAL_SPI_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80020d6:	f000 f9a5 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000284 	.word	0x20000284
 80020e4:	40003800 	.word	0x40003800

080020e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM2_Init+0x98>)
 8002108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800210c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_TIM2_Init+0x98>)
 8002110:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002114:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_TIM2_Init+0x98>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_TIM2_Init+0x98>)
 800211e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002122:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_TIM2_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <MX_TIM2_Init+0x98>)
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002130:	4813      	ldr	r0, [pc, #76]	; (8002180 <MX_TIM2_Init+0x98>)
 8002132:	f004 fb0d 	bl	8006750 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800213c:	f000 f972 	bl	8002424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <MX_TIM2_Init+0x98>)
 800214e:	f004 fd4e 	bl	8006bee <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002158:	f000 f964 	bl	8002424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_TIM2_Init+0x98>)
 800216a:	f004 ff63 	bl	8007034 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002174:	f000 f956 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200002e8 	.word	0x200002e8

08002184 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <MX_TIM3_Init+0x94>)
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <MX_TIM3_Init+0x98>)
 80021a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <MX_TIM3_Init+0x94>)
 80021aa:	224f      	movs	r2, #79	; 0x4f
 80021ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_TIM3_Init+0x94>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_TIM3_Init+0x94>)
 80021b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <MX_TIM3_Init+0x94>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_TIM3_Init+0x94>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021c8:	4813      	ldr	r0, [pc, #76]	; (8002218 <MX_TIM3_Init+0x94>)
 80021ca:	f004 fac1 	bl	8006750 <HAL_TIM_Base_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80021d4:	f000 f926 	bl	8002424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4619      	mov	r1, r3
 80021e4:	480c      	ldr	r0, [pc, #48]	; (8002218 <MX_TIM3_Init+0x94>)
 80021e6:	f004 fd02 	bl	8006bee <HAL_TIM_ConfigClockSource>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80021f0:	f000 f918 	bl	8002424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_TIM3_Init+0x94>)
 8002202:	f004 ff17 	bl	8007034 <HAL_TIMEx_MasterConfigSynchronization>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800220c:	f000 f90a 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000334 	.word	0x20000334
 800221c:	40000400 	.word	0x40000400

08002220 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_USART1_UART_Init+0x58>)
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <MX_USART1_UART_Init+0x5c>)
 8002228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_USART1_UART_Init+0x58>)
 800222c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_USART1_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_USART1_UART_Init+0x58>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_USART1_UART_Init+0x58>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_USART1_UART_Init+0x58>)
 8002246:	220c      	movs	r2, #12
 8002248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_USART1_UART_Init+0x58>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_USART1_UART_Init+0x58>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_USART1_UART_Init+0x58>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_USART1_UART_Init+0x58>)
 800225e:	2200      	movs	r2, #0
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_USART1_UART_Init+0x58>)
 8002264:	f004 ff8c 	bl	8007180 <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800226e:	f000 f8d9 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000380 	.word	0x20000380
 800227c:	40013800 	.word	0x40013800

08002280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <MX_USART2_UART_Init+0x5c>)
 8002288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 800228c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <MX_USART2_UART_Init+0x58>)
 80022c4:	f004 ff5c 	bl	8007180 <HAL_UART_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022ce:	f000 f8a9 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000400 	.word	0x20000400
 80022dc:	40004400 	.word	0x40004400

080022e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <MX_DMA_Init+0x48>)
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ea:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <MX_DMA_Init+0x48>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6493      	str	r3, [r2, #72]	; 0x48
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <MX_DMA_Init+0x48>)
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2010      	movs	r0, #16
 8002304:	f001 ff4b 	bl	800419e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002308:	2010      	movs	r0, #16
 800230a:	f001 ff64 	bl	80041d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2011      	movs	r0, #17
 8002314:	f001 ff43 	bl	800419e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002318:	2011      	movs	r0, #17
 800231a:	f001 ff5c 	bl	80041d6 <HAL_NVIC_EnableIRQ>

}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000

0800232c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	4b35      	ldr	r3, [pc, #212]	; (8002418 <MX_GPIO_Init+0xec>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	4a34      	ldr	r2, [pc, #208]	; (8002418 <MX_GPIO_Init+0xec>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <MX_GPIO_Init+0xec>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800235a:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <MX_GPIO_Init+0xec>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	4a2e      	ldr	r2, [pc, #184]	; (8002418 <MX_GPIO_Init+0xec>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <MX_GPIO_Init+0xec>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <MX_GPIO_Init+0xec>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	4a28      	ldr	r2, [pc, #160]	; (8002418 <MX_GPIO_Init+0xec>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <MX_GPIO_Init+0xec>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <MX_GPIO_Init+0xec>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <MX_GPIO_Init+0xec>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <MX_GPIO_Init+0xec>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CSB_Pin|DHT11_DATA_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	f240 2102 	movw	r1, #514	; 0x202
 80023a8:	481c      	ldr	r0, [pc, #112]	; (800241c <MX_GPIO_Init+0xf0>)
 80023aa:	f002 fa99 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2120      	movs	r1, #32
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b6:	f002 fa93 	bl	80048e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_GPIO_Init+0xf4>)
 80023c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	4813      	ldr	r0, [pc, #76]	; (800241c <MX_GPIO_Init+0xf0>)
 80023d0:	f002 f8c4 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CSB_Pin DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = SPI2_CSB_Pin|DHT11_DATA_Pin;
 80023d4:	f240 2302 	movw	r3, #514	; 0x202
 80023d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <MX_GPIO_Init+0xf0>)
 80023ee:	f002 f8b5 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023f2:	2320      	movs	r3, #32
 80023f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f002 f8a6 	bl	800455c <HAL_GPIO_Init>

}
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	48000800 	.word	0x48000800
 8002420:	10210000 	.word	0x10210000

08002424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_MspInit+0x44>)
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <HAL_MspInit+0x44>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6613      	str	r3, [r2, #96]	; 0x60
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_MspInit+0x44>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_MspInit+0x44>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_MspInit+0x44>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6593      	str	r3, [r2, #88]	; 0x58
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_MspInit+0x44>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <HAL_ADC_MspInit+0x74>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d123      	bne.n	80024e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_ADC_MspInit+0x78>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024ce:	2301      	movs	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024d2:	230b      	movs	r3, #11
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <HAL_ADC_MspInit+0x7c>)
 80024e2:	f002 f83b 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	; 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	50040000 	.word	0x50040000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	48000800 	.word	0x48000800

080024fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <HAL_SPI_MspInit+0xb4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d144      	bne.n	80025a8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_SPI_MspInit+0xb8>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002566:	230c      	movs	r3, #12
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002576:	2305      	movs	r3, #5
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	480d      	ldr	r0, [pc, #52]	; (80025b8 <HAL_SPI_MspInit+0xbc>)
 8002582:	f001 ffeb 	bl	800455c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002598:	2305      	movs	r3, #5
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4806      	ldr	r0, [pc, #24]	; (80025bc <HAL_SPI_MspInit+0xc0>)
 80025a4:	f001 ffda 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025a8:	bf00      	nop
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40003800 	.word	0x40003800
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000800 	.word	0x48000800
 80025bc:	48000400 	.word	0x48000400

080025c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d0:	d114      	bne.n	80025fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_TIM_Base_MspInit+0x68>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	4a14      	ldr	r2, [pc, #80]	; (8002628 <HAL_TIM_Base_MspInit+0x68>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6593      	str	r3, [r2, #88]	; 0x58
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_TIM_Base_MspInit+0x68>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	201c      	movs	r0, #28
 80025f0:	f001 fdd5 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025f4:	201c      	movs	r0, #28
 80025f6:	f001 fdee 	bl	80041d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025fa:	e010      	b.n	800261e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_TIM_Base_MspInit+0x6c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10b      	bne.n	800261e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_TIM_Base_MspInit+0x68>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_TIM_Base_MspInit+0x68>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6593      	str	r3, [r2, #88]	; 0x58
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_TIM_Base_MspInit+0x68>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40000400 	.word	0x40000400

08002630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	; 0x30
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a5d      	ldr	r2, [pc, #372]	; (80027c4 <HAL_UART_MspInit+0x194>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d12a      	bne.n	80026a8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_UART_MspInit+0x198>)
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	4a5c      	ldr	r2, [pc, #368]	; (80027c8 <HAL_UART_MspInit+0x198>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6613      	str	r3, [r2, #96]	; 0x60
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_UART_MspInit+0x198>)
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	4b57      	ldr	r3, [pc, #348]	; (80027c8 <HAL_UART_MspInit+0x198>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	4a56      	ldr	r2, [pc, #344]	; (80027c8 <HAL_UART_MspInit+0x198>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002676:	4b54      	ldr	r3, [pc, #336]	; (80027c8 <HAL_UART_MspInit+0x198>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002682:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002690:	2303      	movs	r3, #3
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002694:	2307      	movs	r3, #7
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a2:	f001 ff5b 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026a6:	e088      	b.n	80027ba <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a47      	ldr	r2, [pc, #284]	; (80027cc <HAL_UART_MspInit+0x19c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	f040 8083 	bne.w	80027ba <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b4:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_UART_MspInit+0x198>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_UART_MspInit+0x198>)
 80026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026be:	6593      	str	r3, [r2, #88]	; 0x58
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_UART_MspInit+0x198>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <HAL_UART_MspInit+0x198>)
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	4a3d      	ldr	r2, [pc, #244]	; (80027c8 <HAL_UART_MspInit+0x198>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_UART_MspInit+0x198>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026e4:	230c      	movs	r3, #12
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026f4:	2307      	movs	r3, #7
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	4619      	mov	r1, r3
 80026fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002702:	f001 ff2b 	bl	800455c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002706:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 8002708:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <HAL_UART_MspInit+0x1a4>)
 800270a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 800270e:	2202      	movs	r2, #2
 8002710:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002712:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272a:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 8002732:	2220      	movs	r2, #32
 8002734:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800273c:	4824      	ldr	r0, [pc, #144]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 800273e:	f001 fd65 	bl	800420c <HAL_DMA_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8002748:	f7ff fe6c 	bl	8002424 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 8002750:	66da      	str	r2, [r3, #108]	; 0x6c
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_UART_MspInit+0x1a0>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 800275a:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_UART_MspInit+0x1ac>)
 800275c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 8002760:	2202      	movs	r2, #2
 8002762:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 8002766:	2210      	movs	r2, #16
 8002768:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 8002778:	2200      	movs	r2, #0
 800277a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 8002784:	2220      	movs	r2, #32
 8002786:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 800278a:	2200      	movs	r2, #0
 800278c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800278e:	4812      	ldr	r0, [pc, #72]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 8002790:	f001 fd3c 	bl	800420c <HAL_DMA_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_UART_MspInit+0x16e>
      Error_Handler();
 800279a:	f7ff fe43 	bl	8002424 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 80027a2:	669a      	str	r2, [r3, #104]	; 0x68
 80027a4:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <HAL_UART_MspInit+0x1a8>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	2026      	movs	r0, #38	; 0x26
 80027b0:	f001 fcf5 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027b4:	2026      	movs	r0, #38	; 0x26
 80027b6:	f001 fd0e 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 80027ba:	bf00      	nop
 80027bc:	3730      	adds	r7, #48	; 0x30
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40004400 	.word	0x40004400
 80027d0:	20000480 	.word	0x20000480
 80027d4:	4002006c 	.word	0x4002006c
 80027d8:	200004c8 	.word	0x200004c8
 80027dc:	40020080 	.word	0x40020080

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f000 f990 	bl	8002b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <DMA1_Channel6_IRQHandler+0x10>)
 8002842:	f001 fddc 	bl	80043fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000480 	.word	0x20000480

08002850 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <DMA1_Channel7_IRQHandler+0x10>)
 8002856:	f001 fdd2 	bl	80043fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200004c8 	.word	0x200004c8

08002864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <TIM2_IRQHandler+0x10>)
 800286a:	f004 f8a1 	bl	80069b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200002e8 	.word	0x200002e8

08002878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <USART2_IRQHandler+0x10>)
 800287e:	f004 fd61 	bl	8007344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000400 	.word	0x20000400

0800288c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
	return 1;
 8002890:	2301      	movs	r3, #1
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <_kill>:

int _kill(int pid, int sig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028a6:	f005 fb1d 	bl	8007ee4 <__errno>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2216      	movs	r2, #22
 80028ae:	601a      	str	r2, [r3, #0]
	return -1;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_exit>:

void _exit (int status)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ffe7 	bl	800289c <_kill>
	while (1) {}		/* Make sure we hang here */
 80028ce:	e7fe      	b.n	80028ce <_exit+0x12>

080028d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e00a      	b.n	80028f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028e2:	f3af 8000 	nop.w
 80028e6:	4601      	mov	r1, r0
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60ba      	str	r2, [r7, #8]
 80028ee:	b2ca      	uxtb	r2, r1
 80028f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3301      	adds	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	dbf0      	blt.n	80028e2 <_read+0x12>
	}

return len;
 8002900:	687b      	ldr	r3, [r7, #4]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <_close>:
	}
	return len;
}

int _close(int file)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
	return -1;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002932:	605a      	str	r2, [r3, #4]
	return 0;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <_isatty>:

int _isatty(int file)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	return 1;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	return 0;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <_sbrk+0x5c>)
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <_sbrk+0x60>)
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <_sbrk+0x64>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <_sbrk+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d207      	bcs.n	80029b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a4:	f005 fa9e 	bl	8007ee4 <__errno>
 80029a8:	4603      	mov	r3, r0
 80029aa:	220c      	movs	r2, #12
 80029ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e009      	b.n	80029c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <_sbrk+0x64>)
 80029c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20018000 	.word	0x20018000
 80029d4:	00000400 	.word	0x00000400
 80029d8:	20000530 	.word	0x20000530
 80029dc:	20000548 	.word	0x20000548

080029e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <SystemInit+0x64>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <SystemInit+0x64>)
 80029ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <SystemInit+0x68>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <SystemInit+0x68>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <SystemInit+0x68>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <SystemInit+0x68>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <SystemInit+0x68>)
 8002a0c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002a10:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002a14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <SystemInit+0x68>)
 8002a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <SystemInit+0x68>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <SystemInit+0x68>)
 8002a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <SystemInit+0x68>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <SystemInit+0x64>)
 8002a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a36:	609a      	str	r2, [r3, #8]
#endif
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000ed00 	.word	0xe000ed00
 8002a48:	40021000 	.word	0x40021000

08002a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a50:	f7ff ffc6 	bl	80029e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a56:	e003      	b.n	8002a60 <LoopCopyDataInit>

08002a58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a5e:	3104      	adds	r1, #4

08002a60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a60:	480a      	ldr	r0, [pc, #40]	; (8002a8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a68:	d3f6      	bcc.n	8002a58 <CopyDataInit>
	ldr	r2, =_sbss
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a6c:	e002      	b.n	8002a74 <LoopFillZerobss>

08002a6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a70:	f842 3b04 	str.w	r3, [r2], #4

08002a74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <LoopForever+0x16>)
	cmp	r2, r3
 8002a76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a78:	d3f9      	bcc.n	8002a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f005 fa39 	bl	8007ef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a7e:	f7ff f91d 	bl	8001cbc <main>

08002a82 <LoopForever>:

LoopForever:
    b LoopForever
 8002a82:	e7fe      	b.n	8002a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a84:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002a88:	0800cd9c 	.word	0x0800cd9c
	ldr	r0, =_sdata
 8002a8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a90:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8002a94:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002a98:	20000548 	.word	0x20000548

08002a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC1_2_IRQHandler>
	...

08002aa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_Init+0x3c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <HAL_Init+0x3c>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab6:	2003      	movs	r0, #3
 8002ab8:	f001 fb66 	bl	8004188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002abc:	2000      	movs	r0, #0
 8002abe:	f000 f80f 	bl	8002ae0 <HAL_InitTick>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	71fb      	strb	r3, [r7, #7]
 8002acc:	e001      	b.n	8002ad2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ace:	f7ff fcb1 	bl	8002434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40022000 	.word	0x40022000

08002ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <HAL_InitTick+0x6c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d023      	beq.n	8002b3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_InitTick+0x70>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_InitTick+0x6c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	4619      	mov	r1, r3
 8002afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 fb71 	bl	80041f2 <HAL_SYSTICK_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d809      	bhi.n	8002b30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f001 fb3b 	bl	800419e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b28:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_InitTick+0x74>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e007      	b.n	8002b40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e004      	b.n	8002b40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e001      	b.n	8002b40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000008 	.word	0x20000008
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_IncTick+0x20>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x24>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_IncTick+0x24>)
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	20000534 	.word	0x20000534

08002b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return uwTick;
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_GetTick+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000534 	.word	0x20000534

08002b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff ffee 	bl	8002b80 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d005      	beq.n	8002bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_Delay+0x44>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bbe:	bf00      	nop
 8002bc0:	f7ff ffde 	bl	8002b80 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d8f7      	bhi.n	8002bc0 <HAL_Delay+0x28>
  {
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000008 	.word	0x20000008

08002be0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3360      	adds	r3, #96	; 0x60
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <LL_ADC_SetOffset+0x44>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	03fff000 	.word	0x03fff000

08002c90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3360      	adds	r3, #96	; 0x60
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3360      	adds	r3, #96	; 0x60
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b087      	sub	sp, #28
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3330      	adds	r3, #48	; 0x30
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	4413      	add	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	211f      	movs	r1, #31
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	401a      	ands	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	f003 011f 	and.w	r1, r3, #31
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3314      	adds	r3, #20
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	0e5b      	lsrs	r3, r3, #25
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	4413      	add	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	0d1b      	lsrs	r3, r3, #20
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2107      	movs	r1, #7
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	401a      	ands	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	0d1b      	lsrs	r3, r3, #20
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0318 	and.w	r3, r3, #24
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002dc4:	40d9      	lsrs	r1, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	400b      	ands	r3, r1
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	0007ffff 	.word	0x0007ffff

08002de8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 031f 	and.w	r3, r3, #31
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6093      	str	r3, [r2, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3c:	d101      	bne.n	8002e42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8c:	d101      	bne.n	8002e92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002edc:	f043 0202 	orr.w	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <LL_ADC_IsEnabled+0x18>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_ADC_IsEnabled+0x1a>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d101      	bne.n	8002f2e <LL_ADC_IsDisableOngoing+0x18>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <LL_ADC_IsDisableOngoing+0x1a>
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d101      	bne.n	8002f7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d101      	bne.n	8002fa2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e134      	b.n	8003234 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fa4f 	bl	800247c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff19 	bl	8002e28 <LL_ADC_IsDeepPowerDownEnabled>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff feff 	bl	8002e04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ff34 	bl	8002e78 <LL_ADC_IsInternalRegulatorEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d113      	bne.n	800303e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ff18 	bl	8002e50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003020:	4b86      	ldr	r3, [pc, #536]	; (800323c <HAL_ADC_Init+0x28c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	4a86      	ldr	r2, [pc, #536]	; (8003240 <HAL_ADC_Init+0x290>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003030:	e002      	b.n	8003038 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3b01      	subs	r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f9      	bne.n	8003032 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff18 	bl	8002e78 <LL_ADC_IsInternalRegulatorEnabled>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10d      	bne.n	800306a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	f043 0210 	orr.w	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff78 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 8003074:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 80cf 	bne.w	8003222 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80cb 	bne.w	8003222 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003094:	f043 0202 	orr.w	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff25 	bl	8002ef0 <LL_ADC_IsEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d115      	bne.n	80030d8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ac:	4865      	ldr	r0, [pc, #404]	; (8003244 <HAL_ADC_Init+0x294>)
 80030ae:	f7ff ff1f 	bl	8002ef0 <LL_ADC_IsEnabled>
 80030b2:	4604      	mov	r4, r0
 80030b4:	4864      	ldr	r0, [pc, #400]	; (8003248 <HAL_ADC_Init+0x298>)
 80030b6:	f7ff ff1b 	bl	8002ef0 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	431c      	orrs	r4, r3
 80030be:	4863      	ldr	r0, [pc, #396]	; (800324c <HAL_ADC_Init+0x29c>)
 80030c0:	f7ff ff16 	bl	8002ef0 <LL_ADC_IsEnabled>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4323      	orrs	r3, r4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	485f      	ldr	r0, [pc, #380]	; (8003250 <HAL_ADC_Init+0x2a0>)
 80030d4:	f7ff fd84 	bl	8002be0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e5b      	ldrb	r3, [r3, #25]
 80030dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80030e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80030ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d106      	bne.n	8003114 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	3b01      	subs	r3, #1
 800310c:	045b      	lsls	r3, r3, #17
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_ADC_Init+0x2a4>)
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	430b      	orrs	r3, r1
 8003142:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff0b 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 800314e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff18 	bl	8002f8a <LL_ADC_INJ_IsConversionOngoing>
 800315a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d13d      	bne.n	80031de <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d13a      	bne.n	80031de <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800316c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003174:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003184:	f023 0302 	bic.w	r3, r3, #2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	430b      	orrs	r3, r1
 8003190:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003198:	2b01      	cmp	r3, #1
 800319a:	d118      	bne.n	80031ce <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031a6:	f023 0304 	bic.w	r3, r3, #4
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031b8:	4311      	orrs	r1, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031be:	430a      	orrs	r2, r1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	611a      	str	r2, [r3, #16]
 80031cc:	e007      	b.n	80031de <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10c      	bne.n	8003200 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f023 010f 	bic.w	r1, r3, #15
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
 80031fe:	e007      	b.n	8003210 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 020f 	bic.w	r2, r2, #15
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f023 0303 	bic.w	r3, r3, #3
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54
 8003220:	e007      	b.n	8003232 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003232:	7ffb      	ldrb	r3, [r7, #31]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3724      	adds	r7, #36	; 0x24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	20000000 	.word	0x20000000
 8003240:	053e2d63 	.word	0x053e2d63
 8003244:	50040000 	.word	0x50040000
 8003248:	50040100 	.word	0x50040100
 800324c:	50040200 	.word	0x50040200
 8003250:	50040300 	.word	0x50040300
 8003254:	fff0c007 	.word	0xfff0c007

08003258 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003260:	4857      	ldr	r0, [pc, #348]	; (80033c0 <HAL_ADC_Start+0x168>)
 8003262:	f7ff fdc1 	bl	8002de8 <LL_ADC_GetMultimode>
 8003266:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fe79 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 809c 	bne.w	80033b2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_ADC_Start+0x30>
 8003284:	2302      	movs	r3, #2
 8003286:	e097      	b.n	80033b8 <HAL_ADC_Start+0x160>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fc97 	bl	8003bc4 <ADC_Enable>
 8003296:	4603      	mov	r3, r0
 8003298:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 8083 	bne.w	80033a8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a42      	ldr	r2, [pc, #264]	; (80033c4 <HAL_ADC_Start+0x16c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d002      	beq.n	80032c6 <HAL_ADC_Start+0x6e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e000      	b.n	80032c8 <HAL_ADC_Start+0x70>
 80032c6:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_ADC_Start+0x170>)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d002      	beq.n	80032d6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d106      	bne.n	80032fe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f023 0206 	bic.w	r2, r3, #6
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	659a      	str	r2, [r3, #88]	; 0x58
 80032fc:	e002      	b.n	8003304 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	221c      	movs	r2, #28
 800330a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <HAL_ADC_Start+0x16c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d002      	beq.n	8003324 <HAL_ADC_Start+0xcc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	e000      	b.n	8003326 <HAL_ADC_Start+0xce>
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <HAL_ADC_Start+0x170>)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4293      	cmp	r3, r2
 800332c:	d008      	beq.n	8003340 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d002      	beq.n	8003340 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b09      	cmp	r3, #9
 800333e:	d114      	bne.n	800336a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003356:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fdea 	bl	8002f3c <LL_ADC_REG_StartConversion>
 8003368:	e025      	b.n	80033b6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <HAL_ADC_Start+0x16c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d002      	beq.n	8003386 <HAL_ADC_Start+0x12e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	e000      	b.n	8003388 <HAL_ADC_Start+0x130>
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_ADC_Start+0x170>)
 8003388:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00f      	beq.n	80033b6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800339e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
 80033a6:	e006      	b.n	80033b6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033b0:	e001      	b.n	80033b6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	50040300 	.word	0x50040300
 80033c4:	50040100 	.word	0x50040100
 80033c8:	50040000 	.word	0x50040000

080033cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0b6      	sub	sp, #216	; 0xd8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x22>
 8003406:	2302      	movs	r3, #2
 8003408:	e3c6      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x7b0>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fda4 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 83a7 	bne.w	8003b72 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b05      	cmp	r3, #5
 800342a:	d824      	bhi.n	8003476 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	3b02      	subs	r3, #2
 8003432:	2b03      	cmp	r3, #3
 8003434:	d81b      	bhi.n	800346e <HAL_ADC_ConfigChannel+0x86>
 8003436:	a201      	add	r2, pc, #4	; (adr r2, 800343c <HAL_ADC_ConfigChannel+0x54>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	0800344d 	.word	0x0800344d
 8003440:	08003455 	.word	0x08003455
 8003444:	0800345d 	.word	0x0800345d
 8003448:	08003465 	.word	0x08003465
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	220c      	movs	r2, #12
 8003450:	605a      	str	r2, [r3, #4]
          break;
 8003452:	e011      	b.n	8003478 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2212      	movs	r2, #18
 8003458:	605a      	str	r2, [r3, #4]
          break;
 800345a:	e00d      	b.n	8003478 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2218      	movs	r2, #24
 8003460:	605a      	str	r2, [r3, #4]
          break;
 8003462:	e009      	b.n	8003478 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800346a:	605a      	str	r2, [r3, #4]
          break;
 800346c:	e004      	b.n	8003478 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2206      	movs	r2, #6
 8003472:	605a      	str	r2, [r3, #4]
          break;
 8003474:	e000      	b.n	8003478 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003476:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	f7ff fc34 	bl	8002cf2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fd68 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 8003494:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fd74 	bl	8002f8a <LL_ADC_INJ_IsConversionOngoing>
 80034a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 81a6 	bne.w	80037fc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 81a1 	bne.w	80037fc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f7ff fc3f 	bl	8002d4a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	08db      	lsrs	r3, r3, #3
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d00a      	beq.n	8003504 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6919      	ldr	r1, [r3, #16]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034fe:	f7ff fba3 	bl	8002c48 <LL_ADC_SetOffset>
 8003502:	e17b      	b.n	80037fc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fbc0 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x148>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fbb5 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 8003526:	4603      	mov	r3, r0
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 021f 	and.w	r2, r3, #31
 800352e:	e01e      	b.n	800356e <HAL_ADC_ConfigChannel+0x186>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fbaa 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800354e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003556:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800355e:	2320      	movs	r3, #32
 8003560:	e004      	b.n	800356c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x19e>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0e9b      	lsrs	r3, r3, #26
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	e018      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x1d0>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800359a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800359e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80035a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80035aa:	2320      	movs	r3, #32
 80035ac:	e004      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80035ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d106      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fb79 	bl	8002cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fb5d 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x20e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fb52 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 80035ec:	4603      	mov	r3, r0
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	e01e      	b.n	8003634 <HAL_ADC_ConfigChannel+0x24c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fb47 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 8003602:	4603      	mov	r3, r0
 8003604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003614:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003618:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800361c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003624:	2320      	movs	r3, #32
 8003626:	e004      	b.n	8003632 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003628:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_ADC_ConfigChannel+0x264>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	e018      	b.n	800367e <HAL_ADC_ConfigChannel+0x296>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003670:	2320      	movs	r3, #32
 8003672:	e004      	b.n	800367e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800367e:	429a      	cmp	r2, r3
 8003680:	d106      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fb16 	bl	8002cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fafa 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 800369c:	4603      	mov	r3, r0
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x2d4>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2102      	movs	r1, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff faef 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	e01e      	b.n	80036fa <HAL_ADC_ConfigChannel+0x312>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fae4 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80036da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80036e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e004      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x32a>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	e016      	b.n	8003740 <HAL_ADC_ConfigChannel+0x358>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800372a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003732:	2320      	movs	r3, #32
 8003734:	e004      	b.n	8003740 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003740:	429a      	cmp	r2, r3
 8003742:	d106      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	2102      	movs	r1, #2
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fab5 	bl	8002cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2103      	movs	r1, #3
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fa99 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 800375e:	4603      	mov	r3, r0
 8003760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <HAL_ADC_ConfigChannel+0x396>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2103      	movs	r1, #3
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fa8e 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 8003774:	4603      	mov	r3, r0
 8003776:	0e9b      	lsrs	r3, r3, #26
 8003778:	f003 021f 	and.w	r2, r3, #31
 800377c:	e017      	b.n	80037ae <HAL_ADC_ConfigChannel+0x3c6>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2103      	movs	r1, #3
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fa83 	bl	8002c90 <LL_ADC_GetOffsetChannel>
 800378a:	4603      	mov	r3, r0
 800378c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003798:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800379a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80037a0:	2320      	movs	r3, #32
 80037a2:	e003      	b.n	80037ac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80037a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x3de>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	0e9b      	lsrs	r3, r3, #26
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	e011      	b.n	80037ea <HAL_ADC_ConfigChannel+0x402>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80037d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80037d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80037de:	2320      	movs	r3, #32
 80037e0:	e003      	b.n	80037ea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	fab3 f383 	clz	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d106      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	2103      	movs	r1, #3
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fa60 	bl	8002cbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fb75 	bl	8002ef0 <LL_ADC_IsEnabled>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	f040 813f 	bne.w	8003a8c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	461a      	mov	r2, r3
 800381c:	f7ff fac0 	bl	8002da0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a8e      	ldr	r2, [pc, #568]	; (8003a60 <HAL_ADC_ConfigChannel+0x678>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f040 8130 	bne.w	8003a8c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x46c>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	3301      	adds	r3, #1
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2b09      	cmp	r3, #9
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e019      	b.n	8003888 <HAL_ADC_ConfigChannel+0x4a0>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003864:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800386c:	2320      	movs	r3, #32
 800386e:	e003      	b.n	8003878 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3301      	adds	r3, #1
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2b09      	cmp	r3, #9
 8003880:	bf94      	ite	ls
 8003882:	2301      	movls	r3, #1
 8003884:	2300      	movhi	r3, #0
 8003886:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003888:	2b00      	cmp	r3, #0
 800388a:	d079      	beq.n	8003980 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x4c0>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0e9b      	lsrs	r3, r3, #26
 800389e:	3301      	adds	r3, #1
 80038a0:	069b      	lsls	r3, r3, #26
 80038a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038a6:	e015      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x4ec>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80038ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80038c0:	2320      	movs	r3, #32
 80038c2:	e003      	b.n	80038cc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80038c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	069b      	lsls	r3, r3, #26
 80038d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x50c>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0e9b      	lsrs	r3, r3, #26
 80038e6:	3301      	adds	r3, #1
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	2101      	movs	r1, #1
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	e017      	b.n	8003924 <HAL_ADC_ConfigChannel+0x53c>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e003      	b.n	8003918 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2101      	movs	r1, #1
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	ea42 0103 	orr.w	r1, r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_ADC_ConfigChannel+0x562>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	0e9b      	lsrs	r3, r3, #26
 800393a:	3301      	adds	r3, #1
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	051b      	lsls	r3, r3, #20
 8003948:	e018      	b.n	800397c <HAL_ADC_ConfigChannel+0x594>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e003      	b.n	800396e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397c:	430b      	orrs	r3, r1
 800397e:	e080      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003988:	2b00      	cmp	r3, #0
 800398a:	d107      	bne.n	800399c <HAL_ADC_ConfigChannel+0x5b4>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	0e9b      	lsrs	r3, r3, #26
 8003992:	3301      	adds	r3, #1
 8003994:	069b      	lsls	r3, r3, #26
 8003996:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800399a:	e015      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x5e0>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80039b4:	2320      	movs	r3, #32
 80039b6:	e003      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	3301      	adds	r3, #1
 80039c2:	069b      	lsls	r3, r3, #26
 80039c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x600>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0e9b      	lsrs	r3, r3, #26
 80039da:	3301      	adds	r3, #1
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	e017      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x630>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	fa93 f3a3 	rbit	r3, r3
 80039f4:	61fb      	str	r3, [r7, #28]
  return result;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003a00:	2320      	movs	r3, #32
 8003a02:	e003      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	2101      	movs	r1, #1
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	ea42 0103 	orr.w	r1, r2, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x65c>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0e9b      	lsrs	r3, r3, #26
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f003 021f 	and.w	r2, r3, #31
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	3b1e      	subs	r3, #30
 8003a3c:	051b      	lsls	r3, r3, #20
 8003a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a42:	e01d      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x698>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	613b      	str	r3, [r7, #16]
  return result;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e005      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x684>
 8003a60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f003 021f 	and.w	r2, r3, #31
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	3b1e      	subs	r3, #30
 8003a7a:	051b      	lsls	r3, r3, #20
 8003a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a80:	430b      	orrs	r3, r1
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6892      	ldr	r2, [r2, #8]
 8003a86:	4619      	mov	r1, r3
 8003a88:	f7ff f95f 	bl	8002d4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b43      	ldr	r3, [pc, #268]	; (8003ba0 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d079      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a98:	4842      	ldr	r0, [pc, #264]	; (8003ba4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a9a:	f7ff f8c7 	bl	8002c2c <LL_ADC_GetCommonPathInternalCh>
 8003a9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a40      	ldr	r2, [pc, #256]	; (8003ba8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d12b      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d125      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_ADC_ConfigChannel+0x6e4>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d15c      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ad0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4833      	ldr	r0, [pc, #204]	; (8003ba4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ad8:	f7ff f895 	bl	8002c06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003adc:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	4a35      	ldr	r2, [pc, #212]	; (8003bb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	099a      	lsrs	r2, r3, #6
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003af4:	e002      	b.n	8003afc <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f9      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b02:	e040      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2c      	ldr	r2, [pc, #176]	; (8003bbc <HAL_ADC_ConfigChannel+0x7d4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d118      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x758>
 8003b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d112      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a23      	ldr	r2, [pc, #140]	; (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0x746>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a21      	ldr	r2, [pc, #132]	; (8003bb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d12d      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	4619      	mov	r1, r3
 8003b38:	481a      	ldr	r0, [pc, #104]	; (8003ba4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b3a:	f7ff f864 	bl	8002c06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b3e:	e024      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d120      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11a      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a14      	ldr	r2, [pc, #80]	; (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d115      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b68:	4619      	mov	r1, r3
 8003b6a:	480e      	ldr	r0, [pc, #56]	; (8003ba4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b6c:	f7ff f84b 	bl	8002c06 <LL_ADC_SetCommonPathInternalCh>
 8003b70:	e00c      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b84:	e002      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b86:	bf00      	nop
 8003b88:	e000      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b8a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b94:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	37d8      	adds	r7, #216	; 0xd8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	80080000 	.word	0x80080000
 8003ba4:	50040300 	.word	0x50040300
 8003ba8:	c7520000 	.word	0xc7520000
 8003bac:	50040000 	.word	0x50040000
 8003bb0:	50040200 	.word	0x50040200
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	053e2d63 	.word	0x053e2d63
 8003bbc:	cb840000 	.word	0xcb840000
 8003bc0:	80000001 	.word	0x80000001

08003bc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f98d 	bl	8002ef0 <LL_ADC_IsEnabled>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d146      	bne.n	8003c6a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <ADC_Enable+0xb0>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e032      	b.n	8003c6c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f948 	bl	8002ea0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c10:	f7fe ffb6 	bl	8002b80 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c16:	e021      	b.n	8003c5c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff f967 	bl	8002ef0 <LL_ADC_IsEnabled>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff f937 	bl	8002ea0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c32:	f7fe ffa5 	bl	8002b80 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d90d      	bls.n	8003c5c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	f043 0210 	orr.w	r2, r3, #16
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e007      	b.n	8003c6c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d1d6      	bne.n	8003c18 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	8000003f 	.word	0x8000003f

08003c78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff f946 	bl	8002f16 <LL_ADC_IsDisableOngoing>
 8003c8a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff f92d 	bl	8002ef0 <LL_ADC_IsEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d040      	beq.n	8003d1e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d13d      	bne.n	8003d1e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030d 	and.w	r3, r3, #13
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10c      	bne.n	8003cca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff f907 	bl	8002ec8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cc2:	f7fe ff5d 	bl	8002b80 <HAL_GetTick>
 8003cc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cc8:	e022      	b.n	8003d10 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f043 0210 	orr.w	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e01c      	b.n	8003d20 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ce6:	f7fe ff4b 	bl	8002b80 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d90d      	bls.n	8003d10 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f043 0210 	orr.w	r2, r3, #16
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e007      	b.n	8003d20 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e3      	bne.n	8003ce6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <LL_ADC_IsEnabled>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <LL_ADC_IsEnabled+0x18>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <LL_ADC_IsEnabled+0x1a>
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_ADC_StartCalibration>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_IsCalibrationOnGoing>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d94:	d101      	bne.n	8003d9a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_REG_IsConversionOngoing>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d101      	bne.n	8003dc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_ADCEx_Calibration_Start+0x1c>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e04d      	b.n	8003e86 <HAL_ADCEx_Calibration_Start+0xb8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ff40 	bl	8003c78 <ADC_Disable>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d136      	bne.n	8003e70 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e0a:	f023 0302 	bic.w	r3, r3, #2
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff96 	bl	8003d4e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e22:	e014      	b.n	8003e4e <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003e30:	d30d      	bcc.n	8003e4e <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	f023 0312 	bic.w	r3, r3, #18
 8003e3a:	f043 0210 	orr.w	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e01b      	b.n	8003e86 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff94 	bl	8003d80 <LL_ADC_IsCalibrationOnGoing>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e2      	bne.n	8003e24 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
 8003e6e:	e005      	b.n	8003e7c <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f043 0210 	orr.w	r2, r3, #16
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b09f      	sub	sp, #124	; 0x7c
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e08f      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a47      	ldr	r2, [pc, #284]	; (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d102      	bne.n	8003ec6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003ec0:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	e001      	b.n	8003eca <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e072      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff5c 	bl	8003da8 <LL_ADC_REG_IsConversionOngoing>
 8003ef0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ff56 	bl	8003da8 <LL_ADC_REG_IsConversionOngoing>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d154      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d151      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f08:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f0a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02c      	beq.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f26:	035b      	lsls	r3, r3, #13
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f30:	4829      	ldr	r0, [pc, #164]	; (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003f32:	f7ff fef9 	bl	8003d28 <LL_ADC_IsEnabled>
 8003f36:	4604      	mov	r4, r0
 8003f38:	4828      	ldr	r0, [pc, #160]	; (8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003f3a:	f7ff fef5 	bl	8003d28 <LL_ADC_IsEnabled>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	431c      	orrs	r4, r3
 8003f42:	4828      	ldr	r0, [pc, #160]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f44:	f7ff fef0 	bl	8003d28 <LL_ADC_IsEnabled>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4323      	orrs	r3, r4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d137      	bne.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f58:	f023 030f 	bic.w	r3, r3, #15
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	6811      	ldr	r1, [r2, #0]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	6892      	ldr	r2, [r2, #8]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	431a      	orrs	r2, r3
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f6c:	e028      	b.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f7a:	4817      	ldr	r0, [pc, #92]	; (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003f7c:	f7ff fed4 	bl	8003d28 <LL_ADC_IsEnabled>
 8003f80:	4604      	mov	r4, r0
 8003f82:	4816      	ldr	r0, [pc, #88]	; (8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003f84:	f7ff fed0 	bl	8003d28 <LL_ADC_IsEnabled>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	431c      	orrs	r4, r3
 8003f8c:	4815      	ldr	r0, [pc, #84]	; (8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f8e:	f7ff fecb 	bl	8003d28 <LL_ADC_IsEnabled>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4323      	orrs	r3, r4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d112      	bne.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003fa2:	f023 030f 	bic.w	r3, r3, #15
 8003fa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fa8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003faa:	e009      	b.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003fbe:	e000      	b.n	8003fc2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	377c      	adds	r7, #124	; 0x7c
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd90      	pop	{r4, r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	50040000 	.word	0x50040000
 8003fdc:	50040100 	.word	0x50040100
 8003fe0:	50040300 	.word	0x50040300
 8003fe4:	50040200 	.word	0x50040200

08003fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004004:	4013      	ands	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60d3      	str	r3, [r2, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <__NVIC_GetPriorityGrouping+0x18>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	f003 0307 	and.w	r3, r3, #7
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	db0b      	blt.n	8004076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	4907      	ldr	r1, [pc, #28]	; (8004084 <__NVIC_EnableIRQ+0x38>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2001      	movs	r0, #1
 800406e:	fa00 f202 	lsl.w	r2, r0, r2
 8004072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	e000e100 	.word	0xe000e100

08004088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db0a      	blt.n	80040b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	490c      	ldr	r1, [pc, #48]	; (80040d4 <__NVIC_SetPriority+0x4c>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b0:	e00a      	b.n	80040c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4908      	ldr	r1, [pc, #32]	; (80040d8 <__NVIC_SetPriority+0x50>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3b04      	subs	r3, #4
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	761a      	strb	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000e100 	.word	0xe000e100
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf28      	it	cs
 80040fa:	2304      	movcs	r3, #4
 80040fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3304      	adds	r3, #4
 8004102:	2b06      	cmp	r3, #6
 8004104:	d902      	bls.n	800410c <NVIC_EncodePriority+0x30>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b03      	subs	r3, #3
 800410a:	e000      	b.n	800410e <NVIC_EncodePriority+0x32>
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	401a      	ands	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43d9      	mvns	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	4313      	orrs	r3, r2
         );
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3b01      	subs	r3, #1
 8004150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004154:	d301      	bcc.n	800415a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004156:	2301      	movs	r3, #1
 8004158:	e00f      	b.n	800417a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <SysTick_Config+0x40>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3b01      	subs	r3, #1
 8004160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004162:	210f      	movs	r1, #15
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	f7ff ff8e 	bl	8004088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <SysTick_Config+0x40>)
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <SysTick_Config+0x40>)
 8004174:	2207      	movs	r2, #7
 8004176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	e000e010 	.word	0xe000e010

08004188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff29 	bl	8003fe8 <__NVIC_SetPriorityGrouping>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041b0:	f7ff ff3e 	bl	8004030 <__NVIC_GetPriorityGrouping>
 80041b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f7ff ff8e 	bl	80040dc <NVIC_EncodePriority>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff5d 	bl	8004088 <__NVIC_SetPriority>
}
 80041ce:	bf00      	nop
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	4603      	mov	r3, r0
 80041de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff31 	bl	800404c <__NVIC_EnableIRQ>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ffa2 	bl	8004144 <SysTick_Config>
 8004200:	4603      	mov	r3, r0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e098      	b.n	8004350 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	4b4d      	ldr	r3, [pc, #308]	; (800435c <HAL_DMA_Init+0x150>)
 8004226:	429a      	cmp	r2, r3
 8004228:	d80f      	bhi.n	800424a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <HAL_DMA_Init+0x154>)
 8004232:	4413      	add	r3, r2
 8004234:	4a4b      	ldr	r2, [pc, #300]	; (8004364 <HAL_DMA_Init+0x158>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	009a      	lsls	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a48      	ldr	r2, [pc, #288]	; (8004368 <HAL_DMA_Init+0x15c>)
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
 8004248:	e00e      	b.n	8004268 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	4b46      	ldr	r3, [pc, #280]	; (800436c <HAL_DMA_Init+0x160>)
 8004252:	4413      	add	r3, r2
 8004254:	4a43      	ldr	r2, [pc, #268]	; (8004364 <HAL_DMA_Init+0x158>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	009a      	lsls	r2, r3, #2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a42      	ldr	r2, [pc, #264]	; (8004370 <HAL_DMA_Init+0x164>)
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800428c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c2:	d039      	beq.n	8004338 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <HAL_DMA_Init+0x15c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d11a      	bne.n	8004304 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <HAL_DMA_Init+0x168>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f003 031c 	and.w	r3, r3, #28
 80042da:	210f      	movs	r1, #15
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	4924      	ldr	r1, [pc, #144]	; (8004374 <HAL_DMA_Init+0x168>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042e8:	4b22      	ldr	r3, [pc, #136]	; (8004374 <HAL_DMA_Init+0x168>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f003 031c 	and.w	r3, r3, #28
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	491d      	ldr	r1, [pc, #116]	; (8004374 <HAL_DMA_Init+0x168>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
 8004302:	e019      	b.n	8004338 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004304:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <HAL_DMA_Init+0x16c>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	f003 031c 	and.w	r3, r3, #28
 8004310:	210f      	movs	r1, #15
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	4917      	ldr	r1, [pc, #92]	; (8004378 <HAL_DMA_Init+0x16c>)
 800431a:	4013      	ands	r3, r2
 800431c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <HAL_DMA_Init+0x16c>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f003 031c 	and.w	r3, r3, #28
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	4911      	ldr	r1, [pc, #68]	; (8004378 <HAL_DMA_Init+0x16c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40020407 	.word	0x40020407
 8004360:	bffdfff8 	.word	0xbffdfff8
 8004364:	cccccccd 	.word	0xcccccccd
 8004368:	40020000 	.word	0x40020000
 800436c:	bffdfbf8 	.word	0xbffdfbf8
 8004370:	40020400 	.word	0x40020400
 8004374:	400200a8 	.word	0x400200a8
 8004378:	400204a8 	.word	0x400204a8

0800437c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d005      	beq.n	80043a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2204      	movs	r2, #4
 8004398:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e029      	b.n	80043f4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 020e 	bic.w	r2, r2, #14
 80043ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f003 021c 	and.w	r2, r3, #28
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
    }
  }
  return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f003 031c 	and.w	r3, r3, #28
 800441e:	2204      	movs	r2, #4
 8004420:	409a      	lsls	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d026      	beq.n	8004478 <HAL_DMA_IRQHandler+0x7a>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d021      	beq.n	8004478 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d107      	bne.n	8004452 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0204 	bic.w	r2, r2, #4
 8004450:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	f003 021c 	and.w	r2, r3, #28
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2104      	movs	r1, #4
 8004460:	fa01 f202 	lsl.w	r2, r1, r2
 8004464:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	2b00      	cmp	r3, #0
 800446c:	d071      	beq.n	8004552 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004476:	e06c      	b.n	8004552 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	f003 031c 	and.w	r3, r3, #28
 8004480:	2202      	movs	r2, #2
 8004482:	409a      	lsls	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02e      	beq.n	80044ea <HAL_DMA_IRQHandler+0xec>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d029      	beq.n	80044ea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020a 	bic.w	r2, r2, #10
 80044b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	f003 021c 	and.w	r2, r3, #28
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	2102      	movs	r1, #2
 80044ca:	fa01 f202 	lsl.w	r2, r1, r2
 80044ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d038      	beq.n	8004552 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80044e8:	e033      	b.n	8004552 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f003 031c 	and.w	r3, r3, #28
 80044f2:	2208      	movs	r2, #8
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02a      	beq.n	8004554 <HAL_DMA_IRQHandler+0x156>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d025      	beq.n	8004554 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 020e 	bic.w	r2, r2, #14
 8004516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	f003 021c 	and.w	r2, r3, #28
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f202 	lsl.w	r2, r1, r2
 800452a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004552:	bf00      	nop
 8004554:	bf00      	nop
}
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800456a:	e17f      	b.n	800486c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	4013      	ands	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8171 	beq.w	8004866 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d00b      	beq.n	80045a4 <HAL_GPIO_Init+0x48>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d007      	beq.n	80045a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004598:	2b11      	cmp	r3, #17
 800459a:	d003      	beq.n	80045a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b12      	cmp	r3, #18
 80045a2:	d130      	bne.n	8004606 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	2203      	movs	r2, #3
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045da:	2201      	movs	r2, #1
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0201 	and.w	r2, r3, #1
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b03      	cmp	r3, #3
 8004610:	d118      	bne.n	8004644 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004618:	2201      	movs	r2, #1
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	f003 0201 	and.w	r2, r3, #1
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2203      	movs	r2, #3
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x128>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b12      	cmp	r3, #18
 8004682:	d123      	bne.n	80046cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	08da      	lsrs	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3208      	adds	r2, #8
 800468c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004690:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	220f      	movs	r2, #15
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	08da      	lsrs	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3208      	adds	r2, #8
 80046c6:	6939      	ldr	r1, [r7, #16]
 80046c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0203 	and.w	r2, r3, #3
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80ac 	beq.w	8004866 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800470e:	4b5f      	ldr	r3, [pc, #380]	; (800488c <HAL_GPIO_Init+0x330>)
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	4a5e      	ldr	r2, [pc, #376]	; (800488c <HAL_GPIO_Init+0x330>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6613      	str	r3, [r2, #96]	; 0x60
 800471a:	4b5c      	ldr	r3, [pc, #368]	; (800488c <HAL_GPIO_Init+0x330>)
 800471c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004726:	4a5a      	ldr	r2, [pc, #360]	; (8004890 <HAL_GPIO_Init+0x334>)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	3302      	adds	r3, #2
 800472e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004732:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	220f      	movs	r2, #15
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4013      	ands	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004750:	d025      	beq.n	800479e <HAL_GPIO_Init+0x242>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a4f      	ldr	r2, [pc, #316]	; (8004894 <HAL_GPIO_Init+0x338>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01f      	beq.n	800479a <HAL_GPIO_Init+0x23e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a4e      	ldr	r2, [pc, #312]	; (8004898 <HAL_GPIO_Init+0x33c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d019      	beq.n	8004796 <HAL_GPIO_Init+0x23a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a4d      	ldr	r2, [pc, #308]	; (800489c <HAL_GPIO_Init+0x340>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_GPIO_Init+0x236>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a4c      	ldr	r2, [pc, #304]	; (80048a0 <HAL_GPIO_Init+0x344>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00d      	beq.n	800478e <HAL_GPIO_Init+0x232>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a4b      	ldr	r2, [pc, #300]	; (80048a4 <HAL_GPIO_Init+0x348>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <HAL_GPIO_Init+0x22e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a4a      	ldr	r2, [pc, #296]	; (80048a8 <HAL_GPIO_Init+0x34c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d101      	bne.n	8004786 <HAL_GPIO_Init+0x22a>
 8004782:	2306      	movs	r3, #6
 8004784:	e00c      	b.n	80047a0 <HAL_GPIO_Init+0x244>
 8004786:	2307      	movs	r3, #7
 8004788:	e00a      	b.n	80047a0 <HAL_GPIO_Init+0x244>
 800478a:	2305      	movs	r3, #5
 800478c:	e008      	b.n	80047a0 <HAL_GPIO_Init+0x244>
 800478e:	2304      	movs	r3, #4
 8004790:	e006      	b.n	80047a0 <HAL_GPIO_Init+0x244>
 8004792:	2303      	movs	r3, #3
 8004794:	e004      	b.n	80047a0 <HAL_GPIO_Init+0x244>
 8004796:	2302      	movs	r3, #2
 8004798:	e002      	b.n	80047a0 <HAL_GPIO_Init+0x244>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <HAL_GPIO_Init+0x244>
 800479e:	2300      	movs	r3, #0
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	f002 0203 	and.w	r2, r2, #3
 80047a6:	0092      	lsls	r2, r2, #2
 80047a8:	4093      	lsls	r3, r2
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047b0:	4937      	ldr	r1, [pc, #220]	; (8004890 <HAL_GPIO_Init+0x334>)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	3302      	adds	r3, #2
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047be:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_GPIO_Init+0x350>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4013      	ands	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047e2:	4a32      	ldr	r2, [pc, #200]	; (80048ac <HAL_GPIO_Init+0x350>)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80047e8:	4b30      	ldr	r3, [pc, #192]	; (80048ac <HAL_GPIO_Init+0x350>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4013      	ands	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800480c:	4a27      	ldr	r2, [pc, #156]	; (80048ac <HAL_GPIO_Init+0x350>)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004812:	4b26      	ldr	r3, [pc, #152]	; (80048ac <HAL_GPIO_Init+0x350>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	43db      	mvns	r3, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004836:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <HAL_GPIO_Init+0x350>)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <HAL_GPIO_Init+0x350>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	43db      	mvns	r3, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004860:	4a12      	ldr	r2, [pc, #72]	; (80048ac <HAL_GPIO_Init+0x350>)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	3301      	adds	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	f47f ae78 	bne.w	800456c <HAL_GPIO_Init+0x10>
  }
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	40010000 	.word	0x40010000
 8004894:	48000400 	.word	0x48000400
 8004898:	48000800 	.word	0x48000800
 800489c:	48000c00 	.word	0x48000c00
 80048a0:	48001000 	.word	0x48001000
 80048a4:	48001400 	.word	0x48001400
 80048a8:	48001800 	.word	0x48001800
 80048ac:	40010400 	.word	0x40010400

080048b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
 80048cc:	e001      	b.n	80048d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	807b      	strh	r3, [r7, #2]
 80048ec:	4613      	mov	r3, r2
 80048ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048f0:	787b      	ldrb	r3, [r7, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048fc:	e002      	b.n	8004904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <HAL_PWREx_GetVoltageRange+0x18>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40007000 	.word	0x40007000

0800492c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800493a:	d130      	bne.n	800499e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800493c:	4b23      	ldr	r3, [pc, #140]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004948:	d038      	beq.n	80049bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800495a:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2232      	movs	r2, #50	; 0x32
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	0c9b      	lsrs	r3, r3, #18
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004970:	e002      	b.n	8004978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b01      	subs	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004984:	d102      	bne.n	800498c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f2      	bne.n	8004972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004998:	d110      	bne.n	80049bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e00f      	b.n	80049be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049aa:	d007      	beq.n	80049bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049b4:	4a05      	ldr	r2, [pc, #20]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40007000 	.word	0x40007000
 80049d0:	20000000 	.word	0x20000000
 80049d4:	431bde83 	.word	0x431bde83

080049d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e3d8      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ea:	4b97      	ldr	r3, [pc, #604]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f4:	4b94      	ldr	r3, [pc, #592]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80e4 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_RCC_OscConfig+0x4a>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	f040 808b 	bne.w	8004b30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	f040 8087 	bne.w	8004b30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a22:	4b89      	ldr	r3, [pc, #548]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_RCC_OscConfig+0x62>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e3b0      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	4b82      	ldr	r3, [pc, #520]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d004      	beq.n	8004a54 <HAL_RCC_OscConfig+0x7c>
 8004a4a:	4b7f      	ldr	r3, [pc, #508]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a52:	e005      	b.n	8004a60 <HAL_RCC_OscConfig+0x88>
 8004a54:	4b7c      	ldr	r3, [pc, #496]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d223      	bcs.n	8004aac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fd43 	bl	80054f4 <RCC_SetFlashLatencyFromMSIRange>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e391      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a78:	4b73      	ldr	r3, [pc, #460]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a72      	ldr	r2, [pc, #456]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a7e:	f043 0308 	orr.w	r3, r3, #8
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b70      	ldr	r3, [pc, #448]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	496d      	ldr	r1, [pc, #436]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a96:	4b6c      	ldr	r3, [pc, #432]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	4968      	ldr	r1, [pc, #416]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
 8004aaa:	e025      	b.n	8004af8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aac:	4b66      	ldr	r3, [pc, #408]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a65      	ldr	r2, [pc, #404]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	f043 0308 	orr.w	r3, r3, #8
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b63      	ldr	r3, [pc, #396]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	4960      	ldr	r1, [pc, #384]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aca:	4b5f      	ldr	r3, [pc, #380]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	495b      	ldr	r1, [pc, #364]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fd03 	bl	80054f4 <RCC_SetFlashLatencyFromMSIRange>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e351      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004af8:	f000 fc38 	bl	800536c <HAL_RCC_GetSysClockFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b52      	ldr	r3, [pc, #328]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	4950      	ldr	r1, [pc, #320]	; (8004c4c <HAL_RCC_OscConfig+0x274>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	4a4e      	ldr	r2, [pc, #312]	; (8004c50 <HAL_RCC_OscConfig+0x278>)
 8004b16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b18:	4b4e      	ldr	r3, [pc, #312]	; (8004c54 <HAL_RCC_OscConfig+0x27c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fd ffdf 	bl	8002ae0 <HAL_InitTick>
 8004b22:	4603      	mov	r3, r0
 8004b24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d052      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	e335      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d032      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a42      	ldr	r2, [pc, #264]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b44:	f7fe f81c 	bl	8002b80 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b4c:	f7fe f818 	bl	8002b80 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e31e      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b5e:	4b3a      	ldr	r3, [pc, #232]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b6a:	4b37      	ldr	r3, [pc, #220]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a36      	ldr	r2, [pc, #216]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b70:	f043 0308 	orr.w	r3, r3, #8
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b34      	ldr	r3, [pc, #208]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	4931      	ldr	r1, [pc, #196]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b88:	4b2f      	ldr	r3, [pc, #188]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	492c      	ldr	r1, [pc, #176]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
 8004b9c:	e01a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a29      	ldr	r2, [pc, #164]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004baa:	f7fd ffe9 	bl	8002b80 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bb2:	f7fd ffe5 	bl	8002b80 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e2eb      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f0      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x1da>
 8004bd0:	e000      	b.n	8004bd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d074      	beq.n	8004cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d005      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x21a>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	d10e      	bne.n	8004c0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d10b      	bne.n	8004c0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d064      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x2f0>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d160      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e2c8      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c12:	d106      	bne.n	8004c22 <HAL_RCC_OscConfig+0x24a>
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	e026      	b.n	8004c70 <HAL_RCC_OscConfig+0x298>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c2a:	d115      	bne.n	8004c58 <HAL_RCC_OscConfig+0x280>
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a02      	ldr	r2, [pc, #8]	; (8004c48 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	e014      	b.n	8004c70 <HAL_RCC_OscConfig+0x298>
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	0800c898 	.word	0x0800c898
 8004c50:	20000000 	.word	0x20000000
 8004c54:	20000004 	.word	0x20000004
 8004c58:	4ba0      	ldr	r3, [pc, #640]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a9f      	ldr	r2, [pc, #636]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b9d      	ldr	r3, [pc, #628]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a9c      	ldr	r2, [pc, #624]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fd ff82 	bl	8002b80 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fd ff7e 	bl	8002b80 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e284      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c92:	4b92      	ldr	r3, [pc, #584]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x2a8>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fd ff6e 	bl	8002b80 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fd ff6a 	bl	8002b80 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e270      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cba:	4b88      	ldr	r3, [pc, #544]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2d0>
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d060      	beq.n	8004d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x310>
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	d119      	bne.n	8004d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d116      	bne.n	8004d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce8:	4b7c      	ldr	r3, [pc, #496]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCC_OscConfig+0x328>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e24d      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d00:	4b76      	ldr	r3, [pc, #472]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	061b      	lsls	r3, r3, #24
 8004d0e:	4973      	ldr	r1, [pc, #460]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d14:	e040      	b.n	8004d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d023      	beq.n	8004d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1e:	4b6f      	ldr	r3, [pc, #444]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6e      	ldr	r2, [pc, #440]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2a:	f7fd ff29 	bl	8002b80 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d32:	f7fd ff25 	bl	8002b80 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e22b      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d44:	4b65      	ldr	r3, [pc, #404]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d50:	4b62      	ldr	r3, [pc, #392]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	061b      	lsls	r3, r3, #24
 8004d5e:	495f      	ldr	r1, [pc, #380]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	604b      	str	r3, [r1, #4]
 8004d64:	e018      	b.n	8004d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d66:	4b5d      	ldr	r3, [pc, #372]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a5c      	ldr	r2, [pc, #368]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fd ff05 	bl	8002b80 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7a:	f7fd ff01 	bl	8002b80 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e207      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d8c:	4b53      	ldr	r3, [pc, #332]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d03c      	beq.n	8004e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01c      	beq.n	8004de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dac:	4b4b      	ldr	r3, [pc, #300]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db2:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbc:	f7fd fee0 	bl	8002b80 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc4:	f7fd fedc 	bl	8002b80 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1e2      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dd6:	4b41      	ldr	r3, [pc, #260]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ef      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x3ec>
 8004de4:	e01b      	b.n	8004e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de6:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dec:	4a3b      	ldr	r2, [pc, #236]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004dee:	f023 0301 	bic.w	r3, r3, #1
 8004df2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df6:	f7fd fec3 	bl	8002b80 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfe:	f7fd febf 	bl	8002b80 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e1c5      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e10:	4b32      	ldr	r3, [pc, #200]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1ef      	bne.n	8004dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80a6 	beq.w	8004f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e30:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10d      	bne.n	8004e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3c:	4b27      	ldr	r3, [pc, #156]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e46:	6593      	str	r3, [r2, #88]	; 0x58
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e54:	2301      	movs	r3, #1
 8004e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e58:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <HAL_RCC_OscConfig+0x508>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d118      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e64:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <HAL_RCC_OscConfig+0x508>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <HAL_RCC_OscConfig+0x508>)
 8004e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e70:	f7fd fe86 	bl	8002b80 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e78:	f7fd fe82 	bl	8002b80 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e188      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_RCC_OscConfig+0x508>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f0      	beq.n	8004e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d108      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4d8>
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eae:	e029      	b.n	8004f04 <HAL_RCC_OscConfig+0x52c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d115      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x50c>
 8004eb8:	4b08      	ldr	r3, [pc, #32]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	4a07      	ldr	r2, [pc, #28]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f043 0304 	orr.w	r3, r3, #4
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	4a03      	ldr	r2, [pc, #12]	; (8004edc <HAL_RCC_OscConfig+0x504>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ed8:	e014      	b.n	8004f04 <HAL_RCC_OscConfig+0x52c>
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40007000 	.word	0x40007000
 8004ee4:	4b91      	ldr	r3, [pc, #580]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	4a90      	ldr	r2, [pc, #576]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ef4:	4b8d      	ldr	r3, [pc, #564]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	4a8c      	ldr	r2, [pc, #560]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004efc:	f023 0304 	bic.w	r3, r3, #4
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d016      	beq.n	8004f3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fd fe38 	bl	8002b80 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7fd fe34 	bl	8002b80 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e138      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2a:	4b80      	ldr	r3, [pc, #512]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ed      	beq.n	8004f14 <HAL_RCC_OscConfig+0x53c>
 8004f38:	e015      	b.n	8004f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3a:	f7fd fe21 	bl	8002b80 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f40:	e00a      	b.n	8004f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fd fe1d 	bl	8002b80 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e121      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f58:	4b74      	ldr	r3, [pc, #464]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1ed      	bne.n	8004f42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f66:	7ffb      	ldrb	r3, [r7, #31]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6c:	4b6f      	ldr	r3, [pc, #444]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	4a6e      	ldr	r2, [pc, #440]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 810c 	beq.w	800519a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	f040 80d4 	bne.w	8005134 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f8c:	4b67      	ldr	r3, [pc, #412]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0203 	and.w	r2, r3, #3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d130      	bne.n	8005002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	3b01      	subs	r3, #1
 8004fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d127      	bne.n	8005002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d11f      	bne.n	8005002 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fcc:	2a07      	cmp	r2, #7
 8004fce:	bf14      	ite	ne
 8004fd0:	2201      	movne	r2, #1
 8004fd2:	2200      	moveq	r2, #0
 8004fd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d113      	bne.n	8005002 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d109      	bne.n	8005002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d06e      	beq.n	80050e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d069      	beq.n	80050dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005008:	4b48      	ldr	r3, [pc, #288]	; (800512c <HAL_RCC_OscConfig+0x754>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005014:	4b45      	ldr	r3, [pc, #276]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0bb      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005024:	4b41      	ldr	r3, [pc, #260]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a40      	ldr	r2, [pc, #256]	; (800512c <HAL_RCC_OscConfig+0x754>)
 800502a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005030:	f7fd fda6 	bl	8002b80 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005038:	f7fd fda2 	bl	8002b80 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e0a8      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800504a:	4b38      	ldr	r3, [pc, #224]	; (800512c <HAL_RCC_OscConfig+0x754>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005056:	4b35      	ldr	r3, [pc, #212]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	4b35      	ldr	r3, [pc, #212]	; (8005130 <HAL_RCC_OscConfig+0x758>)
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005066:	3a01      	subs	r2, #1
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005070:	0212      	lsls	r2, r2, #8
 8005072:	4311      	orrs	r1, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005078:	0852      	lsrs	r2, r2, #1
 800507a:	3a01      	subs	r2, #1
 800507c:	0552      	lsls	r2, r2, #21
 800507e:	4311      	orrs	r1, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005084:	0852      	lsrs	r2, r2, #1
 8005086:	3a01      	subs	r2, #1
 8005088:	0652      	lsls	r2, r2, #25
 800508a:	4311      	orrs	r1, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005090:	0912      	lsrs	r2, r2, #4
 8005092:	0452      	lsls	r2, r2, #17
 8005094:	430a      	orrs	r2, r1
 8005096:	4925      	ldr	r1, [pc, #148]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8005098:	4313      	orrs	r3, r2
 800509a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800509c:	4b23      	ldr	r3, [pc, #140]	; (800512c <HAL_RCC_OscConfig+0x754>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a22      	ldr	r2, [pc, #136]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050a8:	4b20      	ldr	r3, [pc, #128]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4a1f      	ldr	r2, [pc, #124]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050b4:	f7fd fd64 	bl	8002b80 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050bc:	f7fd fd60 	bl	8002b80 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e066      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050da:	e05e      	b.n	800519a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e05d      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e0:	4b12      	ldr	r3, [pc, #72]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d156      	bne.n	800519a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0e      	ldr	r2, [pc, #56]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <HAL_RCC_OscConfig+0x754>)
 80050fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005102:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005104:	f7fd fd3c 	bl	8002b80 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510c:	f7fd fd38 	bl	8002b80 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e03e      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511e:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_RCC_OscConfig+0x754>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x734>
 800512a:	e036      	b.n	800519a <HAL_RCC_OscConfig+0x7c2>
 800512c:	40021000 	.word	0x40021000
 8005130:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d02d      	beq.n	8005196 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <HAL_RCC_OscConfig+0x7cc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_RCC_OscConfig+0x7cc>)
 8005140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005144:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005146:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <HAL_RCC_OscConfig+0x7cc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <HAL_RCC_OscConfig+0x7cc>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <HAL_RCC_OscConfig+0x7cc>)
 8005158:	f023 0303 	bic.w	r3, r3, #3
 800515c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_RCC_OscConfig+0x7cc>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <HAL_RCC_OscConfig+0x7cc>)
 8005164:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fd fd07 	bl	8002b80 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005176:	f7fd fd03 	bl	8002b80 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e009      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_RCC_OscConfig+0x7cc>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <HAL_RCC_OscConfig+0x79e>
 8005194:	e001      	b.n	800519a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000

080051a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0c8      	b.n	800534e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051bc:	4b66      	ldr	r3, [pc, #408]	; (8005358 <HAL_RCC_ClockConfig+0x1b0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d910      	bls.n	80051ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b63      	ldr	r3, [pc, #396]	; (8005358 <HAL_RCC_ClockConfig+0x1b0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 0207 	bic.w	r2, r3, #7
 80051d2:	4961      	ldr	r1, [pc, #388]	; (8005358 <HAL_RCC_ClockConfig+0x1b0>)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b5f      	ldr	r3, [pc, #380]	; (8005358 <HAL_RCC_ClockConfig+0x1b0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0b0      	b.n	800534e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d04c      	beq.n	8005292 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d107      	bne.n	8005210 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005200:	4b56      	ldr	r3, [pc, #344]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d121      	bne.n	8005250 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e09e      	b.n	800534e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d107      	bne.n	8005228 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005218:	4b50      	ldr	r3, [pc, #320]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d115      	bne.n	8005250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e092      	b.n	800534e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d107      	bne.n	8005240 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005230:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e086      	b.n	800534e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005240:	4b46      	ldr	r3, [pc, #280]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e07e      	b.n	800534e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005250:	4b42      	ldr	r3, [pc, #264]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 0203 	bic.w	r2, r3, #3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	493f      	ldr	r1, [pc, #252]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005262:	f7fd fc8d 	bl	8002b80 <HAL_GetTick>
 8005266:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005268:	e00a      	b.n	8005280 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800526a:	f7fd fc89 	bl	8002b80 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	; 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e066      	b.n	800534e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005280:	4b36      	ldr	r3, [pc, #216]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 020c 	and.w	r2, r3, #12
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	429a      	cmp	r2, r3
 8005290:	d1eb      	bne.n	800526a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529e:	4b2f      	ldr	r3, [pc, #188]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	492c      	ldr	r1, [pc, #176]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b0:	4b29      	ldr	r3, [pc, #164]	; (8005358 <HAL_RCC_ClockConfig+0x1b0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d210      	bcs.n	80052e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b26      	ldr	r3, [pc, #152]	; (8005358 <HAL_RCC_ClockConfig+0x1b0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 0207 	bic.w	r2, r3, #7
 80052c6:	4924      	ldr	r1, [pc, #144]	; (8005358 <HAL_RCC_ClockConfig+0x1b0>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b22      	ldr	r3, [pc, #136]	; (8005358 <HAL_RCC_ClockConfig+0x1b0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e036      	b.n	800534e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4918      	ldr	r1, [pc, #96]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4910      	ldr	r1, [pc, #64]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800531e:	f000 f825 	bl	800536c <HAL_RCC_GetSysClockFreq>
 8005322:	4602      	mov	r2, r0
 8005324:	4b0d      	ldr	r3, [pc, #52]	; (800535c <HAL_RCC_ClockConfig+0x1b4>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	490c      	ldr	r1, [pc, #48]	; (8005360 <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	5ccb      	ldrb	r3, [r1, r3]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fd fbcc 	bl	8002ae0 <HAL_InitTick>
 8005348:	4603      	mov	r3, r0
 800534a:	72fb      	strb	r3, [r7, #11]

  return status;
 800534c:	7afb      	ldrb	r3, [r7, #11]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40022000 	.word	0x40022000
 800535c:	40021000 	.word	0x40021000
 8005360:	0800c898 	.word	0x0800c898
 8005364:	20000000 	.word	0x20000000
 8005368:	20000004 	.word	0x20000004

0800536c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537a:	4b3e      	ldr	r3, [pc, #248]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005384:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d121      	bne.n	80053de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d11e      	bne.n	80053de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053a0:	4b34      	ldr	r3, [pc, #208]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053ac:	4b31      	ldr	r3, [pc, #196]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e005      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053bc:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053c8:	4a2b      	ldr	r2, [pc, #172]	; (8005478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10d      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d102      	bne.n	80053ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_RCC_GetSysClockFreq+0x110>)
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	e004      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d101      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053f0:	4b23      	ldr	r3, [pc, #140]	; (8005480 <HAL_RCC_GetSysClockFreq+0x114>)
 80053f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d134      	bne.n	8005464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053fa:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d003      	beq.n	8005412 <HAL_RCC_GetSysClockFreq+0xa6>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d003      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0xac>
 8005410:	e005      	b.n	800541e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005412:	4b1a      	ldr	r3, [pc, #104]	; (800547c <HAL_RCC_GetSysClockFreq+0x110>)
 8005414:	617b      	str	r3, [r7, #20]
      break;
 8005416:	e005      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_GetSysClockFreq+0x114>)
 800541a:	617b      	str	r3, [r7, #20]
      break;
 800541c:	e002      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	617b      	str	r3, [r7, #20]
      break;
 8005422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005424:	4b13      	ldr	r3, [pc, #76]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	3301      	adds	r3, #1
 8005430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	fb03 f202 	mul.w	r2, r3, r2
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800544a:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <HAL_RCC_GetSysClockFreq+0x108>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	0e5b      	lsrs	r3, r3, #25
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	3301      	adds	r3, #1
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005464:	69bb      	ldr	r3, [r7, #24]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3724      	adds	r7, #36	; 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40021000 	.word	0x40021000
 8005478:	0800c8b0 	.word	0x0800c8b0
 800547c:	00f42400 	.word	0x00f42400
 8005480:	007a1200 	.word	0x007a1200

08005484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <HAL_RCC_GetHCLKFreq+0x14>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000000 	.word	0x20000000

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054a0:	f7ff fff0 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4904      	ldr	r1, [pc, #16]	; (80054c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	0800c8a8 	.word	0x0800c8a8

080054c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054cc:	f7ff ffda 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	0adb      	lsrs	r3, r3, #11
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4904      	ldr	r1, [pc, #16]	; (80054f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000
 80054f0:	0800c8a8 	.word	0x0800c8a8

080054f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005500:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800550c:	f7ff fa00 	bl	8004910 <HAL_PWREx_GetVoltageRange>
 8005510:	6178      	str	r0, [r7, #20]
 8005512:	e014      	b.n	800553e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b25      	ldr	r3, [pc, #148]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	4a24      	ldr	r2, [pc, #144]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	6593      	str	r3, [r2, #88]	; 0x58
 8005520:	4b22      	ldr	r3, [pc, #136]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800552c:	f7ff f9f0 	bl	8004910 <HAL_PWREx_GetVoltageRange>
 8005530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005532:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800553c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005544:	d10b      	bne.n	800555e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d919      	bls.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2ba0      	cmp	r3, #160	; 0xa0
 8005550:	d902      	bls.n	8005558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005552:	2302      	movs	r3, #2
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e013      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005558:	2301      	movs	r3, #1
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e010      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d902      	bls.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005564:	2303      	movs	r3, #3
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e00a      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d102      	bne.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005570:	2302      	movs	r3, #2
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e004      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b70      	cmp	r3, #112	; 0x70
 800557a:	d101      	bne.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800557c:	2301      	movs	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 0207 	bic.w	r2, r3, #7
 8005588:	4909      	ldr	r1, [pc, #36]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	429a      	cmp	r2, r3
 800559c:	d001      	beq.n	80055a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40022000 	.word	0x40022000

080055b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055bc:	2300      	movs	r3, #0
 80055be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055c0:	2300      	movs	r3, #0
 80055c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d041      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055d8:	d02a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055de:	d824      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055e4:	d008      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ea:	d81e      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f4:	d010      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055f6:	e018      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055f8:	4b86      	ldr	r3, [pc, #536]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a85      	ldr	r2, [pc, #532]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005602:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005604:	e015      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fabb 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005616:	e00c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3320      	adds	r3, #32
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fba6 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005628:	e003      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	74fb      	strb	r3, [r7, #19]
      break;
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005638:	4b76      	ldr	r3, [pc, #472]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005646:	4973      	ldr	r1, [pc, #460]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800564e:	e001      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d041      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005668:	d02a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800566a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800566e:	d824      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005674:	d008      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567a:	d81e      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005684:	d010      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005686:	e018      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005688:	4b62      	ldr	r3, [pc, #392]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4a61      	ldr	r2, [pc, #388]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005694:	e015      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3304      	adds	r3, #4
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fa73 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a6:	e00c      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3320      	adds	r3, #32
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fb5e 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	74fb      	strb	r3, [r7, #19]
      break;
 80056be:	e000      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c2:	7cfb      	ldrb	r3, [r7, #19]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056c8:	4b52      	ldr	r3, [pc, #328]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d6:	494f      	ldr	r1, [pc, #316]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056de:	e001      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a0 	beq.w	8005832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056f6:	4b47      	ldr	r3, [pc, #284]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800570c:	4b41      	ldr	r3, [pc, #260]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	4a40      	ldr	r2, [pc, #256]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005716:	6593      	str	r3, [r2, #88]	; 0x58
 8005718:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005724:	2301      	movs	r3, #1
 8005726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005728:	4b3b      	ldr	r3, [pc, #236]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3a      	ldr	r2, [pc, #232]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800572e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005734:	f7fd fa24 	bl	8002b80 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800573a:	e009      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573c:	f7fd fa20 	bl	8002b80 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d902      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	74fb      	strb	r3, [r7, #19]
        break;
 800574e:	e005      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005750:	4b31      	ldr	r3, [pc, #196]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0ef      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d15c      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005762:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01f      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	d019      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005780:	4b24      	ldr	r3, [pc, #144]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800578c:	4b21      	ldr	r3, [pc, #132]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005792:	4a20      	ldr	r2, [pc, #128]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057be:	f7fd f9df 	bl	8002b80 <HAL_GetTick>
 80057c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c4:	e00b      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7fd f9db 	bl	8002b80 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d902      	bls.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	74fb      	strb	r3, [r7, #19]
            break;
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ec      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10c      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005802:	4904      	ldr	r1, [pc, #16]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800580a:	e009      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	74bb      	strb	r3, [r7, #18]
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000
 8005818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005820:	7c7b      	ldrb	r3, [r7, #17]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d105      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005826:	4b9e      	ldr	r3, [pc, #632]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582a:	4a9d      	ldr	r2, [pc, #628]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005830:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800583e:	4b98      	ldr	r3, [pc, #608]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f023 0203 	bic.w	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	4994      	ldr	r1, [pc, #592]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005860:	4b8f      	ldr	r3, [pc, #572]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f023 020c 	bic.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	498c      	ldr	r1, [pc, #560]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005882:	4b87      	ldr	r3, [pc, #540]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	4983      	ldr	r1, [pc, #524]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058a4:	4b7e      	ldr	r3, [pc, #504]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	497b      	ldr	r1, [pc, #492]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058c6:	4b76      	ldr	r3, [pc, #472]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d4:	4972      	ldr	r1, [pc, #456]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e8:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	496a      	ldr	r1, [pc, #424]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800590a:	4b65      	ldr	r3, [pc, #404]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	4961      	ldr	r1, [pc, #388]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800592c:	4b5c      	ldr	r3, [pc, #368]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593a:	4959      	ldr	r1, [pc, #356]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800594e:	4b54      	ldr	r3, [pc, #336]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	4950      	ldr	r1, [pc, #320]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005970:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	4948      	ldr	r1, [pc, #288]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005992:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a0:	493f      	ldr	r1, [pc, #252]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d028      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b4:	4b3a      	ldr	r3, [pc, #232]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c2:	4937      	ldr	r1, [pc, #220]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d2:	d106      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d4:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a31      	ldr	r2, [pc, #196]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059de:	60d3      	str	r3, [r2, #12]
 80059e0:	e011      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ea:	d10c      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f8c8 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d028      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a12:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	491f      	ldr	r1, [pc, #124]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a30:	d106      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a3c:	60d3      	str	r3, [r2, #12]
 8005a3e:	e011      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f899 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d02b      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7e:	4908      	ldr	r1, [pc, #32]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8e:	d109      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a02      	ldr	r2, [pc, #8]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9a:	60d3      	str	r3, [r2, #12]
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f867 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d02f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae2:	4928      	ldr	r1, [pc, #160]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	2102      	movs	r1, #2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f844 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b04:	7cfb      	ldrb	r3, [r7, #19]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d014      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
 8005b0c:	74bb      	strb	r3, [r7, #18]
 8005b0e:	e011      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3320      	adds	r3, #32
 8005b1e:	2102      	movs	r1, #2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f925 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b30:	7cfb      	ldrb	r3, [r7, #19]
 8005b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b40:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4e:	490d      	ldr	r1, [pc, #52]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b72:	4904      	ldr	r1, [pc, #16]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000

08005b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b96:	4b75      	ldr	r3, [pc, #468]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ba2:	4b72      	ldr	r3, [pc, #456]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0203 	and.w	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d10d      	bne.n	8005bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bba:	4b6c      	ldr	r3, [pc, #432]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d047      	beq.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	e044      	b.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d018      	beq.n	8005c0e <RCCEx_PLLSAI1_Config+0x86>
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d825      	bhi.n	8005c2c <RCCEx_PLLSAI1_Config+0xa4>
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d002      	beq.n	8005bea <RCCEx_PLLSAI1_Config+0x62>
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d009      	beq.n	8005bfc <RCCEx_PLLSAI1_Config+0x74>
 8005be8:	e020      	b.n	8005c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bea:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11d      	bne.n	8005c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bfa:	e01a      	b.n	8005c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bfc:	4b5b      	ldr	r3, [pc, #364]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d116      	bne.n	8005c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c0c:	e013      	b.n	8005c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c1a:	4b54      	ldr	r3, [pc, #336]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c2a:	e006      	b.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c30:	e004      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c32:	bf00      	nop
 8005c34:	e002      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10d      	bne.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c42:	4b4a      	ldr	r3, [pc, #296]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	430b      	orrs	r3, r1
 8005c58:	4944      	ldr	r1, [pc, #272]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d17d      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c64:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a40      	ldr	r2, [pc, #256]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c70:	f7fc ff86 	bl	8002b80 <HAL_GetTick>
 8005c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c76:	e009      	b.n	8005c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c78:	f7fc ff82 	bl	8002b80 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d902      	bls.n	8005c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	73fb      	strb	r3, [r7, #15]
        break;
 8005c8a:	e005      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c8c:	4b37      	ldr	r3, [pc, #220]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1ef      	bne.n	8005c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d160      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d111      	bne.n	8005cc8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ca4:	4b31      	ldr	r3, [pc, #196]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6892      	ldr	r2, [r2, #8]
 8005cb4:	0211      	lsls	r1, r2, #8
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68d2      	ldr	r2, [r2, #12]
 8005cba:	0912      	lsrs	r2, r2, #4
 8005cbc:	0452      	lsls	r2, r2, #17
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	492a      	ldr	r1, [pc, #168]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	610b      	str	r3, [r1, #16]
 8005cc6:	e027      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d112      	bne.n	8005cf4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cce:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005cd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6892      	ldr	r2, [r2, #8]
 8005cde:	0211      	lsls	r1, r2, #8
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6912      	ldr	r2, [r2, #16]
 8005ce4:	0852      	lsrs	r2, r2, #1
 8005ce6:	3a01      	subs	r2, #1
 8005ce8:	0552      	lsls	r2, r2, #21
 8005cea:	430a      	orrs	r2, r1
 8005cec:	491f      	ldr	r1, [pc, #124]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	610b      	str	r3, [r1, #16]
 8005cf2:	e011      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
 8005d04:	0211      	lsls	r1, r2, #8
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6952      	ldr	r2, [r2, #20]
 8005d0a:	0852      	lsrs	r2, r2, #1
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	0652      	lsls	r2, r2, #25
 8005d10:	430a      	orrs	r2, r1
 8005d12:	4916      	ldr	r1, [pc, #88]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a13      	ldr	r2, [pc, #76]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fc ff2c 	bl	8002b80 <HAL_GetTick>
 8005d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d2a:	e009      	b.n	8005d40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d2c:	f7fc ff28 	bl	8002b80 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d902      	bls.n	8005d40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005d3e:	e005      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d40:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ef      	beq.n	8005d2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	4904      	ldr	r1, [pc, #16]	; (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40021000 	.word	0x40021000

08005d70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d7e:	4b6a      	ldr	r3, [pc, #424]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d018      	beq.n	8005dbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d8a:	4b67      	ldr	r3, [pc, #412]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0203 	and.w	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d10d      	bne.n	8005db6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005da2:	4b61      	ldr	r3, [pc, #388]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	091b      	lsrs	r3, r3, #4
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
       ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d047      	beq.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	e044      	b.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d018      	beq.n	8005df6 <RCCEx_PLLSAI2_Config+0x86>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d825      	bhi.n	8005e14 <RCCEx_PLLSAI2_Config+0xa4>
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d002      	beq.n	8005dd2 <RCCEx_PLLSAI2_Config+0x62>
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d009      	beq.n	8005de4 <RCCEx_PLLSAI2_Config+0x74>
 8005dd0:	e020      	b.n	8005e14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dd2:	4b55      	ldr	r3, [pc, #340]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d11d      	bne.n	8005e1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de2:	e01a      	b.n	8005e1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005de4:	4b50      	ldr	r3, [pc, #320]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df4:	e013      	b.n	8005e1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005df6:	4b4c      	ldr	r3, [pc, #304]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10f      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e02:	4b49      	ldr	r3, [pc, #292]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e12:	e006      	b.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e004      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e1a:	bf00      	nop
 8005e1c:	e002      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10d      	bne.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6819      	ldr	r1, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	4939      	ldr	r1, [pc, #228]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d167      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e4c:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a35      	ldr	r2, [pc, #212]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e58:	f7fc fe92 	bl	8002b80 <HAL_GetTick>
 8005e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e5e:	e009      	b.n	8005e74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e60:	f7fc fe8e 	bl	8002b80 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d902      	bls.n	8005e74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	73fb      	strb	r3, [r7, #15]
        break;
 8005e72:	e005      	b.n	8005e80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e74:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1ef      	bne.n	8005e60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d14a      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d111      	bne.n	8005eb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e8c:	4b26      	ldr	r3, [pc, #152]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6892      	ldr	r2, [r2, #8]
 8005e9c:	0211      	lsls	r1, r2, #8
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68d2      	ldr	r2, [r2, #12]
 8005ea2:	0912      	lsrs	r2, r2, #4
 8005ea4:	0452      	lsls	r2, r2, #17
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	491f      	ldr	r1, [pc, #124]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	614b      	str	r3, [r1, #20]
 8005eae:	e011      	b.n	8005ed4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6892      	ldr	r2, [r2, #8]
 8005ec0:	0211      	lsls	r1, r2, #8
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6912      	ldr	r2, [r2, #16]
 8005ec6:	0852      	lsrs	r2, r2, #1
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	0652      	lsls	r2, r2, #25
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	4916      	ldr	r1, [pc, #88]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ed4:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee0:	f7fc fe4e 	bl	8002b80 <HAL_GetTick>
 8005ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ee6:	e009      	b.n	8005efc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ee8:	f7fc fe4a 	bl	8002b80 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d902      	bls.n	8005efc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8005efa:	e005      	b.n	8005f08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0ef      	beq.n	8005ee8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4904      	ldr	r1, [pc, #16]	; (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000

08005f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e095      	b.n	800606a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d108      	bne.n	8005f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4e:	d009      	beq.n	8005f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	61da      	str	r2, [r3, #28]
 8005f56:	e005      	b.n	8005f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc fabc 	bl	80024fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fa4:	d902      	bls.n	8005fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e002      	b.n	8005fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fba:	d007      	beq.n	8005fcc <HAL_SPI_Init+0xa0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fc4:	d002      	beq.n	8005fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	ea42 0103 	orr.w	r1, r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	f003 0204 	and.w	r2, r3, #4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006048:	ea42 0103 	orr.w	r1, r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b08a      	sub	sp, #40	; 0x28
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
 800607e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006080:	2301      	movs	r3, #1
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x26>
 8006094:	2302      	movs	r3, #2
 8006096:	e1fb      	b.n	8006490 <HAL_SPI_TransmitReceive+0x41e>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a0:	f7fc fd6e 	bl	8002b80 <HAL_GetTick>
 80060a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80060b8:	887b      	ldrh	r3, [r7, #2]
 80060ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060bc:	7efb      	ldrb	r3, [r7, #27]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d00e      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x6e>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c8:	d106      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x66>
 80060d2:	7efb      	ldrb	r3, [r7, #27]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d003      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80060d8:	2302      	movs	r3, #2
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060de:	e1cd      	b.n	800647c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x80>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x80>
 80060ec:	887b      	ldrh	r3, [r7, #2]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d103      	bne.n	80060fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060f8:	e1c0      	b.n	800647c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b04      	cmp	r3, #4
 8006104:	d003      	beq.n	800610e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2205      	movs	r2, #5
 800610a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	887a      	ldrh	r2, [r7, #2]
 800611e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	887a      	ldrh	r2, [r7, #2]
 8006126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	887a      	ldrh	r2, [r7, #2]
 8006134:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	887a      	ldrh	r2, [r7, #2]
 800613a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006150:	d802      	bhi.n	8006158 <HAL_SPI_TransmitReceive+0xe6>
 8006152:	8a3b      	ldrh	r3, [r7, #16]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d908      	bls.n	800616a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	e007      	b.n	800617a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d007      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006196:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061a0:	d97c      	bls.n	800629c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x13e>
 80061aa:	8a7b      	ldrh	r3, [r7, #18]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d169      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	881a      	ldrh	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	1c9a      	adds	r2, r3, #2
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d4:	e056      	b.n	8006284 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d11b      	bne.n	800621c <HAL_SPI_TransmitReceive+0x1aa>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d016      	beq.n	800621c <HAL_SPI_TransmitReceive+0x1aa>
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d113      	bne.n	800621c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	881a      	ldrh	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	1c9a      	adds	r2, r3, #2
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d11c      	bne.n	8006264 <HAL_SPI_TransmitReceive+0x1f2>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d016      	beq.n	8006264 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	b292      	uxth	r2, r2
 8006242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	1c9a      	adds	r2, r3, #2
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006260:	2301      	movs	r3, #1
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006264:	f7fc fc8c 	bl	8002b80 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006270:	429a      	cmp	r2, r3
 8006272:	d807      	bhi.n	8006284 <HAL_SPI_TransmitReceive+0x212>
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d003      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006282:	e0fb      	b.n	800647c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1a3      	bne.n	80061d6 <HAL_SPI_TransmitReceive+0x164>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d19d      	bne.n	80061d6 <HAL_SPI_TransmitReceive+0x164>
 800629a:	e0df      	b.n	800645c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_SPI_TransmitReceive+0x23a>
 80062a4:	8a7b      	ldrh	r3, [r7, #18]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	f040 80cb 	bne.w	8006442 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d912      	bls.n	80062dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	881a      	ldrh	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	1c9a      	adds	r2, r3, #2
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b02      	subs	r3, #2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062da:	e0b2      	b.n	8006442 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006302:	e09e      	b.n	8006442 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d134      	bne.n	800637c <HAL_SPI_TransmitReceive+0x30a>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d02f      	beq.n	800637c <HAL_SPI_TransmitReceive+0x30a>
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	2b01      	cmp	r3, #1
 8006320:	d12c      	bne.n	800637c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d912      	bls.n	8006352 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	881a      	ldrh	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b02      	subs	r3, #2
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006350:	e012      	b.n	8006378 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	330c      	adds	r3, #12
 800635c:	7812      	ldrb	r2, [r2, #0]
 800635e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d148      	bne.n	800641c <HAL_SPI_TransmitReceive+0x3aa>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d042      	beq.n	800641c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d923      	bls.n	80063ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	b292      	uxth	r2, r2
 80063ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b02      	subs	r3, #2
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d81f      	bhi.n	8006418 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	e016      	b.n	8006418 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f103 020c 	add.w	r2, r3, #12
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006418:	2301      	movs	r3, #1
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800641c:	f7fc fbb0 	bl	8002b80 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006428:	429a      	cmp	r2, r3
 800642a:	d803      	bhi.n	8006434 <HAL_SPI_TransmitReceive+0x3c2>
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d102      	bne.n	800643a <HAL_SPI_TransmitReceive+0x3c8>
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006440:	e01c      	b.n	800647c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f af5b 	bne.w	8006304 <HAL_SPI_TransmitReceive+0x292>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	f47f af54 	bne.w	8006304 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f92f 	bl	80066c4 <SPI_EndRxTxTransaction>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	661a      	str	r2, [r3, #96]	; 0x60
 8006478:	e000      	b.n	800647c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800647a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800648c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006490:	4618      	mov	r0, r3
 8006492:	3728      	adds	r7, #40	; 0x28
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064a8:	f7fc fb6a 	bl	8002b80 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	4413      	add	r3, r2
 80064b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064b8:	f7fc fb62 	bl	8002b80 <HAL_GetTick>
 80064bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064be:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	015b      	lsls	r3, r3, #5
 80064c4:	0d1b      	lsrs	r3, r3, #20
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	fb02 f303 	mul.w	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ce:	e054      	b.n	800657a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d050      	beq.n	800657a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064d8:	f7fc fb52 	bl	8002b80 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d902      	bls.n	80064ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d13d      	bne.n	800656a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006506:	d111      	bne.n	800652c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006510:	d004      	beq.n	800651c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651a:	d107      	bne.n	800652c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006534:	d10f      	bne.n	8006556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e017      	b.n	800659a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3b01      	subs	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	bf0c      	ite	eq
 800658a:	2301      	moveq	r3, #1
 800658c:	2300      	movne	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	429a      	cmp	r2, r3
 8006596:	d19b      	bne.n	80064d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000000 	.word	0x20000000

080065a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065b6:	f7fc fae3 	bl	8002b80 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	4413      	add	r3, r2
 80065c4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065c6:	f7fc fadb 	bl	8002b80 <HAL_GetTick>
 80065ca:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065cc:	4b3c      	ldr	r3, [pc, #240]	; (80066c0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	00da      	lsls	r2, r3, #3
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	0d1b      	lsrs	r3, r3, #20
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	fb02 f303 	mul.w	r3, r2, r3
 80065e2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80065e4:	e05f      	b.n	80066a6 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065ec:	d106      	bne.n	80065fc <SPI_WaitFifoStateUntilTimeout+0x54>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d050      	beq.n	80066a6 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006604:	f7fc fabc 	bl	8002b80 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	429a      	cmp	r2, r3
 8006612:	d902      	bls.n	800661a <SPI_WaitFifoStateUntilTimeout+0x72>
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d13d      	bne.n	8006696 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006628:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006632:	d111      	bne.n	8006658 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663c:	d004      	beq.n	8006648 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006646:	d107      	bne.n	8006658 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006660:	d10f      	bne.n	8006682 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006680:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e010      	b.n	80066b8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4013      	ands	r3, r2
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d197      	bne.n	80065e6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000000 	.word	0x20000000

080066c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff ff63 	bl	80065a8 <SPI_WaitFifoStateUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e027      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff fec8 	bl	8006498 <SPI_WaitFlagStateUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e014      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7ff ff3c 	bl	80065a8 <SPI_WaitFifoStateUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e000      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e049      	b.n	80067f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fb ff22 	bl	80025c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 fb1c 	bl	8006dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e047      	b.n	80068a8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <HAL_TIM_Base_Start+0xb4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01d      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d018      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <HAL_TIM_Base_Start+0xb8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_TIM_Base_Start+0xbc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00e      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_TIM_Base_Start+0xc0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <HAL_TIM_Base_Start+0xc4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d004      	beq.n	8006866 <HAL_TIM_Base_Start+0x66>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a19      	ldr	r2, [pc, #100]	; (80068c8 <HAL_TIM_Base_Start+0xc8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d115      	bne.n	8006892 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	4b17      	ldr	r3, [pc, #92]	; (80068cc <HAL_TIM_Base_Start+0xcc>)
 800686e:	4013      	ands	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b06      	cmp	r3, #6
 8006876:	d015      	beq.n	80068a4 <HAL_TIM_Base_Start+0xa4>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687e:	d011      	beq.n	80068a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	e008      	b.n	80068a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e000      	b.n	80068a6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40013400 	.word	0x40013400
 80068c8:	40014000 	.word	0x40014000
 80068cc:	00010007 	.word	0x00010007

080068d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d001      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e04f      	b.n	8006988 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <HAL_TIM_Base_Start_IT+0xc4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006912:	d018      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1f      	ldr	r2, [pc, #124]	; (8006998 <HAL_TIM_Base_Start_IT+0xc8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1e      	ldr	r2, [pc, #120]	; (800699c <HAL_TIM_Base_Start_IT+0xcc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_TIM_Base_Start_IT+0x76>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d115      	bne.n	8006972 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	4b17      	ldr	r3, [pc, #92]	; (80069ac <HAL_TIM_Base_Start_IT+0xdc>)
 800694e:	4013      	ands	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b06      	cmp	r3, #6
 8006956:	d015      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695e:	d011      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006970:	e008      	b.n	8006984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e000      	b.n	8006986 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006984:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40000400 	.word	0x40000400
 800699c:	40000800 	.word	0x40000800
 80069a0:	40000c00 	.word	0x40000c00
 80069a4:	40013400 	.word	0x40013400
 80069a8:	40014000 	.word	0x40014000
 80069ac:	00010007 	.word	0x00010007

080069b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d122      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d11b      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0202 	mvn.w	r2, #2
 80069dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f9cb 	bl	8006d8e <HAL_TIM_IC_CaptureCallback>
 80069f8:	e005      	b.n	8006a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9bd 	bl	8006d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f9ce 	bl	8006da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d122      	bne.n	8006a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d11b      	bne.n	8006a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0204 	mvn.w	r2, #4
 8006a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f9a1 	bl	8006d8e <HAL_TIM_IC_CaptureCallback>
 8006a4c:	e005      	b.n	8006a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f993 	bl	8006d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f9a4 	bl	8006da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d122      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d11b      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0208 	mvn.w	r2, #8
 8006a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2204      	movs	r2, #4
 8006a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f977 	bl	8006d8e <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f969 	bl	8006d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f97a 	bl	8006da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0310 	and.w	r3, r3, #16
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d122      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d11b      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0210 	mvn.w	r2, #16
 8006ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2208      	movs	r2, #8
 8006ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f94d 	bl	8006d8e <HAL_TIM_IC_CaptureCallback>
 8006af4:	e005      	b.n	8006b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f93f 	bl	8006d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f950 	bl	8006da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d10e      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d107      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0201 	mvn.w	r2, #1
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fb f8b0 	bl	8001c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3e:	2b80      	cmp	r3, #128	; 0x80
 8006b40:	d10e      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d107      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fafc 	bl	8007158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6e:	d10e      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7a:	2b80      	cmp	r3, #128	; 0x80
 8006b7c:	d107      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 faef 	bl	800716c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b98:	2b40      	cmp	r3, #64	; 0x40
 8006b9a:	d10e      	bne.n	8006bba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	d107      	bne.n	8006bba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f8fe 	bl	8006db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d10e      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f06f 0220 	mvn.w	r2, #32
 8006bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 faaf 	bl	8007144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_TIM_ConfigClockSource+0x18>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e0b5      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x184>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c30:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c42:	d03e      	beq.n	8006cc2 <HAL_TIM_ConfigClockSource+0xd4>
 8006c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c48:	f200 8087 	bhi.w	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c50:	f000 8085 	beq.w	8006d5e <HAL_TIM_ConfigClockSource+0x170>
 8006c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c58:	d87f      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
 8006c5a:	2b70      	cmp	r3, #112	; 0x70
 8006c5c:	d01a      	beq.n	8006c94 <HAL_TIM_ConfigClockSource+0xa6>
 8006c5e:	2b70      	cmp	r3, #112	; 0x70
 8006c60:	d87b      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
 8006c62:	2b60      	cmp	r3, #96	; 0x60
 8006c64:	d050      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0x11a>
 8006c66:	2b60      	cmp	r3, #96	; 0x60
 8006c68:	d877      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
 8006c6a:	2b50      	cmp	r3, #80	; 0x50
 8006c6c:	d03c      	beq.n	8006ce8 <HAL_TIM_ConfigClockSource+0xfa>
 8006c6e:	2b50      	cmp	r3, #80	; 0x50
 8006c70:	d873      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d058      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0x13a>
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d86f      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
 8006c7a:	2b30      	cmp	r3, #48	; 0x30
 8006c7c:	d064      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x15a>
 8006c7e:	2b30      	cmp	r3, #48	; 0x30
 8006c80:	d86b      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d060      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x15a>
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d867      	bhi.n	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d05c      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x15a>
 8006c8e:	2b10      	cmp	r3, #16
 8006c90:	d05a      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006c92:	e062      	b.n	8006d5a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	6899      	ldr	r1, [r3, #8]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f000 f9a6 	bl	8006ff4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	609a      	str	r2, [r3, #8]
      break;
 8006cc0:	e04e      	b.n	8006d60 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6899      	ldr	r1, [r3, #8]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f000 f98f 	bl	8006ff4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ce4:	609a      	str	r2, [r3, #8]
      break;
 8006ce6:	e03b      	b.n	8006d60 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6859      	ldr	r1, [r3, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f000 f903 	bl	8006f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2150      	movs	r1, #80	; 0x50
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 f95c 	bl	8006fbe <TIM_ITRx_SetConfig>
      break;
 8006d06:	e02b      	b.n	8006d60 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	461a      	mov	r2, r3
 8006d16:	f000 f922 	bl	8006f5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2160      	movs	r1, #96	; 0x60
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f94c 	bl	8006fbe <TIM_ITRx_SetConfig>
      break;
 8006d26:	e01b      	b.n	8006d60 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	461a      	mov	r2, r3
 8006d36:	f000 f8e3 	bl	8006f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2140      	movs	r1, #64	; 0x40
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 f93c 	bl	8006fbe <TIM_ITRx_SetConfig>
      break;
 8006d46:	e00b      	b.n	8006d60 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f000 f933 	bl	8006fbe <TIM_ITRx_SetConfig>
        break;
 8006d58:	e002      	b.n	8006d60 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006d5a:	bf00      	nop
 8006d5c:	e000      	b.n	8006d60 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
	...

08006dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a40      	ldr	r2, [pc, #256]	; (8006ee0 <TIM_Base_SetConfig+0x114>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d013      	beq.n	8006e0c <TIM_Base_SetConfig+0x40>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d00f      	beq.n	8006e0c <TIM_Base_SetConfig+0x40>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a3d      	ldr	r2, [pc, #244]	; (8006ee4 <TIM_Base_SetConfig+0x118>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00b      	beq.n	8006e0c <TIM_Base_SetConfig+0x40>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a3c      	ldr	r2, [pc, #240]	; (8006ee8 <TIM_Base_SetConfig+0x11c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d007      	beq.n	8006e0c <TIM_Base_SetConfig+0x40>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a3b      	ldr	r2, [pc, #236]	; (8006eec <TIM_Base_SetConfig+0x120>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_Base_SetConfig+0x40>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a3a      	ldr	r2, [pc, #232]	; (8006ef0 <TIM_Base_SetConfig+0x124>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d108      	bne.n	8006e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a2f      	ldr	r2, [pc, #188]	; (8006ee0 <TIM_Base_SetConfig+0x114>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01f      	beq.n	8006e66 <TIM_Base_SetConfig+0x9a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2c:	d01b      	beq.n	8006e66 <TIM_Base_SetConfig+0x9a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <TIM_Base_SetConfig+0x118>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d017      	beq.n	8006e66 <TIM_Base_SetConfig+0x9a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a2b      	ldr	r2, [pc, #172]	; (8006ee8 <TIM_Base_SetConfig+0x11c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <TIM_Base_SetConfig+0x9a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a2a      	ldr	r2, [pc, #168]	; (8006eec <TIM_Base_SetConfig+0x120>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00f      	beq.n	8006e66 <TIM_Base_SetConfig+0x9a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a29      	ldr	r2, [pc, #164]	; (8006ef0 <TIM_Base_SetConfig+0x124>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00b      	beq.n	8006e66 <TIM_Base_SetConfig+0x9a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a28      	ldr	r2, [pc, #160]	; (8006ef4 <TIM_Base_SetConfig+0x128>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d007      	beq.n	8006e66 <TIM_Base_SetConfig+0x9a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a27      	ldr	r2, [pc, #156]	; (8006ef8 <TIM_Base_SetConfig+0x12c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <TIM_Base_SetConfig+0x9a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a26      	ldr	r2, [pc, #152]	; (8006efc <TIM_Base_SetConfig+0x130>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d108      	bne.n	8006e78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a10      	ldr	r2, [pc, #64]	; (8006ee0 <TIM_Base_SetConfig+0x114>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00f      	beq.n	8006ec4 <TIM_Base_SetConfig+0xf8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a12      	ldr	r2, [pc, #72]	; (8006ef0 <TIM_Base_SetConfig+0x124>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00b      	beq.n	8006ec4 <TIM_Base_SetConfig+0xf8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <TIM_Base_SetConfig+0x128>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d007      	beq.n	8006ec4 <TIM_Base_SetConfig+0xf8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a10      	ldr	r2, [pc, #64]	; (8006ef8 <TIM_Base_SetConfig+0x12c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_Base_SetConfig+0xf8>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a0f      	ldr	r2, [pc, #60]	; (8006efc <TIM_Base_SetConfig+0x130>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d103      	bne.n	8006ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	615a      	str	r2, [r3, #20]
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40000c00 	.word	0x40000c00
 8006ef0:	40013400 	.word	0x40013400
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40014400 	.word	0x40014400
 8006efc:	40014800 	.word	0x40014800

08006f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f023 0201 	bic.w	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 030a 	bic.w	r3, r3, #10
 8006f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f023 0210 	bic.w	r2, r3, #16
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	031b      	lsls	r3, r3, #12
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f043 0307 	orr.w	r3, r3, #7
 8006fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800700e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	021a      	lsls	r2, r3, #8
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	431a      	orrs	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4313      	orrs	r3, r2
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	609a      	str	r2, [r3, #8]
}
 8007028:	bf00      	nop
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007048:	2302      	movs	r3, #2
 800704a:	e068      	b.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2e      	ldr	r2, [pc, #184]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2d      	ldr	r2, [pc, #180]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d108      	bne.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007086:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007098:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1e      	ldr	r2, [pc, #120]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d01d      	beq.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070be:	d018      	beq.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a1b      	ldr	r2, [pc, #108]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1a      	ldr	r2, [pc, #104]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00e      	beq.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a18      	ldr	r2, [pc, #96]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d009      	beq.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a13      	ldr	r2, [pc, #76]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d004      	beq.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a14      	ldr	r2, [pc, #80]	; (8007140 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d10c      	bne.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	4313      	orrs	r3, r2
 8007102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	40012c00 	.word	0x40012c00
 8007130:	40013400 	.word	0x40013400
 8007134:	40000400 	.word	0x40000400
 8007138:	40000800 	.word	0x40000800
 800713c:	40000c00 	.word	0x40000c00
 8007140:	40014000 	.word	0x40014000

08007144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e040      	b.n	8007214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fb fa44 	bl	8002630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2224      	movs	r2, #36	; 0x24
 80071ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0201 	bic.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa1a 	bl	80075f8 <UART_SetConfig>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e022      	b.n	8007214 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fcc8 	bl	8007b6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fd4f 	bl	8007cb0 <UART_CheckIdleState>
 8007212:	4603      	mov	r3, r0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007230:	2b20      	cmp	r3, #32
 8007232:	f040 8081 	bne.w	8007338 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_UART_Transmit+0x26>
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e079      	b.n	800733a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_UART_Transmit+0x38>
 8007250:	2302      	movs	r3, #2
 8007252:	e072      	b.n	800733a <HAL_UART_Transmit+0x11e>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2221      	movs	r2, #33	; 0x21
 8007266:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007268:	f7fb fc8a 	bl	8002b80 <HAL_GetTick>
 800726c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	88fa      	ldrh	r2, [r7, #6]
 8007272:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	88fa      	ldrh	r2, [r7, #6]
 800727a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d108      	bne.n	800729a <HAL_UART_Transmit+0x7e>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007290:	2300      	movs	r3, #0
 8007292:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	e003      	b.n	80072a2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80072aa:	e02d      	b.n	8007308 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2200      	movs	r2, #0
 80072b4:	2180      	movs	r1, #128	; 0x80
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fd3f 	bl	8007d3a <UART_WaitOnFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e039      	b.n	800733a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10b      	bne.n	80072e4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	881a      	ldrh	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d8:	b292      	uxth	r2, r2
 80072da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	3302      	adds	r3, #2
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	e008      	b.n	80072f6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	781a      	ldrb	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	b292      	uxth	r2, r2
 80072ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	3301      	adds	r3, #1
 80072f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1cb      	bne.n	80072ac <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2200      	movs	r2, #0
 800731c:	2140      	movs	r1, #64	; 0x40
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fd0b 	bl	8007d3a <UART_WaitOnFlagUntilTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e005      	b.n	800733a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2220      	movs	r2, #32
 8007332:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e000      	b.n	800733a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007338:	2302      	movs	r3, #2
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	f640 030f 	movw	r3, #2063	; 0x80f
 800736a:	4013      	ands	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d113      	bne.n	800739c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00e      	beq.n	800739c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	d009      	beq.n	800739c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8113 	beq.w	80075b8 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
      }
      return;
 800739a:	e10d      	b.n	80075b8 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80d6 	beq.w	8007550 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d105      	bne.n	80073ba <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	4b85      	ldr	r3, [pc, #532]	; (80075c8 <HAL_UART_IRQHandler+0x284>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80cb 	beq.w	8007550 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <HAL_UART_IRQHandler+0x9e>
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2201      	movs	r2, #1
 80073d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073da:	f043 0201 	orr.w	r2, r3, #1
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00e      	beq.n	800740a <HAL_UART_IRQHandler+0xc6>
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2202      	movs	r2, #2
 80073fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007402:	f043 0204 	orr.w	r2, r3, #4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00e      	beq.n	8007432 <HAL_UART_IRQHandler+0xee>
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2204      	movs	r2, #4
 8007424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742a:	f043 0202 	orr.w	r2, r3, #2
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	2b00      	cmp	r3, #0
 800743a:	d013      	beq.n	8007464 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	d104      	bne.n	8007450 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2208      	movs	r2, #8
 8007456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745c:	f043 0208 	orr.w	r2, r3, #8
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00f      	beq.n	800748e <HAL_UART_IRQHandler+0x14a>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007486:	f043 0220 	orr.w	r2, r3, #32
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 8092 	beq.w	80075bc <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d004      	beq.n	80074da <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d031      	beq.n	800753e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fca8 	bl	8007e30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d123      	bne.n	8007536 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d013      	beq.n	800752e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800750a:	4a30      	ldr	r2, [pc, #192]	; (80075cc <HAL_UART_IRQHandler+0x288>)
 800750c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007512:	4618      	mov	r0, r3
 8007514:	f7fc ff32 	bl	800437c <HAL_DMA_Abort_IT>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d016      	beq.n	800754c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	e00e      	b.n	800754c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f858 	bl	80075e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007534:	e00a      	b.n	800754c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f854 	bl	80075e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753c:	e006      	b.n	800754c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f850 	bl	80075e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800754a:	e037      	b.n	80075bc <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754c:	bf00      	nop
    return;
 800754e:	e035      	b.n	80075bc <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00d      	beq.n	8007576 <HAL_UART_IRQHandler+0x232>
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800756c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fcad 	bl	8007ece <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007574:	e025      	b.n	80075c2 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00d      	beq.n	800759c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007586:	2b00      	cmp	r3, #0
 8007588:	d008      	beq.n	800759c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800758e:	2b00      	cmp	r3, #0
 8007590:	d016      	beq.n	80075c0 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
    }
    return;
 800759a:	e011      	b.n	80075c0 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00d      	beq.n	80075c2 <HAL_UART_IRQHandler+0x27e>
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d008      	beq.n	80075c2 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fc73 	bl	8007e9c <UART_EndTransmit_IT>
    return;
 80075b6:	e004      	b.n	80075c2 <HAL_UART_IRQHandler+0x27e>
      return;
 80075b8:	bf00      	nop
 80075ba:	e002      	b.n	80075c2 <HAL_UART_IRQHandler+0x27e>
    return;
 80075bc:	bf00      	nop
 80075be:	e000      	b.n	80075c2 <HAL_UART_IRQHandler+0x27e>
    return;
 80075c0:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	04000120 	.word	0x04000120
 80075cc:	08007e71 	.word	0x08007e71

080075d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075fc:	b08a      	sub	sp, #40	; 0x28
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	431a      	orrs	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	4313      	orrs	r3, r2
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4ba4      	ldr	r3, [pc, #656]	; (80078b8 <UART_SetConfig+0x2c0>)
 8007628:	4013      	ands	r3, r2
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	6812      	ldr	r2, [r2, #0]
 800762e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007630:	430b      	orrs	r3, r1
 8007632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a99      	ldr	r2, [pc, #612]	; (80078bc <UART_SetConfig+0x2c4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007660:	4313      	orrs	r3, r2
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007674:	430a      	orrs	r2, r1
 8007676:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a90      	ldr	r2, [pc, #576]	; (80078c0 <UART_SetConfig+0x2c8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d126      	bne.n	80076d0 <UART_SetConfig+0xd8>
 8007682:	4b90      	ldr	r3, [pc, #576]	; (80078c4 <UART_SetConfig+0x2cc>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	2b03      	cmp	r3, #3
 800768e:	d81b      	bhi.n	80076c8 <UART_SetConfig+0xd0>
 8007690:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <UART_SetConfig+0xa0>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076c1 	.word	0x080076c1
 80076a8:	2301      	movs	r3, #1
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ae:	e116      	b.n	80078de <UART_SetConfig+0x2e6>
 80076b0:	2302      	movs	r3, #2
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b6:	e112      	b.n	80078de <UART_SetConfig+0x2e6>
 80076b8:	2304      	movs	r3, #4
 80076ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076be:	e10e      	b.n	80078de <UART_SetConfig+0x2e6>
 80076c0:	2308      	movs	r3, #8
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c6:	e10a      	b.n	80078de <UART_SetConfig+0x2e6>
 80076c8:	2310      	movs	r3, #16
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ce:	e106      	b.n	80078de <UART_SetConfig+0x2e6>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a7c      	ldr	r2, [pc, #496]	; (80078c8 <UART_SetConfig+0x2d0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d138      	bne.n	800774c <UART_SetConfig+0x154>
 80076da:	4b7a      	ldr	r3, [pc, #488]	; (80078c4 <UART_SetConfig+0x2cc>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e0:	f003 030c 	and.w	r3, r3, #12
 80076e4:	2b0c      	cmp	r3, #12
 80076e6:	d82d      	bhi.n	8007744 <UART_SetConfig+0x14c>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0xf8>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007725 	.word	0x08007725
 80076f4:	08007745 	.word	0x08007745
 80076f8:	08007745 	.word	0x08007745
 80076fc:	08007745 	.word	0x08007745
 8007700:	08007735 	.word	0x08007735
 8007704:	08007745 	.word	0x08007745
 8007708:	08007745 	.word	0x08007745
 800770c:	08007745 	.word	0x08007745
 8007710:	0800772d 	.word	0x0800772d
 8007714:	08007745 	.word	0x08007745
 8007718:	08007745 	.word	0x08007745
 800771c:	08007745 	.word	0x08007745
 8007720:	0800773d 	.word	0x0800773d
 8007724:	2300      	movs	r3, #0
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800772a:	e0d8      	b.n	80078de <UART_SetConfig+0x2e6>
 800772c:	2302      	movs	r3, #2
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007732:	e0d4      	b.n	80078de <UART_SetConfig+0x2e6>
 8007734:	2304      	movs	r3, #4
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800773a:	e0d0      	b.n	80078de <UART_SetConfig+0x2e6>
 800773c:	2308      	movs	r3, #8
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007742:	e0cc      	b.n	80078de <UART_SetConfig+0x2e6>
 8007744:	2310      	movs	r3, #16
 8007746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800774a:	e0c8      	b.n	80078de <UART_SetConfig+0x2e6>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a5e      	ldr	r2, [pc, #376]	; (80078cc <UART_SetConfig+0x2d4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d125      	bne.n	80077a2 <UART_SetConfig+0x1aa>
 8007756:	4b5b      	ldr	r3, [pc, #364]	; (80078c4 <UART_SetConfig+0x2cc>)
 8007758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007760:	2b30      	cmp	r3, #48	; 0x30
 8007762:	d016      	beq.n	8007792 <UART_SetConfig+0x19a>
 8007764:	2b30      	cmp	r3, #48	; 0x30
 8007766:	d818      	bhi.n	800779a <UART_SetConfig+0x1a2>
 8007768:	2b20      	cmp	r3, #32
 800776a:	d00a      	beq.n	8007782 <UART_SetConfig+0x18a>
 800776c:	2b20      	cmp	r3, #32
 800776e:	d814      	bhi.n	800779a <UART_SetConfig+0x1a2>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <UART_SetConfig+0x182>
 8007774:	2b10      	cmp	r3, #16
 8007776:	d008      	beq.n	800778a <UART_SetConfig+0x192>
 8007778:	e00f      	b.n	800779a <UART_SetConfig+0x1a2>
 800777a:	2300      	movs	r3, #0
 800777c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007780:	e0ad      	b.n	80078de <UART_SetConfig+0x2e6>
 8007782:	2302      	movs	r3, #2
 8007784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007788:	e0a9      	b.n	80078de <UART_SetConfig+0x2e6>
 800778a:	2304      	movs	r3, #4
 800778c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007790:	e0a5      	b.n	80078de <UART_SetConfig+0x2e6>
 8007792:	2308      	movs	r3, #8
 8007794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007798:	e0a1      	b.n	80078de <UART_SetConfig+0x2e6>
 800779a:	2310      	movs	r3, #16
 800779c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a0:	e09d      	b.n	80078de <UART_SetConfig+0x2e6>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a4a      	ldr	r2, [pc, #296]	; (80078d0 <UART_SetConfig+0x2d8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d125      	bne.n	80077f8 <UART_SetConfig+0x200>
 80077ac:	4b45      	ldr	r3, [pc, #276]	; (80078c4 <UART_SetConfig+0x2cc>)
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077b6:	2bc0      	cmp	r3, #192	; 0xc0
 80077b8:	d016      	beq.n	80077e8 <UART_SetConfig+0x1f0>
 80077ba:	2bc0      	cmp	r3, #192	; 0xc0
 80077bc:	d818      	bhi.n	80077f0 <UART_SetConfig+0x1f8>
 80077be:	2b80      	cmp	r3, #128	; 0x80
 80077c0:	d00a      	beq.n	80077d8 <UART_SetConfig+0x1e0>
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d814      	bhi.n	80077f0 <UART_SetConfig+0x1f8>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <UART_SetConfig+0x1d8>
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d008      	beq.n	80077e0 <UART_SetConfig+0x1e8>
 80077ce:	e00f      	b.n	80077f0 <UART_SetConfig+0x1f8>
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d6:	e082      	b.n	80078de <UART_SetConfig+0x2e6>
 80077d8:	2302      	movs	r3, #2
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077de:	e07e      	b.n	80078de <UART_SetConfig+0x2e6>
 80077e0:	2304      	movs	r3, #4
 80077e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e6:	e07a      	b.n	80078de <UART_SetConfig+0x2e6>
 80077e8:	2308      	movs	r3, #8
 80077ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ee:	e076      	b.n	80078de <UART_SetConfig+0x2e6>
 80077f0:	2310      	movs	r3, #16
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f6:	e072      	b.n	80078de <UART_SetConfig+0x2e6>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a35      	ldr	r2, [pc, #212]	; (80078d4 <UART_SetConfig+0x2dc>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d12a      	bne.n	8007858 <UART_SetConfig+0x260>
 8007802:	4b30      	ldr	r3, [pc, #192]	; (80078c4 <UART_SetConfig+0x2cc>)
 8007804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007810:	d01a      	beq.n	8007848 <UART_SetConfig+0x250>
 8007812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007816:	d81b      	bhi.n	8007850 <UART_SetConfig+0x258>
 8007818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781c:	d00c      	beq.n	8007838 <UART_SetConfig+0x240>
 800781e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007822:	d815      	bhi.n	8007850 <UART_SetConfig+0x258>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <UART_SetConfig+0x238>
 8007828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782c:	d008      	beq.n	8007840 <UART_SetConfig+0x248>
 800782e:	e00f      	b.n	8007850 <UART_SetConfig+0x258>
 8007830:	2300      	movs	r3, #0
 8007832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007836:	e052      	b.n	80078de <UART_SetConfig+0x2e6>
 8007838:	2302      	movs	r3, #2
 800783a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800783e:	e04e      	b.n	80078de <UART_SetConfig+0x2e6>
 8007840:	2304      	movs	r3, #4
 8007842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007846:	e04a      	b.n	80078de <UART_SetConfig+0x2e6>
 8007848:	2308      	movs	r3, #8
 800784a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784e:	e046      	b.n	80078de <UART_SetConfig+0x2e6>
 8007850:	2310      	movs	r3, #16
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007856:	e042      	b.n	80078de <UART_SetConfig+0x2e6>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a17      	ldr	r2, [pc, #92]	; (80078bc <UART_SetConfig+0x2c4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d13a      	bne.n	80078d8 <UART_SetConfig+0x2e0>
 8007862:	4b18      	ldr	r3, [pc, #96]	; (80078c4 <UART_SetConfig+0x2cc>)
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007868:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800786c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007870:	d01a      	beq.n	80078a8 <UART_SetConfig+0x2b0>
 8007872:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007876:	d81b      	bhi.n	80078b0 <UART_SetConfig+0x2b8>
 8007878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800787c:	d00c      	beq.n	8007898 <UART_SetConfig+0x2a0>
 800787e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007882:	d815      	bhi.n	80078b0 <UART_SetConfig+0x2b8>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <UART_SetConfig+0x298>
 8007888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788c:	d008      	beq.n	80078a0 <UART_SetConfig+0x2a8>
 800788e:	e00f      	b.n	80078b0 <UART_SetConfig+0x2b8>
 8007890:	2300      	movs	r3, #0
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007896:	e022      	b.n	80078de <UART_SetConfig+0x2e6>
 8007898:	2302      	movs	r3, #2
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800789e:	e01e      	b.n	80078de <UART_SetConfig+0x2e6>
 80078a0:	2304      	movs	r3, #4
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a6:	e01a      	b.n	80078de <UART_SetConfig+0x2e6>
 80078a8:	2308      	movs	r3, #8
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ae:	e016      	b.n	80078de <UART_SetConfig+0x2e6>
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b6:	e012      	b.n	80078de <UART_SetConfig+0x2e6>
 80078b8:	efff69f3 	.word	0xefff69f3
 80078bc:	40008000 	.word	0x40008000
 80078c0:	40013800 	.word	0x40013800
 80078c4:	40021000 	.word	0x40021000
 80078c8:	40004400 	.word	0x40004400
 80078cc:	40004800 	.word	0x40004800
 80078d0:	40004c00 	.word	0x40004c00
 80078d4:	40005000 	.word	0x40005000
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4aa0      	ldr	r2, [pc, #640]	; (8007b64 <UART_SetConfig+0x56c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d17a      	bne.n	80079de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d824      	bhi.n	800793a <UART_SetConfig+0x342>
 80078f0:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <UART_SetConfig+0x300>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	0800791d 	.word	0x0800791d
 80078fc:	0800793b 	.word	0x0800793b
 8007900:	08007925 	.word	0x08007925
 8007904:	0800793b 	.word	0x0800793b
 8007908:	0800792b 	.word	0x0800792b
 800790c:	0800793b 	.word	0x0800793b
 8007910:	0800793b 	.word	0x0800793b
 8007914:	0800793b 	.word	0x0800793b
 8007918:	08007933 	.word	0x08007933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800791c:	f7fd fdbe 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8007920:	61f8      	str	r0, [r7, #28]
        break;
 8007922:	e010      	b.n	8007946 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007924:	4b90      	ldr	r3, [pc, #576]	; (8007b68 <UART_SetConfig+0x570>)
 8007926:	61fb      	str	r3, [r7, #28]
        break;
 8007928:	e00d      	b.n	8007946 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800792a:	f7fd fd1f 	bl	800536c <HAL_RCC_GetSysClockFreq>
 800792e:	61f8      	str	r0, [r7, #28]
        break;
 8007930:	e009      	b.n	8007946 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007936:	61fb      	str	r3, [r7, #28]
        break;
 8007938:	e005      	b.n	8007946 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007944:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80fd 	beq.w	8007b48 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	4413      	add	r3, r2
 8007958:	69fa      	ldr	r2, [r7, #28]
 800795a:	429a      	cmp	r2, r3
 800795c:	d305      	bcc.n	800796a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	429a      	cmp	r2, r3
 8007968:	d903      	bls.n	8007972 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007970:	e0ea      	b.n	8007b48 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2200      	movs	r2, #0
 8007976:	461c      	mov	r4, r3
 8007978:	4615      	mov	r5, r2
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	022b      	lsls	r3, r5, #8
 8007984:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007988:	0222      	lsls	r2, r4, #8
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	6849      	ldr	r1, [r1, #4]
 800798e:	0849      	lsrs	r1, r1, #1
 8007990:	2000      	movs	r0, #0
 8007992:	4688      	mov	r8, r1
 8007994:	4681      	mov	r9, r0
 8007996:	eb12 0a08 	adds.w	sl, r2, r8
 800799a:	eb43 0b09 	adc.w	fp, r3, r9
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ac:	4650      	mov	r0, sl
 80079ae:	4659      	mov	r1, fp
 80079b0:	f7f9 f9ba 	bl	8000d28 <__aeabi_uldivmod>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4613      	mov	r3, r2
 80079ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079c2:	d308      	bcc.n	80079d6 <UART_SetConfig+0x3de>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ca:	d204      	bcs.n	80079d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	60da      	str	r2, [r3, #12]
 80079d4:	e0b8      	b.n	8007b48 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079dc:	e0b4      	b.n	8007b48 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e6:	d15f      	bne.n	8007aa8 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80079e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d828      	bhi.n	8007a42 <UART_SetConfig+0x44a>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <UART_SetConfig+0x400>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a25 	.word	0x08007a25
 8007a00:	08007a2d 	.word	0x08007a2d
 8007a04:	08007a43 	.word	0x08007a43
 8007a08:	08007a33 	.word	0x08007a33
 8007a0c:	08007a43 	.word	0x08007a43
 8007a10:	08007a43 	.word	0x08007a43
 8007a14:	08007a43 	.word	0x08007a43
 8007a18:	08007a3b 	.word	0x08007a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1c:	f7fd fd3e 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8007a20:	61f8      	str	r0, [r7, #28]
        break;
 8007a22:	e014      	b.n	8007a4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a24:	f7fd fd50 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 8007a28:	61f8      	str	r0, [r7, #28]
        break;
 8007a2a:	e010      	b.n	8007a4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a2c:	4b4e      	ldr	r3, [pc, #312]	; (8007b68 <UART_SetConfig+0x570>)
 8007a2e:	61fb      	str	r3, [r7, #28]
        break;
 8007a30:	e00d      	b.n	8007a4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a32:	f7fd fc9b 	bl	800536c <HAL_RCC_GetSysClockFreq>
 8007a36:	61f8      	str	r0, [r7, #28]
        break;
 8007a38:	e009      	b.n	8007a4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a3e:	61fb      	str	r3, [r7, #28]
        break;
 8007a40:	e005      	b.n	8007a4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d079      	beq.n	8007b48 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	005a      	lsls	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	441a      	add	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b0f      	cmp	r3, #15
 8007a70:	d916      	bls.n	8007aa0 <UART_SetConfig+0x4a8>
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a78:	d212      	bcs.n	8007aa0 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f023 030f 	bic.w	r3, r3, #15
 8007a82:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	8afb      	ldrh	r3, [r7, #22]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	8afa      	ldrh	r2, [r7, #22]
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	e053      	b.n	8007b48 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007aa6:	e04f      	b.n	8007b48 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d828      	bhi.n	8007b02 <UART_SetConfig+0x50a>
 8007ab0:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <UART_SetConfig+0x4c0>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007add 	.word	0x08007add
 8007abc:	08007ae5 	.word	0x08007ae5
 8007ac0:	08007aed 	.word	0x08007aed
 8007ac4:	08007b03 	.word	0x08007b03
 8007ac8:	08007af3 	.word	0x08007af3
 8007acc:	08007b03 	.word	0x08007b03
 8007ad0:	08007b03 	.word	0x08007b03
 8007ad4:	08007b03 	.word	0x08007b03
 8007ad8:	08007afb 	.word	0x08007afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007adc:	f7fd fcde 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8007ae0:	61f8      	str	r0, [r7, #28]
        break;
 8007ae2:	e014      	b.n	8007b0e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae4:	f7fd fcf0 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 8007ae8:	61f8      	str	r0, [r7, #28]
        break;
 8007aea:	e010      	b.n	8007b0e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aec:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <UART_SetConfig+0x570>)
 8007aee:	61fb      	str	r3, [r7, #28]
        break;
 8007af0:	e00d      	b.n	8007b0e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af2:	f7fd fc3b 	bl	800536c <HAL_RCC_GetSysClockFreq>
 8007af6:	61f8      	str	r0, [r7, #28]
        break;
 8007af8:	e009      	b.n	8007b0e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007afe:	61fb      	str	r3, [r7, #28]
        break;
 8007b00:	e005      	b.n	8007b0e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d019      	beq.n	8007b48 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	085a      	lsrs	r2, r3, #1
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	441a      	add	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b0f      	cmp	r3, #15
 8007b2e:	d908      	bls.n	8007b42 <UART_SetConfig+0x54a>
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b36:	d204      	bcs.n	8007b42 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	60da      	str	r2, [r3, #12]
 8007b40:	e002      	b.n	8007b48 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007b54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3728      	adds	r7, #40	; 0x28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b62:	bf00      	nop
 8007b64:	40008000 	.word	0x40008000
 8007b68:	00f42400 	.word	0x00f42400

08007b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01a      	beq.n	8007c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6a:	d10a      	bne.n	8007c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007cbe:	f7fa ff5f 	bl	8002b80 <HAL_GetTick>
 8007cc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d10e      	bne.n	8007cf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f82a 	bl	8007d3a <UART_WaitOnFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e020      	b.n	8007d32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0304 	and.w	r3, r3, #4
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d10e      	bne.n	8007d1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f814 	bl	8007d3a <UART_WaitOnFlagUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e00a      	b.n	8007d32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	603b      	str	r3, [r7, #0]
 8007d46:	4613      	mov	r3, r2
 8007d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d4a:	e05d      	b.n	8007e08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d059      	beq.n	8007e08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d54:	f7fa ff14 	bl	8002b80 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d302      	bcc.n	8007d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d11b      	bne.n	8007da2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e042      	b.n	8007e28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02b      	beq.n	8007e08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dbe:	d123      	bne.n	8007e08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dd8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0201 	bic.w	r2, r2, #1
 8007de8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e00f      	b.n	8007e28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69da      	ldr	r2, [r3, #28]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4013      	ands	r3, r2
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	bf0c      	ite	eq
 8007e18:	2301      	moveq	r3, #1
 8007e1a:	2300      	movne	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	461a      	mov	r2, r3
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d092      	beq.n	8007d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0201 	bic.w	r2, r2, #1
 8007e56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7ff fba8 	bl	80075e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e94:	bf00      	nop
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff fb85 	bl	80075d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
	...

08007ee4 <__errno>:
 8007ee4:	4b01      	ldr	r3, [pc, #4]	; (8007eec <__errno+0x8>)
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	2000000c 	.word	0x2000000c

08007ef0 <__libc_init_array>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4d0d      	ldr	r5, [pc, #52]	; (8007f28 <__libc_init_array+0x38>)
 8007ef4:	4c0d      	ldr	r4, [pc, #52]	; (8007f2c <__libc_init_array+0x3c>)
 8007ef6:	1b64      	subs	r4, r4, r5
 8007ef8:	10a4      	asrs	r4, r4, #2
 8007efa:	2600      	movs	r6, #0
 8007efc:	42a6      	cmp	r6, r4
 8007efe:	d109      	bne.n	8007f14 <__libc_init_array+0x24>
 8007f00:	4d0b      	ldr	r5, [pc, #44]	; (8007f30 <__libc_init_array+0x40>)
 8007f02:	4c0c      	ldr	r4, [pc, #48]	; (8007f34 <__libc_init_array+0x44>)
 8007f04:	f004 fca8 	bl	800c858 <_init>
 8007f08:	1b64      	subs	r4, r4, r5
 8007f0a:	10a4      	asrs	r4, r4, #2
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	d105      	bne.n	8007f1e <__libc_init_array+0x2e>
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f18:	4798      	blx	r3
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7ee      	b.n	8007efc <__libc_init_array+0xc>
 8007f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f22:	4798      	blx	r3
 8007f24:	3601      	adds	r6, #1
 8007f26:	e7f2      	b.n	8007f0e <__libc_init_array+0x1e>
 8007f28:	0800cd94 	.word	0x0800cd94
 8007f2c:	0800cd94 	.word	0x0800cd94
 8007f30:	0800cd94 	.word	0x0800cd94
 8007f34:	0800cd98 	.word	0x0800cd98

08007f38 <memset>:
 8007f38:	4402      	add	r2, r0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d100      	bne.n	8007f42 <memset+0xa>
 8007f40:	4770      	bx	lr
 8007f42:	f803 1b01 	strb.w	r1, [r3], #1
 8007f46:	e7f9      	b.n	8007f3c <memset+0x4>

08007f48 <__cvt>:
 8007f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	ec55 4b10 	vmov	r4, r5, d0
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	460e      	mov	r6, r1
 8007f54:	4619      	mov	r1, r3
 8007f56:	462b      	mov	r3, r5
 8007f58:	bfbb      	ittet	lt
 8007f5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f5e:	461d      	movlt	r5, r3
 8007f60:	2300      	movge	r3, #0
 8007f62:	232d      	movlt	r3, #45	; 0x2d
 8007f64:	700b      	strb	r3, [r1, #0]
 8007f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f6c:	4691      	mov	r9, r2
 8007f6e:	f023 0820 	bic.w	r8, r3, #32
 8007f72:	bfbc      	itt	lt
 8007f74:	4622      	movlt	r2, r4
 8007f76:	4614      	movlt	r4, r2
 8007f78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f7c:	d005      	beq.n	8007f8a <__cvt+0x42>
 8007f7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f82:	d100      	bne.n	8007f86 <__cvt+0x3e>
 8007f84:	3601      	adds	r6, #1
 8007f86:	2102      	movs	r1, #2
 8007f88:	e000      	b.n	8007f8c <__cvt+0x44>
 8007f8a:	2103      	movs	r1, #3
 8007f8c:	ab03      	add	r3, sp, #12
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	ab02      	add	r3, sp, #8
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	ec45 4b10 	vmov	d0, r4, r5
 8007f98:	4653      	mov	r3, sl
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	f001 fdc4 	bl	8009b28 <_dtoa_r>
 8007fa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	d102      	bne.n	8007fae <__cvt+0x66>
 8007fa8:	f019 0f01 	tst.w	r9, #1
 8007fac:	d022      	beq.n	8007ff4 <__cvt+0xac>
 8007fae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fb2:	eb07 0906 	add.w	r9, r7, r6
 8007fb6:	d110      	bne.n	8007fda <__cvt+0x92>
 8007fb8:	783b      	ldrb	r3, [r7, #0]
 8007fba:	2b30      	cmp	r3, #48	; 0x30
 8007fbc:	d10a      	bne.n	8007fd4 <__cvt+0x8c>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fca:	b918      	cbnz	r0, 8007fd4 <__cvt+0x8c>
 8007fcc:	f1c6 0601 	rsb	r6, r6, #1
 8007fd0:	f8ca 6000 	str.w	r6, [sl]
 8007fd4:	f8da 3000 	ldr.w	r3, [sl]
 8007fd8:	4499      	add	r9, r3
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fe6:	b108      	cbz	r0, 8007fec <__cvt+0xa4>
 8007fe8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fec:	2230      	movs	r2, #48	; 0x30
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	454b      	cmp	r3, r9
 8007ff2:	d307      	bcc.n	8008004 <__cvt+0xbc>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ff8:	1bdb      	subs	r3, r3, r7
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	b004      	add	sp, #16
 8008000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008004:	1c59      	adds	r1, r3, #1
 8008006:	9103      	str	r1, [sp, #12]
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e7f0      	b.n	8007fee <__cvt+0xa6>

0800800c <__exponent>:
 800800c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800800e:	4603      	mov	r3, r0
 8008010:	2900      	cmp	r1, #0
 8008012:	bfb8      	it	lt
 8008014:	4249      	neglt	r1, r1
 8008016:	f803 2b02 	strb.w	r2, [r3], #2
 800801a:	bfb4      	ite	lt
 800801c:	222d      	movlt	r2, #45	; 0x2d
 800801e:	222b      	movge	r2, #43	; 0x2b
 8008020:	2909      	cmp	r1, #9
 8008022:	7042      	strb	r2, [r0, #1]
 8008024:	dd2a      	ble.n	800807c <__exponent+0x70>
 8008026:	f10d 0407 	add.w	r4, sp, #7
 800802a:	46a4      	mov	ip, r4
 800802c:	270a      	movs	r7, #10
 800802e:	46a6      	mov	lr, r4
 8008030:	460a      	mov	r2, r1
 8008032:	fb91 f6f7 	sdiv	r6, r1, r7
 8008036:	fb07 1516 	mls	r5, r7, r6, r1
 800803a:	3530      	adds	r5, #48	; 0x30
 800803c:	2a63      	cmp	r2, #99	; 0x63
 800803e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008042:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008046:	4631      	mov	r1, r6
 8008048:	dcf1      	bgt.n	800802e <__exponent+0x22>
 800804a:	3130      	adds	r1, #48	; 0x30
 800804c:	f1ae 0502 	sub.w	r5, lr, #2
 8008050:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008054:	1c44      	adds	r4, r0, #1
 8008056:	4629      	mov	r1, r5
 8008058:	4561      	cmp	r1, ip
 800805a:	d30a      	bcc.n	8008072 <__exponent+0x66>
 800805c:	f10d 0209 	add.w	r2, sp, #9
 8008060:	eba2 020e 	sub.w	r2, r2, lr
 8008064:	4565      	cmp	r5, ip
 8008066:	bf88      	it	hi
 8008068:	2200      	movhi	r2, #0
 800806a:	4413      	add	r3, r2
 800806c:	1a18      	subs	r0, r3, r0
 800806e:	b003      	add	sp, #12
 8008070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008076:	f804 2f01 	strb.w	r2, [r4, #1]!
 800807a:	e7ed      	b.n	8008058 <__exponent+0x4c>
 800807c:	2330      	movs	r3, #48	; 0x30
 800807e:	3130      	adds	r1, #48	; 0x30
 8008080:	7083      	strb	r3, [r0, #2]
 8008082:	70c1      	strb	r1, [r0, #3]
 8008084:	1d03      	adds	r3, r0, #4
 8008086:	e7f1      	b.n	800806c <__exponent+0x60>

08008088 <_printf_float>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	ed2d 8b02 	vpush	{d8}
 8008090:	b08d      	sub	sp, #52	; 0x34
 8008092:	460c      	mov	r4, r1
 8008094:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008098:	4616      	mov	r6, r2
 800809a:	461f      	mov	r7, r3
 800809c:	4605      	mov	r5, r0
 800809e:	f002 ff95 	bl	800afcc <_localeconv_r>
 80080a2:	f8d0 a000 	ldr.w	sl, [r0]
 80080a6:	4650      	mov	r0, sl
 80080a8:	f7f8 f892 	bl	80001d0 <strlen>
 80080ac:	2300      	movs	r3, #0
 80080ae:	930a      	str	r3, [sp, #40]	; 0x28
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	f8d8 3000 	ldr.w	r3, [r8]
 80080b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80080bc:	3307      	adds	r3, #7
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	f103 0208 	add.w	r2, r3, #8
 80080c6:	f8c8 2000 	str.w	r2, [r8]
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80080d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080da:	9307      	str	r3, [sp, #28]
 80080dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80080e0:	ee08 0a10 	vmov	s16, r0
 80080e4:	4b9f      	ldr	r3, [pc, #636]	; (8008364 <_printf_float+0x2dc>)
 80080e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	f7f8 fd1d 	bl	8000b2c <__aeabi_dcmpun>
 80080f2:	bb88      	cbnz	r0, 8008158 <_printf_float+0xd0>
 80080f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080f8:	4b9a      	ldr	r3, [pc, #616]	; (8008364 <_printf_float+0x2dc>)
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295
 80080fe:	f7f8 fcf7 	bl	8000af0 <__aeabi_dcmple>
 8008102:	bb48      	cbnz	r0, 8008158 <_printf_float+0xd0>
 8008104:	2200      	movs	r2, #0
 8008106:	2300      	movs	r3, #0
 8008108:	4640      	mov	r0, r8
 800810a:	4649      	mov	r1, r9
 800810c:	f7f8 fce6 	bl	8000adc <__aeabi_dcmplt>
 8008110:	b110      	cbz	r0, 8008118 <_printf_float+0x90>
 8008112:	232d      	movs	r3, #45	; 0x2d
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008118:	4b93      	ldr	r3, [pc, #588]	; (8008368 <_printf_float+0x2e0>)
 800811a:	4894      	ldr	r0, [pc, #592]	; (800836c <_printf_float+0x2e4>)
 800811c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008120:	bf94      	ite	ls
 8008122:	4698      	movls	r8, r3
 8008124:	4680      	movhi	r8, r0
 8008126:	2303      	movs	r3, #3
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	9b05      	ldr	r3, [sp, #20]
 800812c:	f023 0204 	bic.w	r2, r3, #4
 8008130:	6022      	str	r2, [r4, #0]
 8008132:	f04f 0900 	mov.w	r9, #0
 8008136:	9700      	str	r7, [sp, #0]
 8008138:	4633      	mov	r3, r6
 800813a:	aa0b      	add	r2, sp, #44	; 0x2c
 800813c:	4621      	mov	r1, r4
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f9d8 	bl	80084f4 <_printf_common>
 8008144:	3001      	adds	r0, #1
 8008146:	f040 8090 	bne.w	800826a <_printf_float+0x1e2>
 800814a:	f04f 30ff 	mov.w	r0, #4294967295
 800814e:	b00d      	add	sp, #52	; 0x34
 8008150:	ecbd 8b02 	vpop	{d8}
 8008154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 fce4 	bl	8000b2c <__aeabi_dcmpun>
 8008164:	b140      	cbz	r0, 8008178 <_printf_float+0xf0>
 8008166:	464b      	mov	r3, r9
 8008168:	2b00      	cmp	r3, #0
 800816a:	bfbc      	itt	lt
 800816c:	232d      	movlt	r3, #45	; 0x2d
 800816e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008172:	487f      	ldr	r0, [pc, #508]	; (8008370 <_printf_float+0x2e8>)
 8008174:	4b7f      	ldr	r3, [pc, #508]	; (8008374 <_printf_float+0x2ec>)
 8008176:	e7d1      	b.n	800811c <_printf_float+0x94>
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800817e:	9206      	str	r2, [sp, #24]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	d13f      	bne.n	8008204 <_printf_float+0x17c>
 8008184:	2306      	movs	r3, #6
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	9b05      	ldr	r3, [sp, #20]
 800818a:	6861      	ldr	r1, [r4, #4]
 800818c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008190:	2300      	movs	r3, #0
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	ab0a      	add	r3, sp, #40	; 0x28
 8008196:	e9cd b301 	strd	fp, r3, [sp, #4]
 800819a:	ab09      	add	r3, sp, #36	; 0x24
 800819c:	ec49 8b10 	vmov	d0, r8, r9
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7ff fecd 	bl	8007f48 <__cvt>
 80081ae:	9b06      	ldr	r3, [sp, #24]
 80081b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b2:	2b47      	cmp	r3, #71	; 0x47
 80081b4:	4680      	mov	r8, r0
 80081b6:	d108      	bne.n	80081ca <_printf_float+0x142>
 80081b8:	1cc8      	adds	r0, r1, #3
 80081ba:	db02      	blt.n	80081c2 <_printf_float+0x13a>
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	4299      	cmp	r1, r3
 80081c0:	dd41      	ble.n	8008246 <_printf_float+0x1be>
 80081c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80081c6:	fa5f fb8b 	uxtb.w	fp, fp
 80081ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081ce:	d820      	bhi.n	8008212 <_printf_float+0x18a>
 80081d0:	3901      	subs	r1, #1
 80081d2:	465a      	mov	r2, fp
 80081d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081d8:	9109      	str	r1, [sp, #36]	; 0x24
 80081da:	f7ff ff17 	bl	800800c <__exponent>
 80081de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e0:	1813      	adds	r3, r2, r0
 80081e2:	2a01      	cmp	r2, #1
 80081e4:	4681      	mov	r9, r0
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	dc02      	bgt.n	80081f0 <_printf_float+0x168>
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	07d2      	lsls	r2, r2, #31
 80081ee:	d501      	bpl.n	80081f4 <_printf_float+0x16c>
 80081f0:	3301      	adds	r3, #1
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d09c      	beq.n	8008136 <_printf_float+0xae>
 80081fc:	232d      	movs	r3, #45	; 0x2d
 80081fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008202:	e798      	b.n	8008136 <_printf_float+0xae>
 8008204:	9a06      	ldr	r2, [sp, #24]
 8008206:	2a47      	cmp	r2, #71	; 0x47
 8008208:	d1be      	bne.n	8008188 <_printf_float+0x100>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1bc      	bne.n	8008188 <_printf_float+0x100>
 800820e:	2301      	movs	r3, #1
 8008210:	e7b9      	b.n	8008186 <_printf_float+0xfe>
 8008212:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008216:	d118      	bne.n	800824a <_printf_float+0x1c2>
 8008218:	2900      	cmp	r1, #0
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	dd0b      	ble.n	8008236 <_printf_float+0x1ae>
 800821e:	6121      	str	r1, [r4, #16]
 8008220:	b913      	cbnz	r3, 8008228 <_printf_float+0x1a0>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	07d0      	lsls	r0, r2, #31
 8008226:	d502      	bpl.n	800822e <_printf_float+0x1a6>
 8008228:	3301      	adds	r3, #1
 800822a:	440b      	add	r3, r1
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008230:	f04f 0900 	mov.w	r9, #0
 8008234:	e7de      	b.n	80081f4 <_printf_float+0x16c>
 8008236:	b913      	cbnz	r3, 800823e <_printf_float+0x1b6>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	07d2      	lsls	r2, r2, #31
 800823c:	d501      	bpl.n	8008242 <_printf_float+0x1ba>
 800823e:	3302      	adds	r3, #2
 8008240:	e7f4      	b.n	800822c <_printf_float+0x1a4>
 8008242:	2301      	movs	r3, #1
 8008244:	e7f2      	b.n	800822c <_printf_float+0x1a4>
 8008246:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800824a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824c:	4299      	cmp	r1, r3
 800824e:	db05      	blt.n	800825c <_printf_float+0x1d4>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	6121      	str	r1, [r4, #16]
 8008254:	07d8      	lsls	r0, r3, #31
 8008256:	d5ea      	bpl.n	800822e <_printf_float+0x1a6>
 8008258:	1c4b      	adds	r3, r1, #1
 800825a:	e7e7      	b.n	800822c <_printf_float+0x1a4>
 800825c:	2900      	cmp	r1, #0
 800825e:	bfd4      	ite	le
 8008260:	f1c1 0202 	rsble	r2, r1, #2
 8008264:	2201      	movgt	r2, #1
 8008266:	4413      	add	r3, r2
 8008268:	e7e0      	b.n	800822c <_printf_float+0x1a4>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	055a      	lsls	r2, r3, #21
 800826e:	d407      	bmi.n	8008280 <_printf_float+0x1f8>
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	4642      	mov	r2, r8
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	3001      	adds	r0, #1
 800827c:	d12c      	bne.n	80082d8 <_printf_float+0x250>
 800827e:	e764      	b.n	800814a <_printf_float+0xc2>
 8008280:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008284:	f240 80e0 	bls.w	8008448 <_printf_float+0x3c0>
 8008288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	f7f8 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008294:	2800      	cmp	r0, #0
 8008296:	d034      	beq.n	8008302 <_printf_float+0x27a>
 8008298:	4a37      	ldr	r2, [pc, #220]	; (8008378 <_printf_float+0x2f0>)
 800829a:	2301      	movs	r3, #1
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f af51 	beq.w	800814a <_printf_float+0xc2>
 80082a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ac:	429a      	cmp	r2, r3
 80082ae:	db02      	blt.n	80082b6 <_printf_float+0x22e>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	07d8      	lsls	r0, r3, #31
 80082b4:	d510      	bpl.n	80082d8 <_printf_float+0x250>
 80082b6:	ee18 3a10 	vmov	r3, s16
 80082ba:	4652      	mov	r2, sl
 80082bc:	4631      	mov	r1, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	f43f af41 	beq.w	800814a <_printf_float+0xc2>
 80082c8:	f04f 0800 	mov.w	r8, #0
 80082cc:	f104 091a 	add.w	r9, r4, #26
 80082d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d2:	3b01      	subs	r3, #1
 80082d4:	4543      	cmp	r3, r8
 80082d6:	dc09      	bgt.n	80082ec <_printf_float+0x264>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	079b      	lsls	r3, r3, #30
 80082dc:	f100 8105 	bmi.w	80084ea <_printf_float+0x462>
 80082e0:	68e0      	ldr	r0, [r4, #12]
 80082e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e4:	4298      	cmp	r0, r3
 80082e6:	bfb8      	it	lt
 80082e8:	4618      	movlt	r0, r3
 80082ea:	e730      	b.n	800814e <_printf_float+0xc6>
 80082ec:	2301      	movs	r3, #1
 80082ee:	464a      	mov	r2, r9
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	47b8      	blx	r7
 80082f6:	3001      	adds	r0, #1
 80082f8:	f43f af27 	beq.w	800814a <_printf_float+0xc2>
 80082fc:	f108 0801 	add.w	r8, r8, #1
 8008300:	e7e6      	b.n	80082d0 <_printf_float+0x248>
 8008302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	dc39      	bgt.n	800837c <_printf_float+0x2f4>
 8008308:	4a1b      	ldr	r2, [pc, #108]	; (8008378 <_printf_float+0x2f0>)
 800830a:	2301      	movs	r3, #1
 800830c:	4631      	mov	r1, r6
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	f43f af19 	beq.w	800814a <_printf_float+0xc2>
 8008318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800831c:	4313      	orrs	r3, r2
 800831e:	d102      	bne.n	8008326 <_printf_float+0x29e>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	07d9      	lsls	r1, r3, #31
 8008324:	d5d8      	bpl.n	80082d8 <_printf_float+0x250>
 8008326:	ee18 3a10 	vmov	r3, s16
 800832a:	4652      	mov	r2, sl
 800832c:	4631      	mov	r1, r6
 800832e:	4628      	mov	r0, r5
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f af09 	beq.w	800814a <_printf_float+0xc2>
 8008338:	f04f 0900 	mov.w	r9, #0
 800833c:	f104 0a1a 	add.w	sl, r4, #26
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	425b      	negs	r3, r3
 8008344:	454b      	cmp	r3, r9
 8008346:	dc01      	bgt.n	800834c <_printf_float+0x2c4>
 8008348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834a:	e792      	b.n	8008272 <_printf_float+0x1ea>
 800834c:	2301      	movs	r3, #1
 800834e:	4652      	mov	r2, sl
 8008350:	4631      	mov	r1, r6
 8008352:	4628      	mov	r0, r5
 8008354:	47b8      	blx	r7
 8008356:	3001      	adds	r0, #1
 8008358:	f43f aef7 	beq.w	800814a <_printf_float+0xc2>
 800835c:	f109 0901 	add.w	r9, r9, #1
 8008360:	e7ee      	b.n	8008340 <_printf_float+0x2b8>
 8008362:	bf00      	nop
 8008364:	7fefffff 	.word	0x7fefffff
 8008368:	0800c8e4 	.word	0x0800c8e4
 800836c:	0800c8e8 	.word	0x0800c8e8
 8008370:	0800c8f0 	.word	0x0800c8f0
 8008374:	0800c8ec 	.word	0x0800c8ec
 8008378:	0800c8f4 	.word	0x0800c8f4
 800837c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800837e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008380:	429a      	cmp	r2, r3
 8008382:	bfa8      	it	ge
 8008384:	461a      	movge	r2, r3
 8008386:	2a00      	cmp	r2, #0
 8008388:	4691      	mov	r9, r2
 800838a:	dc37      	bgt.n	80083fc <_printf_float+0x374>
 800838c:	f04f 0b00 	mov.w	fp, #0
 8008390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008394:	f104 021a 	add.w	r2, r4, #26
 8008398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	eba3 0309 	sub.w	r3, r3, r9
 80083a0:	455b      	cmp	r3, fp
 80083a2:	dc33      	bgt.n	800840c <_printf_float+0x384>
 80083a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a8:	429a      	cmp	r2, r3
 80083aa:	db3b      	blt.n	8008424 <_printf_float+0x39c>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07da      	lsls	r2, r3, #31
 80083b0:	d438      	bmi.n	8008424 <_printf_float+0x39c>
 80083b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b4:	9a05      	ldr	r2, [sp, #20]
 80083b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083b8:	1a9a      	subs	r2, r3, r2
 80083ba:	eba3 0901 	sub.w	r9, r3, r1
 80083be:	4591      	cmp	r9, r2
 80083c0:	bfa8      	it	ge
 80083c2:	4691      	movge	r9, r2
 80083c4:	f1b9 0f00 	cmp.w	r9, #0
 80083c8:	dc35      	bgt.n	8008436 <_printf_float+0x3ae>
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083d2:	f104 0a1a 	add.w	sl, r4, #26
 80083d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	eba3 0309 	sub.w	r3, r3, r9
 80083e0:	4543      	cmp	r3, r8
 80083e2:	f77f af79 	ble.w	80082d8 <_printf_float+0x250>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4652      	mov	r2, sl
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f aeaa 	beq.w	800814a <_printf_float+0xc2>
 80083f6:	f108 0801 	add.w	r8, r8, #1
 80083fa:	e7ec      	b.n	80083d6 <_printf_float+0x34e>
 80083fc:	4613      	mov	r3, r2
 80083fe:	4631      	mov	r1, r6
 8008400:	4642      	mov	r2, r8
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	d1c0      	bne.n	800838c <_printf_float+0x304>
 800840a:	e69e      	b.n	800814a <_printf_float+0xc2>
 800840c:	2301      	movs	r3, #1
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	9205      	str	r2, [sp, #20]
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f ae97 	beq.w	800814a <_printf_float+0xc2>
 800841c:	9a05      	ldr	r2, [sp, #20]
 800841e:	f10b 0b01 	add.w	fp, fp, #1
 8008422:	e7b9      	b.n	8008398 <_printf_float+0x310>
 8008424:	ee18 3a10 	vmov	r3, s16
 8008428:	4652      	mov	r2, sl
 800842a:	4631      	mov	r1, r6
 800842c:	4628      	mov	r0, r5
 800842e:	47b8      	blx	r7
 8008430:	3001      	adds	r0, #1
 8008432:	d1be      	bne.n	80083b2 <_printf_float+0x32a>
 8008434:	e689      	b.n	800814a <_printf_float+0xc2>
 8008436:	9a05      	ldr	r2, [sp, #20]
 8008438:	464b      	mov	r3, r9
 800843a:	4442      	add	r2, r8
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	d1c1      	bne.n	80083ca <_printf_float+0x342>
 8008446:	e680      	b.n	800814a <_printf_float+0xc2>
 8008448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844a:	2a01      	cmp	r2, #1
 800844c:	dc01      	bgt.n	8008452 <_printf_float+0x3ca>
 800844e:	07db      	lsls	r3, r3, #31
 8008450:	d538      	bpl.n	80084c4 <_printf_float+0x43c>
 8008452:	2301      	movs	r3, #1
 8008454:	4642      	mov	r2, r8
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f ae74 	beq.w	800814a <_printf_float+0xc2>
 8008462:	ee18 3a10 	vmov	r3, s16
 8008466:	4652      	mov	r2, sl
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f ae6b 	beq.w	800814a <_printf_float+0xc2>
 8008474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	f7f8 fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8008480:	b9d8      	cbnz	r0, 80084ba <_printf_float+0x432>
 8008482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008484:	f108 0201 	add.w	r2, r8, #1
 8008488:	3b01      	subs	r3, #1
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	d10e      	bne.n	80084b2 <_printf_float+0x42a>
 8008494:	e659      	b.n	800814a <_printf_float+0xc2>
 8008496:	2301      	movs	r3, #1
 8008498:	4652      	mov	r2, sl
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	f43f ae52 	beq.w	800814a <_printf_float+0xc2>
 80084a6:	f108 0801 	add.w	r8, r8, #1
 80084aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ac:	3b01      	subs	r3, #1
 80084ae:	4543      	cmp	r3, r8
 80084b0:	dcf1      	bgt.n	8008496 <_printf_float+0x40e>
 80084b2:	464b      	mov	r3, r9
 80084b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084b8:	e6dc      	b.n	8008274 <_printf_float+0x1ec>
 80084ba:	f04f 0800 	mov.w	r8, #0
 80084be:	f104 0a1a 	add.w	sl, r4, #26
 80084c2:	e7f2      	b.n	80084aa <_printf_float+0x422>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4642      	mov	r2, r8
 80084c8:	e7df      	b.n	800848a <_printf_float+0x402>
 80084ca:	2301      	movs	r3, #1
 80084cc:	464a      	mov	r2, r9
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f ae38 	beq.w	800814a <_printf_float+0xc2>
 80084da:	f108 0801 	add.w	r8, r8, #1
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084e2:	1a5b      	subs	r3, r3, r1
 80084e4:	4543      	cmp	r3, r8
 80084e6:	dcf0      	bgt.n	80084ca <_printf_float+0x442>
 80084e8:	e6fa      	b.n	80082e0 <_printf_float+0x258>
 80084ea:	f04f 0800 	mov.w	r8, #0
 80084ee:	f104 0919 	add.w	r9, r4, #25
 80084f2:	e7f4      	b.n	80084de <_printf_float+0x456>

080084f4 <_printf_common>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	4616      	mov	r6, r2
 80084fa:	4699      	mov	r9, r3
 80084fc:	688a      	ldr	r2, [r1, #8]
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008504:	4293      	cmp	r3, r2
 8008506:	bfb8      	it	lt
 8008508:	4613      	movlt	r3, r2
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008510:	4607      	mov	r7, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b10a      	cbz	r2, 800851a <_printf_common+0x26>
 8008516:	3301      	adds	r3, #1
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	0699      	lsls	r1, r3, #26
 800851e:	bf42      	ittt	mi
 8008520:	6833      	ldrmi	r3, [r6, #0]
 8008522:	3302      	addmi	r3, #2
 8008524:	6033      	strmi	r3, [r6, #0]
 8008526:	6825      	ldr	r5, [r4, #0]
 8008528:	f015 0506 	ands.w	r5, r5, #6
 800852c:	d106      	bne.n	800853c <_printf_common+0x48>
 800852e:	f104 0a19 	add.w	sl, r4, #25
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	6832      	ldr	r2, [r6, #0]
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	42ab      	cmp	r3, r5
 800853a:	dc26      	bgt.n	800858a <_printf_common+0x96>
 800853c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008540:	1e13      	subs	r3, r2, #0
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	bf18      	it	ne
 8008546:	2301      	movne	r3, #1
 8008548:	0692      	lsls	r2, r2, #26
 800854a:	d42b      	bmi.n	80085a4 <_printf_common+0xb0>
 800854c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008550:	4649      	mov	r1, r9
 8008552:	4638      	mov	r0, r7
 8008554:	47c0      	blx	r8
 8008556:	3001      	adds	r0, #1
 8008558:	d01e      	beq.n	8008598 <_printf_common+0xa4>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	68e5      	ldr	r5, [r4, #12]
 800855e:	6832      	ldr	r2, [r6, #0]
 8008560:	f003 0306 	and.w	r3, r3, #6
 8008564:	2b04      	cmp	r3, #4
 8008566:	bf08      	it	eq
 8008568:	1aad      	subeq	r5, r5, r2
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	bf0c      	ite	eq
 8008570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008574:	2500      	movne	r5, #0
 8008576:	4293      	cmp	r3, r2
 8008578:	bfc4      	itt	gt
 800857a:	1a9b      	subgt	r3, r3, r2
 800857c:	18ed      	addgt	r5, r5, r3
 800857e:	2600      	movs	r6, #0
 8008580:	341a      	adds	r4, #26
 8008582:	42b5      	cmp	r5, r6
 8008584:	d11a      	bne.n	80085bc <_printf_common+0xc8>
 8008586:	2000      	movs	r0, #0
 8008588:	e008      	b.n	800859c <_printf_common+0xa8>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4649      	mov	r1, r9
 8008590:	4638      	mov	r0, r7
 8008592:	47c0      	blx	r8
 8008594:	3001      	adds	r0, #1
 8008596:	d103      	bne.n	80085a0 <_printf_common+0xac>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	3501      	adds	r5, #1
 80085a2:	e7c6      	b.n	8008532 <_printf_common+0x3e>
 80085a4:	18e1      	adds	r1, r4, r3
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	2030      	movs	r0, #48	; 0x30
 80085aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085ae:	4422      	add	r2, r4
 80085b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085b8:	3302      	adds	r3, #2
 80085ba:	e7c7      	b.n	800854c <_printf_common+0x58>
 80085bc:	2301      	movs	r3, #1
 80085be:	4622      	mov	r2, r4
 80085c0:	4649      	mov	r1, r9
 80085c2:	4638      	mov	r0, r7
 80085c4:	47c0      	blx	r8
 80085c6:	3001      	adds	r0, #1
 80085c8:	d0e6      	beq.n	8008598 <_printf_common+0xa4>
 80085ca:	3601      	adds	r6, #1
 80085cc:	e7d9      	b.n	8008582 <_printf_common+0x8e>
	...

080085d0 <_printf_i>:
 80085d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	7e0f      	ldrb	r7, [r1, #24]
 80085d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085d8:	2f78      	cmp	r7, #120	; 0x78
 80085da:	4691      	mov	r9, r2
 80085dc:	4680      	mov	r8, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	469a      	mov	sl, r3
 80085e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085e6:	d807      	bhi.n	80085f8 <_printf_i+0x28>
 80085e8:	2f62      	cmp	r7, #98	; 0x62
 80085ea:	d80a      	bhi.n	8008602 <_printf_i+0x32>
 80085ec:	2f00      	cmp	r7, #0
 80085ee:	f000 80d8 	beq.w	80087a2 <_printf_i+0x1d2>
 80085f2:	2f58      	cmp	r7, #88	; 0x58
 80085f4:	f000 80a3 	beq.w	800873e <_printf_i+0x16e>
 80085f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008600:	e03a      	b.n	8008678 <_printf_i+0xa8>
 8008602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008606:	2b15      	cmp	r3, #21
 8008608:	d8f6      	bhi.n	80085f8 <_printf_i+0x28>
 800860a:	a101      	add	r1, pc, #4	; (adr r1, 8008610 <_printf_i+0x40>)
 800860c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008610:	08008669 	.word	0x08008669
 8008614:	0800867d 	.word	0x0800867d
 8008618:	080085f9 	.word	0x080085f9
 800861c:	080085f9 	.word	0x080085f9
 8008620:	080085f9 	.word	0x080085f9
 8008624:	080085f9 	.word	0x080085f9
 8008628:	0800867d 	.word	0x0800867d
 800862c:	080085f9 	.word	0x080085f9
 8008630:	080085f9 	.word	0x080085f9
 8008634:	080085f9 	.word	0x080085f9
 8008638:	080085f9 	.word	0x080085f9
 800863c:	08008789 	.word	0x08008789
 8008640:	080086ad 	.word	0x080086ad
 8008644:	0800876b 	.word	0x0800876b
 8008648:	080085f9 	.word	0x080085f9
 800864c:	080085f9 	.word	0x080085f9
 8008650:	080087ab 	.word	0x080087ab
 8008654:	080085f9 	.word	0x080085f9
 8008658:	080086ad 	.word	0x080086ad
 800865c:	080085f9 	.word	0x080085f9
 8008660:	080085f9 	.word	0x080085f9
 8008664:	08008773 	.word	0x08008773
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	602a      	str	r2, [r5, #0]
 8008670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008678:	2301      	movs	r3, #1
 800867a:	e0a3      	b.n	80087c4 <_printf_i+0x1f4>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	6829      	ldr	r1, [r5, #0]
 8008680:	0606      	lsls	r6, r0, #24
 8008682:	f101 0304 	add.w	r3, r1, #4
 8008686:	d50a      	bpl.n	800869e <_printf_i+0xce>
 8008688:	680e      	ldr	r6, [r1, #0]
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	2e00      	cmp	r6, #0
 800868e:	da03      	bge.n	8008698 <_printf_i+0xc8>
 8008690:	232d      	movs	r3, #45	; 0x2d
 8008692:	4276      	negs	r6, r6
 8008694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008698:	485e      	ldr	r0, [pc, #376]	; (8008814 <_printf_i+0x244>)
 800869a:	230a      	movs	r3, #10
 800869c:	e019      	b.n	80086d2 <_printf_i+0x102>
 800869e:	680e      	ldr	r6, [r1, #0]
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086a6:	bf18      	it	ne
 80086a8:	b236      	sxthne	r6, r6
 80086aa:	e7ef      	b.n	800868c <_printf_i+0xbc>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	6820      	ldr	r0, [r4, #0]
 80086b0:	1d19      	adds	r1, r3, #4
 80086b2:	6029      	str	r1, [r5, #0]
 80086b4:	0601      	lsls	r1, r0, #24
 80086b6:	d501      	bpl.n	80086bc <_printf_i+0xec>
 80086b8:	681e      	ldr	r6, [r3, #0]
 80086ba:	e002      	b.n	80086c2 <_printf_i+0xf2>
 80086bc:	0646      	lsls	r6, r0, #25
 80086be:	d5fb      	bpl.n	80086b8 <_printf_i+0xe8>
 80086c0:	881e      	ldrh	r6, [r3, #0]
 80086c2:	4854      	ldr	r0, [pc, #336]	; (8008814 <_printf_i+0x244>)
 80086c4:	2f6f      	cmp	r7, #111	; 0x6f
 80086c6:	bf0c      	ite	eq
 80086c8:	2308      	moveq	r3, #8
 80086ca:	230a      	movne	r3, #10
 80086cc:	2100      	movs	r1, #0
 80086ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086d2:	6865      	ldr	r5, [r4, #4]
 80086d4:	60a5      	str	r5, [r4, #8]
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	bfa2      	ittt	ge
 80086da:	6821      	ldrge	r1, [r4, #0]
 80086dc:	f021 0104 	bicge.w	r1, r1, #4
 80086e0:	6021      	strge	r1, [r4, #0]
 80086e2:	b90e      	cbnz	r6, 80086e8 <_printf_i+0x118>
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	d04d      	beq.n	8008784 <_printf_i+0x1b4>
 80086e8:	4615      	mov	r5, r2
 80086ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80086ee:	fb03 6711 	mls	r7, r3, r1, r6
 80086f2:	5dc7      	ldrb	r7, [r0, r7]
 80086f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086f8:	4637      	mov	r7, r6
 80086fa:	42bb      	cmp	r3, r7
 80086fc:	460e      	mov	r6, r1
 80086fe:	d9f4      	bls.n	80086ea <_printf_i+0x11a>
 8008700:	2b08      	cmp	r3, #8
 8008702:	d10b      	bne.n	800871c <_printf_i+0x14c>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	07de      	lsls	r6, r3, #31
 8008708:	d508      	bpl.n	800871c <_printf_i+0x14c>
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	6861      	ldr	r1, [r4, #4]
 800870e:	4299      	cmp	r1, r3
 8008710:	bfde      	ittt	le
 8008712:	2330      	movle	r3, #48	; 0x30
 8008714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800871c:	1b52      	subs	r2, r2, r5
 800871e:	6122      	str	r2, [r4, #16]
 8008720:	f8cd a000 	str.w	sl, [sp]
 8008724:	464b      	mov	r3, r9
 8008726:	aa03      	add	r2, sp, #12
 8008728:	4621      	mov	r1, r4
 800872a:	4640      	mov	r0, r8
 800872c:	f7ff fee2 	bl	80084f4 <_printf_common>
 8008730:	3001      	adds	r0, #1
 8008732:	d14c      	bne.n	80087ce <_printf_i+0x1fe>
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	b004      	add	sp, #16
 800873a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873e:	4835      	ldr	r0, [pc, #212]	; (8008814 <_printf_i+0x244>)
 8008740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008744:	6829      	ldr	r1, [r5, #0]
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	f851 6b04 	ldr.w	r6, [r1], #4
 800874c:	6029      	str	r1, [r5, #0]
 800874e:	061d      	lsls	r5, r3, #24
 8008750:	d514      	bpl.n	800877c <_printf_i+0x1ac>
 8008752:	07df      	lsls	r7, r3, #31
 8008754:	bf44      	itt	mi
 8008756:	f043 0320 	orrmi.w	r3, r3, #32
 800875a:	6023      	strmi	r3, [r4, #0]
 800875c:	b91e      	cbnz	r6, 8008766 <_printf_i+0x196>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	f023 0320 	bic.w	r3, r3, #32
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	2310      	movs	r3, #16
 8008768:	e7b0      	b.n	80086cc <_printf_i+0xfc>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	f043 0320 	orr.w	r3, r3, #32
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	2378      	movs	r3, #120	; 0x78
 8008774:	4828      	ldr	r0, [pc, #160]	; (8008818 <_printf_i+0x248>)
 8008776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800877a:	e7e3      	b.n	8008744 <_printf_i+0x174>
 800877c:	0659      	lsls	r1, r3, #25
 800877e:	bf48      	it	mi
 8008780:	b2b6      	uxthmi	r6, r6
 8008782:	e7e6      	b.n	8008752 <_printf_i+0x182>
 8008784:	4615      	mov	r5, r2
 8008786:	e7bb      	b.n	8008700 <_printf_i+0x130>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	6826      	ldr	r6, [r4, #0]
 800878c:	6961      	ldr	r1, [r4, #20]
 800878e:	1d18      	adds	r0, r3, #4
 8008790:	6028      	str	r0, [r5, #0]
 8008792:	0635      	lsls	r5, r6, #24
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	d501      	bpl.n	800879c <_printf_i+0x1cc>
 8008798:	6019      	str	r1, [r3, #0]
 800879a:	e002      	b.n	80087a2 <_printf_i+0x1d2>
 800879c:	0670      	lsls	r0, r6, #25
 800879e:	d5fb      	bpl.n	8008798 <_printf_i+0x1c8>
 80087a0:	8019      	strh	r1, [r3, #0]
 80087a2:	2300      	movs	r3, #0
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	4615      	mov	r5, r2
 80087a8:	e7ba      	b.n	8008720 <_printf_i+0x150>
 80087aa:	682b      	ldr	r3, [r5, #0]
 80087ac:	1d1a      	adds	r2, r3, #4
 80087ae:	602a      	str	r2, [r5, #0]
 80087b0:	681d      	ldr	r5, [r3, #0]
 80087b2:	6862      	ldr	r2, [r4, #4]
 80087b4:	2100      	movs	r1, #0
 80087b6:	4628      	mov	r0, r5
 80087b8:	f7f7 fd12 	bl	80001e0 <memchr>
 80087bc:	b108      	cbz	r0, 80087c2 <_printf_i+0x1f2>
 80087be:	1b40      	subs	r0, r0, r5
 80087c0:	6060      	str	r0, [r4, #4]
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	2300      	movs	r3, #0
 80087c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087cc:	e7a8      	b.n	8008720 <_printf_i+0x150>
 80087ce:	6923      	ldr	r3, [r4, #16]
 80087d0:	462a      	mov	r2, r5
 80087d2:	4649      	mov	r1, r9
 80087d4:	4640      	mov	r0, r8
 80087d6:	47d0      	blx	sl
 80087d8:	3001      	adds	r0, #1
 80087da:	d0ab      	beq.n	8008734 <_printf_i+0x164>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	079b      	lsls	r3, r3, #30
 80087e0:	d413      	bmi.n	800880a <_printf_i+0x23a>
 80087e2:	68e0      	ldr	r0, [r4, #12]
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	4298      	cmp	r0, r3
 80087e8:	bfb8      	it	lt
 80087ea:	4618      	movlt	r0, r3
 80087ec:	e7a4      	b.n	8008738 <_printf_i+0x168>
 80087ee:	2301      	movs	r3, #1
 80087f0:	4632      	mov	r2, r6
 80087f2:	4649      	mov	r1, r9
 80087f4:	4640      	mov	r0, r8
 80087f6:	47d0      	blx	sl
 80087f8:	3001      	adds	r0, #1
 80087fa:	d09b      	beq.n	8008734 <_printf_i+0x164>
 80087fc:	3501      	adds	r5, #1
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	9903      	ldr	r1, [sp, #12]
 8008802:	1a5b      	subs	r3, r3, r1
 8008804:	42ab      	cmp	r3, r5
 8008806:	dcf2      	bgt.n	80087ee <_printf_i+0x21e>
 8008808:	e7eb      	b.n	80087e2 <_printf_i+0x212>
 800880a:	2500      	movs	r5, #0
 800880c:	f104 0619 	add.w	r6, r4, #25
 8008810:	e7f5      	b.n	80087fe <_printf_i+0x22e>
 8008812:	bf00      	nop
 8008814:	0800c8f6 	.word	0x0800c8f6
 8008818:	0800c907 	.word	0x0800c907

0800881c <_scanf_float>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	b087      	sub	sp, #28
 8008822:	4617      	mov	r7, r2
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	688b      	ldr	r3, [r1, #8]
 8008828:	1e5a      	subs	r2, r3, #1
 800882a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800882e:	bf83      	ittte	hi
 8008830:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008834:	195b      	addhi	r3, r3, r5
 8008836:	9302      	strhi	r3, [sp, #8]
 8008838:	2300      	movls	r3, #0
 800883a:	bf86      	itte	hi
 800883c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008840:	608b      	strhi	r3, [r1, #8]
 8008842:	9302      	strls	r3, [sp, #8]
 8008844:	680b      	ldr	r3, [r1, #0]
 8008846:	468b      	mov	fp, r1
 8008848:	2500      	movs	r5, #0
 800884a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800884e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008852:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008856:	4680      	mov	r8, r0
 8008858:	460c      	mov	r4, r1
 800885a:	465e      	mov	r6, fp
 800885c:	46aa      	mov	sl, r5
 800885e:	46a9      	mov	r9, r5
 8008860:	9501      	str	r5, [sp, #4]
 8008862:	68a2      	ldr	r2, [r4, #8]
 8008864:	b152      	cbz	r2, 800887c <_scanf_float+0x60>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b4e      	cmp	r3, #78	; 0x4e
 800886c:	d864      	bhi.n	8008938 <_scanf_float+0x11c>
 800886e:	2b40      	cmp	r3, #64	; 0x40
 8008870:	d83c      	bhi.n	80088ec <_scanf_float+0xd0>
 8008872:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008876:	b2c8      	uxtb	r0, r1
 8008878:	280e      	cmp	r0, #14
 800887a:	d93a      	bls.n	80088f2 <_scanf_float+0xd6>
 800887c:	f1b9 0f00 	cmp.w	r9, #0
 8008880:	d003      	beq.n	800888a <_scanf_float+0x6e>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800888e:	f1ba 0f01 	cmp.w	sl, #1
 8008892:	f200 8113 	bhi.w	8008abc <_scanf_float+0x2a0>
 8008896:	455e      	cmp	r6, fp
 8008898:	f200 8105 	bhi.w	8008aa6 <_scanf_float+0x28a>
 800889c:	2501      	movs	r5, #1
 800889e:	4628      	mov	r0, r5
 80088a0:	b007      	add	sp, #28
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80088aa:	2a0d      	cmp	r2, #13
 80088ac:	d8e6      	bhi.n	800887c <_scanf_float+0x60>
 80088ae:	a101      	add	r1, pc, #4	; (adr r1, 80088b4 <_scanf_float+0x98>)
 80088b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088b4:	080089f3 	.word	0x080089f3
 80088b8:	0800887d 	.word	0x0800887d
 80088bc:	0800887d 	.word	0x0800887d
 80088c0:	0800887d 	.word	0x0800887d
 80088c4:	08008a53 	.word	0x08008a53
 80088c8:	08008a2b 	.word	0x08008a2b
 80088cc:	0800887d 	.word	0x0800887d
 80088d0:	0800887d 	.word	0x0800887d
 80088d4:	08008a01 	.word	0x08008a01
 80088d8:	0800887d 	.word	0x0800887d
 80088dc:	0800887d 	.word	0x0800887d
 80088e0:	0800887d 	.word	0x0800887d
 80088e4:	0800887d 	.word	0x0800887d
 80088e8:	080089b9 	.word	0x080089b9
 80088ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088f0:	e7db      	b.n	80088aa <_scanf_float+0x8e>
 80088f2:	290e      	cmp	r1, #14
 80088f4:	d8c2      	bhi.n	800887c <_scanf_float+0x60>
 80088f6:	a001      	add	r0, pc, #4	; (adr r0, 80088fc <_scanf_float+0xe0>)
 80088f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088fc:	080089ab 	.word	0x080089ab
 8008900:	0800887d 	.word	0x0800887d
 8008904:	080089ab 	.word	0x080089ab
 8008908:	08008a3f 	.word	0x08008a3f
 800890c:	0800887d 	.word	0x0800887d
 8008910:	08008959 	.word	0x08008959
 8008914:	08008995 	.word	0x08008995
 8008918:	08008995 	.word	0x08008995
 800891c:	08008995 	.word	0x08008995
 8008920:	08008995 	.word	0x08008995
 8008924:	08008995 	.word	0x08008995
 8008928:	08008995 	.word	0x08008995
 800892c:	08008995 	.word	0x08008995
 8008930:	08008995 	.word	0x08008995
 8008934:	08008995 	.word	0x08008995
 8008938:	2b6e      	cmp	r3, #110	; 0x6e
 800893a:	d809      	bhi.n	8008950 <_scanf_float+0x134>
 800893c:	2b60      	cmp	r3, #96	; 0x60
 800893e:	d8b2      	bhi.n	80088a6 <_scanf_float+0x8a>
 8008940:	2b54      	cmp	r3, #84	; 0x54
 8008942:	d077      	beq.n	8008a34 <_scanf_float+0x218>
 8008944:	2b59      	cmp	r3, #89	; 0x59
 8008946:	d199      	bne.n	800887c <_scanf_float+0x60>
 8008948:	2d07      	cmp	r5, #7
 800894a:	d197      	bne.n	800887c <_scanf_float+0x60>
 800894c:	2508      	movs	r5, #8
 800894e:	e029      	b.n	80089a4 <_scanf_float+0x188>
 8008950:	2b74      	cmp	r3, #116	; 0x74
 8008952:	d06f      	beq.n	8008a34 <_scanf_float+0x218>
 8008954:	2b79      	cmp	r3, #121	; 0x79
 8008956:	e7f6      	b.n	8008946 <_scanf_float+0x12a>
 8008958:	6821      	ldr	r1, [r4, #0]
 800895a:	05c8      	lsls	r0, r1, #23
 800895c:	d51a      	bpl.n	8008994 <_scanf_float+0x178>
 800895e:	9b02      	ldr	r3, [sp, #8]
 8008960:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008964:	6021      	str	r1, [r4, #0]
 8008966:	f109 0901 	add.w	r9, r9, #1
 800896a:	b11b      	cbz	r3, 8008974 <_scanf_float+0x158>
 800896c:	3b01      	subs	r3, #1
 800896e:	3201      	adds	r2, #1
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	60a2      	str	r2, [r4, #8]
 8008974:	68a3      	ldr	r3, [r4, #8]
 8008976:	3b01      	subs	r3, #1
 8008978:	60a3      	str	r3, [r4, #8]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	3301      	adds	r3, #1
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3b01      	subs	r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	607b      	str	r3, [r7, #4]
 8008988:	f340 8084 	ble.w	8008a94 <_scanf_float+0x278>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	3301      	adds	r3, #1
 8008990:	603b      	str	r3, [r7, #0]
 8008992:	e766      	b.n	8008862 <_scanf_float+0x46>
 8008994:	eb1a 0f05 	cmn.w	sl, r5
 8008998:	f47f af70 	bne.w	800887c <_scanf_float+0x60>
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	f806 3b01 	strb.w	r3, [r6], #1
 80089a8:	e7e4      	b.n	8008974 <_scanf_float+0x158>
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	0610      	lsls	r0, r2, #24
 80089ae:	f57f af65 	bpl.w	800887c <_scanf_float+0x60>
 80089b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089b6:	e7f4      	b.n	80089a2 <_scanf_float+0x186>
 80089b8:	f1ba 0f00 	cmp.w	sl, #0
 80089bc:	d10e      	bne.n	80089dc <_scanf_float+0x1c0>
 80089be:	f1b9 0f00 	cmp.w	r9, #0
 80089c2:	d10e      	bne.n	80089e2 <_scanf_float+0x1c6>
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089ce:	d108      	bne.n	80089e2 <_scanf_float+0x1c6>
 80089d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089d4:	6022      	str	r2, [r4, #0]
 80089d6:	f04f 0a01 	mov.w	sl, #1
 80089da:	e7e3      	b.n	80089a4 <_scanf_float+0x188>
 80089dc:	f1ba 0f02 	cmp.w	sl, #2
 80089e0:	d055      	beq.n	8008a8e <_scanf_float+0x272>
 80089e2:	2d01      	cmp	r5, #1
 80089e4:	d002      	beq.n	80089ec <_scanf_float+0x1d0>
 80089e6:	2d04      	cmp	r5, #4
 80089e8:	f47f af48 	bne.w	800887c <_scanf_float+0x60>
 80089ec:	3501      	adds	r5, #1
 80089ee:	b2ed      	uxtb	r5, r5
 80089f0:	e7d8      	b.n	80089a4 <_scanf_float+0x188>
 80089f2:	f1ba 0f01 	cmp.w	sl, #1
 80089f6:	f47f af41 	bne.w	800887c <_scanf_float+0x60>
 80089fa:	f04f 0a02 	mov.w	sl, #2
 80089fe:	e7d1      	b.n	80089a4 <_scanf_float+0x188>
 8008a00:	b97d      	cbnz	r5, 8008a22 <_scanf_float+0x206>
 8008a02:	f1b9 0f00 	cmp.w	r9, #0
 8008a06:	f47f af3c 	bne.w	8008882 <_scanf_float+0x66>
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a14:	f47f af39 	bne.w	800888a <_scanf_float+0x6e>
 8008a18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a1c:	6022      	str	r2, [r4, #0]
 8008a1e:	2501      	movs	r5, #1
 8008a20:	e7c0      	b.n	80089a4 <_scanf_float+0x188>
 8008a22:	2d03      	cmp	r5, #3
 8008a24:	d0e2      	beq.n	80089ec <_scanf_float+0x1d0>
 8008a26:	2d05      	cmp	r5, #5
 8008a28:	e7de      	b.n	80089e8 <_scanf_float+0x1cc>
 8008a2a:	2d02      	cmp	r5, #2
 8008a2c:	f47f af26 	bne.w	800887c <_scanf_float+0x60>
 8008a30:	2503      	movs	r5, #3
 8008a32:	e7b7      	b.n	80089a4 <_scanf_float+0x188>
 8008a34:	2d06      	cmp	r5, #6
 8008a36:	f47f af21 	bne.w	800887c <_scanf_float+0x60>
 8008a3a:	2507      	movs	r5, #7
 8008a3c:	e7b2      	b.n	80089a4 <_scanf_float+0x188>
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	0591      	lsls	r1, r2, #22
 8008a42:	f57f af1b 	bpl.w	800887c <_scanf_float+0x60>
 8008a46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a4a:	6022      	str	r2, [r4, #0]
 8008a4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a50:	e7a8      	b.n	80089a4 <_scanf_float+0x188>
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a5c:	d006      	beq.n	8008a6c <_scanf_float+0x250>
 8008a5e:	0550      	lsls	r0, r2, #21
 8008a60:	f57f af0c 	bpl.w	800887c <_scanf_float+0x60>
 8008a64:	f1b9 0f00 	cmp.w	r9, #0
 8008a68:	f43f af0f 	beq.w	800888a <_scanf_float+0x6e>
 8008a6c:	0591      	lsls	r1, r2, #22
 8008a6e:	bf58      	it	pl
 8008a70:	9901      	ldrpl	r1, [sp, #4]
 8008a72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a76:	bf58      	it	pl
 8008a78:	eba9 0101 	subpl.w	r1, r9, r1
 8008a7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a80:	bf58      	it	pl
 8008a82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a86:	6022      	str	r2, [r4, #0]
 8008a88:	f04f 0900 	mov.w	r9, #0
 8008a8c:	e78a      	b.n	80089a4 <_scanf_float+0x188>
 8008a8e:	f04f 0a03 	mov.w	sl, #3
 8008a92:	e787      	b.n	80089a4 <_scanf_float+0x188>
 8008a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	4798      	blx	r3
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f43f aedf 	beq.w	8008862 <_scanf_float+0x46>
 8008aa4:	e6ea      	b.n	800887c <_scanf_float+0x60>
 8008aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008aae:	463a      	mov	r2, r7
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4798      	blx	r3
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	e6ec      	b.n	8008896 <_scanf_float+0x7a>
 8008abc:	1e6b      	subs	r3, r5, #1
 8008abe:	2b06      	cmp	r3, #6
 8008ac0:	d825      	bhi.n	8008b0e <_scanf_float+0x2f2>
 8008ac2:	2d02      	cmp	r5, #2
 8008ac4:	d836      	bhi.n	8008b34 <_scanf_float+0x318>
 8008ac6:	455e      	cmp	r6, fp
 8008ac8:	f67f aee8 	bls.w	800889c <_scanf_float+0x80>
 8008acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ad0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ad4:	463a      	mov	r2, r7
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	4798      	blx	r3
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	e7f1      	b.n	8008ac6 <_scanf_float+0x2aa>
 8008ae2:	9802      	ldr	r0, [sp, #8]
 8008ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ae8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008aec:	9002      	str	r0, [sp, #8]
 8008aee:	463a      	mov	r2, r7
 8008af0:	4640      	mov	r0, r8
 8008af2:	4798      	blx	r3
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	6123      	str	r3, [r4, #16]
 8008afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008afe:	fa5f fa8a 	uxtb.w	sl, sl
 8008b02:	f1ba 0f02 	cmp.w	sl, #2
 8008b06:	d1ec      	bne.n	8008ae2 <_scanf_float+0x2c6>
 8008b08:	3d03      	subs	r5, #3
 8008b0a:	b2ed      	uxtb	r5, r5
 8008b0c:	1b76      	subs	r6, r6, r5
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	05da      	lsls	r2, r3, #23
 8008b12:	d52f      	bpl.n	8008b74 <_scanf_float+0x358>
 8008b14:	055b      	lsls	r3, r3, #21
 8008b16:	d510      	bpl.n	8008b3a <_scanf_float+0x31e>
 8008b18:	455e      	cmp	r6, fp
 8008b1a:	f67f aebf 	bls.w	800889c <_scanf_float+0x80>
 8008b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b26:	463a      	mov	r2, r7
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4798      	blx	r3
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	6123      	str	r3, [r4, #16]
 8008b32:	e7f1      	b.n	8008b18 <_scanf_float+0x2fc>
 8008b34:	46aa      	mov	sl, r5
 8008b36:	9602      	str	r6, [sp, #8]
 8008b38:	e7df      	b.n	8008afa <_scanf_float+0x2de>
 8008b3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	2965      	cmp	r1, #101	; 0x65
 8008b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b46:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	d00c      	beq.n	8008b68 <_scanf_float+0x34c>
 8008b4e:	2945      	cmp	r1, #69	; 0x45
 8008b50:	d00a      	beq.n	8008b68 <_scanf_float+0x34c>
 8008b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b56:	463a      	mov	r2, r7
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4798      	blx	r3
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	1eb5      	subs	r5, r6, #2
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b6c:	463a      	mov	r2, r7
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4798      	blx	r3
 8008b72:	462e      	mov	r6, r5
 8008b74:	6825      	ldr	r5, [r4, #0]
 8008b76:	f015 0510 	ands.w	r5, r5, #16
 8008b7a:	d159      	bne.n	8008c30 <_scanf_float+0x414>
 8008b7c:	7035      	strb	r5, [r6, #0]
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b88:	d11b      	bne.n	8008bc2 <_scanf_float+0x3a6>
 8008b8a:	9b01      	ldr	r3, [sp, #4]
 8008b8c:	454b      	cmp	r3, r9
 8008b8e:	eba3 0209 	sub.w	r2, r3, r9
 8008b92:	d123      	bne.n	8008bdc <_scanf_float+0x3c0>
 8008b94:	2200      	movs	r2, #0
 8008b96:	4659      	mov	r1, fp
 8008b98:	4640      	mov	r0, r8
 8008b9a:	f000 feaf 	bl	80098fc <_strtod_r>
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	f012 0f02 	tst.w	r2, #2
 8008ba6:	ec57 6b10 	vmov	r6, r7, d0
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	d021      	beq.n	8008bf2 <_scanf_float+0x3d6>
 8008bae:	9903      	ldr	r1, [sp, #12]
 8008bb0:	1d1a      	adds	r2, r3, #4
 8008bb2:	600a      	str	r2, [r1, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	e9c3 6700 	strd	r6, r7, [r3]
 8008bba:	68e3      	ldr	r3, [r4, #12]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	60e3      	str	r3, [r4, #12]
 8008bc0:	e66d      	b.n	800889e <_scanf_float+0x82>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0e5      	beq.n	8008b94 <_scanf_float+0x378>
 8008bc8:	9905      	ldr	r1, [sp, #20]
 8008bca:	230a      	movs	r3, #10
 8008bcc:	462a      	mov	r2, r5
 8008bce:	3101      	adds	r1, #1
 8008bd0:	4640      	mov	r0, r8
 8008bd2:	f000 ff1b 	bl	8009a0c <_strtol_r>
 8008bd6:	9b04      	ldr	r3, [sp, #16]
 8008bd8:	9e05      	ldr	r6, [sp, #20]
 8008bda:	1ac2      	subs	r2, r0, r3
 8008bdc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008be0:	429e      	cmp	r6, r3
 8008be2:	bf28      	it	cs
 8008be4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008be8:	4912      	ldr	r1, [pc, #72]	; (8008c34 <_scanf_float+0x418>)
 8008bea:	4630      	mov	r0, r6
 8008bec:	f000 f844 	bl	8008c78 <siprintf>
 8008bf0:	e7d0      	b.n	8008b94 <_scanf_float+0x378>
 8008bf2:	9903      	ldr	r1, [sp, #12]
 8008bf4:	f012 0f04 	tst.w	r2, #4
 8008bf8:	f103 0204 	add.w	r2, r3, #4
 8008bfc:	600a      	str	r2, [r1, #0]
 8008bfe:	d1d9      	bne.n	8008bb4 <_scanf_float+0x398>
 8008c00:	f8d3 8000 	ldr.w	r8, [r3]
 8008c04:	ee10 2a10 	vmov	r2, s0
 8008c08:	ee10 0a10 	vmov	r0, s0
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f7f7 ff8c 	bl	8000b2c <__aeabi_dcmpun>
 8008c14:	b128      	cbz	r0, 8008c22 <_scanf_float+0x406>
 8008c16:	4808      	ldr	r0, [pc, #32]	; (8008c38 <_scanf_float+0x41c>)
 8008c18:	f000 f828 	bl	8008c6c <nanf>
 8008c1c:	ed88 0a00 	vstr	s0, [r8]
 8008c20:	e7cb      	b.n	8008bba <_scanf_float+0x39e>
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 ffdf 	bl	8000be8 <__aeabi_d2f>
 8008c2a:	f8c8 0000 	str.w	r0, [r8]
 8008c2e:	e7c4      	b.n	8008bba <_scanf_float+0x39e>
 8008c30:	2500      	movs	r5, #0
 8008c32:	e634      	b.n	800889e <_scanf_float+0x82>
 8008c34:	0800c918 	.word	0x0800c918
 8008c38:	0800cd88 	.word	0x0800cd88

08008c3c <iprintf>:
 8008c3c:	b40f      	push	{r0, r1, r2, r3}
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <iprintf+0x2c>)
 8008c40:	b513      	push	{r0, r1, r4, lr}
 8008c42:	681c      	ldr	r4, [r3, #0]
 8008c44:	b124      	cbz	r4, 8008c50 <iprintf+0x14>
 8008c46:	69a3      	ldr	r3, [r4, #24]
 8008c48:	b913      	cbnz	r3, 8008c50 <iprintf+0x14>
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f001 fdb2 	bl	800a7b4 <__sinit>
 8008c50:	ab05      	add	r3, sp, #20
 8008c52:	9a04      	ldr	r2, [sp, #16]
 8008c54:	68a1      	ldr	r1, [r4, #8]
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f003 f925 	bl	800bea8 <_vfiprintf_r>
 8008c5e:	b002      	add	sp, #8
 8008c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c64:	b004      	add	sp, #16
 8008c66:	4770      	bx	lr
 8008c68:	2000000c 	.word	0x2000000c

08008c6c <nanf>:
 8008c6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008c74 <nanf+0x8>
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	7fc00000 	.word	0x7fc00000

08008c78 <siprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b500      	push	{lr}
 8008c7c:	b09c      	sub	sp, #112	; 0x70
 8008c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c80:	9002      	str	r0, [sp, #8]
 8008c82:	9006      	str	r0, [sp, #24]
 8008c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c88:	4809      	ldr	r0, [pc, #36]	; (8008cb0 <siprintf+0x38>)
 8008c8a:	9107      	str	r1, [sp, #28]
 8008c8c:	9104      	str	r1, [sp, #16]
 8008c8e:	4909      	ldr	r1, [pc, #36]	; (8008cb4 <siprintf+0x3c>)
 8008c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	6800      	ldr	r0, [r0, #0]
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	a902      	add	r1, sp, #8
 8008c9c:	f002 ffda 	bl	800bc54 <_svfiprintf_r>
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	b01c      	add	sp, #112	; 0x70
 8008ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cac:	b003      	add	sp, #12
 8008cae:	4770      	bx	lr
 8008cb0:	2000000c 	.word	0x2000000c
 8008cb4:	ffff0208 	.word	0xffff0208

08008cb8 <sulp>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4604      	mov	r4, r0
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	ec45 4b10 	vmov	d0, r4, r5
 8008cc2:	4616      	mov	r6, r2
 8008cc4:	f002 fd24 	bl	800b710 <__ulp>
 8008cc8:	ec51 0b10 	vmov	r0, r1, d0
 8008ccc:	b17e      	cbz	r6, 8008cee <sulp+0x36>
 8008cce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008cd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	dd09      	ble.n	8008cee <sulp+0x36>
 8008cda:	051b      	lsls	r3, r3, #20
 8008cdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ce0:	2400      	movs	r4, #0
 8008ce2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ce6:	4622      	mov	r2, r4
 8008ce8:	462b      	mov	r3, r5
 8008cea:	f7f7 fc85 	bl	80005f8 <__aeabi_dmul>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}

08008cf0 <_strtod_l>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	ed2d 8b02 	vpush	{d8}
 8008cf8:	b09d      	sub	sp, #116	; 0x74
 8008cfa:	461f      	mov	r7, r3
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9318      	str	r3, [sp, #96]	; 0x60
 8008d00:	4ba2      	ldr	r3, [pc, #648]	; (8008f8c <_strtod_l+0x29c>)
 8008d02:	9213      	str	r2, [sp, #76]	; 0x4c
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	9305      	str	r3, [sp, #20]
 8008d08:	4604      	mov	r4, r0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	4688      	mov	r8, r1
 8008d0e:	f7f7 fa5f 	bl	80001d0 <strlen>
 8008d12:	f04f 0a00 	mov.w	sl, #0
 8008d16:	4605      	mov	r5, r0
 8008d18:	f04f 0b00 	mov.w	fp, #0
 8008d1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	2a2b      	cmp	r2, #43	; 0x2b
 8008d26:	d04e      	beq.n	8008dc6 <_strtod_l+0xd6>
 8008d28:	d83b      	bhi.n	8008da2 <_strtod_l+0xb2>
 8008d2a:	2a0d      	cmp	r2, #13
 8008d2c:	d834      	bhi.n	8008d98 <_strtod_l+0xa8>
 8008d2e:	2a08      	cmp	r2, #8
 8008d30:	d834      	bhi.n	8008d9c <_strtod_l+0xac>
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d03e      	beq.n	8008db4 <_strtod_l+0xc4>
 8008d36:	2300      	movs	r3, #0
 8008d38:	930a      	str	r3, [sp, #40]	; 0x28
 8008d3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008d3c:	7833      	ldrb	r3, [r6, #0]
 8008d3e:	2b30      	cmp	r3, #48	; 0x30
 8008d40:	f040 80b0 	bne.w	8008ea4 <_strtod_l+0x1b4>
 8008d44:	7873      	ldrb	r3, [r6, #1]
 8008d46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d4a:	2b58      	cmp	r3, #88	; 0x58
 8008d4c:	d168      	bne.n	8008e20 <_strtod_l+0x130>
 8008d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	ab18      	add	r3, sp, #96	; 0x60
 8008d54:	9702      	str	r7, [sp, #8]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4a8d      	ldr	r2, [pc, #564]	; (8008f90 <_strtod_l+0x2a0>)
 8008d5a:	ab19      	add	r3, sp, #100	; 0x64
 8008d5c:	a917      	add	r1, sp, #92	; 0x5c
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f001 fe2c 	bl	800a9bc <__gethex>
 8008d64:	f010 0707 	ands.w	r7, r0, #7
 8008d68:	4605      	mov	r5, r0
 8008d6a:	d005      	beq.n	8008d78 <_strtod_l+0x88>
 8008d6c:	2f06      	cmp	r7, #6
 8008d6e:	d12c      	bne.n	8008dca <_strtod_l+0xda>
 8008d70:	3601      	adds	r6, #1
 8008d72:	2300      	movs	r3, #0
 8008d74:	9617      	str	r6, [sp, #92]	; 0x5c
 8008d76:	930a      	str	r3, [sp, #40]	; 0x28
 8008d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f040 8590 	bne.w	80098a0 <_strtod_l+0xbb0>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	b1eb      	cbz	r3, 8008dc0 <_strtod_l+0xd0>
 8008d84:	4652      	mov	r2, sl
 8008d86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d8a:	ec43 2b10 	vmov	d0, r2, r3
 8008d8e:	b01d      	add	sp, #116	; 0x74
 8008d90:	ecbd 8b02 	vpop	{d8}
 8008d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d98:	2a20      	cmp	r2, #32
 8008d9a:	d1cc      	bne.n	8008d36 <_strtod_l+0x46>
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008da0:	e7be      	b.n	8008d20 <_strtod_l+0x30>
 8008da2:	2a2d      	cmp	r2, #45	; 0x2d
 8008da4:	d1c7      	bne.n	8008d36 <_strtod_l+0x46>
 8008da6:	2201      	movs	r2, #1
 8008da8:	920a      	str	r2, [sp, #40]	; 0x28
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	9217      	str	r2, [sp, #92]	; 0x5c
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1c2      	bne.n	8008d3a <_strtod_l+0x4a>
 8008db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008db6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f040 856e 	bne.w	800989c <_strtod_l+0xbac>
 8008dc0:	4652      	mov	r2, sl
 8008dc2:	465b      	mov	r3, fp
 8008dc4:	e7e1      	b.n	8008d8a <_strtod_l+0x9a>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	e7ee      	b.n	8008da8 <_strtod_l+0xb8>
 8008dca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008dcc:	b13a      	cbz	r2, 8008dde <_strtod_l+0xee>
 8008dce:	2135      	movs	r1, #53	; 0x35
 8008dd0:	a81a      	add	r0, sp, #104	; 0x68
 8008dd2:	f002 fda8 	bl	800b926 <__copybits>
 8008dd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f002 f967 	bl	800b0ac <_Bfree>
 8008dde:	3f01      	subs	r7, #1
 8008de0:	2f04      	cmp	r7, #4
 8008de2:	d806      	bhi.n	8008df2 <_strtod_l+0x102>
 8008de4:	e8df f007 	tbb	[pc, r7]
 8008de8:	1714030a 	.word	0x1714030a
 8008dec:	0a          	.byte	0x0a
 8008ded:	00          	.byte	0x00
 8008dee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008df2:	0728      	lsls	r0, r5, #28
 8008df4:	d5c0      	bpl.n	8008d78 <_strtod_l+0x88>
 8008df6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008dfa:	e7bd      	b.n	8008d78 <_strtod_l+0x88>
 8008dfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008e00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e0e:	e7f0      	b.n	8008df2 <_strtod_l+0x102>
 8008e10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008f94 <_strtod_l+0x2a4>
 8008e14:	e7ed      	b.n	8008df2 <_strtod_l+0x102>
 8008e16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008e1a:	f04f 3aff 	mov.w	sl, #4294967295
 8008e1e:	e7e8      	b.n	8008df2 <_strtod_l+0x102>
 8008e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e26:	785b      	ldrb	r3, [r3, #1]
 8008e28:	2b30      	cmp	r3, #48	; 0x30
 8008e2a:	d0f9      	beq.n	8008e20 <_strtod_l+0x130>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0a3      	beq.n	8008d78 <_strtod_l+0x88>
 8008e30:	2301      	movs	r3, #1
 8008e32:	f04f 0900 	mov.w	r9, #0
 8008e36:	9304      	str	r3, [sp, #16]
 8008e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e3a:	9308      	str	r3, [sp, #32]
 8008e3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e40:	464f      	mov	r7, r9
 8008e42:	220a      	movs	r2, #10
 8008e44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008e46:	7806      	ldrb	r6, [r0, #0]
 8008e48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008e4c:	b2d9      	uxtb	r1, r3
 8008e4e:	2909      	cmp	r1, #9
 8008e50:	d92a      	bls.n	8008ea8 <_strtod_l+0x1b8>
 8008e52:	9905      	ldr	r1, [sp, #20]
 8008e54:	462a      	mov	r2, r5
 8008e56:	f003 f9b2 	bl	800c1be <strncmp>
 8008e5a:	b398      	cbz	r0, 8008ec4 <_strtod_l+0x1d4>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	4632      	mov	r2, r6
 8008e60:	463d      	mov	r5, r7
 8008e62:	9005      	str	r0, [sp, #20]
 8008e64:	4603      	mov	r3, r0
 8008e66:	2a65      	cmp	r2, #101	; 0x65
 8008e68:	d001      	beq.n	8008e6e <_strtod_l+0x17e>
 8008e6a:	2a45      	cmp	r2, #69	; 0x45
 8008e6c:	d118      	bne.n	8008ea0 <_strtod_l+0x1b0>
 8008e6e:	b91d      	cbnz	r5, 8008e78 <_strtod_l+0x188>
 8008e70:	9a04      	ldr	r2, [sp, #16]
 8008e72:	4302      	orrs	r2, r0
 8008e74:	d09e      	beq.n	8008db4 <_strtod_l+0xc4>
 8008e76:	2500      	movs	r5, #0
 8008e78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008e7c:	f108 0201 	add.w	r2, r8, #1
 8008e80:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008e86:	2a2b      	cmp	r2, #43	; 0x2b
 8008e88:	d075      	beq.n	8008f76 <_strtod_l+0x286>
 8008e8a:	2a2d      	cmp	r2, #45	; 0x2d
 8008e8c:	d07b      	beq.n	8008f86 <_strtod_l+0x296>
 8008e8e:	f04f 0c00 	mov.w	ip, #0
 8008e92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e96:	2909      	cmp	r1, #9
 8008e98:	f240 8082 	bls.w	8008fa0 <_strtod_l+0x2b0>
 8008e9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	e09d      	b.n	8008fe0 <_strtod_l+0x2f0>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	e7c4      	b.n	8008e32 <_strtod_l+0x142>
 8008ea8:	2f08      	cmp	r7, #8
 8008eaa:	bfd8      	it	le
 8008eac:	9907      	ldrle	r1, [sp, #28]
 8008eae:	f100 0001 	add.w	r0, r0, #1
 8008eb2:	bfda      	itte	le
 8008eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008eb8:	9307      	strle	r3, [sp, #28]
 8008eba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008ebe:	3701      	adds	r7, #1
 8008ec0:	9017      	str	r0, [sp, #92]	; 0x5c
 8008ec2:	e7bf      	b.n	8008e44 <_strtod_l+0x154>
 8008ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ec6:	195a      	adds	r2, r3, r5
 8008ec8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008eca:	5d5a      	ldrb	r2, [r3, r5]
 8008ecc:	2f00      	cmp	r7, #0
 8008ece:	d037      	beq.n	8008f40 <_strtod_l+0x250>
 8008ed0:	9005      	str	r0, [sp, #20]
 8008ed2:	463d      	mov	r5, r7
 8008ed4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ed8:	2b09      	cmp	r3, #9
 8008eda:	d912      	bls.n	8008f02 <_strtod_l+0x212>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e7c2      	b.n	8008e66 <_strtod_l+0x176>
 8008ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ee6:	785a      	ldrb	r2, [r3, #1]
 8008ee8:	3001      	adds	r0, #1
 8008eea:	2a30      	cmp	r2, #48	; 0x30
 8008eec:	d0f8      	beq.n	8008ee0 <_strtod_l+0x1f0>
 8008eee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ef2:	2b08      	cmp	r3, #8
 8008ef4:	f200 84d9 	bhi.w	80098aa <_strtod_l+0xbba>
 8008ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008efa:	9005      	str	r0, [sp, #20]
 8008efc:	2000      	movs	r0, #0
 8008efe:	9308      	str	r3, [sp, #32]
 8008f00:	4605      	mov	r5, r0
 8008f02:	3a30      	subs	r2, #48	; 0x30
 8008f04:	f100 0301 	add.w	r3, r0, #1
 8008f08:	d014      	beq.n	8008f34 <_strtod_l+0x244>
 8008f0a:	9905      	ldr	r1, [sp, #20]
 8008f0c:	4419      	add	r1, r3
 8008f0e:	9105      	str	r1, [sp, #20]
 8008f10:	462b      	mov	r3, r5
 8008f12:	eb00 0e05 	add.w	lr, r0, r5
 8008f16:	210a      	movs	r1, #10
 8008f18:	4573      	cmp	r3, lr
 8008f1a:	d113      	bne.n	8008f44 <_strtod_l+0x254>
 8008f1c:	182b      	adds	r3, r5, r0
 8008f1e:	2b08      	cmp	r3, #8
 8008f20:	f105 0501 	add.w	r5, r5, #1
 8008f24:	4405      	add	r5, r0
 8008f26:	dc1c      	bgt.n	8008f62 <_strtod_l+0x272>
 8008f28:	9907      	ldr	r1, [sp, #28]
 8008f2a:	230a      	movs	r3, #10
 8008f2c:	fb03 2301 	mla	r3, r3, r1, r2
 8008f30:	9307      	str	r3, [sp, #28]
 8008f32:	2300      	movs	r3, #0
 8008f34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f36:	1c51      	adds	r1, r2, #1
 8008f38:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f3a:	7852      	ldrb	r2, [r2, #1]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	e7c9      	b.n	8008ed4 <_strtod_l+0x1e4>
 8008f40:	4638      	mov	r0, r7
 8008f42:	e7d2      	b.n	8008eea <_strtod_l+0x1fa>
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	dc04      	bgt.n	8008f52 <_strtod_l+0x262>
 8008f48:	9e07      	ldr	r6, [sp, #28]
 8008f4a:	434e      	muls	r6, r1
 8008f4c:	9607      	str	r6, [sp, #28]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	e7e2      	b.n	8008f18 <_strtod_l+0x228>
 8008f52:	f103 0c01 	add.w	ip, r3, #1
 8008f56:	f1bc 0f10 	cmp.w	ip, #16
 8008f5a:	bfd8      	it	le
 8008f5c:	fb01 f909 	mulle.w	r9, r1, r9
 8008f60:	e7f5      	b.n	8008f4e <_strtod_l+0x25e>
 8008f62:	2d10      	cmp	r5, #16
 8008f64:	bfdc      	itt	le
 8008f66:	230a      	movle	r3, #10
 8008f68:	fb03 2909 	mlale	r9, r3, r9, r2
 8008f6c:	e7e1      	b.n	8008f32 <_strtod_l+0x242>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	2301      	movs	r3, #1
 8008f74:	e77c      	b.n	8008e70 <_strtod_l+0x180>
 8008f76:	f04f 0c00 	mov.w	ip, #0
 8008f7a:	f108 0202 	add.w	r2, r8, #2
 8008f7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008f84:	e785      	b.n	8008e92 <_strtod_l+0x1a2>
 8008f86:	f04f 0c01 	mov.w	ip, #1
 8008f8a:	e7f6      	b.n	8008f7a <_strtod_l+0x28a>
 8008f8c:	0800cbcc 	.word	0x0800cbcc
 8008f90:	0800c920 	.word	0x0800c920
 8008f94:	7ff00000 	.word	0x7ff00000
 8008f98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f9a:	1c51      	adds	r1, r2, #1
 8008f9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f9e:	7852      	ldrb	r2, [r2, #1]
 8008fa0:	2a30      	cmp	r2, #48	; 0x30
 8008fa2:	d0f9      	beq.n	8008f98 <_strtod_l+0x2a8>
 8008fa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008fa8:	2908      	cmp	r1, #8
 8008faa:	f63f af79 	bhi.w	8008ea0 <_strtod_l+0x1b0>
 8008fae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008fb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008fb4:	9206      	str	r2, [sp, #24]
 8008fb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008fb8:	1c51      	adds	r1, r2, #1
 8008fba:	9117      	str	r1, [sp, #92]	; 0x5c
 8008fbc:	7852      	ldrb	r2, [r2, #1]
 8008fbe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008fc2:	2e09      	cmp	r6, #9
 8008fc4:	d937      	bls.n	8009036 <_strtod_l+0x346>
 8008fc6:	9e06      	ldr	r6, [sp, #24]
 8008fc8:	1b89      	subs	r1, r1, r6
 8008fca:	2908      	cmp	r1, #8
 8008fcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008fd0:	dc02      	bgt.n	8008fd8 <_strtod_l+0x2e8>
 8008fd2:	4576      	cmp	r6, lr
 8008fd4:	bfa8      	it	ge
 8008fd6:	4676      	movge	r6, lr
 8008fd8:	f1bc 0f00 	cmp.w	ip, #0
 8008fdc:	d000      	beq.n	8008fe0 <_strtod_l+0x2f0>
 8008fde:	4276      	negs	r6, r6
 8008fe0:	2d00      	cmp	r5, #0
 8008fe2:	d14d      	bne.n	8009080 <_strtod_l+0x390>
 8008fe4:	9904      	ldr	r1, [sp, #16]
 8008fe6:	4301      	orrs	r1, r0
 8008fe8:	f47f aec6 	bne.w	8008d78 <_strtod_l+0x88>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f47f aee1 	bne.w	8008db4 <_strtod_l+0xc4>
 8008ff2:	2a69      	cmp	r2, #105	; 0x69
 8008ff4:	d027      	beq.n	8009046 <_strtod_l+0x356>
 8008ff6:	dc24      	bgt.n	8009042 <_strtod_l+0x352>
 8008ff8:	2a49      	cmp	r2, #73	; 0x49
 8008ffa:	d024      	beq.n	8009046 <_strtod_l+0x356>
 8008ffc:	2a4e      	cmp	r2, #78	; 0x4e
 8008ffe:	f47f aed9 	bne.w	8008db4 <_strtod_l+0xc4>
 8009002:	499f      	ldr	r1, [pc, #636]	; (8009280 <_strtod_l+0x590>)
 8009004:	a817      	add	r0, sp, #92	; 0x5c
 8009006:	f001 ff31 	bl	800ae6c <__match>
 800900a:	2800      	cmp	r0, #0
 800900c:	f43f aed2 	beq.w	8008db4 <_strtod_l+0xc4>
 8009010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b28      	cmp	r3, #40	; 0x28
 8009016:	d12d      	bne.n	8009074 <_strtod_l+0x384>
 8009018:	499a      	ldr	r1, [pc, #616]	; (8009284 <_strtod_l+0x594>)
 800901a:	aa1a      	add	r2, sp, #104	; 0x68
 800901c:	a817      	add	r0, sp, #92	; 0x5c
 800901e:	f001 ff39 	bl	800ae94 <__hexnan>
 8009022:	2805      	cmp	r0, #5
 8009024:	d126      	bne.n	8009074 <_strtod_l+0x384>
 8009026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009028:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800902c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009030:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009034:	e6a0      	b.n	8008d78 <_strtod_l+0x88>
 8009036:	210a      	movs	r1, #10
 8009038:	fb01 2e0e 	mla	lr, r1, lr, r2
 800903c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009040:	e7b9      	b.n	8008fb6 <_strtod_l+0x2c6>
 8009042:	2a6e      	cmp	r2, #110	; 0x6e
 8009044:	e7db      	b.n	8008ffe <_strtod_l+0x30e>
 8009046:	4990      	ldr	r1, [pc, #576]	; (8009288 <_strtod_l+0x598>)
 8009048:	a817      	add	r0, sp, #92	; 0x5c
 800904a:	f001 ff0f 	bl	800ae6c <__match>
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f aeb0 	beq.w	8008db4 <_strtod_l+0xc4>
 8009054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009056:	498d      	ldr	r1, [pc, #564]	; (800928c <_strtod_l+0x59c>)
 8009058:	3b01      	subs	r3, #1
 800905a:	a817      	add	r0, sp, #92	; 0x5c
 800905c:	9317      	str	r3, [sp, #92]	; 0x5c
 800905e:	f001 ff05 	bl	800ae6c <__match>
 8009062:	b910      	cbnz	r0, 800906a <_strtod_l+0x37a>
 8009064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009066:	3301      	adds	r3, #1
 8009068:	9317      	str	r3, [sp, #92]	; 0x5c
 800906a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800929c <_strtod_l+0x5ac>
 800906e:	f04f 0a00 	mov.w	sl, #0
 8009072:	e681      	b.n	8008d78 <_strtod_l+0x88>
 8009074:	4886      	ldr	r0, [pc, #536]	; (8009290 <_strtod_l+0x5a0>)
 8009076:	f003 f847 	bl	800c108 <nan>
 800907a:	ec5b ab10 	vmov	sl, fp, d0
 800907e:	e67b      	b.n	8008d78 <_strtod_l+0x88>
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	9807      	ldr	r0, [sp, #28]
 8009084:	1af3      	subs	r3, r6, r3
 8009086:	2f00      	cmp	r7, #0
 8009088:	bf08      	it	eq
 800908a:	462f      	moveq	r7, r5
 800908c:	2d10      	cmp	r5, #16
 800908e:	9306      	str	r3, [sp, #24]
 8009090:	46a8      	mov	r8, r5
 8009092:	bfa8      	it	ge
 8009094:	f04f 0810 	movge.w	r8, #16
 8009098:	f7f7 fa34 	bl	8000504 <__aeabi_ui2d>
 800909c:	2d09      	cmp	r5, #9
 800909e:	4682      	mov	sl, r0
 80090a0:	468b      	mov	fp, r1
 80090a2:	dd13      	ble.n	80090cc <_strtod_l+0x3dc>
 80090a4:	4b7b      	ldr	r3, [pc, #492]	; (8009294 <_strtod_l+0x5a4>)
 80090a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80090aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80090ae:	f7f7 faa3 	bl	80005f8 <__aeabi_dmul>
 80090b2:	4682      	mov	sl, r0
 80090b4:	4648      	mov	r0, r9
 80090b6:	468b      	mov	fp, r1
 80090b8:	f7f7 fa24 	bl	8000504 <__aeabi_ui2d>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4650      	mov	r0, sl
 80090c2:	4659      	mov	r1, fp
 80090c4:	f7f7 f8e2 	bl	800028c <__adddf3>
 80090c8:	4682      	mov	sl, r0
 80090ca:	468b      	mov	fp, r1
 80090cc:	2d0f      	cmp	r5, #15
 80090ce:	dc38      	bgt.n	8009142 <_strtod_l+0x452>
 80090d0:	9b06      	ldr	r3, [sp, #24]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f43f ae50 	beq.w	8008d78 <_strtod_l+0x88>
 80090d8:	dd24      	ble.n	8009124 <_strtod_l+0x434>
 80090da:	2b16      	cmp	r3, #22
 80090dc:	dc0b      	bgt.n	80090f6 <_strtod_l+0x406>
 80090de:	496d      	ldr	r1, [pc, #436]	; (8009294 <_strtod_l+0x5a4>)
 80090e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e8:	4652      	mov	r2, sl
 80090ea:	465b      	mov	r3, fp
 80090ec:	f7f7 fa84 	bl	80005f8 <__aeabi_dmul>
 80090f0:	4682      	mov	sl, r0
 80090f2:	468b      	mov	fp, r1
 80090f4:	e640      	b.n	8008d78 <_strtod_l+0x88>
 80090f6:	9a06      	ldr	r2, [sp, #24]
 80090f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80090fc:	4293      	cmp	r3, r2
 80090fe:	db20      	blt.n	8009142 <_strtod_l+0x452>
 8009100:	4c64      	ldr	r4, [pc, #400]	; (8009294 <_strtod_l+0x5a4>)
 8009102:	f1c5 050f 	rsb	r5, r5, #15
 8009106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009112:	f7f7 fa71 	bl	80005f8 <__aeabi_dmul>
 8009116:	9b06      	ldr	r3, [sp, #24]
 8009118:	1b5d      	subs	r5, r3, r5
 800911a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800911e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009122:	e7e3      	b.n	80090ec <_strtod_l+0x3fc>
 8009124:	9b06      	ldr	r3, [sp, #24]
 8009126:	3316      	adds	r3, #22
 8009128:	db0b      	blt.n	8009142 <_strtod_l+0x452>
 800912a:	9b05      	ldr	r3, [sp, #20]
 800912c:	1b9e      	subs	r6, r3, r6
 800912e:	4b59      	ldr	r3, [pc, #356]	; (8009294 <_strtod_l+0x5a4>)
 8009130:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009138:	4650      	mov	r0, sl
 800913a:	4659      	mov	r1, fp
 800913c:	f7f7 fb86 	bl	800084c <__aeabi_ddiv>
 8009140:	e7d6      	b.n	80090f0 <_strtod_l+0x400>
 8009142:	9b06      	ldr	r3, [sp, #24]
 8009144:	eba5 0808 	sub.w	r8, r5, r8
 8009148:	4498      	add	r8, r3
 800914a:	f1b8 0f00 	cmp.w	r8, #0
 800914e:	dd74      	ble.n	800923a <_strtod_l+0x54a>
 8009150:	f018 030f 	ands.w	r3, r8, #15
 8009154:	d00a      	beq.n	800916c <_strtod_l+0x47c>
 8009156:	494f      	ldr	r1, [pc, #316]	; (8009294 <_strtod_l+0x5a4>)
 8009158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800915c:	4652      	mov	r2, sl
 800915e:	465b      	mov	r3, fp
 8009160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009164:	f7f7 fa48 	bl	80005f8 <__aeabi_dmul>
 8009168:	4682      	mov	sl, r0
 800916a:	468b      	mov	fp, r1
 800916c:	f038 080f 	bics.w	r8, r8, #15
 8009170:	d04f      	beq.n	8009212 <_strtod_l+0x522>
 8009172:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009176:	dd22      	ble.n	80091be <_strtod_l+0x4ce>
 8009178:	2500      	movs	r5, #0
 800917a:	462e      	mov	r6, r5
 800917c:	9507      	str	r5, [sp, #28]
 800917e:	9505      	str	r5, [sp, #20]
 8009180:	2322      	movs	r3, #34	; 0x22
 8009182:	f8df b118 	ldr.w	fp, [pc, #280]	; 800929c <_strtod_l+0x5ac>
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	f04f 0a00 	mov.w	sl, #0
 800918c:	9b07      	ldr	r3, [sp, #28]
 800918e:	2b00      	cmp	r3, #0
 8009190:	f43f adf2 	beq.w	8008d78 <_strtod_l+0x88>
 8009194:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009196:	4620      	mov	r0, r4
 8009198:	f001 ff88 	bl	800b0ac <_Bfree>
 800919c:	9905      	ldr	r1, [sp, #20]
 800919e:	4620      	mov	r0, r4
 80091a0:	f001 ff84 	bl	800b0ac <_Bfree>
 80091a4:	4631      	mov	r1, r6
 80091a6:	4620      	mov	r0, r4
 80091a8:	f001 ff80 	bl	800b0ac <_Bfree>
 80091ac:	9907      	ldr	r1, [sp, #28]
 80091ae:	4620      	mov	r0, r4
 80091b0:	f001 ff7c 	bl	800b0ac <_Bfree>
 80091b4:	4629      	mov	r1, r5
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 ff78 	bl	800b0ac <_Bfree>
 80091bc:	e5dc      	b.n	8008d78 <_strtod_l+0x88>
 80091be:	4b36      	ldr	r3, [pc, #216]	; (8009298 <_strtod_l+0x5a8>)
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	2300      	movs	r3, #0
 80091c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80091c8:	4650      	mov	r0, sl
 80091ca:	4659      	mov	r1, fp
 80091cc:	4699      	mov	r9, r3
 80091ce:	f1b8 0f01 	cmp.w	r8, #1
 80091d2:	dc21      	bgt.n	8009218 <_strtod_l+0x528>
 80091d4:	b10b      	cbz	r3, 80091da <_strtod_l+0x4ea>
 80091d6:	4682      	mov	sl, r0
 80091d8:	468b      	mov	fp, r1
 80091da:	4b2f      	ldr	r3, [pc, #188]	; (8009298 <_strtod_l+0x5a8>)
 80091dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80091e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80091e4:	4652      	mov	r2, sl
 80091e6:	465b      	mov	r3, fp
 80091e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80091ec:	f7f7 fa04 	bl	80005f8 <__aeabi_dmul>
 80091f0:	4b2a      	ldr	r3, [pc, #168]	; (800929c <_strtod_l+0x5ac>)
 80091f2:	460a      	mov	r2, r1
 80091f4:	400b      	ands	r3, r1
 80091f6:	492a      	ldr	r1, [pc, #168]	; (80092a0 <_strtod_l+0x5b0>)
 80091f8:	428b      	cmp	r3, r1
 80091fa:	4682      	mov	sl, r0
 80091fc:	d8bc      	bhi.n	8009178 <_strtod_l+0x488>
 80091fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009202:	428b      	cmp	r3, r1
 8009204:	bf86      	itte	hi
 8009206:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80092a4 <_strtod_l+0x5b4>
 800920a:	f04f 3aff 	movhi.w	sl, #4294967295
 800920e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009212:	2300      	movs	r3, #0
 8009214:	9304      	str	r3, [sp, #16]
 8009216:	e084      	b.n	8009322 <_strtod_l+0x632>
 8009218:	f018 0f01 	tst.w	r8, #1
 800921c:	d005      	beq.n	800922a <_strtod_l+0x53a>
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f7 f9e8 	bl	80005f8 <__aeabi_dmul>
 8009228:	2301      	movs	r3, #1
 800922a:	9a04      	ldr	r2, [sp, #16]
 800922c:	3208      	adds	r2, #8
 800922e:	f109 0901 	add.w	r9, r9, #1
 8009232:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009236:	9204      	str	r2, [sp, #16]
 8009238:	e7c9      	b.n	80091ce <_strtod_l+0x4de>
 800923a:	d0ea      	beq.n	8009212 <_strtod_l+0x522>
 800923c:	f1c8 0800 	rsb	r8, r8, #0
 8009240:	f018 020f 	ands.w	r2, r8, #15
 8009244:	d00a      	beq.n	800925c <_strtod_l+0x56c>
 8009246:	4b13      	ldr	r3, [pc, #76]	; (8009294 <_strtod_l+0x5a4>)
 8009248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800924c:	4650      	mov	r0, sl
 800924e:	4659      	mov	r1, fp
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 fafa 	bl	800084c <__aeabi_ddiv>
 8009258:	4682      	mov	sl, r0
 800925a:	468b      	mov	fp, r1
 800925c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009260:	d0d7      	beq.n	8009212 <_strtod_l+0x522>
 8009262:	f1b8 0f1f 	cmp.w	r8, #31
 8009266:	dd1f      	ble.n	80092a8 <_strtod_l+0x5b8>
 8009268:	2500      	movs	r5, #0
 800926a:	462e      	mov	r6, r5
 800926c:	9507      	str	r5, [sp, #28]
 800926e:	9505      	str	r5, [sp, #20]
 8009270:	2322      	movs	r3, #34	; 0x22
 8009272:	f04f 0a00 	mov.w	sl, #0
 8009276:	f04f 0b00 	mov.w	fp, #0
 800927a:	6023      	str	r3, [r4, #0]
 800927c:	e786      	b.n	800918c <_strtod_l+0x49c>
 800927e:	bf00      	nop
 8009280:	0800c8f1 	.word	0x0800c8f1
 8009284:	0800c934 	.word	0x0800c934
 8009288:	0800c8e9 	.word	0x0800c8e9
 800928c:	0800ca74 	.word	0x0800ca74
 8009290:	0800cd88 	.word	0x0800cd88
 8009294:	0800cc68 	.word	0x0800cc68
 8009298:	0800cc40 	.word	0x0800cc40
 800929c:	7ff00000 	.word	0x7ff00000
 80092a0:	7ca00000 	.word	0x7ca00000
 80092a4:	7fefffff 	.word	0x7fefffff
 80092a8:	f018 0310 	ands.w	r3, r8, #16
 80092ac:	bf18      	it	ne
 80092ae:	236a      	movne	r3, #106	; 0x6a
 80092b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009660 <_strtod_l+0x970>
 80092b4:	9304      	str	r3, [sp, #16]
 80092b6:	4650      	mov	r0, sl
 80092b8:	4659      	mov	r1, fp
 80092ba:	2300      	movs	r3, #0
 80092bc:	f018 0f01 	tst.w	r8, #1
 80092c0:	d004      	beq.n	80092cc <_strtod_l+0x5dc>
 80092c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80092c6:	f7f7 f997 	bl	80005f8 <__aeabi_dmul>
 80092ca:	2301      	movs	r3, #1
 80092cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80092d0:	f109 0908 	add.w	r9, r9, #8
 80092d4:	d1f2      	bne.n	80092bc <_strtod_l+0x5cc>
 80092d6:	b10b      	cbz	r3, 80092dc <_strtod_l+0x5ec>
 80092d8:	4682      	mov	sl, r0
 80092da:	468b      	mov	fp, r1
 80092dc:	9b04      	ldr	r3, [sp, #16]
 80092de:	b1c3      	cbz	r3, 8009312 <_strtod_l+0x622>
 80092e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80092e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	4659      	mov	r1, fp
 80092ec:	dd11      	ble.n	8009312 <_strtod_l+0x622>
 80092ee:	2b1f      	cmp	r3, #31
 80092f0:	f340 8124 	ble.w	800953c <_strtod_l+0x84c>
 80092f4:	2b34      	cmp	r3, #52	; 0x34
 80092f6:	bfde      	ittt	le
 80092f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80092fc:	f04f 33ff 	movle.w	r3, #4294967295
 8009300:	fa03 f202 	lslle.w	r2, r3, r2
 8009304:	f04f 0a00 	mov.w	sl, #0
 8009308:	bfcc      	ite	gt
 800930a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800930e:	ea02 0b01 	andle.w	fp, r2, r1
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	4650      	mov	r0, sl
 8009318:	4659      	mov	r1, fp
 800931a:	f7f7 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800931e:	2800      	cmp	r0, #0
 8009320:	d1a2      	bne.n	8009268 <_strtod_l+0x578>
 8009322:	9b07      	ldr	r3, [sp, #28]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	9908      	ldr	r1, [sp, #32]
 8009328:	462b      	mov	r3, r5
 800932a:	463a      	mov	r2, r7
 800932c:	4620      	mov	r0, r4
 800932e:	f001 ff25 	bl	800b17c <__s2b>
 8009332:	9007      	str	r0, [sp, #28]
 8009334:	2800      	cmp	r0, #0
 8009336:	f43f af1f 	beq.w	8009178 <_strtod_l+0x488>
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	1b9e      	subs	r6, r3, r6
 800933e:	9b06      	ldr	r3, [sp, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	bfb4      	ite	lt
 8009344:	4633      	movlt	r3, r6
 8009346:	2300      	movge	r3, #0
 8009348:	930c      	str	r3, [sp, #48]	; 0x30
 800934a:	9b06      	ldr	r3, [sp, #24]
 800934c:	2500      	movs	r5, #0
 800934e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009352:	9312      	str	r3, [sp, #72]	; 0x48
 8009354:	462e      	mov	r6, r5
 8009356:	9b07      	ldr	r3, [sp, #28]
 8009358:	4620      	mov	r0, r4
 800935a:	6859      	ldr	r1, [r3, #4]
 800935c:	f001 fe66 	bl	800b02c <_Balloc>
 8009360:	9005      	str	r0, [sp, #20]
 8009362:	2800      	cmp	r0, #0
 8009364:	f43f af0c 	beq.w	8009180 <_strtod_l+0x490>
 8009368:	9b07      	ldr	r3, [sp, #28]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	3202      	adds	r2, #2
 800936e:	f103 010c 	add.w	r1, r3, #12
 8009372:	0092      	lsls	r2, r2, #2
 8009374:	300c      	adds	r0, #12
 8009376:	f001 fe4b 	bl	800b010 <memcpy>
 800937a:	ec4b ab10 	vmov	d0, sl, fp
 800937e:	aa1a      	add	r2, sp, #104	; 0x68
 8009380:	a919      	add	r1, sp, #100	; 0x64
 8009382:	4620      	mov	r0, r4
 8009384:	f002 fa40 	bl	800b808 <__d2b>
 8009388:	ec4b ab18 	vmov	d8, sl, fp
 800938c:	9018      	str	r0, [sp, #96]	; 0x60
 800938e:	2800      	cmp	r0, #0
 8009390:	f43f aef6 	beq.w	8009180 <_strtod_l+0x490>
 8009394:	2101      	movs	r1, #1
 8009396:	4620      	mov	r0, r4
 8009398:	f001 ff8a 	bl	800b2b0 <__i2b>
 800939c:	4606      	mov	r6, r0
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f aeee 	beq.w	8009180 <_strtod_l+0x490>
 80093a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093a6:	9904      	ldr	r1, [sp, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	bfab      	itete	ge
 80093ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80093ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80093b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80093b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80093b6:	bfac      	ite	ge
 80093b8:	eb03 0902 	addge.w	r9, r3, r2
 80093bc:	1ad7      	sublt	r7, r2, r3
 80093be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093c0:	eba3 0801 	sub.w	r8, r3, r1
 80093c4:	4490      	add	r8, r2
 80093c6:	4ba1      	ldr	r3, [pc, #644]	; (800964c <_strtod_l+0x95c>)
 80093c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80093cc:	4598      	cmp	r8, r3
 80093ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80093d2:	f280 80c7 	bge.w	8009564 <_strtod_l+0x874>
 80093d6:	eba3 0308 	sub.w	r3, r3, r8
 80093da:	2b1f      	cmp	r3, #31
 80093dc:	eba2 0203 	sub.w	r2, r2, r3
 80093e0:	f04f 0101 	mov.w	r1, #1
 80093e4:	f300 80b1 	bgt.w	800954a <_strtod_l+0x85a>
 80093e8:	fa01 f303 	lsl.w	r3, r1, r3
 80093ec:	930d      	str	r3, [sp, #52]	; 0x34
 80093ee:	2300      	movs	r3, #0
 80093f0:	9308      	str	r3, [sp, #32]
 80093f2:	eb09 0802 	add.w	r8, r9, r2
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	45c1      	cmp	r9, r8
 80093fa:	4417      	add	r7, r2
 80093fc:	441f      	add	r7, r3
 80093fe:	464b      	mov	r3, r9
 8009400:	bfa8      	it	ge
 8009402:	4643      	movge	r3, r8
 8009404:	42bb      	cmp	r3, r7
 8009406:	bfa8      	it	ge
 8009408:	463b      	movge	r3, r7
 800940a:	2b00      	cmp	r3, #0
 800940c:	bfc2      	ittt	gt
 800940e:	eba8 0803 	subgt.w	r8, r8, r3
 8009412:	1aff      	subgt	r7, r7, r3
 8009414:	eba9 0903 	subgt.w	r9, r9, r3
 8009418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd17      	ble.n	800944e <_strtod_l+0x75e>
 800941e:	4631      	mov	r1, r6
 8009420:	461a      	mov	r2, r3
 8009422:	4620      	mov	r0, r4
 8009424:	f002 f804 	bl	800b430 <__pow5mult>
 8009428:	4606      	mov	r6, r0
 800942a:	2800      	cmp	r0, #0
 800942c:	f43f aea8 	beq.w	8009180 <_strtod_l+0x490>
 8009430:	4601      	mov	r1, r0
 8009432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009434:	4620      	mov	r0, r4
 8009436:	f001 ff51 	bl	800b2dc <__multiply>
 800943a:	900b      	str	r0, [sp, #44]	; 0x2c
 800943c:	2800      	cmp	r0, #0
 800943e:	f43f ae9f 	beq.w	8009180 <_strtod_l+0x490>
 8009442:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009444:	4620      	mov	r0, r4
 8009446:	f001 fe31 	bl	800b0ac <_Bfree>
 800944a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944c:	9318      	str	r3, [sp, #96]	; 0x60
 800944e:	f1b8 0f00 	cmp.w	r8, #0
 8009452:	f300 808c 	bgt.w	800956e <_strtod_l+0x87e>
 8009456:	9b06      	ldr	r3, [sp, #24]
 8009458:	2b00      	cmp	r3, #0
 800945a:	dd08      	ble.n	800946e <_strtod_l+0x77e>
 800945c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800945e:	9905      	ldr	r1, [sp, #20]
 8009460:	4620      	mov	r0, r4
 8009462:	f001 ffe5 	bl	800b430 <__pow5mult>
 8009466:	9005      	str	r0, [sp, #20]
 8009468:	2800      	cmp	r0, #0
 800946a:	f43f ae89 	beq.w	8009180 <_strtod_l+0x490>
 800946e:	2f00      	cmp	r7, #0
 8009470:	dd08      	ble.n	8009484 <_strtod_l+0x794>
 8009472:	9905      	ldr	r1, [sp, #20]
 8009474:	463a      	mov	r2, r7
 8009476:	4620      	mov	r0, r4
 8009478:	f002 f834 	bl	800b4e4 <__lshift>
 800947c:	9005      	str	r0, [sp, #20]
 800947e:	2800      	cmp	r0, #0
 8009480:	f43f ae7e 	beq.w	8009180 <_strtod_l+0x490>
 8009484:	f1b9 0f00 	cmp.w	r9, #0
 8009488:	dd08      	ble.n	800949c <_strtod_l+0x7ac>
 800948a:	4631      	mov	r1, r6
 800948c:	464a      	mov	r2, r9
 800948e:	4620      	mov	r0, r4
 8009490:	f002 f828 	bl	800b4e4 <__lshift>
 8009494:	4606      	mov	r6, r0
 8009496:	2800      	cmp	r0, #0
 8009498:	f43f ae72 	beq.w	8009180 <_strtod_l+0x490>
 800949c:	9a05      	ldr	r2, [sp, #20]
 800949e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094a0:	4620      	mov	r0, r4
 80094a2:	f002 f8ab 	bl	800b5fc <__mdiff>
 80094a6:	4605      	mov	r5, r0
 80094a8:	2800      	cmp	r0, #0
 80094aa:	f43f ae69 	beq.w	8009180 <_strtod_l+0x490>
 80094ae:	68c3      	ldr	r3, [r0, #12]
 80094b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80094b2:	2300      	movs	r3, #0
 80094b4:	60c3      	str	r3, [r0, #12]
 80094b6:	4631      	mov	r1, r6
 80094b8:	f002 f884 	bl	800b5c4 <__mcmp>
 80094bc:	2800      	cmp	r0, #0
 80094be:	da60      	bge.n	8009582 <_strtod_l+0x892>
 80094c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c2:	ea53 030a 	orrs.w	r3, r3, sl
 80094c6:	f040 8082 	bne.w	80095ce <_strtod_l+0x8de>
 80094ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d17d      	bne.n	80095ce <_strtod_l+0x8de>
 80094d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094d6:	0d1b      	lsrs	r3, r3, #20
 80094d8:	051b      	lsls	r3, r3, #20
 80094da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80094de:	d976      	bls.n	80095ce <_strtod_l+0x8de>
 80094e0:	696b      	ldr	r3, [r5, #20]
 80094e2:	b913      	cbnz	r3, 80094ea <_strtod_l+0x7fa>
 80094e4:	692b      	ldr	r3, [r5, #16]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	dd71      	ble.n	80095ce <_strtod_l+0x8de>
 80094ea:	4629      	mov	r1, r5
 80094ec:	2201      	movs	r2, #1
 80094ee:	4620      	mov	r0, r4
 80094f0:	f001 fff8 	bl	800b4e4 <__lshift>
 80094f4:	4631      	mov	r1, r6
 80094f6:	4605      	mov	r5, r0
 80094f8:	f002 f864 	bl	800b5c4 <__mcmp>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	dd66      	ble.n	80095ce <_strtod_l+0x8de>
 8009500:	9904      	ldr	r1, [sp, #16]
 8009502:	4a53      	ldr	r2, [pc, #332]	; (8009650 <_strtod_l+0x960>)
 8009504:	465b      	mov	r3, fp
 8009506:	2900      	cmp	r1, #0
 8009508:	f000 8081 	beq.w	800960e <_strtod_l+0x91e>
 800950c:	ea02 010b 	and.w	r1, r2, fp
 8009510:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009514:	dc7b      	bgt.n	800960e <_strtod_l+0x91e>
 8009516:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800951a:	f77f aea9 	ble.w	8009270 <_strtod_l+0x580>
 800951e:	4b4d      	ldr	r3, [pc, #308]	; (8009654 <_strtod_l+0x964>)
 8009520:	4650      	mov	r0, sl
 8009522:	4659      	mov	r1, fp
 8009524:	2200      	movs	r2, #0
 8009526:	f7f7 f867 	bl	80005f8 <__aeabi_dmul>
 800952a:	460b      	mov	r3, r1
 800952c:	4303      	orrs	r3, r0
 800952e:	bf08      	it	eq
 8009530:	2322      	moveq	r3, #34	; 0x22
 8009532:	4682      	mov	sl, r0
 8009534:	468b      	mov	fp, r1
 8009536:	bf08      	it	eq
 8009538:	6023      	streq	r3, [r4, #0]
 800953a:	e62b      	b.n	8009194 <_strtod_l+0x4a4>
 800953c:	f04f 32ff 	mov.w	r2, #4294967295
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	ea03 0a0a 	and.w	sl, r3, sl
 8009548:	e6e3      	b.n	8009312 <_strtod_l+0x622>
 800954a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800954e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009552:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009556:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800955a:	fa01 f308 	lsl.w	r3, r1, r8
 800955e:	9308      	str	r3, [sp, #32]
 8009560:	910d      	str	r1, [sp, #52]	; 0x34
 8009562:	e746      	b.n	80093f2 <_strtod_l+0x702>
 8009564:	2300      	movs	r3, #0
 8009566:	9308      	str	r3, [sp, #32]
 8009568:	2301      	movs	r3, #1
 800956a:	930d      	str	r3, [sp, #52]	; 0x34
 800956c:	e741      	b.n	80093f2 <_strtod_l+0x702>
 800956e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009570:	4642      	mov	r2, r8
 8009572:	4620      	mov	r0, r4
 8009574:	f001 ffb6 	bl	800b4e4 <__lshift>
 8009578:	9018      	str	r0, [sp, #96]	; 0x60
 800957a:	2800      	cmp	r0, #0
 800957c:	f47f af6b 	bne.w	8009456 <_strtod_l+0x766>
 8009580:	e5fe      	b.n	8009180 <_strtod_l+0x490>
 8009582:	465f      	mov	r7, fp
 8009584:	d16e      	bne.n	8009664 <_strtod_l+0x974>
 8009586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800958c:	b342      	cbz	r2, 80095e0 <_strtod_l+0x8f0>
 800958e:	4a32      	ldr	r2, [pc, #200]	; (8009658 <_strtod_l+0x968>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d128      	bne.n	80095e6 <_strtod_l+0x8f6>
 8009594:	9b04      	ldr	r3, [sp, #16]
 8009596:	4651      	mov	r1, sl
 8009598:	b1eb      	cbz	r3, 80095d6 <_strtod_l+0x8e6>
 800959a:	4b2d      	ldr	r3, [pc, #180]	; (8009650 <_strtod_l+0x960>)
 800959c:	403b      	ands	r3, r7
 800959e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095a2:	f04f 32ff 	mov.w	r2, #4294967295
 80095a6:	d819      	bhi.n	80095dc <_strtod_l+0x8ec>
 80095a8:	0d1b      	lsrs	r3, r3, #20
 80095aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095ae:	fa02 f303 	lsl.w	r3, r2, r3
 80095b2:	4299      	cmp	r1, r3
 80095b4:	d117      	bne.n	80095e6 <_strtod_l+0x8f6>
 80095b6:	4b29      	ldr	r3, [pc, #164]	; (800965c <_strtod_l+0x96c>)
 80095b8:	429f      	cmp	r7, r3
 80095ba:	d102      	bne.n	80095c2 <_strtod_l+0x8d2>
 80095bc:	3101      	adds	r1, #1
 80095be:	f43f addf 	beq.w	8009180 <_strtod_l+0x490>
 80095c2:	4b23      	ldr	r3, [pc, #140]	; (8009650 <_strtod_l+0x960>)
 80095c4:	403b      	ands	r3, r7
 80095c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80095ca:	f04f 0a00 	mov.w	sl, #0
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1a4      	bne.n	800951e <_strtod_l+0x82e>
 80095d4:	e5de      	b.n	8009194 <_strtod_l+0x4a4>
 80095d6:	f04f 33ff 	mov.w	r3, #4294967295
 80095da:	e7ea      	b.n	80095b2 <_strtod_l+0x8c2>
 80095dc:	4613      	mov	r3, r2
 80095de:	e7e8      	b.n	80095b2 <_strtod_l+0x8c2>
 80095e0:	ea53 030a 	orrs.w	r3, r3, sl
 80095e4:	d08c      	beq.n	8009500 <_strtod_l+0x810>
 80095e6:	9b08      	ldr	r3, [sp, #32]
 80095e8:	b1db      	cbz	r3, 8009622 <_strtod_l+0x932>
 80095ea:	423b      	tst	r3, r7
 80095ec:	d0ef      	beq.n	80095ce <_strtod_l+0x8de>
 80095ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f0:	9a04      	ldr	r2, [sp, #16]
 80095f2:	4650      	mov	r0, sl
 80095f4:	4659      	mov	r1, fp
 80095f6:	b1c3      	cbz	r3, 800962a <_strtod_l+0x93a>
 80095f8:	f7ff fb5e 	bl	8008cb8 <sulp>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	ec51 0b18 	vmov	r0, r1, d8
 8009604:	f7f6 fe42 	bl	800028c <__adddf3>
 8009608:	4682      	mov	sl, r0
 800960a:	468b      	mov	fp, r1
 800960c:	e7df      	b.n	80095ce <_strtod_l+0x8de>
 800960e:	4013      	ands	r3, r2
 8009610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009614:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800961c:	f04f 3aff 	mov.w	sl, #4294967295
 8009620:	e7d5      	b.n	80095ce <_strtod_l+0x8de>
 8009622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009624:	ea13 0f0a 	tst.w	r3, sl
 8009628:	e7e0      	b.n	80095ec <_strtod_l+0x8fc>
 800962a:	f7ff fb45 	bl	8008cb8 <sulp>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	ec51 0b18 	vmov	r0, r1, d8
 8009636:	f7f6 fe27 	bl	8000288 <__aeabi_dsub>
 800963a:	2200      	movs	r2, #0
 800963c:	2300      	movs	r3, #0
 800963e:	4682      	mov	sl, r0
 8009640:	468b      	mov	fp, r1
 8009642:	f7f7 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009646:	2800      	cmp	r0, #0
 8009648:	d0c1      	beq.n	80095ce <_strtod_l+0x8de>
 800964a:	e611      	b.n	8009270 <_strtod_l+0x580>
 800964c:	fffffc02 	.word	0xfffffc02
 8009650:	7ff00000 	.word	0x7ff00000
 8009654:	39500000 	.word	0x39500000
 8009658:	000fffff 	.word	0x000fffff
 800965c:	7fefffff 	.word	0x7fefffff
 8009660:	0800c948 	.word	0x0800c948
 8009664:	4631      	mov	r1, r6
 8009666:	4628      	mov	r0, r5
 8009668:	f002 f92a 	bl	800b8c0 <__ratio>
 800966c:	ec59 8b10 	vmov	r8, r9, d0
 8009670:	ee10 0a10 	vmov	r0, s0
 8009674:	2200      	movs	r2, #0
 8009676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800967a:	4649      	mov	r1, r9
 800967c:	f7f7 fa38 	bl	8000af0 <__aeabi_dcmple>
 8009680:	2800      	cmp	r0, #0
 8009682:	d07a      	beq.n	800977a <_strtod_l+0xa8a>
 8009684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d04a      	beq.n	8009720 <_strtod_l+0xa30>
 800968a:	4b95      	ldr	r3, [pc, #596]	; (80098e0 <_strtod_l+0xbf0>)
 800968c:	2200      	movs	r2, #0
 800968e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009692:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80098e0 <_strtod_l+0xbf0>
 8009696:	f04f 0800 	mov.w	r8, #0
 800969a:	4b92      	ldr	r3, [pc, #584]	; (80098e4 <_strtod_l+0xbf4>)
 800969c:	403b      	ands	r3, r7
 800969e:	930d      	str	r3, [sp, #52]	; 0x34
 80096a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096a2:	4b91      	ldr	r3, [pc, #580]	; (80098e8 <_strtod_l+0xbf8>)
 80096a4:	429a      	cmp	r2, r3
 80096a6:	f040 80b0 	bne.w	800980a <_strtod_l+0xb1a>
 80096aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80096b2:	ec4b ab10 	vmov	d0, sl, fp
 80096b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80096ba:	f002 f829 	bl	800b710 <__ulp>
 80096be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096c2:	ec53 2b10 	vmov	r2, r3, d0
 80096c6:	f7f6 ff97 	bl	80005f8 <__aeabi_dmul>
 80096ca:	4652      	mov	r2, sl
 80096cc:	465b      	mov	r3, fp
 80096ce:	f7f6 fddd 	bl	800028c <__adddf3>
 80096d2:	460b      	mov	r3, r1
 80096d4:	4983      	ldr	r1, [pc, #524]	; (80098e4 <_strtod_l+0xbf4>)
 80096d6:	4a85      	ldr	r2, [pc, #532]	; (80098ec <_strtod_l+0xbfc>)
 80096d8:	4019      	ands	r1, r3
 80096da:	4291      	cmp	r1, r2
 80096dc:	4682      	mov	sl, r0
 80096de:	d960      	bls.n	80097a2 <_strtod_l+0xab2>
 80096e0:	ee18 3a90 	vmov	r3, s17
 80096e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d104      	bne.n	80096f6 <_strtod_l+0xa06>
 80096ec:	ee18 3a10 	vmov	r3, s16
 80096f0:	3301      	adds	r3, #1
 80096f2:	f43f ad45 	beq.w	8009180 <_strtod_l+0x490>
 80096f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80098f8 <_strtod_l+0xc08>
 80096fa:	f04f 3aff 	mov.w	sl, #4294967295
 80096fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009700:	4620      	mov	r0, r4
 8009702:	f001 fcd3 	bl	800b0ac <_Bfree>
 8009706:	9905      	ldr	r1, [sp, #20]
 8009708:	4620      	mov	r0, r4
 800970a:	f001 fccf 	bl	800b0ac <_Bfree>
 800970e:	4631      	mov	r1, r6
 8009710:	4620      	mov	r0, r4
 8009712:	f001 fccb 	bl	800b0ac <_Bfree>
 8009716:	4629      	mov	r1, r5
 8009718:	4620      	mov	r0, r4
 800971a:	f001 fcc7 	bl	800b0ac <_Bfree>
 800971e:	e61a      	b.n	8009356 <_strtod_l+0x666>
 8009720:	f1ba 0f00 	cmp.w	sl, #0
 8009724:	d11b      	bne.n	800975e <_strtod_l+0xa6e>
 8009726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800972a:	b9f3      	cbnz	r3, 800976a <_strtod_l+0xa7a>
 800972c:	4b6c      	ldr	r3, [pc, #432]	; (80098e0 <_strtod_l+0xbf0>)
 800972e:	2200      	movs	r2, #0
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	f7f7 f9d2 	bl	8000adc <__aeabi_dcmplt>
 8009738:	b9d0      	cbnz	r0, 8009770 <_strtod_l+0xa80>
 800973a:	4640      	mov	r0, r8
 800973c:	4649      	mov	r1, r9
 800973e:	4b6c      	ldr	r3, [pc, #432]	; (80098f0 <_strtod_l+0xc00>)
 8009740:	2200      	movs	r2, #0
 8009742:	f7f6 ff59 	bl	80005f8 <__aeabi_dmul>
 8009746:	4680      	mov	r8, r0
 8009748:	4689      	mov	r9, r1
 800974a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800974e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009752:	9315      	str	r3, [sp, #84]	; 0x54
 8009754:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009758:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800975c:	e79d      	b.n	800969a <_strtod_l+0x9aa>
 800975e:	f1ba 0f01 	cmp.w	sl, #1
 8009762:	d102      	bne.n	800976a <_strtod_l+0xa7a>
 8009764:	2f00      	cmp	r7, #0
 8009766:	f43f ad83 	beq.w	8009270 <_strtod_l+0x580>
 800976a:	4b62      	ldr	r3, [pc, #392]	; (80098f4 <_strtod_l+0xc04>)
 800976c:	2200      	movs	r2, #0
 800976e:	e78e      	b.n	800968e <_strtod_l+0x99e>
 8009770:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80098f0 <_strtod_l+0xc00>
 8009774:	f04f 0800 	mov.w	r8, #0
 8009778:	e7e7      	b.n	800974a <_strtod_l+0xa5a>
 800977a:	4b5d      	ldr	r3, [pc, #372]	; (80098f0 <_strtod_l+0xc00>)
 800977c:	4640      	mov	r0, r8
 800977e:	4649      	mov	r1, r9
 8009780:	2200      	movs	r2, #0
 8009782:	f7f6 ff39 	bl	80005f8 <__aeabi_dmul>
 8009786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009788:	4680      	mov	r8, r0
 800978a:	4689      	mov	r9, r1
 800978c:	b933      	cbnz	r3, 800979c <_strtod_l+0xaac>
 800978e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009792:	900e      	str	r0, [sp, #56]	; 0x38
 8009794:	930f      	str	r3, [sp, #60]	; 0x3c
 8009796:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800979a:	e7dd      	b.n	8009758 <_strtod_l+0xa68>
 800979c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80097a0:	e7f9      	b.n	8009796 <_strtod_l+0xaa6>
 80097a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1a8      	bne.n	80096fe <_strtod_l+0xa0e>
 80097ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097b2:	0d1b      	lsrs	r3, r3, #20
 80097b4:	051b      	lsls	r3, r3, #20
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d1a1      	bne.n	80096fe <_strtod_l+0xa0e>
 80097ba:	4640      	mov	r0, r8
 80097bc:	4649      	mov	r1, r9
 80097be:	f7f7 facb 	bl	8000d58 <__aeabi_d2lz>
 80097c2:	f7f6 feeb 	bl	800059c <__aeabi_l2d>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4640      	mov	r0, r8
 80097cc:	4649      	mov	r1, r9
 80097ce:	f7f6 fd5b 	bl	8000288 <__aeabi_dsub>
 80097d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097d8:	ea43 030a 	orr.w	r3, r3, sl
 80097dc:	4313      	orrs	r3, r2
 80097de:	4680      	mov	r8, r0
 80097e0:	4689      	mov	r9, r1
 80097e2:	d055      	beq.n	8009890 <_strtod_l+0xba0>
 80097e4:	a336      	add	r3, pc, #216	; (adr r3, 80098c0 <_strtod_l+0xbd0>)
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	f7f7 f977 	bl	8000adc <__aeabi_dcmplt>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f47f acd0 	bne.w	8009194 <_strtod_l+0x4a4>
 80097f4:	a334      	add	r3, pc, #208	; (adr r3, 80098c8 <_strtod_l+0xbd8>)
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	4640      	mov	r0, r8
 80097fc:	4649      	mov	r1, r9
 80097fe:	f7f7 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8009802:	2800      	cmp	r0, #0
 8009804:	f43f af7b 	beq.w	80096fe <_strtod_l+0xa0e>
 8009808:	e4c4      	b.n	8009194 <_strtod_l+0x4a4>
 800980a:	9b04      	ldr	r3, [sp, #16]
 800980c:	b333      	cbz	r3, 800985c <_strtod_l+0xb6c>
 800980e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009810:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009814:	d822      	bhi.n	800985c <_strtod_l+0xb6c>
 8009816:	a32e      	add	r3, pc, #184	; (adr r3, 80098d0 <_strtod_l+0xbe0>)
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	4640      	mov	r0, r8
 800981e:	4649      	mov	r1, r9
 8009820:	f7f7 f966 	bl	8000af0 <__aeabi_dcmple>
 8009824:	b1a0      	cbz	r0, 8009850 <_strtod_l+0xb60>
 8009826:	4649      	mov	r1, r9
 8009828:	4640      	mov	r0, r8
 800982a:	f7f7 f9bd 	bl	8000ba8 <__aeabi_d2uiz>
 800982e:	2801      	cmp	r0, #1
 8009830:	bf38      	it	cc
 8009832:	2001      	movcc	r0, #1
 8009834:	f7f6 fe66 	bl	8000504 <__aeabi_ui2d>
 8009838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800983a:	4680      	mov	r8, r0
 800983c:	4689      	mov	r9, r1
 800983e:	bb23      	cbnz	r3, 800988a <_strtod_l+0xb9a>
 8009840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009844:	9010      	str	r0, [sp, #64]	; 0x40
 8009846:	9311      	str	r3, [sp, #68]	; 0x44
 8009848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800984c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009854:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	9309      	str	r3, [sp, #36]	; 0x24
 800985c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009860:	eeb0 0a48 	vmov.f32	s0, s16
 8009864:	eef0 0a68 	vmov.f32	s1, s17
 8009868:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800986c:	f001 ff50 	bl	800b710 <__ulp>
 8009870:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009874:	ec53 2b10 	vmov	r2, r3, d0
 8009878:	f7f6 febe 	bl	80005f8 <__aeabi_dmul>
 800987c:	ec53 2b18 	vmov	r2, r3, d8
 8009880:	f7f6 fd04 	bl	800028c <__adddf3>
 8009884:	4682      	mov	sl, r0
 8009886:	468b      	mov	fp, r1
 8009888:	e78d      	b.n	80097a6 <_strtod_l+0xab6>
 800988a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800988e:	e7db      	b.n	8009848 <_strtod_l+0xb58>
 8009890:	a311      	add	r3, pc, #68	; (adr r3, 80098d8 <_strtod_l+0xbe8>)
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	f7f7 f921 	bl	8000adc <__aeabi_dcmplt>
 800989a:	e7b2      	b.n	8009802 <_strtod_l+0xb12>
 800989c:	2300      	movs	r3, #0
 800989e:	930a      	str	r3, [sp, #40]	; 0x28
 80098a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	f7ff ba6b 	b.w	8008d80 <_strtod_l+0x90>
 80098aa:	2a65      	cmp	r2, #101	; 0x65
 80098ac:	f43f ab5f 	beq.w	8008f6e <_strtod_l+0x27e>
 80098b0:	2a45      	cmp	r2, #69	; 0x45
 80098b2:	f43f ab5c 	beq.w	8008f6e <_strtod_l+0x27e>
 80098b6:	2301      	movs	r3, #1
 80098b8:	f7ff bb94 	b.w	8008fe4 <_strtod_l+0x2f4>
 80098bc:	f3af 8000 	nop.w
 80098c0:	94a03595 	.word	0x94a03595
 80098c4:	3fdfffff 	.word	0x3fdfffff
 80098c8:	35afe535 	.word	0x35afe535
 80098cc:	3fe00000 	.word	0x3fe00000
 80098d0:	ffc00000 	.word	0xffc00000
 80098d4:	41dfffff 	.word	0x41dfffff
 80098d8:	94a03595 	.word	0x94a03595
 80098dc:	3fcfffff 	.word	0x3fcfffff
 80098e0:	3ff00000 	.word	0x3ff00000
 80098e4:	7ff00000 	.word	0x7ff00000
 80098e8:	7fe00000 	.word	0x7fe00000
 80098ec:	7c9fffff 	.word	0x7c9fffff
 80098f0:	3fe00000 	.word	0x3fe00000
 80098f4:	bff00000 	.word	0xbff00000
 80098f8:	7fefffff 	.word	0x7fefffff

080098fc <_strtod_r>:
 80098fc:	4b01      	ldr	r3, [pc, #4]	; (8009904 <_strtod_r+0x8>)
 80098fe:	f7ff b9f7 	b.w	8008cf0 <_strtod_l>
 8009902:	bf00      	nop
 8009904:	20000074 	.word	0x20000074

08009908 <_strtol_l.constprop.0>:
 8009908:	2b01      	cmp	r3, #1
 800990a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990e:	d001      	beq.n	8009914 <_strtol_l.constprop.0+0xc>
 8009910:	2b24      	cmp	r3, #36	; 0x24
 8009912:	d906      	bls.n	8009922 <_strtol_l.constprop.0+0x1a>
 8009914:	f7fe fae6 	bl	8007ee4 <__errno>
 8009918:	2316      	movs	r3, #22
 800991a:	6003      	str	r3, [r0, #0]
 800991c:	2000      	movs	r0, #0
 800991e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009922:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009a08 <_strtol_l.constprop.0+0x100>
 8009926:	460d      	mov	r5, r1
 8009928:	462e      	mov	r6, r5
 800992a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800992e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009932:	f017 0708 	ands.w	r7, r7, #8
 8009936:	d1f7      	bne.n	8009928 <_strtol_l.constprop.0+0x20>
 8009938:	2c2d      	cmp	r4, #45	; 0x2d
 800993a:	d132      	bne.n	80099a2 <_strtol_l.constprop.0+0x9a>
 800993c:	782c      	ldrb	r4, [r5, #0]
 800993e:	2701      	movs	r7, #1
 8009940:	1cb5      	adds	r5, r6, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d05b      	beq.n	80099fe <_strtol_l.constprop.0+0xf6>
 8009946:	2b10      	cmp	r3, #16
 8009948:	d109      	bne.n	800995e <_strtol_l.constprop.0+0x56>
 800994a:	2c30      	cmp	r4, #48	; 0x30
 800994c:	d107      	bne.n	800995e <_strtol_l.constprop.0+0x56>
 800994e:	782c      	ldrb	r4, [r5, #0]
 8009950:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009954:	2c58      	cmp	r4, #88	; 0x58
 8009956:	d14d      	bne.n	80099f4 <_strtol_l.constprop.0+0xec>
 8009958:	786c      	ldrb	r4, [r5, #1]
 800995a:	2310      	movs	r3, #16
 800995c:	3502      	adds	r5, #2
 800995e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009962:	f108 38ff 	add.w	r8, r8, #4294967295
 8009966:	f04f 0c00 	mov.w	ip, #0
 800996a:	fbb8 f9f3 	udiv	r9, r8, r3
 800996e:	4666      	mov	r6, ip
 8009970:	fb03 8a19 	mls	sl, r3, r9, r8
 8009974:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009978:	f1be 0f09 	cmp.w	lr, #9
 800997c:	d816      	bhi.n	80099ac <_strtol_l.constprop.0+0xa4>
 800997e:	4674      	mov	r4, lr
 8009980:	42a3      	cmp	r3, r4
 8009982:	dd24      	ble.n	80099ce <_strtol_l.constprop.0+0xc6>
 8009984:	f1bc 0f00 	cmp.w	ip, #0
 8009988:	db1e      	blt.n	80099c8 <_strtol_l.constprop.0+0xc0>
 800998a:	45b1      	cmp	r9, r6
 800998c:	d31c      	bcc.n	80099c8 <_strtol_l.constprop.0+0xc0>
 800998e:	d101      	bne.n	8009994 <_strtol_l.constprop.0+0x8c>
 8009990:	45a2      	cmp	sl, r4
 8009992:	db19      	blt.n	80099c8 <_strtol_l.constprop.0+0xc0>
 8009994:	fb06 4603 	mla	r6, r6, r3, r4
 8009998:	f04f 0c01 	mov.w	ip, #1
 800999c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099a0:	e7e8      	b.n	8009974 <_strtol_l.constprop.0+0x6c>
 80099a2:	2c2b      	cmp	r4, #43	; 0x2b
 80099a4:	bf04      	itt	eq
 80099a6:	782c      	ldrbeq	r4, [r5, #0]
 80099a8:	1cb5      	addeq	r5, r6, #2
 80099aa:	e7ca      	b.n	8009942 <_strtol_l.constprop.0+0x3a>
 80099ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80099b0:	f1be 0f19 	cmp.w	lr, #25
 80099b4:	d801      	bhi.n	80099ba <_strtol_l.constprop.0+0xb2>
 80099b6:	3c37      	subs	r4, #55	; 0x37
 80099b8:	e7e2      	b.n	8009980 <_strtol_l.constprop.0+0x78>
 80099ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80099be:	f1be 0f19 	cmp.w	lr, #25
 80099c2:	d804      	bhi.n	80099ce <_strtol_l.constprop.0+0xc6>
 80099c4:	3c57      	subs	r4, #87	; 0x57
 80099c6:	e7db      	b.n	8009980 <_strtol_l.constprop.0+0x78>
 80099c8:	f04f 3cff 	mov.w	ip, #4294967295
 80099cc:	e7e6      	b.n	800999c <_strtol_l.constprop.0+0x94>
 80099ce:	f1bc 0f00 	cmp.w	ip, #0
 80099d2:	da05      	bge.n	80099e0 <_strtol_l.constprop.0+0xd8>
 80099d4:	2322      	movs	r3, #34	; 0x22
 80099d6:	6003      	str	r3, [r0, #0]
 80099d8:	4646      	mov	r6, r8
 80099da:	b942      	cbnz	r2, 80099ee <_strtol_l.constprop.0+0xe6>
 80099dc:	4630      	mov	r0, r6
 80099de:	e79e      	b.n	800991e <_strtol_l.constprop.0+0x16>
 80099e0:	b107      	cbz	r7, 80099e4 <_strtol_l.constprop.0+0xdc>
 80099e2:	4276      	negs	r6, r6
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	d0f9      	beq.n	80099dc <_strtol_l.constprop.0+0xd4>
 80099e8:	f1bc 0f00 	cmp.w	ip, #0
 80099ec:	d000      	beq.n	80099f0 <_strtol_l.constprop.0+0xe8>
 80099ee:	1e69      	subs	r1, r5, #1
 80099f0:	6011      	str	r1, [r2, #0]
 80099f2:	e7f3      	b.n	80099dc <_strtol_l.constprop.0+0xd4>
 80099f4:	2430      	movs	r4, #48	; 0x30
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1b1      	bne.n	800995e <_strtol_l.constprop.0+0x56>
 80099fa:	2308      	movs	r3, #8
 80099fc:	e7af      	b.n	800995e <_strtol_l.constprop.0+0x56>
 80099fe:	2c30      	cmp	r4, #48	; 0x30
 8009a00:	d0a5      	beq.n	800994e <_strtol_l.constprop.0+0x46>
 8009a02:	230a      	movs	r3, #10
 8009a04:	e7ab      	b.n	800995e <_strtol_l.constprop.0+0x56>
 8009a06:	bf00      	nop
 8009a08:	0800c971 	.word	0x0800c971

08009a0c <_strtol_r>:
 8009a0c:	f7ff bf7c 	b.w	8009908 <_strtol_l.constprop.0>

08009a10 <quorem>:
 8009a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	6903      	ldr	r3, [r0, #16]
 8009a16:	690c      	ldr	r4, [r1, #16]
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	f2c0 8081 	blt.w	8009b22 <quorem+0x112>
 8009a20:	3c01      	subs	r4, #1
 8009a22:	f101 0814 	add.w	r8, r1, #20
 8009a26:	f100 0514 	add.w	r5, r0, #20
 8009a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a48:	d331      	bcc.n	8009aae <quorem+0x9e>
 8009a4a:	f04f 0e00 	mov.w	lr, #0
 8009a4e:	4640      	mov	r0, r8
 8009a50:	46ac      	mov	ip, r5
 8009a52:	46f2      	mov	sl, lr
 8009a54:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a58:	b293      	uxth	r3, r2
 8009a5a:	fb06 e303 	mla	r3, r6, r3, lr
 8009a5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	ebaa 0303 	sub.w	r3, sl, r3
 8009a68:	f8dc a000 	ldr.w	sl, [ip]
 8009a6c:	0c12      	lsrs	r2, r2, #16
 8009a6e:	fa13 f38a 	uxtah	r3, r3, sl
 8009a72:	fb06 e202 	mla	r2, r6, r2, lr
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	9b00      	ldr	r3, [sp, #0]
 8009a7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a7e:	b292      	uxth	r2, r2
 8009a80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a88:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a8c:	4581      	cmp	r9, r0
 8009a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a92:	f84c 3b04 	str.w	r3, [ip], #4
 8009a96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a9a:	d2db      	bcs.n	8009a54 <quorem+0x44>
 8009a9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009aa0:	b92b      	cbnz	r3, 8009aae <quorem+0x9e>
 8009aa2:	9b01      	ldr	r3, [sp, #4]
 8009aa4:	3b04      	subs	r3, #4
 8009aa6:	429d      	cmp	r5, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	d32e      	bcc.n	8009b0a <quorem+0xfa>
 8009aac:	613c      	str	r4, [r7, #16]
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f001 fd88 	bl	800b5c4 <__mcmp>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	db24      	blt.n	8009b02 <quorem+0xf2>
 8009ab8:	3601      	adds	r6, #1
 8009aba:	4628      	mov	r0, r5
 8009abc:	f04f 0c00 	mov.w	ip, #0
 8009ac0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ac4:	f8d0 e000 	ldr.w	lr, [r0]
 8009ac8:	b293      	uxth	r3, r2
 8009aca:	ebac 0303 	sub.w	r3, ip, r3
 8009ace:	0c12      	lsrs	r2, r2, #16
 8009ad0:	fa13 f38e 	uxtah	r3, r3, lr
 8009ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae2:	45c1      	cmp	r9, r8
 8009ae4:	f840 3b04 	str.w	r3, [r0], #4
 8009ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009aec:	d2e8      	bcs.n	8009ac0 <quorem+0xb0>
 8009aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009af6:	b922      	cbnz	r2, 8009b02 <quorem+0xf2>
 8009af8:	3b04      	subs	r3, #4
 8009afa:	429d      	cmp	r5, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	d30a      	bcc.n	8009b16 <quorem+0x106>
 8009b00:	613c      	str	r4, [r7, #16]
 8009b02:	4630      	mov	r0, r6
 8009b04:	b003      	add	sp, #12
 8009b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0a:	6812      	ldr	r2, [r2, #0]
 8009b0c:	3b04      	subs	r3, #4
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	d1cc      	bne.n	8009aac <quorem+0x9c>
 8009b12:	3c01      	subs	r4, #1
 8009b14:	e7c7      	b.n	8009aa6 <quorem+0x96>
 8009b16:	6812      	ldr	r2, [r2, #0]
 8009b18:	3b04      	subs	r3, #4
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d1f0      	bne.n	8009b00 <quorem+0xf0>
 8009b1e:	3c01      	subs	r4, #1
 8009b20:	e7eb      	b.n	8009afa <quorem+0xea>
 8009b22:	2000      	movs	r0, #0
 8009b24:	e7ee      	b.n	8009b04 <quorem+0xf4>
	...

08009b28 <_dtoa_r>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	ed2d 8b04 	vpush	{d8-d9}
 8009b30:	ec57 6b10 	vmov	r6, r7, d0
 8009b34:	b093      	sub	sp, #76	; 0x4c
 8009b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b3c:	9106      	str	r1, [sp, #24]
 8009b3e:	ee10 aa10 	vmov	sl, s0
 8009b42:	4604      	mov	r4, r0
 8009b44:	9209      	str	r2, [sp, #36]	; 0x24
 8009b46:	930c      	str	r3, [sp, #48]	; 0x30
 8009b48:	46bb      	mov	fp, r7
 8009b4a:	b975      	cbnz	r5, 8009b6a <_dtoa_r+0x42>
 8009b4c:	2010      	movs	r0, #16
 8009b4e:	f001 fa45 	bl	800afdc <malloc>
 8009b52:	4602      	mov	r2, r0
 8009b54:	6260      	str	r0, [r4, #36]	; 0x24
 8009b56:	b920      	cbnz	r0, 8009b62 <_dtoa_r+0x3a>
 8009b58:	4ba7      	ldr	r3, [pc, #668]	; (8009df8 <_dtoa_r+0x2d0>)
 8009b5a:	21ea      	movs	r1, #234	; 0xea
 8009b5c:	48a7      	ldr	r0, [pc, #668]	; (8009dfc <_dtoa_r+0x2d4>)
 8009b5e:	f002 fc23 	bl	800c3a8 <__assert_func>
 8009b62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b66:	6005      	str	r5, [r0, #0]
 8009b68:	60c5      	str	r5, [r0, #12]
 8009b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6c:	6819      	ldr	r1, [r3, #0]
 8009b6e:	b151      	cbz	r1, 8009b86 <_dtoa_r+0x5e>
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	604a      	str	r2, [r1, #4]
 8009b74:	2301      	movs	r3, #1
 8009b76:	4093      	lsls	r3, r2
 8009b78:	608b      	str	r3, [r1, #8]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f001 fa96 	bl	800b0ac <_Bfree>
 8009b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	1e3b      	subs	r3, r7, #0
 8009b88:	bfaa      	itet	ge
 8009b8a:	2300      	movge	r3, #0
 8009b8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009b90:	f8c8 3000 	strge.w	r3, [r8]
 8009b94:	4b9a      	ldr	r3, [pc, #616]	; (8009e00 <_dtoa_r+0x2d8>)
 8009b96:	bfbc      	itt	lt
 8009b98:	2201      	movlt	r2, #1
 8009b9a:	f8c8 2000 	strlt.w	r2, [r8]
 8009b9e:	ea33 030b 	bics.w	r3, r3, fp
 8009ba2:	d11b      	bne.n	8009bdc <_dtoa_r+0xb4>
 8009ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ba6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bb0:	4333      	orrs	r3, r6
 8009bb2:	f000 8592 	beq.w	800a6da <_dtoa_r+0xbb2>
 8009bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bb8:	b963      	cbnz	r3, 8009bd4 <_dtoa_r+0xac>
 8009bba:	4b92      	ldr	r3, [pc, #584]	; (8009e04 <_dtoa_r+0x2dc>)
 8009bbc:	e022      	b.n	8009c04 <_dtoa_r+0xdc>
 8009bbe:	4b92      	ldr	r3, [pc, #584]	; (8009e08 <_dtoa_r+0x2e0>)
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	9801      	ldr	r0, [sp, #4]
 8009bca:	b013      	add	sp, #76	; 0x4c
 8009bcc:	ecbd 8b04 	vpop	{d8-d9}
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	4b8b      	ldr	r3, [pc, #556]	; (8009e04 <_dtoa_r+0x2dc>)
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	3303      	adds	r3, #3
 8009bda:	e7f3      	b.n	8009bc4 <_dtoa_r+0x9c>
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2300      	movs	r3, #0
 8009be0:	4650      	mov	r0, sl
 8009be2:	4659      	mov	r1, fp
 8009be4:	f7f6 ff70 	bl	8000ac8 <__aeabi_dcmpeq>
 8009be8:	ec4b ab19 	vmov	d9, sl, fp
 8009bec:	4680      	mov	r8, r0
 8009bee:	b158      	cbz	r0, 8009c08 <_dtoa_r+0xe0>
 8009bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 856b 	beq.w	800a6d4 <_dtoa_r+0xbac>
 8009bfe:	4883      	ldr	r0, [pc, #524]	; (8009e0c <_dtoa_r+0x2e4>)
 8009c00:	6018      	str	r0, [r3, #0]
 8009c02:	1e43      	subs	r3, r0, #1
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	e7df      	b.n	8009bc8 <_dtoa_r+0xa0>
 8009c08:	ec4b ab10 	vmov	d0, sl, fp
 8009c0c:	aa10      	add	r2, sp, #64	; 0x40
 8009c0e:	a911      	add	r1, sp, #68	; 0x44
 8009c10:	4620      	mov	r0, r4
 8009c12:	f001 fdf9 	bl	800b808 <__d2b>
 8009c16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009c1a:	ee08 0a10 	vmov	s16, r0
 8009c1e:	2d00      	cmp	r5, #0
 8009c20:	f000 8084 	beq.w	8009d2c <_dtoa_r+0x204>
 8009c24:	ee19 3a90 	vmov	r3, s19
 8009c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c30:	4656      	mov	r6, sl
 8009c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009c3e:	4b74      	ldr	r3, [pc, #464]	; (8009e10 <_dtoa_r+0x2e8>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	4630      	mov	r0, r6
 8009c44:	4639      	mov	r1, r7
 8009c46:	f7f6 fb1f 	bl	8000288 <__aeabi_dsub>
 8009c4a:	a365      	add	r3, pc, #404	; (adr r3, 8009de0 <_dtoa_r+0x2b8>)
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f7f6 fcd2 	bl	80005f8 <__aeabi_dmul>
 8009c54:	a364      	add	r3, pc, #400	; (adr r3, 8009de8 <_dtoa_r+0x2c0>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f7f6 fb17 	bl	800028c <__adddf3>
 8009c5e:	4606      	mov	r6, r0
 8009c60:	4628      	mov	r0, r5
 8009c62:	460f      	mov	r7, r1
 8009c64:	f7f6 fc5e 	bl	8000524 <__aeabi_i2d>
 8009c68:	a361      	add	r3, pc, #388	; (adr r3, 8009df0 <_dtoa_r+0x2c8>)
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	f7f6 fcc3 	bl	80005f8 <__aeabi_dmul>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4630      	mov	r0, r6
 8009c78:	4639      	mov	r1, r7
 8009c7a:	f7f6 fb07 	bl	800028c <__adddf3>
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460f      	mov	r7, r1
 8009c82:	f7f6 ff69 	bl	8000b58 <__aeabi_d2iz>
 8009c86:	2200      	movs	r2, #0
 8009c88:	9000      	str	r0, [sp, #0]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 ff24 	bl	8000adc <__aeabi_dcmplt>
 8009c94:	b150      	cbz	r0, 8009cac <_dtoa_r+0x184>
 8009c96:	9800      	ldr	r0, [sp, #0]
 8009c98:	f7f6 fc44 	bl	8000524 <__aeabi_i2d>
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	463b      	mov	r3, r7
 8009ca0:	f7f6 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ca4:	b910      	cbnz	r0, 8009cac <_dtoa_r+0x184>
 8009ca6:	9b00      	ldr	r3, [sp, #0]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	9b00      	ldr	r3, [sp, #0]
 8009cae:	2b16      	cmp	r3, #22
 8009cb0:	d85a      	bhi.n	8009d68 <_dtoa_r+0x240>
 8009cb2:	9a00      	ldr	r2, [sp, #0]
 8009cb4:	4b57      	ldr	r3, [pc, #348]	; (8009e14 <_dtoa_r+0x2ec>)
 8009cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	ec51 0b19 	vmov	r0, r1, d9
 8009cc2:	f7f6 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d050      	beq.n	8009d6c <_dtoa_r+0x244>
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cd6:	1b5d      	subs	r5, r3, r5
 8009cd8:	1e6b      	subs	r3, r5, #1
 8009cda:	9305      	str	r3, [sp, #20]
 8009cdc:	bf45      	ittet	mi
 8009cde:	f1c5 0301 	rsbmi	r3, r5, #1
 8009ce2:	9304      	strmi	r3, [sp, #16]
 8009ce4:	2300      	movpl	r3, #0
 8009ce6:	2300      	movmi	r3, #0
 8009ce8:	bf4c      	ite	mi
 8009cea:	9305      	strmi	r3, [sp, #20]
 8009cec:	9304      	strpl	r3, [sp, #16]
 8009cee:	9b00      	ldr	r3, [sp, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	db3d      	blt.n	8009d70 <_dtoa_r+0x248>
 8009cf4:	9b05      	ldr	r3, [sp, #20]
 8009cf6:	9a00      	ldr	r2, [sp, #0]
 8009cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8009cfa:	4413      	add	r3, r2
 8009cfc:	9305      	str	r3, [sp, #20]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9307      	str	r3, [sp, #28]
 8009d02:	9b06      	ldr	r3, [sp, #24]
 8009d04:	2b09      	cmp	r3, #9
 8009d06:	f200 8089 	bhi.w	8009e1c <_dtoa_r+0x2f4>
 8009d0a:	2b05      	cmp	r3, #5
 8009d0c:	bfc4      	itt	gt
 8009d0e:	3b04      	subgt	r3, #4
 8009d10:	9306      	strgt	r3, [sp, #24]
 8009d12:	9b06      	ldr	r3, [sp, #24]
 8009d14:	f1a3 0302 	sub.w	r3, r3, #2
 8009d18:	bfcc      	ite	gt
 8009d1a:	2500      	movgt	r5, #0
 8009d1c:	2501      	movle	r5, #1
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	f200 8087 	bhi.w	8009e32 <_dtoa_r+0x30a>
 8009d24:	e8df f003 	tbb	[pc, r3]
 8009d28:	59383a2d 	.word	0x59383a2d
 8009d2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d30:	441d      	add	r5, r3
 8009d32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d36:	2b20      	cmp	r3, #32
 8009d38:	bfc1      	itttt	gt
 8009d3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d42:	fa0b f303 	lslgt.w	r3, fp, r3
 8009d46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d4a:	bfda      	itte	le
 8009d4c:	f1c3 0320 	rsble	r3, r3, #32
 8009d50:	fa06 f003 	lslle.w	r0, r6, r3
 8009d54:	4318      	orrgt	r0, r3
 8009d56:	f7f6 fbd5 	bl	8000504 <__aeabi_ui2d>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009d62:	3d01      	subs	r5, #1
 8009d64:	930e      	str	r3, [sp, #56]	; 0x38
 8009d66:	e76a      	b.n	8009c3e <_dtoa_r+0x116>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e7b2      	b.n	8009cd2 <_dtoa_r+0x1aa>
 8009d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d6e:	e7b1      	b.n	8009cd4 <_dtoa_r+0x1ac>
 8009d70:	9b04      	ldr	r3, [sp, #16]
 8009d72:	9a00      	ldr	r2, [sp, #0]
 8009d74:	1a9b      	subs	r3, r3, r2
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	4253      	negs	r3, r2
 8009d7a:	9307      	str	r3, [sp, #28]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d80:	e7bf      	b.n	8009d02 <_dtoa_r+0x1da>
 8009d82:	2300      	movs	r3, #0
 8009d84:	9308      	str	r3, [sp, #32]
 8009d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	dc55      	bgt.n	8009e38 <_dtoa_r+0x310>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d92:	461a      	mov	r2, r3
 8009d94:	9209      	str	r2, [sp, #36]	; 0x24
 8009d96:	e00c      	b.n	8009db2 <_dtoa_r+0x28a>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e7f3      	b.n	8009d84 <_dtoa_r+0x25c>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da0:	9308      	str	r3, [sp, #32]
 8009da2:	9b00      	ldr	r3, [sp, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	9302      	str	r3, [sp, #8]
 8009da8:	3301      	adds	r3, #1
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	bfb8      	it	lt
 8009db0:	2301      	movlt	r3, #1
 8009db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009db4:	2200      	movs	r2, #0
 8009db6:	6042      	str	r2, [r0, #4]
 8009db8:	2204      	movs	r2, #4
 8009dba:	f102 0614 	add.w	r6, r2, #20
 8009dbe:	429e      	cmp	r6, r3
 8009dc0:	6841      	ldr	r1, [r0, #4]
 8009dc2:	d93d      	bls.n	8009e40 <_dtoa_r+0x318>
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f001 f931 	bl	800b02c <_Balloc>
 8009dca:	9001      	str	r0, [sp, #4]
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d13b      	bne.n	8009e48 <_dtoa_r+0x320>
 8009dd0:	4b11      	ldr	r3, [pc, #68]	; (8009e18 <_dtoa_r+0x2f0>)
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009dd8:	e6c0      	b.n	8009b5c <_dtoa_r+0x34>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e7df      	b.n	8009d9e <_dtoa_r+0x276>
 8009dde:	bf00      	nop
 8009de0:	636f4361 	.word	0x636f4361
 8009de4:	3fd287a7 	.word	0x3fd287a7
 8009de8:	8b60c8b3 	.word	0x8b60c8b3
 8009dec:	3fc68a28 	.word	0x3fc68a28
 8009df0:	509f79fb 	.word	0x509f79fb
 8009df4:	3fd34413 	.word	0x3fd34413
 8009df8:	0800ca7e 	.word	0x0800ca7e
 8009dfc:	0800ca95 	.word	0x0800ca95
 8009e00:	7ff00000 	.word	0x7ff00000
 8009e04:	0800ca7a 	.word	0x0800ca7a
 8009e08:	0800ca71 	.word	0x0800ca71
 8009e0c:	0800c8f5 	.word	0x0800c8f5
 8009e10:	3ff80000 	.word	0x3ff80000
 8009e14:	0800cc68 	.word	0x0800cc68
 8009e18:	0800caf0 	.word	0x0800caf0
 8009e1c:	2501      	movs	r5, #1
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9306      	str	r3, [sp, #24]
 8009e22:	9508      	str	r5, [sp, #32]
 8009e24:	f04f 33ff 	mov.w	r3, #4294967295
 8009e28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2312      	movs	r3, #18
 8009e30:	e7b0      	b.n	8009d94 <_dtoa_r+0x26c>
 8009e32:	2301      	movs	r3, #1
 8009e34:	9308      	str	r3, [sp, #32]
 8009e36:	e7f5      	b.n	8009e24 <_dtoa_r+0x2fc>
 8009e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e3e:	e7b8      	b.n	8009db2 <_dtoa_r+0x28a>
 8009e40:	3101      	adds	r1, #1
 8009e42:	6041      	str	r1, [r0, #4]
 8009e44:	0052      	lsls	r2, r2, #1
 8009e46:	e7b8      	b.n	8009dba <_dtoa_r+0x292>
 8009e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e4a:	9a01      	ldr	r2, [sp, #4]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	2b0e      	cmp	r3, #14
 8009e52:	f200 809d 	bhi.w	8009f90 <_dtoa_r+0x468>
 8009e56:	2d00      	cmp	r5, #0
 8009e58:	f000 809a 	beq.w	8009f90 <_dtoa_r+0x468>
 8009e5c:	9b00      	ldr	r3, [sp, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dd32      	ble.n	8009ec8 <_dtoa_r+0x3a0>
 8009e62:	4ab7      	ldr	r2, [pc, #732]	; (800a140 <_dtoa_r+0x618>)
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e70:	9b00      	ldr	r3, [sp, #0]
 8009e72:	05d8      	lsls	r0, r3, #23
 8009e74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009e78:	d516      	bpl.n	8009ea8 <_dtoa_r+0x380>
 8009e7a:	4bb2      	ldr	r3, [pc, #712]	; (800a144 <_dtoa_r+0x61c>)
 8009e7c:	ec51 0b19 	vmov	r0, r1, d9
 8009e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e84:	f7f6 fce2 	bl	800084c <__aeabi_ddiv>
 8009e88:	f007 070f 	and.w	r7, r7, #15
 8009e8c:	4682      	mov	sl, r0
 8009e8e:	468b      	mov	fp, r1
 8009e90:	2503      	movs	r5, #3
 8009e92:	4eac      	ldr	r6, [pc, #688]	; (800a144 <_dtoa_r+0x61c>)
 8009e94:	b957      	cbnz	r7, 8009eac <_dtoa_r+0x384>
 8009e96:	4642      	mov	r2, r8
 8009e98:	464b      	mov	r3, r9
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	4659      	mov	r1, fp
 8009e9e:	f7f6 fcd5 	bl	800084c <__aeabi_ddiv>
 8009ea2:	4682      	mov	sl, r0
 8009ea4:	468b      	mov	fp, r1
 8009ea6:	e028      	b.n	8009efa <_dtoa_r+0x3d2>
 8009ea8:	2502      	movs	r5, #2
 8009eaa:	e7f2      	b.n	8009e92 <_dtoa_r+0x36a>
 8009eac:	07f9      	lsls	r1, r7, #31
 8009eae:	d508      	bpl.n	8009ec2 <_dtoa_r+0x39a>
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	3501      	adds	r5, #1
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	4689      	mov	r9, r1
 8009ec2:	107f      	asrs	r7, r7, #1
 8009ec4:	3608      	adds	r6, #8
 8009ec6:	e7e5      	b.n	8009e94 <_dtoa_r+0x36c>
 8009ec8:	f000 809b 	beq.w	800a002 <_dtoa_r+0x4da>
 8009ecc:	9b00      	ldr	r3, [sp, #0]
 8009ece:	4f9d      	ldr	r7, [pc, #628]	; (800a144 <_dtoa_r+0x61c>)
 8009ed0:	425e      	negs	r6, r3
 8009ed2:	4b9b      	ldr	r3, [pc, #620]	; (800a140 <_dtoa_r+0x618>)
 8009ed4:	f006 020f 	and.w	r2, r6, #15
 8009ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	ec51 0b19 	vmov	r0, r1, d9
 8009ee4:	f7f6 fb88 	bl	80005f8 <__aeabi_dmul>
 8009ee8:	1136      	asrs	r6, r6, #4
 8009eea:	4682      	mov	sl, r0
 8009eec:	468b      	mov	fp, r1
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2502      	movs	r5, #2
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	d17a      	bne.n	8009fec <_dtoa_r+0x4c4>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1d3      	bne.n	8009ea2 <_dtoa_r+0x37a>
 8009efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8082 	beq.w	800a006 <_dtoa_r+0x4de>
 8009f02:	4b91      	ldr	r3, [pc, #580]	; (800a148 <_dtoa_r+0x620>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	4650      	mov	r0, sl
 8009f08:	4659      	mov	r1, fp
 8009f0a:	f7f6 fde7 	bl	8000adc <__aeabi_dcmplt>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d079      	beq.n	800a006 <_dtoa_r+0x4de>
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d076      	beq.n	800a006 <_dtoa_r+0x4de>
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	dd36      	ble.n	8009f8c <_dtoa_r+0x464>
 8009f1e:	9b00      	ldr	r3, [sp, #0]
 8009f20:	4650      	mov	r0, sl
 8009f22:	4659      	mov	r1, fp
 8009f24:	1e5f      	subs	r7, r3, #1
 8009f26:	2200      	movs	r2, #0
 8009f28:	4b88      	ldr	r3, [pc, #544]	; (800a14c <_dtoa_r+0x624>)
 8009f2a:	f7f6 fb65 	bl	80005f8 <__aeabi_dmul>
 8009f2e:	9e02      	ldr	r6, [sp, #8]
 8009f30:	4682      	mov	sl, r0
 8009f32:	468b      	mov	fp, r1
 8009f34:	3501      	adds	r5, #1
 8009f36:	4628      	mov	r0, r5
 8009f38:	f7f6 faf4 	bl	8000524 <__aeabi_i2d>
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	465b      	mov	r3, fp
 8009f40:	f7f6 fb5a 	bl	80005f8 <__aeabi_dmul>
 8009f44:	4b82      	ldr	r3, [pc, #520]	; (800a150 <_dtoa_r+0x628>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	f7f6 f9a0 	bl	800028c <__adddf3>
 8009f4c:	46d0      	mov	r8, sl
 8009f4e:	46d9      	mov	r9, fp
 8009f50:	4682      	mov	sl, r0
 8009f52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009f56:	2e00      	cmp	r6, #0
 8009f58:	d158      	bne.n	800a00c <_dtoa_r+0x4e4>
 8009f5a:	4b7e      	ldr	r3, [pc, #504]	; (800a154 <_dtoa_r+0x62c>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	4640      	mov	r0, r8
 8009f60:	4649      	mov	r1, r9
 8009f62:	f7f6 f991 	bl	8000288 <__aeabi_dsub>
 8009f66:	4652      	mov	r2, sl
 8009f68:	465b      	mov	r3, fp
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	4689      	mov	r9, r1
 8009f6e:	f7f6 fdd3 	bl	8000b18 <__aeabi_dcmpgt>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f040 8295 	bne.w	800a4a2 <_dtoa_r+0x97a>
 8009f78:	4652      	mov	r2, sl
 8009f7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4649      	mov	r1, r9
 8009f82:	f7f6 fdab 	bl	8000adc <__aeabi_dcmplt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f040 8289 	bne.w	800a49e <_dtoa_r+0x976>
 8009f8c:	ec5b ab19 	vmov	sl, fp, d9
 8009f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f2c0 8148 	blt.w	800a228 <_dtoa_r+0x700>
 8009f98:	9a00      	ldr	r2, [sp, #0]
 8009f9a:	2a0e      	cmp	r2, #14
 8009f9c:	f300 8144 	bgt.w	800a228 <_dtoa_r+0x700>
 8009fa0:	4b67      	ldr	r3, [pc, #412]	; (800a140 <_dtoa_r+0x618>)
 8009fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f280 80d5 	bge.w	800a15c <_dtoa_r+0x634>
 8009fb2:	9b03      	ldr	r3, [sp, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f300 80d1 	bgt.w	800a15c <_dtoa_r+0x634>
 8009fba:	f040 826f 	bne.w	800a49c <_dtoa_r+0x974>
 8009fbe:	4b65      	ldr	r3, [pc, #404]	; (800a154 <_dtoa_r+0x62c>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	f7f6 fb17 	bl	80005f8 <__aeabi_dmul>
 8009fca:	4652      	mov	r2, sl
 8009fcc:	465b      	mov	r3, fp
 8009fce:	f7f6 fd99 	bl	8000b04 <__aeabi_dcmpge>
 8009fd2:	9e03      	ldr	r6, [sp, #12]
 8009fd4:	4637      	mov	r7, r6
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f040 8245 	bne.w	800a466 <_dtoa_r+0x93e>
 8009fdc:	9d01      	ldr	r5, [sp, #4]
 8009fde:	2331      	movs	r3, #49	; 0x31
 8009fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8009fe4:	9b00      	ldr	r3, [sp, #0]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	e240      	b.n	800a46e <_dtoa_r+0x946>
 8009fec:	07f2      	lsls	r2, r6, #31
 8009fee:	d505      	bpl.n	8009ffc <_dtoa_r+0x4d4>
 8009ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff4:	f7f6 fb00 	bl	80005f8 <__aeabi_dmul>
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	1076      	asrs	r6, r6, #1
 8009ffe:	3708      	adds	r7, #8
 800a000:	e777      	b.n	8009ef2 <_dtoa_r+0x3ca>
 800a002:	2502      	movs	r5, #2
 800a004:	e779      	b.n	8009efa <_dtoa_r+0x3d2>
 800a006:	9f00      	ldr	r7, [sp, #0]
 800a008:	9e03      	ldr	r6, [sp, #12]
 800a00a:	e794      	b.n	8009f36 <_dtoa_r+0x40e>
 800a00c:	9901      	ldr	r1, [sp, #4]
 800a00e:	4b4c      	ldr	r3, [pc, #304]	; (800a140 <_dtoa_r+0x618>)
 800a010:	4431      	add	r1, r6
 800a012:	910d      	str	r1, [sp, #52]	; 0x34
 800a014:	9908      	ldr	r1, [sp, #32]
 800a016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a01a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a01e:	2900      	cmp	r1, #0
 800a020:	d043      	beq.n	800a0aa <_dtoa_r+0x582>
 800a022:	494d      	ldr	r1, [pc, #308]	; (800a158 <_dtoa_r+0x630>)
 800a024:	2000      	movs	r0, #0
 800a026:	f7f6 fc11 	bl	800084c <__aeabi_ddiv>
 800a02a:	4652      	mov	r2, sl
 800a02c:	465b      	mov	r3, fp
 800a02e:	f7f6 f92b 	bl	8000288 <__aeabi_dsub>
 800a032:	9d01      	ldr	r5, [sp, #4]
 800a034:	4682      	mov	sl, r0
 800a036:	468b      	mov	fp, r1
 800a038:	4649      	mov	r1, r9
 800a03a:	4640      	mov	r0, r8
 800a03c:	f7f6 fd8c 	bl	8000b58 <__aeabi_d2iz>
 800a040:	4606      	mov	r6, r0
 800a042:	f7f6 fa6f 	bl	8000524 <__aeabi_i2d>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4640      	mov	r0, r8
 800a04c:	4649      	mov	r1, r9
 800a04e:	f7f6 f91b 	bl	8000288 <__aeabi_dsub>
 800a052:	3630      	adds	r6, #48	; 0x30
 800a054:	f805 6b01 	strb.w	r6, [r5], #1
 800a058:	4652      	mov	r2, sl
 800a05a:	465b      	mov	r3, fp
 800a05c:	4680      	mov	r8, r0
 800a05e:	4689      	mov	r9, r1
 800a060:	f7f6 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800a064:	2800      	cmp	r0, #0
 800a066:	d163      	bne.n	800a130 <_dtoa_r+0x608>
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	4936      	ldr	r1, [pc, #216]	; (800a148 <_dtoa_r+0x620>)
 800a06e:	2000      	movs	r0, #0
 800a070:	f7f6 f90a 	bl	8000288 <__aeabi_dsub>
 800a074:	4652      	mov	r2, sl
 800a076:	465b      	mov	r3, fp
 800a078:	f7f6 fd30 	bl	8000adc <__aeabi_dcmplt>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	f040 80b5 	bne.w	800a1ec <_dtoa_r+0x6c4>
 800a082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a084:	429d      	cmp	r5, r3
 800a086:	d081      	beq.n	8009f8c <_dtoa_r+0x464>
 800a088:	4b30      	ldr	r3, [pc, #192]	; (800a14c <_dtoa_r+0x624>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	4650      	mov	r0, sl
 800a08e:	4659      	mov	r1, fp
 800a090:	f7f6 fab2 	bl	80005f8 <__aeabi_dmul>
 800a094:	4b2d      	ldr	r3, [pc, #180]	; (800a14c <_dtoa_r+0x624>)
 800a096:	4682      	mov	sl, r0
 800a098:	468b      	mov	fp, r1
 800a09a:	4640      	mov	r0, r8
 800a09c:	4649      	mov	r1, r9
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f7f6 faaa 	bl	80005f8 <__aeabi_dmul>
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	4689      	mov	r9, r1
 800a0a8:	e7c6      	b.n	800a038 <_dtoa_r+0x510>
 800a0aa:	4650      	mov	r0, sl
 800a0ac:	4659      	mov	r1, fp
 800a0ae:	f7f6 faa3 	bl	80005f8 <__aeabi_dmul>
 800a0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b4:	9d01      	ldr	r5, [sp, #4]
 800a0b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0b8:	4682      	mov	sl, r0
 800a0ba:	468b      	mov	fp, r1
 800a0bc:	4649      	mov	r1, r9
 800a0be:	4640      	mov	r0, r8
 800a0c0:	f7f6 fd4a 	bl	8000b58 <__aeabi_d2iz>
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	f7f6 fa2d 	bl	8000524 <__aeabi_i2d>
 800a0ca:	3630      	adds	r6, #48	; 0x30
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	f7f6 f8d8 	bl	8000288 <__aeabi_dsub>
 800a0d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4689      	mov	r9, r1
 800a0e4:	f04f 0200 	mov.w	r2, #0
 800a0e8:	d124      	bne.n	800a134 <_dtoa_r+0x60c>
 800a0ea:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <_dtoa_r+0x630>)
 800a0ec:	4650      	mov	r0, sl
 800a0ee:	4659      	mov	r1, fp
 800a0f0:	f7f6 f8cc 	bl	800028c <__adddf3>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4640      	mov	r0, r8
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	f7f6 fd0c 	bl	8000b18 <__aeabi_dcmpgt>
 800a100:	2800      	cmp	r0, #0
 800a102:	d173      	bne.n	800a1ec <_dtoa_r+0x6c4>
 800a104:	4652      	mov	r2, sl
 800a106:	465b      	mov	r3, fp
 800a108:	4913      	ldr	r1, [pc, #76]	; (800a158 <_dtoa_r+0x630>)
 800a10a:	2000      	movs	r0, #0
 800a10c:	f7f6 f8bc 	bl	8000288 <__aeabi_dsub>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4640      	mov	r0, r8
 800a116:	4649      	mov	r1, r9
 800a118:	f7f6 fce0 	bl	8000adc <__aeabi_dcmplt>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	f43f af35 	beq.w	8009f8c <_dtoa_r+0x464>
 800a122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a124:	1e6b      	subs	r3, r5, #1
 800a126:	930f      	str	r3, [sp, #60]	; 0x3c
 800a128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a12c:	2b30      	cmp	r3, #48	; 0x30
 800a12e:	d0f8      	beq.n	800a122 <_dtoa_r+0x5fa>
 800a130:	9700      	str	r7, [sp, #0]
 800a132:	e049      	b.n	800a1c8 <_dtoa_r+0x6a0>
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <_dtoa_r+0x624>)
 800a136:	f7f6 fa5f 	bl	80005f8 <__aeabi_dmul>
 800a13a:	4680      	mov	r8, r0
 800a13c:	4689      	mov	r9, r1
 800a13e:	e7bd      	b.n	800a0bc <_dtoa_r+0x594>
 800a140:	0800cc68 	.word	0x0800cc68
 800a144:	0800cc40 	.word	0x0800cc40
 800a148:	3ff00000 	.word	0x3ff00000
 800a14c:	40240000 	.word	0x40240000
 800a150:	401c0000 	.word	0x401c0000
 800a154:	40140000 	.word	0x40140000
 800a158:	3fe00000 	.word	0x3fe00000
 800a15c:	9d01      	ldr	r5, [sp, #4]
 800a15e:	4656      	mov	r6, sl
 800a160:	465f      	mov	r7, fp
 800a162:	4642      	mov	r2, r8
 800a164:	464b      	mov	r3, r9
 800a166:	4630      	mov	r0, r6
 800a168:	4639      	mov	r1, r7
 800a16a:	f7f6 fb6f 	bl	800084c <__aeabi_ddiv>
 800a16e:	f7f6 fcf3 	bl	8000b58 <__aeabi_d2iz>
 800a172:	4682      	mov	sl, r0
 800a174:	f7f6 f9d6 	bl	8000524 <__aeabi_i2d>
 800a178:	4642      	mov	r2, r8
 800a17a:	464b      	mov	r3, r9
 800a17c:	f7f6 fa3c 	bl	80005f8 <__aeabi_dmul>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	4630      	mov	r0, r6
 800a186:	4639      	mov	r1, r7
 800a188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a18c:	f7f6 f87c 	bl	8000288 <__aeabi_dsub>
 800a190:	f805 6b01 	strb.w	r6, [r5], #1
 800a194:	9e01      	ldr	r6, [sp, #4]
 800a196:	9f03      	ldr	r7, [sp, #12]
 800a198:	1bae      	subs	r6, r5, r6
 800a19a:	42b7      	cmp	r7, r6
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	d135      	bne.n	800a20e <_dtoa_r+0x6e6>
 800a1a2:	f7f6 f873 	bl	800028c <__adddf3>
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	464b      	mov	r3, r9
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460f      	mov	r7, r1
 800a1ae:	f7f6 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 800a1b2:	b9d0      	cbnz	r0, 800a1ea <_dtoa_r+0x6c2>
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1c0:	b110      	cbz	r0, 800a1c8 <_dtoa_r+0x6a0>
 800a1c2:	f01a 0f01 	tst.w	sl, #1
 800a1c6:	d110      	bne.n	800a1ea <_dtoa_r+0x6c2>
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	ee18 1a10 	vmov	r1, s16
 800a1ce:	f000 ff6d 	bl	800b0ac <_Bfree>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	9800      	ldr	r0, [sp, #0]
 800a1d6:	702b      	strb	r3, [r5, #0]
 800a1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1da:	3001      	adds	r0, #1
 800a1dc:	6018      	str	r0, [r3, #0]
 800a1de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f43f acf1 	beq.w	8009bc8 <_dtoa_r+0xa0>
 800a1e6:	601d      	str	r5, [r3, #0]
 800a1e8:	e4ee      	b.n	8009bc8 <_dtoa_r+0xa0>
 800a1ea:	9f00      	ldr	r7, [sp, #0]
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	461d      	mov	r5, r3
 800a1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1f4:	2a39      	cmp	r2, #57	; 0x39
 800a1f6:	d106      	bne.n	800a206 <_dtoa_r+0x6de>
 800a1f8:	9a01      	ldr	r2, [sp, #4]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d1f7      	bne.n	800a1ee <_dtoa_r+0x6c6>
 800a1fe:	9901      	ldr	r1, [sp, #4]
 800a200:	2230      	movs	r2, #48	; 0x30
 800a202:	3701      	adds	r7, #1
 800a204:	700a      	strb	r2, [r1, #0]
 800a206:	781a      	ldrb	r2, [r3, #0]
 800a208:	3201      	adds	r2, #1
 800a20a:	701a      	strb	r2, [r3, #0]
 800a20c:	e790      	b.n	800a130 <_dtoa_r+0x608>
 800a20e:	4ba6      	ldr	r3, [pc, #664]	; (800a4a8 <_dtoa_r+0x980>)
 800a210:	2200      	movs	r2, #0
 800a212:	f7f6 f9f1 	bl	80005f8 <__aeabi_dmul>
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	4606      	mov	r6, r0
 800a21c:	460f      	mov	r7, r1
 800a21e:	f7f6 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 800a222:	2800      	cmp	r0, #0
 800a224:	d09d      	beq.n	800a162 <_dtoa_r+0x63a>
 800a226:	e7cf      	b.n	800a1c8 <_dtoa_r+0x6a0>
 800a228:	9a08      	ldr	r2, [sp, #32]
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	f000 80d7 	beq.w	800a3de <_dtoa_r+0x8b6>
 800a230:	9a06      	ldr	r2, [sp, #24]
 800a232:	2a01      	cmp	r2, #1
 800a234:	f300 80ba 	bgt.w	800a3ac <_dtoa_r+0x884>
 800a238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	f000 80b2 	beq.w	800a3a4 <_dtoa_r+0x87c>
 800a240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a244:	9e07      	ldr	r6, [sp, #28]
 800a246:	9d04      	ldr	r5, [sp, #16]
 800a248:	9a04      	ldr	r2, [sp, #16]
 800a24a:	441a      	add	r2, r3
 800a24c:	9204      	str	r2, [sp, #16]
 800a24e:	9a05      	ldr	r2, [sp, #20]
 800a250:	2101      	movs	r1, #1
 800a252:	441a      	add	r2, r3
 800a254:	4620      	mov	r0, r4
 800a256:	9205      	str	r2, [sp, #20]
 800a258:	f001 f82a 	bl	800b2b0 <__i2b>
 800a25c:	4607      	mov	r7, r0
 800a25e:	2d00      	cmp	r5, #0
 800a260:	dd0c      	ble.n	800a27c <_dtoa_r+0x754>
 800a262:	9b05      	ldr	r3, [sp, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	dd09      	ble.n	800a27c <_dtoa_r+0x754>
 800a268:	42ab      	cmp	r3, r5
 800a26a:	9a04      	ldr	r2, [sp, #16]
 800a26c:	bfa8      	it	ge
 800a26e:	462b      	movge	r3, r5
 800a270:	1ad2      	subs	r2, r2, r3
 800a272:	9204      	str	r2, [sp, #16]
 800a274:	9a05      	ldr	r2, [sp, #20]
 800a276:	1aed      	subs	r5, r5, r3
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	9305      	str	r3, [sp, #20]
 800a27c:	9b07      	ldr	r3, [sp, #28]
 800a27e:	b31b      	cbz	r3, 800a2c8 <_dtoa_r+0x7a0>
 800a280:	9b08      	ldr	r3, [sp, #32]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 80af 	beq.w	800a3e6 <_dtoa_r+0x8be>
 800a288:	2e00      	cmp	r6, #0
 800a28a:	dd13      	ble.n	800a2b4 <_dtoa_r+0x78c>
 800a28c:	4639      	mov	r1, r7
 800a28e:	4632      	mov	r2, r6
 800a290:	4620      	mov	r0, r4
 800a292:	f001 f8cd 	bl	800b430 <__pow5mult>
 800a296:	ee18 2a10 	vmov	r2, s16
 800a29a:	4601      	mov	r1, r0
 800a29c:	4607      	mov	r7, r0
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f001 f81c 	bl	800b2dc <__multiply>
 800a2a4:	ee18 1a10 	vmov	r1, s16
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 fefe 	bl	800b0ac <_Bfree>
 800a2b0:	ee08 8a10 	vmov	s16, r8
 800a2b4:	9b07      	ldr	r3, [sp, #28]
 800a2b6:	1b9a      	subs	r2, r3, r6
 800a2b8:	d006      	beq.n	800a2c8 <_dtoa_r+0x7a0>
 800a2ba:	ee18 1a10 	vmov	r1, s16
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f001 f8b6 	bl	800b430 <__pow5mult>
 800a2c4:	ee08 0a10 	vmov	s16, r0
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 fff0 	bl	800b2b0 <__i2b>
 800a2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	f340 8088 	ble.w	800a3ea <_dtoa_r+0x8c2>
 800a2da:	461a      	mov	r2, r3
 800a2dc:	4601      	mov	r1, r0
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f001 f8a6 	bl	800b430 <__pow5mult>
 800a2e4:	9b06      	ldr	r3, [sp, #24]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	f340 8081 	ble.w	800a3f0 <_dtoa_r+0x8c8>
 800a2ee:	f04f 0800 	mov.w	r8, #0
 800a2f2:	6933      	ldr	r3, [r6, #16]
 800a2f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2f8:	6918      	ldr	r0, [r3, #16]
 800a2fa:	f000 ff89 	bl	800b210 <__hi0bits>
 800a2fe:	f1c0 0020 	rsb	r0, r0, #32
 800a302:	9b05      	ldr	r3, [sp, #20]
 800a304:	4418      	add	r0, r3
 800a306:	f010 001f 	ands.w	r0, r0, #31
 800a30a:	f000 8092 	beq.w	800a432 <_dtoa_r+0x90a>
 800a30e:	f1c0 0320 	rsb	r3, r0, #32
 800a312:	2b04      	cmp	r3, #4
 800a314:	f340 808a 	ble.w	800a42c <_dtoa_r+0x904>
 800a318:	f1c0 001c 	rsb	r0, r0, #28
 800a31c:	9b04      	ldr	r3, [sp, #16]
 800a31e:	4403      	add	r3, r0
 800a320:	9304      	str	r3, [sp, #16]
 800a322:	9b05      	ldr	r3, [sp, #20]
 800a324:	4403      	add	r3, r0
 800a326:	4405      	add	r5, r0
 800a328:	9305      	str	r3, [sp, #20]
 800a32a:	9b04      	ldr	r3, [sp, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dd07      	ble.n	800a340 <_dtoa_r+0x818>
 800a330:	ee18 1a10 	vmov	r1, s16
 800a334:	461a      	mov	r2, r3
 800a336:	4620      	mov	r0, r4
 800a338:	f001 f8d4 	bl	800b4e4 <__lshift>
 800a33c:	ee08 0a10 	vmov	s16, r0
 800a340:	9b05      	ldr	r3, [sp, #20]
 800a342:	2b00      	cmp	r3, #0
 800a344:	dd05      	ble.n	800a352 <_dtoa_r+0x82a>
 800a346:	4631      	mov	r1, r6
 800a348:	461a      	mov	r2, r3
 800a34a:	4620      	mov	r0, r4
 800a34c:	f001 f8ca 	bl	800b4e4 <__lshift>
 800a350:	4606      	mov	r6, r0
 800a352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d06e      	beq.n	800a436 <_dtoa_r+0x90e>
 800a358:	ee18 0a10 	vmov	r0, s16
 800a35c:	4631      	mov	r1, r6
 800a35e:	f001 f931 	bl	800b5c4 <__mcmp>
 800a362:	2800      	cmp	r0, #0
 800a364:	da67      	bge.n	800a436 <_dtoa_r+0x90e>
 800a366:	9b00      	ldr	r3, [sp, #0]
 800a368:	3b01      	subs	r3, #1
 800a36a:	ee18 1a10 	vmov	r1, s16
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	220a      	movs	r2, #10
 800a372:	2300      	movs	r3, #0
 800a374:	4620      	mov	r0, r4
 800a376:	f000 febb 	bl	800b0f0 <__multadd>
 800a37a:	9b08      	ldr	r3, [sp, #32]
 800a37c:	ee08 0a10 	vmov	s16, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 81b1 	beq.w	800a6e8 <_dtoa_r+0xbc0>
 800a386:	2300      	movs	r3, #0
 800a388:	4639      	mov	r1, r7
 800a38a:	220a      	movs	r2, #10
 800a38c:	4620      	mov	r0, r4
 800a38e:	f000 feaf 	bl	800b0f0 <__multadd>
 800a392:	9b02      	ldr	r3, [sp, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	4607      	mov	r7, r0
 800a398:	f300 808e 	bgt.w	800a4b8 <_dtoa_r+0x990>
 800a39c:	9b06      	ldr	r3, [sp, #24]
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	dc51      	bgt.n	800a446 <_dtoa_r+0x91e>
 800a3a2:	e089      	b.n	800a4b8 <_dtoa_r+0x990>
 800a3a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3aa:	e74b      	b.n	800a244 <_dtoa_r+0x71c>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	1e5e      	subs	r6, r3, #1
 800a3b0:	9b07      	ldr	r3, [sp, #28]
 800a3b2:	42b3      	cmp	r3, r6
 800a3b4:	bfbf      	itttt	lt
 800a3b6:	9b07      	ldrlt	r3, [sp, #28]
 800a3b8:	9607      	strlt	r6, [sp, #28]
 800a3ba:	1af2      	sublt	r2, r6, r3
 800a3bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a3be:	bfb6      	itet	lt
 800a3c0:	189b      	addlt	r3, r3, r2
 800a3c2:	1b9e      	subge	r6, r3, r6
 800a3c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	bfb8      	it	lt
 800a3ca:	2600      	movlt	r6, #0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	bfb7      	itett	lt
 800a3d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a3d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a3d8:	1a9d      	sublt	r5, r3, r2
 800a3da:	2300      	movlt	r3, #0
 800a3dc:	e734      	b.n	800a248 <_dtoa_r+0x720>
 800a3de:	9e07      	ldr	r6, [sp, #28]
 800a3e0:	9d04      	ldr	r5, [sp, #16]
 800a3e2:	9f08      	ldr	r7, [sp, #32]
 800a3e4:	e73b      	b.n	800a25e <_dtoa_r+0x736>
 800a3e6:	9a07      	ldr	r2, [sp, #28]
 800a3e8:	e767      	b.n	800a2ba <_dtoa_r+0x792>
 800a3ea:	9b06      	ldr	r3, [sp, #24]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	dc18      	bgt.n	800a422 <_dtoa_r+0x8fa>
 800a3f0:	f1ba 0f00 	cmp.w	sl, #0
 800a3f4:	d115      	bne.n	800a422 <_dtoa_r+0x8fa>
 800a3f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3fa:	b993      	cbnz	r3, 800a422 <_dtoa_r+0x8fa>
 800a3fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a400:	0d1b      	lsrs	r3, r3, #20
 800a402:	051b      	lsls	r3, r3, #20
 800a404:	b183      	cbz	r3, 800a428 <_dtoa_r+0x900>
 800a406:	9b04      	ldr	r3, [sp, #16]
 800a408:	3301      	adds	r3, #1
 800a40a:	9304      	str	r3, [sp, #16]
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	3301      	adds	r3, #1
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	f04f 0801 	mov.w	r8, #1
 800a416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f47f af6a 	bne.w	800a2f2 <_dtoa_r+0x7ca>
 800a41e:	2001      	movs	r0, #1
 800a420:	e76f      	b.n	800a302 <_dtoa_r+0x7da>
 800a422:	f04f 0800 	mov.w	r8, #0
 800a426:	e7f6      	b.n	800a416 <_dtoa_r+0x8ee>
 800a428:	4698      	mov	r8, r3
 800a42a:	e7f4      	b.n	800a416 <_dtoa_r+0x8ee>
 800a42c:	f43f af7d 	beq.w	800a32a <_dtoa_r+0x802>
 800a430:	4618      	mov	r0, r3
 800a432:	301c      	adds	r0, #28
 800a434:	e772      	b.n	800a31c <_dtoa_r+0x7f4>
 800a436:	9b03      	ldr	r3, [sp, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dc37      	bgt.n	800a4ac <_dtoa_r+0x984>
 800a43c:	9b06      	ldr	r3, [sp, #24]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	dd34      	ble.n	800a4ac <_dtoa_r+0x984>
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	9302      	str	r3, [sp, #8]
 800a446:	9b02      	ldr	r3, [sp, #8]
 800a448:	b96b      	cbnz	r3, 800a466 <_dtoa_r+0x93e>
 800a44a:	4631      	mov	r1, r6
 800a44c:	2205      	movs	r2, #5
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 fe4e 	bl	800b0f0 <__multadd>
 800a454:	4601      	mov	r1, r0
 800a456:	4606      	mov	r6, r0
 800a458:	ee18 0a10 	vmov	r0, s16
 800a45c:	f001 f8b2 	bl	800b5c4 <__mcmp>
 800a460:	2800      	cmp	r0, #0
 800a462:	f73f adbb 	bgt.w	8009fdc <_dtoa_r+0x4b4>
 800a466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a468:	9d01      	ldr	r5, [sp, #4]
 800a46a:	43db      	mvns	r3, r3
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	f04f 0800 	mov.w	r8, #0
 800a472:	4631      	mov	r1, r6
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fe19 	bl	800b0ac <_Bfree>
 800a47a:	2f00      	cmp	r7, #0
 800a47c:	f43f aea4 	beq.w	800a1c8 <_dtoa_r+0x6a0>
 800a480:	f1b8 0f00 	cmp.w	r8, #0
 800a484:	d005      	beq.n	800a492 <_dtoa_r+0x96a>
 800a486:	45b8      	cmp	r8, r7
 800a488:	d003      	beq.n	800a492 <_dtoa_r+0x96a>
 800a48a:	4641      	mov	r1, r8
 800a48c:	4620      	mov	r0, r4
 800a48e:	f000 fe0d 	bl	800b0ac <_Bfree>
 800a492:	4639      	mov	r1, r7
 800a494:	4620      	mov	r0, r4
 800a496:	f000 fe09 	bl	800b0ac <_Bfree>
 800a49a:	e695      	b.n	800a1c8 <_dtoa_r+0x6a0>
 800a49c:	2600      	movs	r6, #0
 800a49e:	4637      	mov	r7, r6
 800a4a0:	e7e1      	b.n	800a466 <_dtoa_r+0x93e>
 800a4a2:	9700      	str	r7, [sp, #0]
 800a4a4:	4637      	mov	r7, r6
 800a4a6:	e599      	b.n	8009fdc <_dtoa_r+0x4b4>
 800a4a8:	40240000 	.word	0x40240000
 800a4ac:	9b08      	ldr	r3, [sp, #32]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 80ca 	beq.w	800a648 <_dtoa_r+0xb20>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	9302      	str	r3, [sp, #8]
 800a4b8:	2d00      	cmp	r5, #0
 800a4ba:	dd05      	ble.n	800a4c8 <_dtoa_r+0x9a0>
 800a4bc:	4639      	mov	r1, r7
 800a4be:	462a      	mov	r2, r5
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f001 f80f 	bl	800b4e4 <__lshift>
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	f1b8 0f00 	cmp.w	r8, #0
 800a4cc:	d05b      	beq.n	800a586 <_dtoa_r+0xa5e>
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 fdab 	bl	800b02c <_Balloc>
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	b928      	cbnz	r0, 800a4e6 <_dtoa_r+0x9be>
 800a4da:	4b87      	ldr	r3, [pc, #540]	; (800a6f8 <_dtoa_r+0xbd0>)
 800a4dc:	4602      	mov	r2, r0
 800a4de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4e2:	f7ff bb3b 	b.w	8009b5c <_dtoa_r+0x34>
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	3202      	adds	r2, #2
 800a4ea:	0092      	lsls	r2, r2, #2
 800a4ec:	f107 010c 	add.w	r1, r7, #12
 800a4f0:	300c      	adds	r0, #12
 800a4f2:	f000 fd8d 	bl	800b010 <memcpy>
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 fff2 	bl	800b4e4 <__lshift>
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	f103 0901 	add.w	r9, r3, #1
 800a506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a50a:	4413      	add	r3, r2
 800a50c:	9305      	str	r3, [sp, #20]
 800a50e:	f00a 0301 	and.w	r3, sl, #1
 800a512:	46b8      	mov	r8, r7
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	4607      	mov	r7, r0
 800a518:	4631      	mov	r1, r6
 800a51a:	ee18 0a10 	vmov	r0, s16
 800a51e:	f7ff fa77 	bl	8009a10 <quorem>
 800a522:	4641      	mov	r1, r8
 800a524:	9002      	str	r0, [sp, #8]
 800a526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a52a:	ee18 0a10 	vmov	r0, s16
 800a52e:	f001 f849 	bl	800b5c4 <__mcmp>
 800a532:	463a      	mov	r2, r7
 800a534:	9003      	str	r0, [sp, #12]
 800a536:	4631      	mov	r1, r6
 800a538:	4620      	mov	r0, r4
 800a53a:	f001 f85f 	bl	800b5fc <__mdiff>
 800a53e:	68c2      	ldr	r2, [r0, #12]
 800a540:	f109 3bff 	add.w	fp, r9, #4294967295
 800a544:	4605      	mov	r5, r0
 800a546:	bb02      	cbnz	r2, 800a58a <_dtoa_r+0xa62>
 800a548:	4601      	mov	r1, r0
 800a54a:	ee18 0a10 	vmov	r0, s16
 800a54e:	f001 f839 	bl	800b5c4 <__mcmp>
 800a552:	4602      	mov	r2, r0
 800a554:	4629      	mov	r1, r5
 800a556:	4620      	mov	r0, r4
 800a558:	9207      	str	r2, [sp, #28]
 800a55a:	f000 fda7 	bl	800b0ac <_Bfree>
 800a55e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a562:	ea43 0102 	orr.w	r1, r3, r2
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	430b      	orrs	r3, r1
 800a56a:	464d      	mov	r5, r9
 800a56c:	d10f      	bne.n	800a58e <_dtoa_r+0xa66>
 800a56e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a572:	d02a      	beq.n	800a5ca <_dtoa_r+0xaa2>
 800a574:	9b03      	ldr	r3, [sp, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd02      	ble.n	800a580 <_dtoa_r+0xa58>
 800a57a:	9b02      	ldr	r3, [sp, #8]
 800a57c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a580:	f88b a000 	strb.w	sl, [fp]
 800a584:	e775      	b.n	800a472 <_dtoa_r+0x94a>
 800a586:	4638      	mov	r0, r7
 800a588:	e7ba      	b.n	800a500 <_dtoa_r+0x9d8>
 800a58a:	2201      	movs	r2, #1
 800a58c:	e7e2      	b.n	800a554 <_dtoa_r+0xa2c>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	db04      	blt.n	800a59e <_dtoa_r+0xa76>
 800a594:	9906      	ldr	r1, [sp, #24]
 800a596:	430b      	orrs	r3, r1
 800a598:	9904      	ldr	r1, [sp, #16]
 800a59a:	430b      	orrs	r3, r1
 800a59c:	d122      	bne.n	800a5e4 <_dtoa_r+0xabc>
 800a59e:	2a00      	cmp	r2, #0
 800a5a0:	ddee      	ble.n	800a580 <_dtoa_r+0xa58>
 800a5a2:	ee18 1a10 	vmov	r1, s16
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 ff9b 	bl	800b4e4 <__lshift>
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	ee08 0a10 	vmov	s16, r0
 800a5b4:	f001 f806 	bl	800b5c4 <__mcmp>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	dc03      	bgt.n	800a5c4 <_dtoa_r+0xa9c>
 800a5bc:	d1e0      	bne.n	800a580 <_dtoa_r+0xa58>
 800a5be:	f01a 0f01 	tst.w	sl, #1
 800a5c2:	d0dd      	beq.n	800a580 <_dtoa_r+0xa58>
 800a5c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5c8:	d1d7      	bne.n	800a57a <_dtoa_r+0xa52>
 800a5ca:	2339      	movs	r3, #57	; 0x39
 800a5cc:	f88b 3000 	strb.w	r3, [fp]
 800a5d0:	462b      	mov	r3, r5
 800a5d2:	461d      	mov	r5, r3
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5da:	2a39      	cmp	r2, #57	; 0x39
 800a5dc:	d071      	beq.n	800a6c2 <_dtoa_r+0xb9a>
 800a5de:	3201      	adds	r2, #1
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	e746      	b.n	800a472 <_dtoa_r+0x94a>
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	dd07      	ble.n	800a5f8 <_dtoa_r+0xad0>
 800a5e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5ec:	d0ed      	beq.n	800a5ca <_dtoa_r+0xaa2>
 800a5ee:	f10a 0301 	add.w	r3, sl, #1
 800a5f2:	f88b 3000 	strb.w	r3, [fp]
 800a5f6:	e73c      	b.n	800a472 <_dtoa_r+0x94a>
 800a5f8:	9b05      	ldr	r3, [sp, #20]
 800a5fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a5fe:	4599      	cmp	r9, r3
 800a600:	d047      	beq.n	800a692 <_dtoa_r+0xb6a>
 800a602:	ee18 1a10 	vmov	r1, s16
 800a606:	2300      	movs	r3, #0
 800a608:	220a      	movs	r2, #10
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fd70 	bl	800b0f0 <__multadd>
 800a610:	45b8      	cmp	r8, r7
 800a612:	ee08 0a10 	vmov	s16, r0
 800a616:	f04f 0300 	mov.w	r3, #0
 800a61a:	f04f 020a 	mov.w	r2, #10
 800a61e:	4641      	mov	r1, r8
 800a620:	4620      	mov	r0, r4
 800a622:	d106      	bne.n	800a632 <_dtoa_r+0xb0a>
 800a624:	f000 fd64 	bl	800b0f0 <__multadd>
 800a628:	4680      	mov	r8, r0
 800a62a:	4607      	mov	r7, r0
 800a62c:	f109 0901 	add.w	r9, r9, #1
 800a630:	e772      	b.n	800a518 <_dtoa_r+0x9f0>
 800a632:	f000 fd5d 	bl	800b0f0 <__multadd>
 800a636:	4639      	mov	r1, r7
 800a638:	4680      	mov	r8, r0
 800a63a:	2300      	movs	r3, #0
 800a63c:	220a      	movs	r2, #10
 800a63e:	4620      	mov	r0, r4
 800a640:	f000 fd56 	bl	800b0f0 <__multadd>
 800a644:	4607      	mov	r7, r0
 800a646:	e7f1      	b.n	800a62c <_dtoa_r+0xb04>
 800a648:	9b03      	ldr	r3, [sp, #12]
 800a64a:	9302      	str	r3, [sp, #8]
 800a64c:	9d01      	ldr	r5, [sp, #4]
 800a64e:	ee18 0a10 	vmov	r0, s16
 800a652:	4631      	mov	r1, r6
 800a654:	f7ff f9dc 	bl	8009a10 <quorem>
 800a658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	f805 ab01 	strb.w	sl, [r5], #1
 800a662:	1aea      	subs	r2, r5, r3
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	4293      	cmp	r3, r2
 800a668:	dd09      	ble.n	800a67e <_dtoa_r+0xb56>
 800a66a:	ee18 1a10 	vmov	r1, s16
 800a66e:	2300      	movs	r3, #0
 800a670:	220a      	movs	r2, #10
 800a672:	4620      	mov	r0, r4
 800a674:	f000 fd3c 	bl	800b0f0 <__multadd>
 800a678:	ee08 0a10 	vmov	s16, r0
 800a67c:	e7e7      	b.n	800a64e <_dtoa_r+0xb26>
 800a67e:	9b02      	ldr	r3, [sp, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	bfc8      	it	gt
 800a684:	461d      	movgt	r5, r3
 800a686:	9b01      	ldr	r3, [sp, #4]
 800a688:	bfd8      	it	le
 800a68a:	2501      	movle	r5, #1
 800a68c:	441d      	add	r5, r3
 800a68e:	f04f 0800 	mov.w	r8, #0
 800a692:	ee18 1a10 	vmov	r1, s16
 800a696:	2201      	movs	r2, #1
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 ff23 	bl	800b4e4 <__lshift>
 800a69e:	4631      	mov	r1, r6
 800a6a0:	ee08 0a10 	vmov	s16, r0
 800a6a4:	f000 ff8e 	bl	800b5c4 <__mcmp>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	dc91      	bgt.n	800a5d0 <_dtoa_r+0xaa8>
 800a6ac:	d102      	bne.n	800a6b4 <_dtoa_r+0xb8c>
 800a6ae:	f01a 0f01 	tst.w	sl, #1
 800a6b2:	d18d      	bne.n	800a5d0 <_dtoa_r+0xaa8>
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	461d      	mov	r5, r3
 800a6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6bc:	2a30      	cmp	r2, #48	; 0x30
 800a6be:	d0fa      	beq.n	800a6b6 <_dtoa_r+0xb8e>
 800a6c0:	e6d7      	b.n	800a472 <_dtoa_r+0x94a>
 800a6c2:	9a01      	ldr	r2, [sp, #4]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d184      	bne.n	800a5d2 <_dtoa_r+0xaaa>
 800a6c8:	9b00      	ldr	r3, [sp, #0]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	2331      	movs	r3, #49	; 0x31
 800a6d0:	7013      	strb	r3, [r2, #0]
 800a6d2:	e6ce      	b.n	800a472 <_dtoa_r+0x94a>
 800a6d4:	4b09      	ldr	r3, [pc, #36]	; (800a6fc <_dtoa_r+0xbd4>)
 800a6d6:	f7ff ba95 	b.w	8009c04 <_dtoa_r+0xdc>
 800a6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f47f aa6e 	bne.w	8009bbe <_dtoa_r+0x96>
 800a6e2:	4b07      	ldr	r3, [pc, #28]	; (800a700 <_dtoa_r+0xbd8>)
 800a6e4:	f7ff ba8e 	b.w	8009c04 <_dtoa_r+0xdc>
 800a6e8:	9b02      	ldr	r3, [sp, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dcae      	bgt.n	800a64c <_dtoa_r+0xb24>
 800a6ee:	9b06      	ldr	r3, [sp, #24]
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	f73f aea8 	bgt.w	800a446 <_dtoa_r+0x91e>
 800a6f6:	e7a9      	b.n	800a64c <_dtoa_r+0xb24>
 800a6f8:	0800caf0 	.word	0x0800caf0
 800a6fc:	0800c8f4 	.word	0x0800c8f4
 800a700:	0800ca71 	.word	0x0800ca71

0800a704 <std>:
 800a704:	2300      	movs	r3, #0
 800a706:	b510      	push	{r4, lr}
 800a708:	4604      	mov	r4, r0
 800a70a:	e9c0 3300 	strd	r3, r3, [r0]
 800a70e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a712:	6083      	str	r3, [r0, #8]
 800a714:	8181      	strh	r1, [r0, #12]
 800a716:	6643      	str	r3, [r0, #100]	; 0x64
 800a718:	81c2      	strh	r2, [r0, #14]
 800a71a:	6183      	str	r3, [r0, #24]
 800a71c:	4619      	mov	r1, r3
 800a71e:	2208      	movs	r2, #8
 800a720:	305c      	adds	r0, #92	; 0x5c
 800a722:	f7fd fc09 	bl	8007f38 <memset>
 800a726:	4b05      	ldr	r3, [pc, #20]	; (800a73c <std+0x38>)
 800a728:	6263      	str	r3, [r4, #36]	; 0x24
 800a72a:	4b05      	ldr	r3, [pc, #20]	; (800a740 <std+0x3c>)
 800a72c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a72e:	4b05      	ldr	r3, [pc, #20]	; (800a744 <std+0x40>)
 800a730:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a732:	4b05      	ldr	r3, [pc, #20]	; (800a748 <std+0x44>)
 800a734:	6224      	str	r4, [r4, #32]
 800a736:	6323      	str	r3, [r4, #48]	; 0x30
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	bf00      	nop
 800a73c:	0800c139 	.word	0x0800c139
 800a740:	0800c15b 	.word	0x0800c15b
 800a744:	0800c193 	.word	0x0800c193
 800a748:	0800c1b7 	.word	0x0800c1b7

0800a74c <_cleanup_r>:
 800a74c:	4901      	ldr	r1, [pc, #4]	; (800a754 <_cleanup_r+0x8>)
 800a74e:	f000 b8af 	b.w	800a8b0 <_fwalk_reent>
 800a752:	bf00      	nop
 800a754:	0800c511 	.word	0x0800c511

0800a758 <__sfmoreglue>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	2268      	movs	r2, #104	; 0x68
 800a75c:	1e4d      	subs	r5, r1, #1
 800a75e:	4355      	muls	r5, r2
 800a760:	460e      	mov	r6, r1
 800a762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a766:	f001 f9a5 	bl	800bab4 <_malloc_r>
 800a76a:	4604      	mov	r4, r0
 800a76c:	b140      	cbz	r0, 800a780 <__sfmoreglue+0x28>
 800a76e:	2100      	movs	r1, #0
 800a770:	e9c0 1600 	strd	r1, r6, [r0]
 800a774:	300c      	adds	r0, #12
 800a776:	60a0      	str	r0, [r4, #8]
 800a778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a77c:	f7fd fbdc 	bl	8007f38 <memset>
 800a780:	4620      	mov	r0, r4
 800a782:	bd70      	pop	{r4, r5, r6, pc}

0800a784 <__sfp_lock_acquire>:
 800a784:	4801      	ldr	r0, [pc, #4]	; (800a78c <__sfp_lock_acquire+0x8>)
 800a786:	f000 bc26 	b.w	800afd6 <__retarget_lock_acquire_recursive>
 800a78a:	bf00      	nop
 800a78c:	20000539 	.word	0x20000539

0800a790 <__sfp_lock_release>:
 800a790:	4801      	ldr	r0, [pc, #4]	; (800a798 <__sfp_lock_release+0x8>)
 800a792:	f000 bc21 	b.w	800afd8 <__retarget_lock_release_recursive>
 800a796:	bf00      	nop
 800a798:	20000539 	.word	0x20000539

0800a79c <__sinit_lock_acquire>:
 800a79c:	4801      	ldr	r0, [pc, #4]	; (800a7a4 <__sinit_lock_acquire+0x8>)
 800a79e:	f000 bc1a 	b.w	800afd6 <__retarget_lock_acquire_recursive>
 800a7a2:	bf00      	nop
 800a7a4:	2000053a 	.word	0x2000053a

0800a7a8 <__sinit_lock_release>:
 800a7a8:	4801      	ldr	r0, [pc, #4]	; (800a7b0 <__sinit_lock_release+0x8>)
 800a7aa:	f000 bc15 	b.w	800afd8 <__retarget_lock_release_recursive>
 800a7ae:	bf00      	nop
 800a7b0:	2000053a 	.word	0x2000053a

0800a7b4 <__sinit>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	f7ff fff0 	bl	800a79c <__sinit_lock_acquire>
 800a7bc:	69a3      	ldr	r3, [r4, #24]
 800a7be:	b11b      	cbz	r3, 800a7c8 <__sinit+0x14>
 800a7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c4:	f7ff bff0 	b.w	800a7a8 <__sinit_lock_release>
 800a7c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7cc:	6523      	str	r3, [r4, #80]	; 0x50
 800a7ce:	4b13      	ldr	r3, [pc, #76]	; (800a81c <__sinit+0x68>)
 800a7d0:	4a13      	ldr	r2, [pc, #76]	; (800a820 <__sinit+0x6c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	bf04      	itt	eq
 800a7da:	2301      	moveq	r3, #1
 800a7dc:	61a3      	streq	r3, [r4, #24]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 f820 	bl	800a824 <__sfp>
 800a7e4:	6060      	str	r0, [r4, #4]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 f81c 	bl	800a824 <__sfp>
 800a7ec:	60a0      	str	r0, [r4, #8]
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 f818 	bl	800a824 <__sfp>
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	60e0      	str	r0, [r4, #12]
 800a7f8:	2104      	movs	r1, #4
 800a7fa:	6860      	ldr	r0, [r4, #4]
 800a7fc:	f7ff ff82 	bl	800a704 <std>
 800a800:	68a0      	ldr	r0, [r4, #8]
 800a802:	2201      	movs	r2, #1
 800a804:	2109      	movs	r1, #9
 800a806:	f7ff ff7d 	bl	800a704 <std>
 800a80a:	68e0      	ldr	r0, [r4, #12]
 800a80c:	2202      	movs	r2, #2
 800a80e:	2112      	movs	r1, #18
 800a810:	f7ff ff78 	bl	800a704 <std>
 800a814:	2301      	movs	r3, #1
 800a816:	61a3      	str	r3, [r4, #24]
 800a818:	e7d2      	b.n	800a7c0 <__sinit+0xc>
 800a81a:	bf00      	nop
 800a81c:	0800c8e0 	.word	0x0800c8e0
 800a820:	0800a74d 	.word	0x0800a74d

0800a824 <__sfp>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	4607      	mov	r7, r0
 800a828:	f7ff ffac 	bl	800a784 <__sfp_lock_acquire>
 800a82c:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <__sfp+0x84>)
 800a82e:	681e      	ldr	r6, [r3, #0]
 800a830:	69b3      	ldr	r3, [r6, #24]
 800a832:	b913      	cbnz	r3, 800a83a <__sfp+0x16>
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff ffbd 	bl	800a7b4 <__sinit>
 800a83a:	3648      	adds	r6, #72	; 0x48
 800a83c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a840:	3b01      	subs	r3, #1
 800a842:	d503      	bpl.n	800a84c <__sfp+0x28>
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	b30b      	cbz	r3, 800a88c <__sfp+0x68>
 800a848:	6836      	ldr	r6, [r6, #0]
 800a84a:	e7f7      	b.n	800a83c <__sfp+0x18>
 800a84c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a850:	b9d5      	cbnz	r5, 800a888 <__sfp+0x64>
 800a852:	4b16      	ldr	r3, [pc, #88]	; (800a8ac <__sfp+0x88>)
 800a854:	60e3      	str	r3, [r4, #12]
 800a856:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a85a:	6665      	str	r5, [r4, #100]	; 0x64
 800a85c:	f000 fbba 	bl	800afd4 <__retarget_lock_init_recursive>
 800a860:	f7ff ff96 	bl	800a790 <__sfp_lock_release>
 800a864:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a868:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a86c:	6025      	str	r5, [r4, #0]
 800a86e:	61a5      	str	r5, [r4, #24]
 800a870:	2208      	movs	r2, #8
 800a872:	4629      	mov	r1, r5
 800a874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a878:	f7fd fb5e 	bl	8007f38 <memset>
 800a87c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a884:	4620      	mov	r0, r4
 800a886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a888:	3468      	adds	r4, #104	; 0x68
 800a88a:	e7d9      	b.n	800a840 <__sfp+0x1c>
 800a88c:	2104      	movs	r1, #4
 800a88e:	4638      	mov	r0, r7
 800a890:	f7ff ff62 	bl	800a758 <__sfmoreglue>
 800a894:	4604      	mov	r4, r0
 800a896:	6030      	str	r0, [r6, #0]
 800a898:	2800      	cmp	r0, #0
 800a89a:	d1d5      	bne.n	800a848 <__sfp+0x24>
 800a89c:	f7ff ff78 	bl	800a790 <__sfp_lock_release>
 800a8a0:	230c      	movs	r3, #12
 800a8a2:	603b      	str	r3, [r7, #0]
 800a8a4:	e7ee      	b.n	800a884 <__sfp+0x60>
 800a8a6:	bf00      	nop
 800a8a8:	0800c8e0 	.word	0x0800c8e0
 800a8ac:	ffff0001 	.word	0xffff0001

0800a8b0 <_fwalk_reent>:
 800a8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	4688      	mov	r8, r1
 800a8b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8bc:	2700      	movs	r7, #0
 800a8be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8c2:	f1b9 0901 	subs.w	r9, r9, #1
 800a8c6:	d505      	bpl.n	800a8d4 <_fwalk_reent+0x24>
 800a8c8:	6824      	ldr	r4, [r4, #0]
 800a8ca:	2c00      	cmp	r4, #0
 800a8cc:	d1f7      	bne.n	800a8be <_fwalk_reent+0xe>
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8d4:	89ab      	ldrh	r3, [r5, #12]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d907      	bls.n	800a8ea <_fwalk_reent+0x3a>
 800a8da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	d003      	beq.n	800a8ea <_fwalk_reent+0x3a>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	47c0      	blx	r8
 800a8e8:	4307      	orrs	r7, r0
 800a8ea:	3568      	adds	r5, #104	; 0x68
 800a8ec:	e7e9      	b.n	800a8c2 <_fwalk_reent+0x12>

0800a8ee <rshift>:
 800a8ee:	6903      	ldr	r3, [r0, #16]
 800a8f0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a8f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8f8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a8fc:	f100 0414 	add.w	r4, r0, #20
 800a900:	dd45      	ble.n	800a98e <rshift+0xa0>
 800a902:	f011 011f 	ands.w	r1, r1, #31
 800a906:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a90a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a90e:	d10c      	bne.n	800a92a <rshift+0x3c>
 800a910:	f100 0710 	add.w	r7, r0, #16
 800a914:	4629      	mov	r1, r5
 800a916:	42b1      	cmp	r1, r6
 800a918:	d334      	bcc.n	800a984 <rshift+0x96>
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	1eea      	subs	r2, r5, #3
 800a920:	4296      	cmp	r6, r2
 800a922:	bf38      	it	cc
 800a924:	2300      	movcc	r3, #0
 800a926:	4423      	add	r3, r4
 800a928:	e015      	b.n	800a956 <rshift+0x68>
 800a92a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a92e:	f1c1 0820 	rsb	r8, r1, #32
 800a932:	40cf      	lsrs	r7, r1
 800a934:	f105 0e04 	add.w	lr, r5, #4
 800a938:	46a1      	mov	r9, r4
 800a93a:	4576      	cmp	r6, lr
 800a93c:	46f4      	mov	ip, lr
 800a93e:	d815      	bhi.n	800a96c <rshift+0x7e>
 800a940:	1a9a      	subs	r2, r3, r2
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	3a04      	subs	r2, #4
 800a946:	3501      	adds	r5, #1
 800a948:	42ae      	cmp	r6, r5
 800a94a:	bf38      	it	cc
 800a94c:	2200      	movcc	r2, #0
 800a94e:	18a3      	adds	r3, r4, r2
 800a950:	50a7      	str	r7, [r4, r2]
 800a952:	b107      	cbz	r7, 800a956 <rshift+0x68>
 800a954:	3304      	adds	r3, #4
 800a956:	1b1a      	subs	r2, r3, r4
 800a958:	42a3      	cmp	r3, r4
 800a95a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a95e:	bf08      	it	eq
 800a960:	2300      	moveq	r3, #0
 800a962:	6102      	str	r2, [r0, #16]
 800a964:	bf08      	it	eq
 800a966:	6143      	streq	r3, [r0, #20]
 800a968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a96c:	f8dc c000 	ldr.w	ip, [ip]
 800a970:	fa0c fc08 	lsl.w	ip, ip, r8
 800a974:	ea4c 0707 	orr.w	r7, ip, r7
 800a978:	f849 7b04 	str.w	r7, [r9], #4
 800a97c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a980:	40cf      	lsrs	r7, r1
 800a982:	e7da      	b.n	800a93a <rshift+0x4c>
 800a984:	f851 cb04 	ldr.w	ip, [r1], #4
 800a988:	f847 cf04 	str.w	ip, [r7, #4]!
 800a98c:	e7c3      	b.n	800a916 <rshift+0x28>
 800a98e:	4623      	mov	r3, r4
 800a990:	e7e1      	b.n	800a956 <rshift+0x68>

0800a992 <__hexdig_fun>:
 800a992:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a996:	2b09      	cmp	r3, #9
 800a998:	d802      	bhi.n	800a9a0 <__hexdig_fun+0xe>
 800a99a:	3820      	subs	r0, #32
 800a99c:	b2c0      	uxtb	r0, r0
 800a99e:	4770      	bx	lr
 800a9a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a9a4:	2b05      	cmp	r3, #5
 800a9a6:	d801      	bhi.n	800a9ac <__hexdig_fun+0x1a>
 800a9a8:	3847      	subs	r0, #71	; 0x47
 800a9aa:	e7f7      	b.n	800a99c <__hexdig_fun+0xa>
 800a9ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a9b0:	2b05      	cmp	r3, #5
 800a9b2:	d801      	bhi.n	800a9b8 <__hexdig_fun+0x26>
 800a9b4:	3827      	subs	r0, #39	; 0x27
 800a9b6:	e7f1      	b.n	800a99c <__hexdig_fun+0xa>
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	4770      	bx	lr

0800a9bc <__gethex>:
 800a9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c0:	ed2d 8b02 	vpush	{d8}
 800a9c4:	b089      	sub	sp, #36	; 0x24
 800a9c6:	ee08 0a10 	vmov	s16, r0
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	4bb4      	ldr	r3, [pc, #720]	; (800aca0 <__gethex+0x2e4>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	468b      	mov	fp, r1
 800a9d6:	4690      	mov	r8, r2
 800a9d8:	f7f5 fbfa 	bl	80001d0 <strlen>
 800a9dc:	9b01      	ldr	r3, [sp, #4]
 800a9de:	f8db 2000 	ldr.w	r2, [fp]
 800a9e2:	4403      	add	r3, r0
 800a9e4:	4682      	mov	sl, r0
 800a9e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a9ea:	9305      	str	r3, [sp, #20]
 800a9ec:	1c93      	adds	r3, r2, #2
 800a9ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a9f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a9f6:	32fe      	adds	r2, #254	; 0xfe
 800a9f8:	18d1      	adds	r1, r2, r3
 800a9fa:	461f      	mov	r7, r3
 800a9fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa00:	9100      	str	r1, [sp, #0]
 800aa02:	2830      	cmp	r0, #48	; 0x30
 800aa04:	d0f8      	beq.n	800a9f8 <__gethex+0x3c>
 800aa06:	f7ff ffc4 	bl	800a992 <__hexdig_fun>
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d13a      	bne.n	800aa86 <__gethex+0xca>
 800aa10:	9901      	ldr	r1, [sp, #4]
 800aa12:	4652      	mov	r2, sl
 800aa14:	4638      	mov	r0, r7
 800aa16:	f001 fbd2 	bl	800c1be <strncmp>
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d168      	bne.n	800aaf2 <__gethex+0x136>
 800aa20:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aa24:	eb07 060a 	add.w	r6, r7, sl
 800aa28:	f7ff ffb3 	bl	800a992 <__hexdig_fun>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d062      	beq.n	800aaf6 <__gethex+0x13a>
 800aa30:	4633      	mov	r3, r6
 800aa32:	7818      	ldrb	r0, [r3, #0]
 800aa34:	2830      	cmp	r0, #48	; 0x30
 800aa36:	461f      	mov	r7, r3
 800aa38:	f103 0301 	add.w	r3, r3, #1
 800aa3c:	d0f9      	beq.n	800aa32 <__gethex+0x76>
 800aa3e:	f7ff ffa8 	bl	800a992 <__hexdig_fun>
 800aa42:	2301      	movs	r3, #1
 800aa44:	fab0 f480 	clz	r4, r0
 800aa48:	0964      	lsrs	r4, r4, #5
 800aa4a:	4635      	mov	r5, r6
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	463a      	mov	r2, r7
 800aa50:	4616      	mov	r6, r2
 800aa52:	3201      	adds	r2, #1
 800aa54:	7830      	ldrb	r0, [r6, #0]
 800aa56:	f7ff ff9c 	bl	800a992 <__hexdig_fun>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d1f8      	bne.n	800aa50 <__gethex+0x94>
 800aa5e:	9901      	ldr	r1, [sp, #4]
 800aa60:	4652      	mov	r2, sl
 800aa62:	4630      	mov	r0, r6
 800aa64:	f001 fbab 	bl	800c1be <strncmp>
 800aa68:	b980      	cbnz	r0, 800aa8c <__gethex+0xd0>
 800aa6a:	b94d      	cbnz	r5, 800aa80 <__gethex+0xc4>
 800aa6c:	eb06 050a 	add.w	r5, r6, sl
 800aa70:	462a      	mov	r2, r5
 800aa72:	4616      	mov	r6, r2
 800aa74:	3201      	adds	r2, #1
 800aa76:	7830      	ldrb	r0, [r6, #0]
 800aa78:	f7ff ff8b 	bl	800a992 <__hexdig_fun>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1f8      	bne.n	800aa72 <__gethex+0xb6>
 800aa80:	1bad      	subs	r5, r5, r6
 800aa82:	00ad      	lsls	r5, r5, #2
 800aa84:	e004      	b.n	800aa90 <__gethex+0xd4>
 800aa86:	2400      	movs	r4, #0
 800aa88:	4625      	mov	r5, r4
 800aa8a:	e7e0      	b.n	800aa4e <__gethex+0x92>
 800aa8c:	2d00      	cmp	r5, #0
 800aa8e:	d1f7      	bne.n	800aa80 <__gethex+0xc4>
 800aa90:	7833      	ldrb	r3, [r6, #0]
 800aa92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa96:	2b50      	cmp	r3, #80	; 0x50
 800aa98:	d13b      	bne.n	800ab12 <__gethex+0x156>
 800aa9a:	7873      	ldrb	r3, [r6, #1]
 800aa9c:	2b2b      	cmp	r3, #43	; 0x2b
 800aa9e:	d02c      	beq.n	800aafa <__gethex+0x13e>
 800aaa0:	2b2d      	cmp	r3, #45	; 0x2d
 800aaa2:	d02e      	beq.n	800ab02 <__gethex+0x146>
 800aaa4:	1c71      	adds	r1, r6, #1
 800aaa6:	f04f 0900 	mov.w	r9, #0
 800aaaa:	7808      	ldrb	r0, [r1, #0]
 800aaac:	f7ff ff71 	bl	800a992 <__hexdig_fun>
 800aab0:	1e43      	subs	r3, r0, #1
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b18      	cmp	r3, #24
 800aab6:	d82c      	bhi.n	800ab12 <__gethex+0x156>
 800aab8:	f1a0 0210 	sub.w	r2, r0, #16
 800aabc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aac0:	f7ff ff67 	bl	800a992 <__hexdig_fun>
 800aac4:	1e43      	subs	r3, r0, #1
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b18      	cmp	r3, #24
 800aaca:	d91d      	bls.n	800ab08 <__gethex+0x14c>
 800aacc:	f1b9 0f00 	cmp.w	r9, #0
 800aad0:	d000      	beq.n	800aad4 <__gethex+0x118>
 800aad2:	4252      	negs	r2, r2
 800aad4:	4415      	add	r5, r2
 800aad6:	f8cb 1000 	str.w	r1, [fp]
 800aada:	b1e4      	cbz	r4, 800ab16 <__gethex+0x15a>
 800aadc:	9b00      	ldr	r3, [sp, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	bf14      	ite	ne
 800aae2:	2700      	movne	r7, #0
 800aae4:	2706      	moveq	r7, #6
 800aae6:	4638      	mov	r0, r7
 800aae8:	b009      	add	sp, #36	; 0x24
 800aaea:	ecbd 8b02 	vpop	{d8}
 800aaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf2:	463e      	mov	r6, r7
 800aaf4:	4625      	mov	r5, r4
 800aaf6:	2401      	movs	r4, #1
 800aaf8:	e7ca      	b.n	800aa90 <__gethex+0xd4>
 800aafa:	f04f 0900 	mov.w	r9, #0
 800aafe:	1cb1      	adds	r1, r6, #2
 800ab00:	e7d3      	b.n	800aaaa <__gethex+0xee>
 800ab02:	f04f 0901 	mov.w	r9, #1
 800ab06:	e7fa      	b.n	800aafe <__gethex+0x142>
 800ab08:	230a      	movs	r3, #10
 800ab0a:	fb03 0202 	mla	r2, r3, r2, r0
 800ab0e:	3a10      	subs	r2, #16
 800ab10:	e7d4      	b.n	800aabc <__gethex+0x100>
 800ab12:	4631      	mov	r1, r6
 800ab14:	e7df      	b.n	800aad6 <__gethex+0x11a>
 800ab16:	1bf3      	subs	r3, r6, r7
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	2b07      	cmp	r3, #7
 800ab1e:	dc0b      	bgt.n	800ab38 <__gethex+0x17c>
 800ab20:	ee18 0a10 	vmov	r0, s16
 800ab24:	f000 fa82 	bl	800b02c <_Balloc>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	b940      	cbnz	r0, 800ab3e <__gethex+0x182>
 800ab2c:	4b5d      	ldr	r3, [pc, #372]	; (800aca4 <__gethex+0x2e8>)
 800ab2e:	4602      	mov	r2, r0
 800ab30:	21de      	movs	r1, #222	; 0xde
 800ab32:	485d      	ldr	r0, [pc, #372]	; (800aca8 <__gethex+0x2ec>)
 800ab34:	f001 fc38 	bl	800c3a8 <__assert_func>
 800ab38:	3101      	adds	r1, #1
 800ab3a:	105b      	asrs	r3, r3, #1
 800ab3c:	e7ee      	b.n	800ab1c <__gethex+0x160>
 800ab3e:	f100 0914 	add.w	r9, r0, #20
 800ab42:	f04f 0b00 	mov.w	fp, #0
 800ab46:	f1ca 0301 	rsb	r3, sl, #1
 800ab4a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab4e:	f8cd b000 	str.w	fp, [sp]
 800ab52:	9306      	str	r3, [sp, #24]
 800ab54:	42b7      	cmp	r7, r6
 800ab56:	d340      	bcc.n	800abda <__gethex+0x21e>
 800ab58:	9802      	ldr	r0, [sp, #8]
 800ab5a:	9b00      	ldr	r3, [sp, #0]
 800ab5c:	f840 3b04 	str.w	r3, [r0], #4
 800ab60:	eba0 0009 	sub.w	r0, r0, r9
 800ab64:	1080      	asrs	r0, r0, #2
 800ab66:	0146      	lsls	r6, r0, #5
 800ab68:	6120      	str	r0, [r4, #16]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 fb50 	bl	800b210 <__hi0bits>
 800ab70:	1a30      	subs	r0, r6, r0
 800ab72:	f8d8 6000 	ldr.w	r6, [r8]
 800ab76:	42b0      	cmp	r0, r6
 800ab78:	dd63      	ble.n	800ac42 <__gethex+0x286>
 800ab7a:	1b87      	subs	r7, r0, r6
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 fef4 	bl	800b96c <__any_on>
 800ab84:	4682      	mov	sl, r0
 800ab86:	b1a8      	cbz	r0, 800abb4 <__gethex+0x1f8>
 800ab88:	1e7b      	subs	r3, r7, #1
 800ab8a:	1159      	asrs	r1, r3, #5
 800ab8c:	f003 021f 	and.w	r2, r3, #31
 800ab90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ab94:	f04f 0a01 	mov.w	sl, #1
 800ab98:	fa0a f202 	lsl.w	r2, sl, r2
 800ab9c:	420a      	tst	r2, r1
 800ab9e:	d009      	beq.n	800abb4 <__gethex+0x1f8>
 800aba0:	4553      	cmp	r3, sl
 800aba2:	dd05      	ble.n	800abb0 <__gethex+0x1f4>
 800aba4:	1eb9      	subs	r1, r7, #2
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 fee0 	bl	800b96c <__any_on>
 800abac:	2800      	cmp	r0, #0
 800abae:	d145      	bne.n	800ac3c <__gethex+0x280>
 800abb0:	f04f 0a02 	mov.w	sl, #2
 800abb4:	4639      	mov	r1, r7
 800abb6:	4620      	mov	r0, r4
 800abb8:	f7ff fe99 	bl	800a8ee <rshift>
 800abbc:	443d      	add	r5, r7
 800abbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abc2:	42ab      	cmp	r3, r5
 800abc4:	da4c      	bge.n	800ac60 <__gethex+0x2a4>
 800abc6:	ee18 0a10 	vmov	r0, s16
 800abca:	4621      	mov	r1, r4
 800abcc:	f000 fa6e 	bl	800b0ac <_Bfree>
 800abd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abd2:	2300      	movs	r3, #0
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	27a3      	movs	r7, #163	; 0xa3
 800abd8:	e785      	b.n	800aae6 <__gethex+0x12a>
 800abda:	1e73      	subs	r3, r6, #1
 800abdc:	9a05      	ldr	r2, [sp, #20]
 800abde:	9303      	str	r3, [sp, #12]
 800abe0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d019      	beq.n	800ac1c <__gethex+0x260>
 800abe8:	f1bb 0f20 	cmp.w	fp, #32
 800abec:	d107      	bne.n	800abfe <__gethex+0x242>
 800abee:	9b02      	ldr	r3, [sp, #8]
 800abf0:	9a00      	ldr	r2, [sp, #0]
 800abf2:	f843 2b04 	str.w	r2, [r3], #4
 800abf6:	9302      	str	r3, [sp, #8]
 800abf8:	2300      	movs	r3, #0
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	469b      	mov	fp, r3
 800abfe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ac02:	f7ff fec6 	bl	800a992 <__hexdig_fun>
 800ac06:	9b00      	ldr	r3, [sp, #0]
 800ac08:	f000 000f 	and.w	r0, r0, #15
 800ac0c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac10:	4303      	orrs	r3, r0
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	f10b 0b04 	add.w	fp, fp, #4
 800ac18:	9b03      	ldr	r3, [sp, #12]
 800ac1a:	e00d      	b.n	800ac38 <__gethex+0x27c>
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	9a06      	ldr	r2, [sp, #24]
 800ac20:	4413      	add	r3, r2
 800ac22:	42bb      	cmp	r3, r7
 800ac24:	d3e0      	bcc.n	800abe8 <__gethex+0x22c>
 800ac26:	4618      	mov	r0, r3
 800ac28:	9901      	ldr	r1, [sp, #4]
 800ac2a:	9307      	str	r3, [sp, #28]
 800ac2c:	4652      	mov	r2, sl
 800ac2e:	f001 fac6 	bl	800c1be <strncmp>
 800ac32:	9b07      	ldr	r3, [sp, #28]
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d1d7      	bne.n	800abe8 <__gethex+0x22c>
 800ac38:	461e      	mov	r6, r3
 800ac3a:	e78b      	b.n	800ab54 <__gethex+0x198>
 800ac3c:	f04f 0a03 	mov.w	sl, #3
 800ac40:	e7b8      	b.n	800abb4 <__gethex+0x1f8>
 800ac42:	da0a      	bge.n	800ac5a <__gethex+0x29e>
 800ac44:	1a37      	subs	r7, r6, r0
 800ac46:	4621      	mov	r1, r4
 800ac48:	ee18 0a10 	vmov	r0, s16
 800ac4c:	463a      	mov	r2, r7
 800ac4e:	f000 fc49 	bl	800b4e4 <__lshift>
 800ac52:	1bed      	subs	r5, r5, r7
 800ac54:	4604      	mov	r4, r0
 800ac56:	f100 0914 	add.w	r9, r0, #20
 800ac5a:	f04f 0a00 	mov.w	sl, #0
 800ac5e:	e7ae      	b.n	800abbe <__gethex+0x202>
 800ac60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ac64:	42a8      	cmp	r0, r5
 800ac66:	dd72      	ble.n	800ad4e <__gethex+0x392>
 800ac68:	1b45      	subs	r5, r0, r5
 800ac6a:	42ae      	cmp	r6, r5
 800ac6c:	dc36      	bgt.n	800acdc <__gethex+0x320>
 800ac6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d02a      	beq.n	800accc <__gethex+0x310>
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d02c      	beq.n	800acd4 <__gethex+0x318>
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d11c      	bne.n	800acb8 <__gethex+0x2fc>
 800ac7e:	42ae      	cmp	r6, r5
 800ac80:	d11a      	bne.n	800acb8 <__gethex+0x2fc>
 800ac82:	2e01      	cmp	r6, #1
 800ac84:	d112      	bne.n	800acac <__gethex+0x2f0>
 800ac86:	9a04      	ldr	r2, [sp, #16]
 800ac88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	2301      	movs	r3, #1
 800ac90:	6123      	str	r3, [r4, #16]
 800ac92:	f8c9 3000 	str.w	r3, [r9]
 800ac96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac98:	2762      	movs	r7, #98	; 0x62
 800ac9a:	601c      	str	r4, [r3, #0]
 800ac9c:	e723      	b.n	800aae6 <__gethex+0x12a>
 800ac9e:	bf00      	nop
 800aca0:	0800cbcc 	.word	0x0800cbcc
 800aca4:	0800caf0 	.word	0x0800caf0
 800aca8:	0800cb64 	.word	0x0800cb64
 800acac:	1e71      	subs	r1, r6, #1
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 fe5c 	bl	800b96c <__any_on>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d1e6      	bne.n	800ac86 <__gethex+0x2ca>
 800acb8:	ee18 0a10 	vmov	r0, s16
 800acbc:	4621      	mov	r1, r4
 800acbe:	f000 f9f5 	bl	800b0ac <_Bfree>
 800acc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acc4:	2300      	movs	r3, #0
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	2750      	movs	r7, #80	; 0x50
 800acca:	e70c      	b.n	800aae6 <__gethex+0x12a>
 800accc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1f2      	bne.n	800acb8 <__gethex+0x2fc>
 800acd2:	e7d8      	b.n	800ac86 <__gethex+0x2ca>
 800acd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1d5      	bne.n	800ac86 <__gethex+0x2ca>
 800acda:	e7ed      	b.n	800acb8 <__gethex+0x2fc>
 800acdc:	1e6f      	subs	r7, r5, #1
 800acde:	f1ba 0f00 	cmp.w	sl, #0
 800ace2:	d131      	bne.n	800ad48 <__gethex+0x38c>
 800ace4:	b127      	cbz	r7, 800acf0 <__gethex+0x334>
 800ace6:	4639      	mov	r1, r7
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 fe3f 	bl	800b96c <__any_on>
 800acee:	4682      	mov	sl, r0
 800acf0:	117b      	asrs	r3, r7, #5
 800acf2:	2101      	movs	r1, #1
 800acf4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800acf8:	f007 071f 	and.w	r7, r7, #31
 800acfc:	fa01 f707 	lsl.w	r7, r1, r7
 800ad00:	421f      	tst	r7, r3
 800ad02:	4629      	mov	r1, r5
 800ad04:	4620      	mov	r0, r4
 800ad06:	bf18      	it	ne
 800ad08:	f04a 0a02 	orrne.w	sl, sl, #2
 800ad0c:	1b76      	subs	r6, r6, r5
 800ad0e:	f7ff fdee 	bl	800a8ee <rshift>
 800ad12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad16:	2702      	movs	r7, #2
 800ad18:	f1ba 0f00 	cmp.w	sl, #0
 800ad1c:	d048      	beq.n	800adb0 <__gethex+0x3f4>
 800ad1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d015      	beq.n	800ad52 <__gethex+0x396>
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d017      	beq.n	800ad5a <__gethex+0x39e>
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d109      	bne.n	800ad42 <__gethex+0x386>
 800ad2e:	f01a 0f02 	tst.w	sl, #2
 800ad32:	d006      	beq.n	800ad42 <__gethex+0x386>
 800ad34:	f8d9 0000 	ldr.w	r0, [r9]
 800ad38:	ea4a 0a00 	orr.w	sl, sl, r0
 800ad3c:	f01a 0f01 	tst.w	sl, #1
 800ad40:	d10e      	bne.n	800ad60 <__gethex+0x3a4>
 800ad42:	f047 0710 	orr.w	r7, r7, #16
 800ad46:	e033      	b.n	800adb0 <__gethex+0x3f4>
 800ad48:	f04f 0a01 	mov.w	sl, #1
 800ad4c:	e7d0      	b.n	800acf0 <__gethex+0x334>
 800ad4e:	2701      	movs	r7, #1
 800ad50:	e7e2      	b.n	800ad18 <__gethex+0x35c>
 800ad52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad54:	f1c3 0301 	rsb	r3, r3, #1
 800ad58:	9315      	str	r3, [sp, #84]	; 0x54
 800ad5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0f0      	beq.n	800ad42 <__gethex+0x386>
 800ad60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad64:	f104 0314 	add.w	r3, r4, #20
 800ad68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad70:	f04f 0c00 	mov.w	ip, #0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad7e:	d01c      	beq.n	800adba <__gethex+0x3fe>
 800ad80:	3201      	adds	r2, #1
 800ad82:	6002      	str	r2, [r0, #0]
 800ad84:	2f02      	cmp	r7, #2
 800ad86:	f104 0314 	add.w	r3, r4, #20
 800ad8a:	d13f      	bne.n	800ae0c <__gethex+0x450>
 800ad8c:	f8d8 2000 	ldr.w	r2, [r8]
 800ad90:	3a01      	subs	r2, #1
 800ad92:	42b2      	cmp	r2, r6
 800ad94:	d10a      	bne.n	800adac <__gethex+0x3f0>
 800ad96:	1171      	asrs	r1, r6, #5
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad9e:	f006 061f 	and.w	r6, r6, #31
 800ada2:	fa02 f606 	lsl.w	r6, r2, r6
 800ada6:	421e      	tst	r6, r3
 800ada8:	bf18      	it	ne
 800adaa:	4617      	movne	r7, r2
 800adac:	f047 0720 	orr.w	r7, r7, #32
 800adb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adb2:	601c      	str	r4, [r3, #0]
 800adb4:	9b04      	ldr	r3, [sp, #16]
 800adb6:	601d      	str	r5, [r3, #0]
 800adb8:	e695      	b.n	800aae6 <__gethex+0x12a>
 800adba:	4299      	cmp	r1, r3
 800adbc:	f843 cc04 	str.w	ip, [r3, #-4]
 800adc0:	d8d8      	bhi.n	800ad74 <__gethex+0x3b8>
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	459b      	cmp	fp, r3
 800adc6:	db19      	blt.n	800adfc <__gethex+0x440>
 800adc8:	6861      	ldr	r1, [r4, #4]
 800adca:	ee18 0a10 	vmov	r0, s16
 800adce:	3101      	adds	r1, #1
 800add0:	f000 f92c 	bl	800b02c <_Balloc>
 800add4:	4681      	mov	r9, r0
 800add6:	b918      	cbnz	r0, 800ade0 <__gethex+0x424>
 800add8:	4b1a      	ldr	r3, [pc, #104]	; (800ae44 <__gethex+0x488>)
 800adda:	4602      	mov	r2, r0
 800addc:	2184      	movs	r1, #132	; 0x84
 800adde:	e6a8      	b.n	800ab32 <__gethex+0x176>
 800ade0:	6922      	ldr	r2, [r4, #16]
 800ade2:	3202      	adds	r2, #2
 800ade4:	f104 010c 	add.w	r1, r4, #12
 800ade8:	0092      	lsls	r2, r2, #2
 800adea:	300c      	adds	r0, #12
 800adec:	f000 f910 	bl	800b010 <memcpy>
 800adf0:	4621      	mov	r1, r4
 800adf2:	ee18 0a10 	vmov	r0, s16
 800adf6:	f000 f959 	bl	800b0ac <_Bfree>
 800adfa:	464c      	mov	r4, r9
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae04:	6122      	str	r2, [r4, #16]
 800ae06:	2201      	movs	r2, #1
 800ae08:	615a      	str	r2, [r3, #20]
 800ae0a:	e7bb      	b.n	800ad84 <__gethex+0x3c8>
 800ae0c:	6922      	ldr	r2, [r4, #16]
 800ae0e:	455a      	cmp	r2, fp
 800ae10:	dd0b      	ble.n	800ae2a <__gethex+0x46e>
 800ae12:	2101      	movs	r1, #1
 800ae14:	4620      	mov	r0, r4
 800ae16:	f7ff fd6a 	bl	800a8ee <rshift>
 800ae1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae1e:	3501      	adds	r5, #1
 800ae20:	42ab      	cmp	r3, r5
 800ae22:	f6ff aed0 	blt.w	800abc6 <__gethex+0x20a>
 800ae26:	2701      	movs	r7, #1
 800ae28:	e7c0      	b.n	800adac <__gethex+0x3f0>
 800ae2a:	f016 061f 	ands.w	r6, r6, #31
 800ae2e:	d0fa      	beq.n	800ae26 <__gethex+0x46a>
 800ae30:	4453      	add	r3, sl
 800ae32:	f1c6 0620 	rsb	r6, r6, #32
 800ae36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae3a:	f000 f9e9 	bl	800b210 <__hi0bits>
 800ae3e:	42b0      	cmp	r0, r6
 800ae40:	dbe7      	blt.n	800ae12 <__gethex+0x456>
 800ae42:	e7f0      	b.n	800ae26 <__gethex+0x46a>
 800ae44:	0800caf0 	.word	0x0800caf0

0800ae48 <L_shift>:
 800ae48:	f1c2 0208 	rsb	r2, r2, #8
 800ae4c:	0092      	lsls	r2, r2, #2
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	f1c2 0620 	rsb	r6, r2, #32
 800ae54:	6843      	ldr	r3, [r0, #4]
 800ae56:	6804      	ldr	r4, [r0, #0]
 800ae58:	fa03 f506 	lsl.w	r5, r3, r6
 800ae5c:	432c      	orrs	r4, r5
 800ae5e:	40d3      	lsrs	r3, r2
 800ae60:	6004      	str	r4, [r0, #0]
 800ae62:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae66:	4288      	cmp	r0, r1
 800ae68:	d3f4      	bcc.n	800ae54 <L_shift+0xc>
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}

0800ae6c <__match>:
 800ae6c:	b530      	push	{r4, r5, lr}
 800ae6e:	6803      	ldr	r3, [r0, #0]
 800ae70:	3301      	adds	r3, #1
 800ae72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae76:	b914      	cbnz	r4, 800ae7e <__match+0x12>
 800ae78:	6003      	str	r3, [r0, #0]
 800ae7a:	2001      	movs	r0, #1
 800ae7c:	bd30      	pop	{r4, r5, pc}
 800ae7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ae86:	2d19      	cmp	r5, #25
 800ae88:	bf98      	it	ls
 800ae8a:	3220      	addls	r2, #32
 800ae8c:	42a2      	cmp	r2, r4
 800ae8e:	d0f0      	beq.n	800ae72 <__match+0x6>
 800ae90:	2000      	movs	r0, #0
 800ae92:	e7f3      	b.n	800ae7c <__match+0x10>

0800ae94 <__hexnan>:
 800ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae98:	680b      	ldr	r3, [r1, #0]
 800ae9a:	115e      	asrs	r6, r3, #5
 800ae9c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aea0:	f013 031f 	ands.w	r3, r3, #31
 800aea4:	b087      	sub	sp, #28
 800aea6:	bf18      	it	ne
 800aea8:	3604      	addne	r6, #4
 800aeaa:	2500      	movs	r5, #0
 800aeac:	1f37      	subs	r7, r6, #4
 800aeae:	4690      	mov	r8, r2
 800aeb0:	6802      	ldr	r2, [r0, #0]
 800aeb2:	9301      	str	r3, [sp, #4]
 800aeb4:	4682      	mov	sl, r0
 800aeb6:	f846 5c04 	str.w	r5, [r6, #-4]
 800aeba:	46b9      	mov	r9, r7
 800aebc:	463c      	mov	r4, r7
 800aebe:	9502      	str	r5, [sp, #8]
 800aec0:	46ab      	mov	fp, r5
 800aec2:	7851      	ldrb	r1, [r2, #1]
 800aec4:	1c53      	adds	r3, r2, #1
 800aec6:	9303      	str	r3, [sp, #12]
 800aec8:	b341      	cbz	r1, 800af1c <__hexnan+0x88>
 800aeca:	4608      	mov	r0, r1
 800aecc:	9205      	str	r2, [sp, #20]
 800aece:	9104      	str	r1, [sp, #16]
 800aed0:	f7ff fd5f 	bl	800a992 <__hexdig_fun>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d14f      	bne.n	800af78 <__hexnan+0xe4>
 800aed8:	9904      	ldr	r1, [sp, #16]
 800aeda:	9a05      	ldr	r2, [sp, #20]
 800aedc:	2920      	cmp	r1, #32
 800aede:	d818      	bhi.n	800af12 <__hexnan+0x7e>
 800aee0:	9b02      	ldr	r3, [sp, #8]
 800aee2:	459b      	cmp	fp, r3
 800aee4:	dd13      	ble.n	800af0e <__hexnan+0x7a>
 800aee6:	454c      	cmp	r4, r9
 800aee8:	d206      	bcs.n	800aef8 <__hexnan+0x64>
 800aeea:	2d07      	cmp	r5, #7
 800aeec:	dc04      	bgt.n	800aef8 <__hexnan+0x64>
 800aeee:	462a      	mov	r2, r5
 800aef0:	4649      	mov	r1, r9
 800aef2:	4620      	mov	r0, r4
 800aef4:	f7ff ffa8 	bl	800ae48 <L_shift>
 800aef8:	4544      	cmp	r4, r8
 800aefa:	d950      	bls.n	800af9e <__hexnan+0x10a>
 800aefc:	2300      	movs	r3, #0
 800aefe:	f1a4 0904 	sub.w	r9, r4, #4
 800af02:	f844 3c04 	str.w	r3, [r4, #-4]
 800af06:	f8cd b008 	str.w	fp, [sp, #8]
 800af0a:	464c      	mov	r4, r9
 800af0c:	461d      	mov	r5, r3
 800af0e:	9a03      	ldr	r2, [sp, #12]
 800af10:	e7d7      	b.n	800aec2 <__hexnan+0x2e>
 800af12:	2929      	cmp	r1, #41	; 0x29
 800af14:	d156      	bne.n	800afc4 <__hexnan+0x130>
 800af16:	3202      	adds	r2, #2
 800af18:	f8ca 2000 	str.w	r2, [sl]
 800af1c:	f1bb 0f00 	cmp.w	fp, #0
 800af20:	d050      	beq.n	800afc4 <__hexnan+0x130>
 800af22:	454c      	cmp	r4, r9
 800af24:	d206      	bcs.n	800af34 <__hexnan+0xa0>
 800af26:	2d07      	cmp	r5, #7
 800af28:	dc04      	bgt.n	800af34 <__hexnan+0xa0>
 800af2a:	462a      	mov	r2, r5
 800af2c:	4649      	mov	r1, r9
 800af2e:	4620      	mov	r0, r4
 800af30:	f7ff ff8a 	bl	800ae48 <L_shift>
 800af34:	4544      	cmp	r4, r8
 800af36:	d934      	bls.n	800afa2 <__hexnan+0x10e>
 800af38:	f1a8 0204 	sub.w	r2, r8, #4
 800af3c:	4623      	mov	r3, r4
 800af3e:	f853 1b04 	ldr.w	r1, [r3], #4
 800af42:	f842 1f04 	str.w	r1, [r2, #4]!
 800af46:	429f      	cmp	r7, r3
 800af48:	d2f9      	bcs.n	800af3e <__hexnan+0xaa>
 800af4a:	1b3b      	subs	r3, r7, r4
 800af4c:	f023 0303 	bic.w	r3, r3, #3
 800af50:	3304      	adds	r3, #4
 800af52:	3401      	adds	r4, #1
 800af54:	3e03      	subs	r6, #3
 800af56:	42b4      	cmp	r4, r6
 800af58:	bf88      	it	hi
 800af5a:	2304      	movhi	r3, #4
 800af5c:	4443      	add	r3, r8
 800af5e:	2200      	movs	r2, #0
 800af60:	f843 2b04 	str.w	r2, [r3], #4
 800af64:	429f      	cmp	r7, r3
 800af66:	d2fb      	bcs.n	800af60 <__hexnan+0xcc>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	b91b      	cbnz	r3, 800af74 <__hexnan+0xe0>
 800af6c:	4547      	cmp	r7, r8
 800af6e:	d127      	bne.n	800afc0 <__hexnan+0x12c>
 800af70:	2301      	movs	r3, #1
 800af72:	603b      	str	r3, [r7, #0]
 800af74:	2005      	movs	r0, #5
 800af76:	e026      	b.n	800afc6 <__hexnan+0x132>
 800af78:	3501      	adds	r5, #1
 800af7a:	2d08      	cmp	r5, #8
 800af7c:	f10b 0b01 	add.w	fp, fp, #1
 800af80:	dd06      	ble.n	800af90 <__hexnan+0xfc>
 800af82:	4544      	cmp	r4, r8
 800af84:	d9c3      	bls.n	800af0e <__hexnan+0x7a>
 800af86:	2300      	movs	r3, #0
 800af88:	f844 3c04 	str.w	r3, [r4, #-4]
 800af8c:	2501      	movs	r5, #1
 800af8e:	3c04      	subs	r4, #4
 800af90:	6822      	ldr	r2, [r4, #0]
 800af92:	f000 000f 	and.w	r0, r0, #15
 800af96:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800af9a:	6022      	str	r2, [r4, #0]
 800af9c:	e7b7      	b.n	800af0e <__hexnan+0x7a>
 800af9e:	2508      	movs	r5, #8
 800afa0:	e7b5      	b.n	800af0e <__hexnan+0x7a>
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d0df      	beq.n	800af68 <__hexnan+0xd4>
 800afa8:	f04f 32ff 	mov.w	r2, #4294967295
 800afac:	f1c3 0320 	rsb	r3, r3, #32
 800afb0:	fa22 f303 	lsr.w	r3, r2, r3
 800afb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800afb8:	401a      	ands	r2, r3
 800afba:	f846 2c04 	str.w	r2, [r6, #-4]
 800afbe:	e7d3      	b.n	800af68 <__hexnan+0xd4>
 800afc0:	3f04      	subs	r7, #4
 800afc2:	e7d1      	b.n	800af68 <__hexnan+0xd4>
 800afc4:	2004      	movs	r0, #4
 800afc6:	b007      	add	sp, #28
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afcc <_localeconv_r>:
 800afcc:	4800      	ldr	r0, [pc, #0]	; (800afd0 <_localeconv_r+0x4>)
 800afce:	4770      	bx	lr
 800afd0:	20000164 	.word	0x20000164

0800afd4 <__retarget_lock_init_recursive>:
 800afd4:	4770      	bx	lr

0800afd6 <__retarget_lock_acquire_recursive>:
 800afd6:	4770      	bx	lr

0800afd8 <__retarget_lock_release_recursive>:
 800afd8:	4770      	bx	lr
	...

0800afdc <malloc>:
 800afdc:	4b02      	ldr	r3, [pc, #8]	; (800afe8 <malloc+0xc>)
 800afde:	4601      	mov	r1, r0
 800afe0:	6818      	ldr	r0, [r3, #0]
 800afe2:	f000 bd67 	b.w	800bab4 <_malloc_r>
 800afe6:	bf00      	nop
 800afe8:	2000000c 	.word	0x2000000c

0800afec <__ascii_mbtowc>:
 800afec:	b082      	sub	sp, #8
 800afee:	b901      	cbnz	r1, 800aff2 <__ascii_mbtowc+0x6>
 800aff0:	a901      	add	r1, sp, #4
 800aff2:	b142      	cbz	r2, 800b006 <__ascii_mbtowc+0x1a>
 800aff4:	b14b      	cbz	r3, 800b00a <__ascii_mbtowc+0x1e>
 800aff6:	7813      	ldrb	r3, [r2, #0]
 800aff8:	600b      	str	r3, [r1, #0]
 800affa:	7812      	ldrb	r2, [r2, #0]
 800affc:	1e10      	subs	r0, r2, #0
 800affe:	bf18      	it	ne
 800b000:	2001      	movne	r0, #1
 800b002:	b002      	add	sp, #8
 800b004:	4770      	bx	lr
 800b006:	4610      	mov	r0, r2
 800b008:	e7fb      	b.n	800b002 <__ascii_mbtowc+0x16>
 800b00a:	f06f 0001 	mvn.w	r0, #1
 800b00e:	e7f8      	b.n	800b002 <__ascii_mbtowc+0x16>

0800b010 <memcpy>:
 800b010:	440a      	add	r2, r1
 800b012:	4291      	cmp	r1, r2
 800b014:	f100 33ff 	add.w	r3, r0, #4294967295
 800b018:	d100      	bne.n	800b01c <memcpy+0xc>
 800b01a:	4770      	bx	lr
 800b01c:	b510      	push	{r4, lr}
 800b01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b022:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b026:	4291      	cmp	r1, r2
 800b028:	d1f9      	bne.n	800b01e <memcpy+0xe>
 800b02a:	bd10      	pop	{r4, pc}

0800b02c <_Balloc>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b030:	4604      	mov	r4, r0
 800b032:	460d      	mov	r5, r1
 800b034:	b976      	cbnz	r6, 800b054 <_Balloc+0x28>
 800b036:	2010      	movs	r0, #16
 800b038:	f7ff ffd0 	bl	800afdc <malloc>
 800b03c:	4602      	mov	r2, r0
 800b03e:	6260      	str	r0, [r4, #36]	; 0x24
 800b040:	b920      	cbnz	r0, 800b04c <_Balloc+0x20>
 800b042:	4b18      	ldr	r3, [pc, #96]	; (800b0a4 <_Balloc+0x78>)
 800b044:	4818      	ldr	r0, [pc, #96]	; (800b0a8 <_Balloc+0x7c>)
 800b046:	2166      	movs	r1, #102	; 0x66
 800b048:	f001 f9ae 	bl	800c3a8 <__assert_func>
 800b04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b050:	6006      	str	r6, [r0, #0]
 800b052:	60c6      	str	r6, [r0, #12]
 800b054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b056:	68f3      	ldr	r3, [r6, #12]
 800b058:	b183      	cbz	r3, 800b07c <_Balloc+0x50>
 800b05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b062:	b9b8      	cbnz	r0, 800b094 <_Balloc+0x68>
 800b064:	2101      	movs	r1, #1
 800b066:	fa01 f605 	lsl.w	r6, r1, r5
 800b06a:	1d72      	adds	r2, r6, #5
 800b06c:	0092      	lsls	r2, r2, #2
 800b06e:	4620      	mov	r0, r4
 800b070:	f000 fc9d 	bl	800b9ae <_calloc_r>
 800b074:	b160      	cbz	r0, 800b090 <_Balloc+0x64>
 800b076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b07a:	e00e      	b.n	800b09a <_Balloc+0x6e>
 800b07c:	2221      	movs	r2, #33	; 0x21
 800b07e:	2104      	movs	r1, #4
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fc94 	bl	800b9ae <_calloc_r>
 800b086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b088:	60f0      	str	r0, [r6, #12]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e4      	bne.n	800b05a <_Balloc+0x2e>
 800b090:	2000      	movs	r0, #0
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	6802      	ldr	r2, [r0, #0]
 800b096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b09a:	2300      	movs	r3, #0
 800b09c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0a0:	e7f7      	b.n	800b092 <_Balloc+0x66>
 800b0a2:	bf00      	nop
 800b0a4:	0800ca7e 	.word	0x0800ca7e
 800b0a8:	0800cbe0 	.word	0x0800cbe0

0800b0ac <_Bfree>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	b976      	cbnz	r6, 800b0d4 <_Bfree+0x28>
 800b0b6:	2010      	movs	r0, #16
 800b0b8:	f7ff ff90 	bl	800afdc <malloc>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	6268      	str	r0, [r5, #36]	; 0x24
 800b0c0:	b920      	cbnz	r0, 800b0cc <_Bfree+0x20>
 800b0c2:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <_Bfree+0x3c>)
 800b0c4:	4809      	ldr	r0, [pc, #36]	; (800b0ec <_Bfree+0x40>)
 800b0c6:	218a      	movs	r1, #138	; 0x8a
 800b0c8:	f001 f96e 	bl	800c3a8 <__assert_func>
 800b0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0d0:	6006      	str	r6, [r0, #0]
 800b0d2:	60c6      	str	r6, [r0, #12]
 800b0d4:	b13c      	cbz	r4, 800b0e6 <_Bfree+0x3a>
 800b0d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0d8:	6862      	ldr	r2, [r4, #4]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0e0:	6021      	str	r1, [r4, #0]
 800b0e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}
 800b0e8:	0800ca7e 	.word	0x0800ca7e
 800b0ec:	0800cbe0 	.word	0x0800cbe0

0800b0f0 <__multadd>:
 800b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	690d      	ldr	r5, [r1, #16]
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	461e      	mov	r6, r3
 800b0fc:	f101 0c14 	add.w	ip, r1, #20
 800b100:	2000      	movs	r0, #0
 800b102:	f8dc 3000 	ldr.w	r3, [ip]
 800b106:	b299      	uxth	r1, r3
 800b108:	fb02 6101 	mla	r1, r2, r1, r6
 800b10c:	0c1e      	lsrs	r6, r3, #16
 800b10e:	0c0b      	lsrs	r3, r1, #16
 800b110:	fb02 3306 	mla	r3, r2, r6, r3
 800b114:	b289      	uxth	r1, r1
 800b116:	3001      	adds	r0, #1
 800b118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b11c:	4285      	cmp	r5, r0
 800b11e:	f84c 1b04 	str.w	r1, [ip], #4
 800b122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b126:	dcec      	bgt.n	800b102 <__multadd+0x12>
 800b128:	b30e      	cbz	r6, 800b16e <__multadd+0x7e>
 800b12a:	68a3      	ldr	r3, [r4, #8]
 800b12c:	42ab      	cmp	r3, r5
 800b12e:	dc19      	bgt.n	800b164 <__multadd+0x74>
 800b130:	6861      	ldr	r1, [r4, #4]
 800b132:	4638      	mov	r0, r7
 800b134:	3101      	adds	r1, #1
 800b136:	f7ff ff79 	bl	800b02c <_Balloc>
 800b13a:	4680      	mov	r8, r0
 800b13c:	b928      	cbnz	r0, 800b14a <__multadd+0x5a>
 800b13e:	4602      	mov	r2, r0
 800b140:	4b0c      	ldr	r3, [pc, #48]	; (800b174 <__multadd+0x84>)
 800b142:	480d      	ldr	r0, [pc, #52]	; (800b178 <__multadd+0x88>)
 800b144:	21b5      	movs	r1, #181	; 0xb5
 800b146:	f001 f92f 	bl	800c3a8 <__assert_func>
 800b14a:	6922      	ldr	r2, [r4, #16]
 800b14c:	3202      	adds	r2, #2
 800b14e:	f104 010c 	add.w	r1, r4, #12
 800b152:	0092      	lsls	r2, r2, #2
 800b154:	300c      	adds	r0, #12
 800b156:	f7ff ff5b 	bl	800b010 <memcpy>
 800b15a:	4621      	mov	r1, r4
 800b15c:	4638      	mov	r0, r7
 800b15e:	f7ff ffa5 	bl	800b0ac <_Bfree>
 800b162:	4644      	mov	r4, r8
 800b164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b168:	3501      	adds	r5, #1
 800b16a:	615e      	str	r6, [r3, #20]
 800b16c:	6125      	str	r5, [r4, #16]
 800b16e:	4620      	mov	r0, r4
 800b170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b174:	0800caf0 	.word	0x0800caf0
 800b178:	0800cbe0 	.word	0x0800cbe0

0800b17c <__s2b>:
 800b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b180:	460c      	mov	r4, r1
 800b182:	4615      	mov	r5, r2
 800b184:	461f      	mov	r7, r3
 800b186:	2209      	movs	r2, #9
 800b188:	3308      	adds	r3, #8
 800b18a:	4606      	mov	r6, r0
 800b18c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b190:	2100      	movs	r1, #0
 800b192:	2201      	movs	r2, #1
 800b194:	429a      	cmp	r2, r3
 800b196:	db09      	blt.n	800b1ac <__s2b+0x30>
 800b198:	4630      	mov	r0, r6
 800b19a:	f7ff ff47 	bl	800b02c <_Balloc>
 800b19e:	b940      	cbnz	r0, 800b1b2 <__s2b+0x36>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	4b19      	ldr	r3, [pc, #100]	; (800b208 <__s2b+0x8c>)
 800b1a4:	4819      	ldr	r0, [pc, #100]	; (800b20c <__s2b+0x90>)
 800b1a6:	21ce      	movs	r1, #206	; 0xce
 800b1a8:	f001 f8fe 	bl	800c3a8 <__assert_func>
 800b1ac:	0052      	lsls	r2, r2, #1
 800b1ae:	3101      	adds	r1, #1
 800b1b0:	e7f0      	b.n	800b194 <__s2b+0x18>
 800b1b2:	9b08      	ldr	r3, [sp, #32]
 800b1b4:	6143      	str	r3, [r0, #20]
 800b1b6:	2d09      	cmp	r5, #9
 800b1b8:	f04f 0301 	mov.w	r3, #1
 800b1bc:	6103      	str	r3, [r0, #16]
 800b1be:	dd16      	ble.n	800b1ee <__s2b+0x72>
 800b1c0:	f104 0909 	add.w	r9, r4, #9
 800b1c4:	46c8      	mov	r8, r9
 800b1c6:	442c      	add	r4, r5
 800b1c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b1cc:	4601      	mov	r1, r0
 800b1ce:	3b30      	subs	r3, #48	; 0x30
 800b1d0:	220a      	movs	r2, #10
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f7ff ff8c 	bl	800b0f0 <__multadd>
 800b1d8:	45a0      	cmp	r8, r4
 800b1da:	d1f5      	bne.n	800b1c8 <__s2b+0x4c>
 800b1dc:	f1a5 0408 	sub.w	r4, r5, #8
 800b1e0:	444c      	add	r4, r9
 800b1e2:	1b2d      	subs	r5, r5, r4
 800b1e4:	1963      	adds	r3, r4, r5
 800b1e6:	42bb      	cmp	r3, r7
 800b1e8:	db04      	blt.n	800b1f4 <__s2b+0x78>
 800b1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ee:	340a      	adds	r4, #10
 800b1f0:	2509      	movs	r5, #9
 800b1f2:	e7f6      	b.n	800b1e2 <__s2b+0x66>
 800b1f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1f8:	4601      	mov	r1, r0
 800b1fa:	3b30      	subs	r3, #48	; 0x30
 800b1fc:	220a      	movs	r2, #10
 800b1fe:	4630      	mov	r0, r6
 800b200:	f7ff ff76 	bl	800b0f0 <__multadd>
 800b204:	e7ee      	b.n	800b1e4 <__s2b+0x68>
 800b206:	bf00      	nop
 800b208:	0800caf0 	.word	0x0800caf0
 800b20c:	0800cbe0 	.word	0x0800cbe0

0800b210 <__hi0bits>:
 800b210:	0c03      	lsrs	r3, r0, #16
 800b212:	041b      	lsls	r3, r3, #16
 800b214:	b9d3      	cbnz	r3, 800b24c <__hi0bits+0x3c>
 800b216:	0400      	lsls	r0, r0, #16
 800b218:	2310      	movs	r3, #16
 800b21a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b21e:	bf04      	itt	eq
 800b220:	0200      	lsleq	r0, r0, #8
 800b222:	3308      	addeq	r3, #8
 800b224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b228:	bf04      	itt	eq
 800b22a:	0100      	lsleq	r0, r0, #4
 800b22c:	3304      	addeq	r3, #4
 800b22e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b232:	bf04      	itt	eq
 800b234:	0080      	lsleq	r0, r0, #2
 800b236:	3302      	addeq	r3, #2
 800b238:	2800      	cmp	r0, #0
 800b23a:	db05      	blt.n	800b248 <__hi0bits+0x38>
 800b23c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b240:	f103 0301 	add.w	r3, r3, #1
 800b244:	bf08      	it	eq
 800b246:	2320      	moveq	r3, #32
 800b248:	4618      	mov	r0, r3
 800b24a:	4770      	bx	lr
 800b24c:	2300      	movs	r3, #0
 800b24e:	e7e4      	b.n	800b21a <__hi0bits+0xa>

0800b250 <__lo0bits>:
 800b250:	6803      	ldr	r3, [r0, #0]
 800b252:	f013 0207 	ands.w	r2, r3, #7
 800b256:	4601      	mov	r1, r0
 800b258:	d00b      	beq.n	800b272 <__lo0bits+0x22>
 800b25a:	07da      	lsls	r2, r3, #31
 800b25c:	d423      	bmi.n	800b2a6 <__lo0bits+0x56>
 800b25e:	0798      	lsls	r0, r3, #30
 800b260:	bf49      	itett	mi
 800b262:	085b      	lsrmi	r3, r3, #1
 800b264:	089b      	lsrpl	r3, r3, #2
 800b266:	2001      	movmi	r0, #1
 800b268:	600b      	strmi	r3, [r1, #0]
 800b26a:	bf5c      	itt	pl
 800b26c:	600b      	strpl	r3, [r1, #0]
 800b26e:	2002      	movpl	r0, #2
 800b270:	4770      	bx	lr
 800b272:	b298      	uxth	r0, r3
 800b274:	b9a8      	cbnz	r0, 800b2a2 <__lo0bits+0x52>
 800b276:	0c1b      	lsrs	r3, r3, #16
 800b278:	2010      	movs	r0, #16
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	b90a      	cbnz	r2, 800b282 <__lo0bits+0x32>
 800b27e:	3008      	adds	r0, #8
 800b280:	0a1b      	lsrs	r3, r3, #8
 800b282:	071a      	lsls	r2, r3, #28
 800b284:	bf04      	itt	eq
 800b286:	091b      	lsreq	r3, r3, #4
 800b288:	3004      	addeq	r0, #4
 800b28a:	079a      	lsls	r2, r3, #30
 800b28c:	bf04      	itt	eq
 800b28e:	089b      	lsreq	r3, r3, #2
 800b290:	3002      	addeq	r0, #2
 800b292:	07da      	lsls	r2, r3, #31
 800b294:	d403      	bmi.n	800b29e <__lo0bits+0x4e>
 800b296:	085b      	lsrs	r3, r3, #1
 800b298:	f100 0001 	add.w	r0, r0, #1
 800b29c:	d005      	beq.n	800b2aa <__lo0bits+0x5a>
 800b29e:	600b      	str	r3, [r1, #0]
 800b2a0:	4770      	bx	lr
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	e7e9      	b.n	800b27a <__lo0bits+0x2a>
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	4770      	bx	lr
 800b2aa:	2020      	movs	r0, #32
 800b2ac:	4770      	bx	lr
	...

0800b2b0 <__i2b>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	f7ff feb9 	bl	800b02c <_Balloc>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	b928      	cbnz	r0, 800b2ca <__i2b+0x1a>
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <__i2b+0x24>)
 800b2c0:	4805      	ldr	r0, [pc, #20]	; (800b2d8 <__i2b+0x28>)
 800b2c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b2c6:	f001 f86f 	bl	800c3a8 <__assert_func>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	6144      	str	r4, [r0, #20]
 800b2ce:	6103      	str	r3, [r0, #16]
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	bf00      	nop
 800b2d4:	0800caf0 	.word	0x0800caf0
 800b2d8:	0800cbe0 	.word	0x0800cbe0

0800b2dc <__multiply>:
 800b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	4691      	mov	r9, r2
 800b2e2:	690a      	ldr	r2, [r1, #16]
 800b2e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	bfb8      	it	lt
 800b2ec:	460b      	movlt	r3, r1
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	bfbc      	itt	lt
 800b2f2:	464c      	movlt	r4, r9
 800b2f4:	4699      	movlt	r9, r3
 800b2f6:	6927      	ldr	r7, [r4, #16]
 800b2f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b2fc:	68a3      	ldr	r3, [r4, #8]
 800b2fe:	6861      	ldr	r1, [r4, #4]
 800b300:	eb07 060a 	add.w	r6, r7, sl
 800b304:	42b3      	cmp	r3, r6
 800b306:	b085      	sub	sp, #20
 800b308:	bfb8      	it	lt
 800b30a:	3101      	addlt	r1, #1
 800b30c:	f7ff fe8e 	bl	800b02c <_Balloc>
 800b310:	b930      	cbnz	r0, 800b320 <__multiply+0x44>
 800b312:	4602      	mov	r2, r0
 800b314:	4b44      	ldr	r3, [pc, #272]	; (800b428 <__multiply+0x14c>)
 800b316:	4845      	ldr	r0, [pc, #276]	; (800b42c <__multiply+0x150>)
 800b318:	f240 115d 	movw	r1, #349	; 0x15d
 800b31c:	f001 f844 	bl	800c3a8 <__assert_func>
 800b320:	f100 0514 	add.w	r5, r0, #20
 800b324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b328:	462b      	mov	r3, r5
 800b32a:	2200      	movs	r2, #0
 800b32c:	4543      	cmp	r3, r8
 800b32e:	d321      	bcc.n	800b374 <__multiply+0x98>
 800b330:	f104 0314 	add.w	r3, r4, #20
 800b334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b338:	f109 0314 	add.w	r3, r9, #20
 800b33c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b340:	9202      	str	r2, [sp, #8]
 800b342:	1b3a      	subs	r2, r7, r4
 800b344:	3a15      	subs	r2, #21
 800b346:	f022 0203 	bic.w	r2, r2, #3
 800b34a:	3204      	adds	r2, #4
 800b34c:	f104 0115 	add.w	r1, r4, #21
 800b350:	428f      	cmp	r7, r1
 800b352:	bf38      	it	cc
 800b354:	2204      	movcc	r2, #4
 800b356:	9201      	str	r2, [sp, #4]
 800b358:	9a02      	ldr	r2, [sp, #8]
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d80c      	bhi.n	800b37a <__multiply+0x9e>
 800b360:	2e00      	cmp	r6, #0
 800b362:	dd03      	ble.n	800b36c <__multiply+0x90>
 800b364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d05a      	beq.n	800b422 <__multiply+0x146>
 800b36c:	6106      	str	r6, [r0, #16]
 800b36e:	b005      	add	sp, #20
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	f843 2b04 	str.w	r2, [r3], #4
 800b378:	e7d8      	b.n	800b32c <__multiply+0x50>
 800b37a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b37e:	f1ba 0f00 	cmp.w	sl, #0
 800b382:	d024      	beq.n	800b3ce <__multiply+0xf2>
 800b384:	f104 0e14 	add.w	lr, r4, #20
 800b388:	46a9      	mov	r9, r5
 800b38a:	f04f 0c00 	mov.w	ip, #0
 800b38e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b392:	f8d9 1000 	ldr.w	r1, [r9]
 800b396:	fa1f fb82 	uxth.w	fp, r2
 800b39a:	b289      	uxth	r1, r1
 800b39c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b3a4:	f8d9 2000 	ldr.w	r2, [r9]
 800b3a8:	4461      	add	r1, ip
 800b3aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b3ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800b3b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b3b6:	b289      	uxth	r1, r1
 800b3b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b3bc:	4577      	cmp	r7, lr
 800b3be:	f849 1b04 	str.w	r1, [r9], #4
 800b3c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b3c6:	d8e2      	bhi.n	800b38e <__multiply+0xb2>
 800b3c8:	9a01      	ldr	r2, [sp, #4]
 800b3ca:	f845 c002 	str.w	ip, [r5, r2]
 800b3ce:	9a03      	ldr	r2, [sp, #12]
 800b3d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	f1b9 0f00 	cmp.w	r9, #0
 800b3da:	d020      	beq.n	800b41e <__multiply+0x142>
 800b3dc:	6829      	ldr	r1, [r5, #0]
 800b3de:	f104 0c14 	add.w	ip, r4, #20
 800b3e2:	46ae      	mov	lr, r5
 800b3e4:	f04f 0a00 	mov.w	sl, #0
 800b3e8:	f8bc b000 	ldrh.w	fp, [ip]
 800b3ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b3f0:	fb09 220b 	mla	r2, r9, fp, r2
 800b3f4:	4492      	add	sl, r2
 800b3f6:	b289      	uxth	r1, r1
 800b3f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b3fc:	f84e 1b04 	str.w	r1, [lr], #4
 800b400:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b404:	f8be 1000 	ldrh.w	r1, [lr]
 800b408:	0c12      	lsrs	r2, r2, #16
 800b40a:	fb09 1102 	mla	r1, r9, r2, r1
 800b40e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b412:	4567      	cmp	r7, ip
 800b414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b418:	d8e6      	bhi.n	800b3e8 <__multiply+0x10c>
 800b41a:	9a01      	ldr	r2, [sp, #4]
 800b41c:	50a9      	str	r1, [r5, r2]
 800b41e:	3504      	adds	r5, #4
 800b420:	e79a      	b.n	800b358 <__multiply+0x7c>
 800b422:	3e01      	subs	r6, #1
 800b424:	e79c      	b.n	800b360 <__multiply+0x84>
 800b426:	bf00      	nop
 800b428:	0800caf0 	.word	0x0800caf0
 800b42c:	0800cbe0 	.word	0x0800cbe0

0800b430 <__pow5mult>:
 800b430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b434:	4615      	mov	r5, r2
 800b436:	f012 0203 	ands.w	r2, r2, #3
 800b43a:	4606      	mov	r6, r0
 800b43c:	460f      	mov	r7, r1
 800b43e:	d007      	beq.n	800b450 <__pow5mult+0x20>
 800b440:	4c25      	ldr	r4, [pc, #148]	; (800b4d8 <__pow5mult+0xa8>)
 800b442:	3a01      	subs	r2, #1
 800b444:	2300      	movs	r3, #0
 800b446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b44a:	f7ff fe51 	bl	800b0f0 <__multadd>
 800b44e:	4607      	mov	r7, r0
 800b450:	10ad      	asrs	r5, r5, #2
 800b452:	d03d      	beq.n	800b4d0 <__pow5mult+0xa0>
 800b454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b456:	b97c      	cbnz	r4, 800b478 <__pow5mult+0x48>
 800b458:	2010      	movs	r0, #16
 800b45a:	f7ff fdbf 	bl	800afdc <malloc>
 800b45e:	4602      	mov	r2, r0
 800b460:	6270      	str	r0, [r6, #36]	; 0x24
 800b462:	b928      	cbnz	r0, 800b470 <__pow5mult+0x40>
 800b464:	4b1d      	ldr	r3, [pc, #116]	; (800b4dc <__pow5mult+0xac>)
 800b466:	481e      	ldr	r0, [pc, #120]	; (800b4e0 <__pow5mult+0xb0>)
 800b468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b46c:	f000 ff9c 	bl	800c3a8 <__assert_func>
 800b470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b474:	6004      	str	r4, [r0, #0]
 800b476:	60c4      	str	r4, [r0, #12]
 800b478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b47c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b480:	b94c      	cbnz	r4, 800b496 <__pow5mult+0x66>
 800b482:	f240 2171 	movw	r1, #625	; 0x271
 800b486:	4630      	mov	r0, r6
 800b488:	f7ff ff12 	bl	800b2b0 <__i2b>
 800b48c:	2300      	movs	r3, #0
 800b48e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b492:	4604      	mov	r4, r0
 800b494:	6003      	str	r3, [r0, #0]
 800b496:	f04f 0900 	mov.w	r9, #0
 800b49a:	07eb      	lsls	r3, r5, #31
 800b49c:	d50a      	bpl.n	800b4b4 <__pow5mult+0x84>
 800b49e:	4639      	mov	r1, r7
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7ff ff1a 	bl	800b2dc <__multiply>
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fdfd 	bl	800b0ac <_Bfree>
 800b4b2:	4647      	mov	r7, r8
 800b4b4:	106d      	asrs	r5, r5, #1
 800b4b6:	d00b      	beq.n	800b4d0 <__pow5mult+0xa0>
 800b4b8:	6820      	ldr	r0, [r4, #0]
 800b4ba:	b938      	cbnz	r0, 800b4cc <__pow5mult+0x9c>
 800b4bc:	4622      	mov	r2, r4
 800b4be:	4621      	mov	r1, r4
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7ff ff0b 	bl	800b2dc <__multiply>
 800b4c6:	6020      	str	r0, [r4, #0]
 800b4c8:	f8c0 9000 	str.w	r9, [r0]
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	e7e4      	b.n	800b49a <__pow5mult+0x6a>
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800cd30 	.word	0x0800cd30
 800b4dc:	0800ca7e 	.word	0x0800ca7e
 800b4e0:	0800cbe0 	.word	0x0800cbe0

0800b4e4 <__lshift>:
 800b4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	6849      	ldr	r1, [r1, #4]
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	4691      	mov	r9, r2
 800b4f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4fc:	f108 0601 	add.w	r6, r8, #1
 800b500:	42b3      	cmp	r3, r6
 800b502:	db0b      	blt.n	800b51c <__lshift+0x38>
 800b504:	4638      	mov	r0, r7
 800b506:	f7ff fd91 	bl	800b02c <_Balloc>
 800b50a:	4605      	mov	r5, r0
 800b50c:	b948      	cbnz	r0, 800b522 <__lshift+0x3e>
 800b50e:	4602      	mov	r2, r0
 800b510:	4b2a      	ldr	r3, [pc, #168]	; (800b5bc <__lshift+0xd8>)
 800b512:	482b      	ldr	r0, [pc, #172]	; (800b5c0 <__lshift+0xdc>)
 800b514:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b518:	f000 ff46 	bl	800c3a8 <__assert_func>
 800b51c:	3101      	adds	r1, #1
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	e7ee      	b.n	800b500 <__lshift+0x1c>
 800b522:	2300      	movs	r3, #0
 800b524:	f100 0114 	add.w	r1, r0, #20
 800b528:	f100 0210 	add.w	r2, r0, #16
 800b52c:	4618      	mov	r0, r3
 800b52e:	4553      	cmp	r3, sl
 800b530:	db37      	blt.n	800b5a2 <__lshift+0xbe>
 800b532:	6920      	ldr	r0, [r4, #16]
 800b534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b538:	f104 0314 	add.w	r3, r4, #20
 800b53c:	f019 091f 	ands.w	r9, r9, #31
 800b540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b544:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b548:	d02f      	beq.n	800b5aa <__lshift+0xc6>
 800b54a:	f1c9 0e20 	rsb	lr, r9, #32
 800b54e:	468a      	mov	sl, r1
 800b550:	f04f 0c00 	mov.w	ip, #0
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	fa02 f209 	lsl.w	r2, r2, r9
 800b55a:	ea42 020c 	orr.w	r2, r2, ip
 800b55e:	f84a 2b04 	str.w	r2, [sl], #4
 800b562:	f853 2b04 	ldr.w	r2, [r3], #4
 800b566:	4298      	cmp	r0, r3
 800b568:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b56c:	d8f2      	bhi.n	800b554 <__lshift+0x70>
 800b56e:	1b03      	subs	r3, r0, r4
 800b570:	3b15      	subs	r3, #21
 800b572:	f023 0303 	bic.w	r3, r3, #3
 800b576:	3304      	adds	r3, #4
 800b578:	f104 0215 	add.w	r2, r4, #21
 800b57c:	4290      	cmp	r0, r2
 800b57e:	bf38      	it	cc
 800b580:	2304      	movcc	r3, #4
 800b582:	f841 c003 	str.w	ip, [r1, r3]
 800b586:	f1bc 0f00 	cmp.w	ip, #0
 800b58a:	d001      	beq.n	800b590 <__lshift+0xac>
 800b58c:	f108 0602 	add.w	r6, r8, #2
 800b590:	3e01      	subs	r6, #1
 800b592:	4638      	mov	r0, r7
 800b594:	612e      	str	r6, [r5, #16]
 800b596:	4621      	mov	r1, r4
 800b598:	f7ff fd88 	bl	800b0ac <_Bfree>
 800b59c:	4628      	mov	r0, r5
 800b59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	e7c1      	b.n	800b52e <__lshift+0x4a>
 800b5aa:	3904      	subs	r1, #4
 800b5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5b4:	4298      	cmp	r0, r3
 800b5b6:	d8f9      	bhi.n	800b5ac <__lshift+0xc8>
 800b5b8:	e7ea      	b.n	800b590 <__lshift+0xac>
 800b5ba:	bf00      	nop
 800b5bc:	0800caf0 	.word	0x0800caf0
 800b5c0:	0800cbe0 	.word	0x0800cbe0

0800b5c4 <__mcmp>:
 800b5c4:	b530      	push	{r4, r5, lr}
 800b5c6:	6902      	ldr	r2, [r0, #16]
 800b5c8:	690c      	ldr	r4, [r1, #16]
 800b5ca:	1b12      	subs	r2, r2, r4
 800b5cc:	d10e      	bne.n	800b5ec <__mcmp+0x28>
 800b5ce:	f100 0314 	add.w	r3, r0, #20
 800b5d2:	3114      	adds	r1, #20
 800b5d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b5d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b5dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b5e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b5e4:	42a5      	cmp	r5, r4
 800b5e6:	d003      	beq.n	800b5f0 <__mcmp+0x2c>
 800b5e8:	d305      	bcc.n	800b5f6 <__mcmp+0x32>
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	bd30      	pop	{r4, r5, pc}
 800b5f0:	4283      	cmp	r3, r0
 800b5f2:	d3f3      	bcc.n	800b5dc <__mcmp+0x18>
 800b5f4:	e7fa      	b.n	800b5ec <__mcmp+0x28>
 800b5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fa:	e7f7      	b.n	800b5ec <__mcmp+0x28>

0800b5fc <__mdiff>:
 800b5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b600:	460c      	mov	r4, r1
 800b602:	4606      	mov	r6, r0
 800b604:	4611      	mov	r1, r2
 800b606:	4620      	mov	r0, r4
 800b608:	4690      	mov	r8, r2
 800b60a:	f7ff ffdb 	bl	800b5c4 <__mcmp>
 800b60e:	1e05      	subs	r5, r0, #0
 800b610:	d110      	bne.n	800b634 <__mdiff+0x38>
 800b612:	4629      	mov	r1, r5
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff fd09 	bl	800b02c <_Balloc>
 800b61a:	b930      	cbnz	r0, 800b62a <__mdiff+0x2e>
 800b61c:	4b3a      	ldr	r3, [pc, #232]	; (800b708 <__mdiff+0x10c>)
 800b61e:	4602      	mov	r2, r0
 800b620:	f240 2132 	movw	r1, #562	; 0x232
 800b624:	4839      	ldr	r0, [pc, #228]	; (800b70c <__mdiff+0x110>)
 800b626:	f000 febf 	bl	800c3a8 <__assert_func>
 800b62a:	2301      	movs	r3, #1
 800b62c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b634:	bfa4      	itt	ge
 800b636:	4643      	movge	r3, r8
 800b638:	46a0      	movge	r8, r4
 800b63a:	4630      	mov	r0, r6
 800b63c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b640:	bfa6      	itte	ge
 800b642:	461c      	movge	r4, r3
 800b644:	2500      	movge	r5, #0
 800b646:	2501      	movlt	r5, #1
 800b648:	f7ff fcf0 	bl	800b02c <_Balloc>
 800b64c:	b920      	cbnz	r0, 800b658 <__mdiff+0x5c>
 800b64e:	4b2e      	ldr	r3, [pc, #184]	; (800b708 <__mdiff+0x10c>)
 800b650:	4602      	mov	r2, r0
 800b652:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b656:	e7e5      	b.n	800b624 <__mdiff+0x28>
 800b658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b65c:	6926      	ldr	r6, [r4, #16]
 800b65e:	60c5      	str	r5, [r0, #12]
 800b660:	f104 0914 	add.w	r9, r4, #20
 800b664:	f108 0514 	add.w	r5, r8, #20
 800b668:	f100 0e14 	add.w	lr, r0, #20
 800b66c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b674:	f108 0210 	add.w	r2, r8, #16
 800b678:	46f2      	mov	sl, lr
 800b67a:	2100      	movs	r1, #0
 800b67c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b684:	fa1f f883 	uxth.w	r8, r3
 800b688:	fa11 f18b 	uxtah	r1, r1, fp
 800b68c:	0c1b      	lsrs	r3, r3, #16
 800b68e:	eba1 0808 	sub.w	r8, r1, r8
 800b692:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b696:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b69a:	fa1f f888 	uxth.w	r8, r8
 800b69e:	1419      	asrs	r1, r3, #16
 800b6a0:	454e      	cmp	r6, r9
 800b6a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6a6:	f84a 3b04 	str.w	r3, [sl], #4
 800b6aa:	d8e7      	bhi.n	800b67c <__mdiff+0x80>
 800b6ac:	1b33      	subs	r3, r6, r4
 800b6ae:	3b15      	subs	r3, #21
 800b6b0:	f023 0303 	bic.w	r3, r3, #3
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	3415      	adds	r4, #21
 800b6b8:	42a6      	cmp	r6, r4
 800b6ba:	bf38      	it	cc
 800b6bc:	2304      	movcc	r3, #4
 800b6be:	441d      	add	r5, r3
 800b6c0:	4473      	add	r3, lr
 800b6c2:	469e      	mov	lr, r3
 800b6c4:	462e      	mov	r6, r5
 800b6c6:	4566      	cmp	r6, ip
 800b6c8:	d30e      	bcc.n	800b6e8 <__mdiff+0xec>
 800b6ca:	f10c 0203 	add.w	r2, ip, #3
 800b6ce:	1b52      	subs	r2, r2, r5
 800b6d0:	f022 0203 	bic.w	r2, r2, #3
 800b6d4:	3d03      	subs	r5, #3
 800b6d6:	45ac      	cmp	ip, r5
 800b6d8:	bf38      	it	cc
 800b6da:	2200      	movcc	r2, #0
 800b6dc:	441a      	add	r2, r3
 800b6de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b6e2:	b17b      	cbz	r3, 800b704 <__mdiff+0x108>
 800b6e4:	6107      	str	r7, [r0, #16]
 800b6e6:	e7a3      	b.n	800b630 <__mdiff+0x34>
 800b6e8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b6ec:	fa11 f288 	uxtah	r2, r1, r8
 800b6f0:	1414      	asrs	r4, r2, #16
 800b6f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b6f6:	b292      	uxth	r2, r2
 800b6f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b6fc:	f84e 2b04 	str.w	r2, [lr], #4
 800b700:	1421      	asrs	r1, r4, #16
 800b702:	e7e0      	b.n	800b6c6 <__mdiff+0xca>
 800b704:	3f01      	subs	r7, #1
 800b706:	e7ea      	b.n	800b6de <__mdiff+0xe2>
 800b708:	0800caf0 	.word	0x0800caf0
 800b70c:	0800cbe0 	.word	0x0800cbe0

0800b710 <__ulp>:
 800b710:	b082      	sub	sp, #8
 800b712:	ed8d 0b00 	vstr	d0, [sp]
 800b716:	9b01      	ldr	r3, [sp, #4]
 800b718:	4912      	ldr	r1, [pc, #72]	; (800b764 <__ulp+0x54>)
 800b71a:	4019      	ands	r1, r3
 800b71c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b720:	2900      	cmp	r1, #0
 800b722:	dd05      	ble.n	800b730 <__ulp+0x20>
 800b724:	2200      	movs	r2, #0
 800b726:	460b      	mov	r3, r1
 800b728:	ec43 2b10 	vmov	d0, r2, r3
 800b72c:	b002      	add	sp, #8
 800b72e:	4770      	bx	lr
 800b730:	4249      	negs	r1, r1
 800b732:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b736:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b73a:	f04f 0200 	mov.w	r2, #0
 800b73e:	f04f 0300 	mov.w	r3, #0
 800b742:	da04      	bge.n	800b74e <__ulp+0x3e>
 800b744:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b748:	fa41 f300 	asr.w	r3, r1, r0
 800b74c:	e7ec      	b.n	800b728 <__ulp+0x18>
 800b74e:	f1a0 0114 	sub.w	r1, r0, #20
 800b752:	291e      	cmp	r1, #30
 800b754:	bfda      	itte	le
 800b756:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b75a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b75e:	2101      	movgt	r1, #1
 800b760:	460a      	mov	r2, r1
 800b762:	e7e1      	b.n	800b728 <__ulp+0x18>
 800b764:	7ff00000 	.word	0x7ff00000

0800b768 <__b2d>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	6905      	ldr	r5, [r0, #16]
 800b76c:	f100 0714 	add.w	r7, r0, #20
 800b770:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b774:	1f2e      	subs	r6, r5, #4
 800b776:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff fd48 	bl	800b210 <__hi0bits>
 800b780:	f1c0 0320 	rsb	r3, r0, #32
 800b784:	280a      	cmp	r0, #10
 800b786:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b804 <__b2d+0x9c>
 800b78a:	600b      	str	r3, [r1, #0]
 800b78c:	dc14      	bgt.n	800b7b8 <__b2d+0x50>
 800b78e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b792:	fa24 f10e 	lsr.w	r1, r4, lr
 800b796:	42b7      	cmp	r7, r6
 800b798:	ea41 030c 	orr.w	r3, r1, ip
 800b79c:	bf34      	ite	cc
 800b79e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b7a2:	2100      	movcs	r1, #0
 800b7a4:	3015      	adds	r0, #21
 800b7a6:	fa04 f000 	lsl.w	r0, r4, r0
 800b7aa:	fa21 f10e 	lsr.w	r1, r1, lr
 800b7ae:	ea40 0201 	orr.w	r2, r0, r1
 800b7b2:	ec43 2b10 	vmov	d0, r2, r3
 800b7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b8:	42b7      	cmp	r7, r6
 800b7ba:	bf3a      	itte	cc
 800b7bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b7c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b7c4:	2100      	movcs	r1, #0
 800b7c6:	380b      	subs	r0, #11
 800b7c8:	d017      	beq.n	800b7fa <__b2d+0x92>
 800b7ca:	f1c0 0c20 	rsb	ip, r0, #32
 800b7ce:	fa04 f500 	lsl.w	r5, r4, r0
 800b7d2:	42be      	cmp	r6, r7
 800b7d4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b7d8:	ea45 0504 	orr.w	r5, r5, r4
 800b7dc:	bf8c      	ite	hi
 800b7de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b7e2:	2400      	movls	r4, #0
 800b7e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b7e8:	fa01 f000 	lsl.w	r0, r1, r0
 800b7ec:	fa24 f40c 	lsr.w	r4, r4, ip
 800b7f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b7f4:	ea40 0204 	orr.w	r2, r0, r4
 800b7f8:	e7db      	b.n	800b7b2 <__b2d+0x4a>
 800b7fa:	ea44 030c 	orr.w	r3, r4, ip
 800b7fe:	460a      	mov	r2, r1
 800b800:	e7d7      	b.n	800b7b2 <__b2d+0x4a>
 800b802:	bf00      	nop
 800b804:	3ff00000 	.word	0x3ff00000

0800b808 <__d2b>:
 800b808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b80c:	4689      	mov	r9, r1
 800b80e:	2101      	movs	r1, #1
 800b810:	ec57 6b10 	vmov	r6, r7, d0
 800b814:	4690      	mov	r8, r2
 800b816:	f7ff fc09 	bl	800b02c <_Balloc>
 800b81a:	4604      	mov	r4, r0
 800b81c:	b930      	cbnz	r0, 800b82c <__d2b+0x24>
 800b81e:	4602      	mov	r2, r0
 800b820:	4b25      	ldr	r3, [pc, #148]	; (800b8b8 <__d2b+0xb0>)
 800b822:	4826      	ldr	r0, [pc, #152]	; (800b8bc <__d2b+0xb4>)
 800b824:	f240 310a 	movw	r1, #778	; 0x30a
 800b828:	f000 fdbe 	bl	800c3a8 <__assert_func>
 800b82c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b834:	bb35      	cbnz	r5, 800b884 <__d2b+0x7c>
 800b836:	2e00      	cmp	r6, #0
 800b838:	9301      	str	r3, [sp, #4]
 800b83a:	d028      	beq.n	800b88e <__d2b+0x86>
 800b83c:	4668      	mov	r0, sp
 800b83e:	9600      	str	r6, [sp, #0]
 800b840:	f7ff fd06 	bl	800b250 <__lo0bits>
 800b844:	9900      	ldr	r1, [sp, #0]
 800b846:	b300      	cbz	r0, 800b88a <__d2b+0x82>
 800b848:	9a01      	ldr	r2, [sp, #4]
 800b84a:	f1c0 0320 	rsb	r3, r0, #32
 800b84e:	fa02 f303 	lsl.w	r3, r2, r3
 800b852:	430b      	orrs	r3, r1
 800b854:	40c2      	lsrs	r2, r0
 800b856:	6163      	str	r3, [r4, #20]
 800b858:	9201      	str	r2, [sp, #4]
 800b85a:	9b01      	ldr	r3, [sp, #4]
 800b85c:	61a3      	str	r3, [r4, #24]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bf14      	ite	ne
 800b862:	2202      	movne	r2, #2
 800b864:	2201      	moveq	r2, #1
 800b866:	6122      	str	r2, [r4, #16]
 800b868:	b1d5      	cbz	r5, 800b8a0 <__d2b+0x98>
 800b86a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b86e:	4405      	add	r5, r0
 800b870:	f8c9 5000 	str.w	r5, [r9]
 800b874:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b878:	f8c8 0000 	str.w	r0, [r8]
 800b87c:	4620      	mov	r0, r4
 800b87e:	b003      	add	sp, #12
 800b880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b888:	e7d5      	b.n	800b836 <__d2b+0x2e>
 800b88a:	6161      	str	r1, [r4, #20]
 800b88c:	e7e5      	b.n	800b85a <__d2b+0x52>
 800b88e:	a801      	add	r0, sp, #4
 800b890:	f7ff fcde 	bl	800b250 <__lo0bits>
 800b894:	9b01      	ldr	r3, [sp, #4]
 800b896:	6163      	str	r3, [r4, #20]
 800b898:	2201      	movs	r2, #1
 800b89a:	6122      	str	r2, [r4, #16]
 800b89c:	3020      	adds	r0, #32
 800b89e:	e7e3      	b.n	800b868 <__d2b+0x60>
 800b8a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8a8:	f8c9 0000 	str.w	r0, [r9]
 800b8ac:	6918      	ldr	r0, [r3, #16]
 800b8ae:	f7ff fcaf 	bl	800b210 <__hi0bits>
 800b8b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8b6:	e7df      	b.n	800b878 <__d2b+0x70>
 800b8b8:	0800caf0 	.word	0x0800caf0
 800b8bc:	0800cbe0 	.word	0x0800cbe0

0800b8c0 <__ratio>:
 800b8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	4688      	mov	r8, r1
 800b8c6:	4669      	mov	r1, sp
 800b8c8:	4681      	mov	r9, r0
 800b8ca:	f7ff ff4d 	bl	800b768 <__b2d>
 800b8ce:	a901      	add	r1, sp, #4
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	ec55 4b10 	vmov	r4, r5, d0
 800b8d6:	f7ff ff47 	bl	800b768 <__b2d>
 800b8da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b8e2:	eba3 0c02 	sub.w	ip, r3, r2
 800b8e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8ea:	1a9b      	subs	r3, r3, r2
 800b8ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b8f0:	ec51 0b10 	vmov	r0, r1, d0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	bfd6      	itet	le
 800b8f8:	460a      	movle	r2, r1
 800b8fa:	462a      	movgt	r2, r5
 800b8fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b900:	468b      	mov	fp, r1
 800b902:	462f      	mov	r7, r5
 800b904:	bfd4      	ite	le
 800b906:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b90a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b90e:	4620      	mov	r0, r4
 800b910:	ee10 2a10 	vmov	r2, s0
 800b914:	465b      	mov	r3, fp
 800b916:	4639      	mov	r1, r7
 800b918:	f7f4 ff98 	bl	800084c <__aeabi_ddiv>
 800b91c:	ec41 0b10 	vmov	d0, r0, r1
 800b920:	b003      	add	sp, #12
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b926 <__copybits>:
 800b926:	3901      	subs	r1, #1
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	1149      	asrs	r1, r1, #5
 800b92c:	6914      	ldr	r4, [r2, #16]
 800b92e:	3101      	adds	r1, #1
 800b930:	f102 0314 	add.w	r3, r2, #20
 800b934:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b938:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b93c:	1f05      	subs	r5, r0, #4
 800b93e:	42a3      	cmp	r3, r4
 800b940:	d30c      	bcc.n	800b95c <__copybits+0x36>
 800b942:	1aa3      	subs	r3, r4, r2
 800b944:	3b11      	subs	r3, #17
 800b946:	f023 0303 	bic.w	r3, r3, #3
 800b94a:	3211      	adds	r2, #17
 800b94c:	42a2      	cmp	r2, r4
 800b94e:	bf88      	it	hi
 800b950:	2300      	movhi	r3, #0
 800b952:	4418      	add	r0, r3
 800b954:	2300      	movs	r3, #0
 800b956:	4288      	cmp	r0, r1
 800b958:	d305      	bcc.n	800b966 <__copybits+0x40>
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b960:	f845 6f04 	str.w	r6, [r5, #4]!
 800b964:	e7eb      	b.n	800b93e <__copybits+0x18>
 800b966:	f840 3b04 	str.w	r3, [r0], #4
 800b96a:	e7f4      	b.n	800b956 <__copybits+0x30>

0800b96c <__any_on>:
 800b96c:	f100 0214 	add.w	r2, r0, #20
 800b970:	6900      	ldr	r0, [r0, #16]
 800b972:	114b      	asrs	r3, r1, #5
 800b974:	4298      	cmp	r0, r3
 800b976:	b510      	push	{r4, lr}
 800b978:	db11      	blt.n	800b99e <__any_on+0x32>
 800b97a:	dd0a      	ble.n	800b992 <__any_on+0x26>
 800b97c:	f011 011f 	ands.w	r1, r1, #31
 800b980:	d007      	beq.n	800b992 <__any_on+0x26>
 800b982:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b986:	fa24 f001 	lsr.w	r0, r4, r1
 800b98a:	fa00 f101 	lsl.w	r1, r0, r1
 800b98e:	428c      	cmp	r4, r1
 800b990:	d10b      	bne.n	800b9aa <__any_on+0x3e>
 800b992:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b996:	4293      	cmp	r3, r2
 800b998:	d803      	bhi.n	800b9a2 <__any_on+0x36>
 800b99a:	2000      	movs	r0, #0
 800b99c:	bd10      	pop	{r4, pc}
 800b99e:	4603      	mov	r3, r0
 800b9a0:	e7f7      	b.n	800b992 <__any_on+0x26>
 800b9a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	d0f5      	beq.n	800b996 <__any_on+0x2a>
 800b9aa:	2001      	movs	r0, #1
 800b9ac:	e7f6      	b.n	800b99c <__any_on+0x30>

0800b9ae <_calloc_r>:
 800b9ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9b0:	fba1 2402 	umull	r2, r4, r1, r2
 800b9b4:	b94c      	cbnz	r4, 800b9ca <_calloc_r+0x1c>
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	9201      	str	r2, [sp, #4]
 800b9ba:	f000 f87b 	bl	800bab4 <_malloc_r>
 800b9be:	9a01      	ldr	r2, [sp, #4]
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	b930      	cbnz	r0, 800b9d2 <_calloc_r+0x24>
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	b003      	add	sp, #12
 800b9c8:	bd30      	pop	{r4, r5, pc}
 800b9ca:	220c      	movs	r2, #12
 800b9cc:	6002      	str	r2, [r0, #0]
 800b9ce:	2500      	movs	r5, #0
 800b9d0:	e7f8      	b.n	800b9c4 <_calloc_r+0x16>
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	f7fc fab0 	bl	8007f38 <memset>
 800b9d8:	e7f4      	b.n	800b9c4 <_calloc_r+0x16>
	...

0800b9dc <_free_r>:
 800b9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9de:	2900      	cmp	r1, #0
 800b9e0:	d044      	beq.n	800ba6c <_free_r+0x90>
 800b9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e6:	9001      	str	r0, [sp, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f1a1 0404 	sub.w	r4, r1, #4
 800b9ee:	bfb8      	it	lt
 800b9f0:	18e4      	addlt	r4, r4, r3
 800b9f2:	f000 fe6d 	bl	800c6d0 <__malloc_lock>
 800b9f6:	4a1e      	ldr	r2, [pc, #120]	; (800ba70 <_free_r+0x94>)
 800b9f8:	9801      	ldr	r0, [sp, #4]
 800b9fa:	6813      	ldr	r3, [r2, #0]
 800b9fc:	b933      	cbnz	r3, 800ba0c <_free_r+0x30>
 800b9fe:	6063      	str	r3, [r4, #4]
 800ba00:	6014      	str	r4, [r2, #0]
 800ba02:	b003      	add	sp, #12
 800ba04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba08:	f000 be68 	b.w	800c6dc <__malloc_unlock>
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	d908      	bls.n	800ba22 <_free_r+0x46>
 800ba10:	6825      	ldr	r5, [r4, #0]
 800ba12:	1961      	adds	r1, r4, r5
 800ba14:	428b      	cmp	r3, r1
 800ba16:	bf01      	itttt	eq
 800ba18:	6819      	ldreq	r1, [r3, #0]
 800ba1a:	685b      	ldreq	r3, [r3, #4]
 800ba1c:	1949      	addeq	r1, r1, r5
 800ba1e:	6021      	streq	r1, [r4, #0]
 800ba20:	e7ed      	b.n	800b9fe <_free_r+0x22>
 800ba22:	461a      	mov	r2, r3
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	b10b      	cbz	r3, 800ba2c <_free_r+0x50>
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	d9fa      	bls.n	800ba22 <_free_r+0x46>
 800ba2c:	6811      	ldr	r1, [r2, #0]
 800ba2e:	1855      	adds	r5, r2, r1
 800ba30:	42a5      	cmp	r5, r4
 800ba32:	d10b      	bne.n	800ba4c <_free_r+0x70>
 800ba34:	6824      	ldr	r4, [r4, #0]
 800ba36:	4421      	add	r1, r4
 800ba38:	1854      	adds	r4, r2, r1
 800ba3a:	42a3      	cmp	r3, r4
 800ba3c:	6011      	str	r1, [r2, #0]
 800ba3e:	d1e0      	bne.n	800ba02 <_free_r+0x26>
 800ba40:	681c      	ldr	r4, [r3, #0]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	6053      	str	r3, [r2, #4]
 800ba46:	4421      	add	r1, r4
 800ba48:	6011      	str	r1, [r2, #0]
 800ba4a:	e7da      	b.n	800ba02 <_free_r+0x26>
 800ba4c:	d902      	bls.n	800ba54 <_free_r+0x78>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	6003      	str	r3, [r0, #0]
 800ba52:	e7d6      	b.n	800ba02 <_free_r+0x26>
 800ba54:	6825      	ldr	r5, [r4, #0]
 800ba56:	1961      	adds	r1, r4, r5
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf04      	itt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	6063      	str	r3, [r4, #4]
 800ba62:	bf04      	itt	eq
 800ba64:	1949      	addeq	r1, r1, r5
 800ba66:	6021      	streq	r1, [r4, #0]
 800ba68:	6054      	str	r4, [r2, #4]
 800ba6a:	e7ca      	b.n	800ba02 <_free_r+0x26>
 800ba6c:	b003      	add	sp, #12
 800ba6e:	bd30      	pop	{r4, r5, pc}
 800ba70:	2000053c 	.word	0x2000053c

0800ba74 <sbrk_aligned>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	4e0e      	ldr	r6, [pc, #56]	; (800bab0 <sbrk_aligned+0x3c>)
 800ba78:	460c      	mov	r4, r1
 800ba7a:	6831      	ldr	r1, [r6, #0]
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	b911      	cbnz	r1, 800ba86 <sbrk_aligned+0x12>
 800ba80:	f000 fb4a 	bl	800c118 <_sbrk_r>
 800ba84:	6030      	str	r0, [r6, #0]
 800ba86:	4621      	mov	r1, r4
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f000 fb45 	bl	800c118 <_sbrk_r>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	d00a      	beq.n	800baa8 <sbrk_aligned+0x34>
 800ba92:	1cc4      	adds	r4, r0, #3
 800ba94:	f024 0403 	bic.w	r4, r4, #3
 800ba98:	42a0      	cmp	r0, r4
 800ba9a:	d007      	beq.n	800baac <sbrk_aligned+0x38>
 800ba9c:	1a21      	subs	r1, r4, r0
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 fb3a 	bl	800c118 <_sbrk_r>
 800baa4:	3001      	adds	r0, #1
 800baa6:	d101      	bne.n	800baac <sbrk_aligned+0x38>
 800baa8:	f04f 34ff 	mov.w	r4, #4294967295
 800baac:	4620      	mov	r0, r4
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	20000540 	.word	0x20000540

0800bab4 <_malloc_r>:
 800bab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab8:	1ccd      	adds	r5, r1, #3
 800baba:	f025 0503 	bic.w	r5, r5, #3
 800babe:	3508      	adds	r5, #8
 800bac0:	2d0c      	cmp	r5, #12
 800bac2:	bf38      	it	cc
 800bac4:	250c      	movcc	r5, #12
 800bac6:	2d00      	cmp	r5, #0
 800bac8:	4607      	mov	r7, r0
 800baca:	db01      	blt.n	800bad0 <_malloc_r+0x1c>
 800bacc:	42a9      	cmp	r1, r5
 800bace:	d905      	bls.n	800badc <_malloc_r+0x28>
 800bad0:	230c      	movs	r3, #12
 800bad2:	603b      	str	r3, [r7, #0]
 800bad4:	2600      	movs	r6, #0
 800bad6:	4630      	mov	r0, r6
 800bad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800badc:	4e2e      	ldr	r6, [pc, #184]	; (800bb98 <_malloc_r+0xe4>)
 800bade:	f000 fdf7 	bl	800c6d0 <__malloc_lock>
 800bae2:	6833      	ldr	r3, [r6, #0]
 800bae4:	461c      	mov	r4, r3
 800bae6:	bb34      	cbnz	r4, 800bb36 <_malloc_r+0x82>
 800bae8:	4629      	mov	r1, r5
 800baea:	4638      	mov	r0, r7
 800baec:	f7ff ffc2 	bl	800ba74 <sbrk_aligned>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	4604      	mov	r4, r0
 800baf4:	d14d      	bne.n	800bb92 <_malloc_r+0xde>
 800baf6:	6834      	ldr	r4, [r6, #0]
 800baf8:	4626      	mov	r6, r4
 800bafa:	2e00      	cmp	r6, #0
 800bafc:	d140      	bne.n	800bb80 <_malloc_r+0xcc>
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	4631      	mov	r1, r6
 800bb02:	4638      	mov	r0, r7
 800bb04:	eb04 0803 	add.w	r8, r4, r3
 800bb08:	f000 fb06 	bl	800c118 <_sbrk_r>
 800bb0c:	4580      	cmp	r8, r0
 800bb0e:	d13a      	bne.n	800bb86 <_malloc_r+0xd2>
 800bb10:	6821      	ldr	r1, [r4, #0]
 800bb12:	3503      	adds	r5, #3
 800bb14:	1a6d      	subs	r5, r5, r1
 800bb16:	f025 0503 	bic.w	r5, r5, #3
 800bb1a:	3508      	adds	r5, #8
 800bb1c:	2d0c      	cmp	r5, #12
 800bb1e:	bf38      	it	cc
 800bb20:	250c      	movcc	r5, #12
 800bb22:	4629      	mov	r1, r5
 800bb24:	4638      	mov	r0, r7
 800bb26:	f7ff ffa5 	bl	800ba74 <sbrk_aligned>
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	d02b      	beq.n	800bb86 <_malloc_r+0xd2>
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	442b      	add	r3, r5
 800bb32:	6023      	str	r3, [r4, #0]
 800bb34:	e00e      	b.n	800bb54 <_malloc_r+0xa0>
 800bb36:	6822      	ldr	r2, [r4, #0]
 800bb38:	1b52      	subs	r2, r2, r5
 800bb3a:	d41e      	bmi.n	800bb7a <_malloc_r+0xc6>
 800bb3c:	2a0b      	cmp	r2, #11
 800bb3e:	d916      	bls.n	800bb6e <_malloc_r+0xba>
 800bb40:	1961      	adds	r1, r4, r5
 800bb42:	42a3      	cmp	r3, r4
 800bb44:	6025      	str	r5, [r4, #0]
 800bb46:	bf18      	it	ne
 800bb48:	6059      	strne	r1, [r3, #4]
 800bb4a:	6863      	ldr	r3, [r4, #4]
 800bb4c:	bf08      	it	eq
 800bb4e:	6031      	streq	r1, [r6, #0]
 800bb50:	5162      	str	r2, [r4, r5]
 800bb52:	604b      	str	r3, [r1, #4]
 800bb54:	4638      	mov	r0, r7
 800bb56:	f104 060b 	add.w	r6, r4, #11
 800bb5a:	f000 fdbf 	bl	800c6dc <__malloc_unlock>
 800bb5e:	f026 0607 	bic.w	r6, r6, #7
 800bb62:	1d23      	adds	r3, r4, #4
 800bb64:	1af2      	subs	r2, r6, r3
 800bb66:	d0b6      	beq.n	800bad6 <_malloc_r+0x22>
 800bb68:	1b9b      	subs	r3, r3, r6
 800bb6a:	50a3      	str	r3, [r4, r2]
 800bb6c:	e7b3      	b.n	800bad6 <_malloc_r+0x22>
 800bb6e:	6862      	ldr	r2, [r4, #4]
 800bb70:	42a3      	cmp	r3, r4
 800bb72:	bf0c      	ite	eq
 800bb74:	6032      	streq	r2, [r6, #0]
 800bb76:	605a      	strne	r2, [r3, #4]
 800bb78:	e7ec      	b.n	800bb54 <_malloc_r+0xa0>
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	6864      	ldr	r4, [r4, #4]
 800bb7e:	e7b2      	b.n	800bae6 <_malloc_r+0x32>
 800bb80:	4634      	mov	r4, r6
 800bb82:	6876      	ldr	r6, [r6, #4]
 800bb84:	e7b9      	b.n	800bafa <_malloc_r+0x46>
 800bb86:	230c      	movs	r3, #12
 800bb88:	603b      	str	r3, [r7, #0]
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	f000 fda6 	bl	800c6dc <__malloc_unlock>
 800bb90:	e7a1      	b.n	800bad6 <_malloc_r+0x22>
 800bb92:	6025      	str	r5, [r4, #0]
 800bb94:	e7de      	b.n	800bb54 <_malloc_r+0xa0>
 800bb96:	bf00      	nop
 800bb98:	2000053c 	.word	0x2000053c

0800bb9c <__ssputs_r>:
 800bb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba0:	688e      	ldr	r6, [r1, #8]
 800bba2:	429e      	cmp	r6, r3
 800bba4:	4682      	mov	sl, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	4690      	mov	r8, r2
 800bbaa:	461f      	mov	r7, r3
 800bbac:	d838      	bhi.n	800bc20 <__ssputs_r+0x84>
 800bbae:	898a      	ldrh	r2, [r1, #12]
 800bbb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbb4:	d032      	beq.n	800bc1c <__ssputs_r+0x80>
 800bbb6:	6825      	ldr	r5, [r4, #0]
 800bbb8:	6909      	ldr	r1, [r1, #16]
 800bbba:	eba5 0901 	sub.w	r9, r5, r1
 800bbbe:	6965      	ldr	r5, [r4, #20]
 800bbc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbc8:	3301      	adds	r3, #1
 800bbca:	444b      	add	r3, r9
 800bbcc:	106d      	asrs	r5, r5, #1
 800bbce:	429d      	cmp	r5, r3
 800bbd0:	bf38      	it	cc
 800bbd2:	461d      	movcc	r5, r3
 800bbd4:	0553      	lsls	r3, r2, #21
 800bbd6:	d531      	bpl.n	800bc3c <__ssputs_r+0xa0>
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f7ff ff6b 	bl	800bab4 <_malloc_r>
 800bbde:	4606      	mov	r6, r0
 800bbe0:	b950      	cbnz	r0, 800bbf8 <__ssputs_r+0x5c>
 800bbe2:	230c      	movs	r3, #12
 800bbe4:	f8ca 3000 	str.w	r3, [sl]
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf8:	6921      	ldr	r1, [r4, #16]
 800bbfa:	464a      	mov	r2, r9
 800bbfc:	f7ff fa08 	bl	800b010 <memcpy>
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	6126      	str	r6, [r4, #16]
 800bc0e:	6165      	str	r5, [r4, #20]
 800bc10:	444e      	add	r6, r9
 800bc12:	eba5 0509 	sub.w	r5, r5, r9
 800bc16:	6026      	str	r6, [r4, #0]
 800bc18:	60a5      	str	r5, [r4, #8]
 800bc1a:	463e      	mov	r6, r7
 800bc1c:	42be      	cmp	r6, r7
 800bc1e:	d900      	bls.n	800bc22 <__ssputs_r+0x86>
 800bc20:	463e      	mov	r6, r7
 800bc22:	6820      	ldr	r0, [r4, #0]
 800bc24:	4632      	mov	r2, r6
 800bc26:	4641      	mov	r1, r8
 800bc28:	f000 fd38 	bl	800c69c <memmove>
 800bc2c:	68a3      	ldr	r3, [r4, #8]
 800bc2e:	1b9b      	subs	r3, r3, r6
 800bc30:	60a3      	str	r3, [r4, #8]
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	4433      	add	r3, r6
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e7db      	b.n	800bbf4 <__ssputs_r+0x58>
 800bc3c:	462a      	mov	r2, r5
 800bc3e:	f000 fd53 	bl	800c6e8 <_realloc_r>
 800bc42:	4606      	mov	r6, r0
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d1e1      	bne.n	800bc0c <__ssputs_r+0x70>
 800bc48:	6921      	ldr	r1, [r4, #16]
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	f7ff fec6 	bl	800b9dc <_free_r>
 800bc50:	e7c7      	b.n	800bbe2 <__ssputs_r+0x46>
	...

0800bc54 <_svfiprintf_r>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4698      	mov	r8, r3
 800bc5a:	898b      	ldrh	r3, [r1, #12]
 800bc5c:	061b      	lsls	r3, r3, #24
 800bc5e:	b09d      	sub	sp, #116	; 0x74
 800bc60:	4607      	mov	r7, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	d50e      	bpl.n	800bc86 <_svfiprintf_r+0x32>
 800bc68:	690b      	ldr	r3, [r1, #16]
 800bc6a:	b963      	cbnz	r3, 800bc86 <_svfiprintf_r+0x32>
 800bc6c:	2140      	movs	r1, #64	; 0x40
 800bc6e:	f7ff ff21 	bl	800bab4 <_malloc_r>
 800bc72:	6028      	str	r0, [r5, #0]
 800bc74:	6128      	str	r0, [r5, #16]
 800bc76:	b920      	cbnz	r0, 800bc82 <_svfiprintf_r+0x2e>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	e0d1      	b.n	800be26 <_svfiprintf_r+0x1d2>
 800bc82:	2340      	movs	r3, #64	; 0x40
 800bc84:	616b      	str	r3, [r5, #20]
 800bc86:	2300      	movs	r3, #0
 800bc88:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8a:	2320      	movs	r3, #32
 800bc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc90:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc94:	2330      	movs	r3, #48	; 0x30
 800bc96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be40 <_svfiprintf_r+0x1ec>
 800bc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc9e:	f04f 0901 	mov.w	r9, #1
 800bca2:	4623      	mov	r3, r4
 800bca4:	469a      	mov	sl, r3
 800bca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcaa:	b10a      	cbz	r2, 800bcb0 <_svfiprintf_r+0x5c>
 800bcac:	2a25      	cmp	r2, #37	; 0x25
 800bcae:	d1f9      	bne.n	800bca4 <_svfiprintf_r+0x50>
 800bcb0:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb4:	d00b      	beq.n	800bcce <_svfiprintf_r+0x7a>
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	4622      	mov	r2, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7ff ff6d 	bl	800bb9c <__ssputs_r>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f000 80aa 	beq.w	800be1c <_svfiprintf_r+0x1c8>
 800bcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcca:	445a      	add	r2, fp
 800bccc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcce:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80a2 	beq.w	800be1c <_svfiprintf_r+0x1c8>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f04f 32ff 	mov.w	r2, #4294967295
 800bcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce2:	f10a 0a01 	add.w	sl, sl, #1
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	9307      	str	r3, [sp, #28]
 800bcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcee:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf0:	4654      	mov	r4, sl
 800bcf2:	2205      	movs	r2, #5
 800bcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf8:	4851      	ldr	r0, [pc, #324]	; (800be40 <_svfiprintf_r+0x1ec>)
 800bcfa:	f7f4 fa71 	bl	80001e0 <memchr>
 800bcfe:	9a04      	ldr	r2, [sp, #16]
 800bd00:	b9d8      	cbnz	r0, 800bd3a <_svfiprintf_r+0xe6>
 800bd02:	06d0      	lsls	r0, r2, #27
 800bd04:	bf44      	itt	mi
 800bd06:	2320      	movmi	r3, #32
 800bd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0c:	0711      	lsls	r1, r2, #28
 800bd0e:	bf44      	itt	mi
 800bd10:	232b      	movmi	r3, #43	; 0x2b
 800bd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd16:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd1c:	d015      	beq.n	800bd4a <_svfiprintf_r+0xf6>
 800bd1e:	9a07      	ldr	r2, [sp, #28]
 800bd20:	4654      	mov	r4, sl
 800bd22:	2000      	movs	r0, #0
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4621      	mov	r1, r4
 800bd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2e:	3b30      	subs	r3, #48	; 0x30
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d94e      	bls.n	800bdd2 <_svfiprintf_r+0x17e>
 800bd34:	b1b0      	cbz	r0, 800bd64 <_svfiprintf_r+0x110>
 800bd36:	9207      	str	r2, [sp, #28]
 800bd38:	e014      	b.n	800bd64 <_svfiprintf_r+0x110>
 800bd3a:	eba0 0308 	sub.w	r3, r0, r8
 800bd3e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd42:	4313      	orrs	r3, r2
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	46a2      	mov	sl, r4
 800bd48:	e7d2      	b.n	800bcf0 <_svfiprintf_r+0x9c>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	1d19      	adds	r1, r3, #4
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	9103      	str	r1, [sp, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	bfbb      	ittet	lt
 800bd56:	425b      	neglt	r3, r3
 800bd58:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5c:	9307      	strge	r3, [sp, #28]
 800bd5e:	9307      	strlt	r3, [sp, #28]
 800bd60:	bfb8      	it	lt
 800bd62:	9204      	strlt	r2, [sp, #16]
 800bd64:	7823      	ldrb	r3, [r4, #0]
 800bd66:	2b2e      	cmp	r3, #46	; 0x2e
 800bd68:	d10c      	bne.n	800bd84 <_svfiprintf_r+0x130>
 800bd6a:	7863      	ldrb	r3, [r4, #1]
 800bd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd6e:	d135      	bne.n	800bddc <_svfiprintf_r+0x188>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	9203      	str	r2, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfb8      	it	lt
 800bd7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd80:	3402      	adds	r4, #2
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be50 <_svfiprintf_r+0x1fc>
 800bd88:	7821      	ldrb	r1, [r4, #0]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	f7f4 fa27 	bl	80001e0 <memchr>
 800bd92:	b140      	cbz	r0, 800bda6 <_svfiprintf_r+0x152>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	eba0 000a 	sub.w	r0, r0, sl
 800bd9a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	4303      	orrs	r3, r0
 800bda2:	3401      	adds	r4, #1
 800bda4:	9304      	str	r3, [sp, #16]
 800bda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdaa:	4826      	ldr	r0, [pc, #152]	; (800be44 <_svfiprintf_r+0x1f0>)
 800bdac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb0:	2206      	movs	r2, #6
 800bdb2:	f7f4 fa15 	bl	80001e0 <memchr>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d038      	beq.n	800be2c <_svfiprintf_r+0x1d8>
 800bdba:	4b23      	ldr	r3, [pc, #140]	; (800be48 <_svfiprintf_r+0x1f4>)
 800bdbc:	bb1b      	cbnz	r3, 800be06 <_svfiprintf_r+0x1b2>
 800bdbe:	9b03      	ldr	r3, [sp, #12]
 800bdc0:	3307      	adds	r3, #7
 800bdc2:	f023 0307 	bic.w	r3, r3, #7
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	9303      	str	r3, [sp, #12]
 800bdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdcc:	4433      	add	r3, r6
 800bdce:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd0:	e767      	b.n	800bca2 <_svfiprintf_r+0x4e>
 800bdd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	2001      	movs	r0, #1
 800bdda:	e7a5      	b.n	800bd28 <_svfiprintf_r+0xd4>
 800bddc:	2300      	movs	r3, #0
 800bdde:	3401      	adds	r4, #1
 800bde0:	9305      	str	r3, [sp, #20]
 800bde2:	4619      	mov	r1, r3
 800bde4:	f04f 0c0a 	mov.w	ip, #10
 800bde8:	4620      	mov	r0, r4
 800bdea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdee:	3a30      	subs	r2, #48	; 0x30
 800bdf0:	2a09      	cmp	r2, #9
 800bdf2:	d903      	bls.n	800bdfc <_svfiprintf_r+0x1a8>
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0c5      	beq.n	800bd84 <_svfiprintf_r+0x130>
 800bdf8:	9105      	str	r1, [sp, #20]
 800bdfa:	e7c3      	b.n	800bd84 <_svfiprintf_r+0x130>
 800bdfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800be00:	4604      	mov	r4, r0
 800be02:	2301      	movs	r3, #1
 800be04:	e7f0      	b.n	800bde8 <_svfiprintf_r+0x194>
 800be06:	ab03      	add	r3, sp, #12
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	462a      	mov	r2, r5
 800be0c:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <_svfiprintf_r+0x1f8>)
 800be0e:	a904      	add	r1, sp, #16
 800be10:	4638      	mov	r0, r7
 800be12:	f7fc f939 	bl	8008088 <_printf_float>
 800be16:	1c42      	adds	r2, r0, #1
 800be18:	4606      	mov	r6, r0
 800be1a:	d1d6      	bne.n	800bdca <_svfiprintf_r+0x176>
 800be1c:	89ab      	ldrh	r3, [r5, #12]
 800be1e:	065b      	lsls	r3, r3, #25
 800be20:	f53f af2c 	bmi.w	800bc7c <_svfiprintf_r+0x28>
 800be24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be26:	b01d      	add	sp, #116	; 0x74
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	ab03      	add	r3, sp, #12
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	462a      	mov	r2, r5
 800be32:	4b06      	ldr	r3, [pc, #24]	; (800be4c <_svfiprintf_r+0x1f8>)
 800be34:	a904      	add	r1, sp, #16
 800be36:	4638      	mov	r0, r7
 800be38:	f7fc fbca 	bl	80085d0 <_printf_i>
 800be3c:	e7eb      	b.n	800be16 <_svfiprintf_r+0x1c2>
 800be3e:	bf00      	nop
 800be40:	0800cd3c 	.word	0x0800cd3c
 800be44:	0800cd46 	.word	0x0800cd46
 800be48:	08008089 	.word	0x08008089
 800be4c:	0800bb9d 	.word	0x0800bb9d
 800be50:	0800cd42 	.word	0x0800cd42

0800be54 <__sfputc_r>:
 800be54:	6893      	ldr	r3, [r2, #8]
 800be56:	3b01      	subs	r3, #1
 800be58:	2b00      	cmp	r3, #0
 800be5a:	b410      	push	{r4}
 800be5c:	6093      	str	r3, [r2, #8]
 800be5e:	da08      	bge.n	800be72 <__sfputc_r+0x1e>
 800be60:	6994      	ldr	r4, [r2, #24]
 800be62:	42a3      	cmp	r3, r4
 800be64:	db01      	blt.n	800be6a <__sfputc_r+0x16>
 800be66:	290a      	cmp	r1, #10
 800be68:	d103      	bne.n	800be72 <__sfputc_r+0x1e>
 800be6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be6e:	f000 b9bb 	b.w	800c1e8 <__swbuf_r>
 800be72:	6813      	ldr	r3, [r2, #0]
 800be74:	1c58      	adds	r0, r3, #1
 800be76:	6010      	str	r0, [r2, #0]
 800be78:	7019      	strb	r1, [r3, #0]
 800be7a:	4608      	mov	r0, r1
 800be7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <__sfputs_r>:
 800be82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be84:	4606      	mov	r6, r0
 800be86:	460f      	mov	r7, r1
 800be88:	4614      	mov	r4, r2
 800be8a:	18d5      	adds	r5, r2, r3
 800be8c:	42ac      	cmp	r4, r5
 800be8e:	d101      	bne.n	800be94 <__sfputs_r+0x12>
 800be90:	2000      	movs	r0, #0
 800be92:	e007      	b.n	800bea4 <__sfputs_r+0x22>
 800be94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be98:	463a      	mov	r2, r7
 800be9a:	4630      	mov	r0, r6
 800be9c:	f7ff ffda 	bl	800be54 <__sfputc_r>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d1f3      	bne.n	800be8c <__sfputs_r+0xa>
 800bea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bea8 <_vfiprintf_r>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	460d      	mov	r5, r1
 800beae:	b09d      	sub	sp, #116	; 0x74
 800beb0:	4614      	mov	r4, r2
 800beb2:	4698      	mov	r8, r3
 800beb4:	4606      	mov	r6, r0
 800beb6:	b118      	cbz	r0, 800bec0 <_vfiprintf_r+0x18>
 800beb8:	6983      	ldr	r3, [r0, #24]
 800beba:	b90b      	cbnz	r3, 800bec0 <_vfiprintf_r+0x18>
 800bebc:	f7fe fc7a 	bl	800a7b4 <__sinit>
 800bec0:	4b89      	ldr	r3, [pc, #548]	; (800c0e8 <_vfiprintf_r+0x240>)
 800bec2:	429d      	cmp	r5, r3
 800bec4:	d11b      	bne.n	800befe <_vfiprintf_r+0x56>
 800bec6:	6875      	ldr	r5, [r6, #4]
 800bec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beca:	07d9      	lsls	r1, r3, #31
 800becc:	d405      	bmi.n	800beda <_vfiprintf_r+0x32>
 800bece:	89ab      	ldrh	r3, [r5, #12]
 800bed0:	059a      	lsls	r2, r3, #22
 800bed2:	d402      	bmi.n	800beda <_vfiprintf_r+0x32>
 800bed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bed6:	f7ff f87e 	bl	800afd6 <__retarget_lock_acquire_recursive>
 800beda:	89ab      	ldrh	r3, [r5, #12]
 800bedc:	071b      	lsls	r3, r3, #28
 800bede:	d501      	bpl.n	800bee4 <_vfiprintf_r+0x3c>
 800bee0:	692b      	ldr	r3, [r5, #16]
 800bee2:	b9eb      	cbnz	r3, 800bf20 <_vfiprintf_r+0x78>
 800bee4:	4629      	mov	r1, r5
 800bee6:	4630      	mov	r0, r6
 800bee8:	f000 f9f0 	bl	800c2cc <__swsetup_r>
 800beec:	b1c0      	cbz	r0, 800bf20 <_vfiprintf_r+0x78>
 800beee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef0:	07dc      	lsls	r4, r3, #31
 800bef2:	d50e      	bpl.n	800bf12 <_vfiprintf_r+0x6a>
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	b01d      	add	sp, #116	; 0x74
 800befa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befe:	4b7b      	ldr	r3, [pc, #492]	; (800c0ec <_vfiprintf_r+0x244>)
 800bf00:	429d      	cmp	r5, r3
 800bf02:	d101      	bne.n	800bf08 <_vfiprintf_r+0x60>
 800bf04:	68b5      	ldr	r5, [r6, #8]
 800bf06:	e7df      	b.n	800bec8 <_vfiprintf_r+0x20>
 800bf08:	4b79      	ldr	r3, [pc, #484]	; (800c0f0 <_vfiprintf_r+0x248>)
 800bf0a:	429d      	cmp	r5, r3
 800bf0c:	bf08      	it	eq
 800bf0e:	68f5      	ldreq	r5, [r6, #12]
 800bf10:	e7da      	b.n	800bec8 <_vfiprintf_r+0x20>
 800bf12:	89ab      	ldrh	r3, [r5, #12]
 800bf14:	0598      	lsls	r0, r3, #22
 800bf16:	d4ed      	bmi.n	800bef4 <_vfiprintf_r+0x4c>
 800bf18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf1a:	f7ff f85d 	bl	800afd8 <__retarget_lock_release_recursive>
 800bf1e:	e7e9      	b.n	800bef4 <_vfiprintf_r+0x4c>
 800bf20:	2300      	movs	r3, #0
 800bf22:	9309      	str	r3, [sp, #36]	; 0x24
 800bf24:	2320      	movs	r3, #32
 800bf26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf2e:	2330      	movs	r3, #48	; 0x30
 800bf30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0f4 <_vfiprintf_r+0x24c>
 800bf34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf38:	f04f 0901 	mov.w	r9, #1
 800bf3c:	4623      	mov	r3, r4
 800bf3e:	469a      	mov	sl, r3
 800bf40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf44:	b10a      	cbz	r2, 800bf4a <_vfiprintf_r+0xa2>
 800bf46:	2a25      	cmp	r2, #37	; 0x25
 800bf48:	d1f9      	bne.n	800bf3e <_vfiprintf_r+0x96>
 800bf4a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf4e:	d00b      	beq.n	800bf68 <_vfiprintf_r+0xc0>
 800bf50:	465b      	mov	r3, fp
 800bf52:	4622      	mov	r2, r4
 800bf54:	4629      	mov	r1, r5
 800bf56:	4630      	mov	r0, r6
 800bf58:	f7ff ff93 	bl	800be82 <__sfputs_r>
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	f000 80aa 	beq.w	800c0b6 <_vfiprintf_r+0x20e>
 800bf62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf64:	445a      	add	r2, fp
 800bf66:	9209      	str	r2, [sp, #36]	; 0x24
 800bf68:	f89a 3000 	ldrb.w	r3, [sl]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 80a2 	beq.w	800c0b6 <_vfiprintf_r+0x20e>
 800bf72:	2300      	movs	r3, #0
 800bf74:	f04f 32ff 	mov.w	r2, #4294967295
 800bf78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf7c:	f10a 0a01 	add.w	sl, sl, #1
 800bf80:	9304      	str	r3, [sp, #16]
 800bf82:	9307      	str	r3, [sp, #28]
 800bf84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf88:	931a      	str	r3, [sp, #104]	; 0x68
 800bf8a:	4654      	mov	r4, sl
 800bf8c:	2205      	movs	r2, #5
 800bf8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf92:	4858      	ldr	r0, [pc, #352]	; (800c0f4 <_vfiprintf_r+0x24c>)
 800bf94:	f7f4 f924 	bl	80001e0 <memchr>
 800bf98:	9a04      	ldr	r2, [sp, #16]
 800bf9a:	b9d8      	cbnz	r0, 800bfd4 <_vfiprintf_r+0x12c>
 800bf9c:	06d1      	lsls	r1, r2, #27
 800bf9e:	bf44      	itt	mi
 800bfa0:	2320      	movmi	r3, #32
 800bfa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfa6:	0713      	lsls	r3, r2, #28
 800bfa8:	bf44      	itt	mi
 800bfaa:	232b      	movmi	r3, #43	; 0x2b
 800bfac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfb0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfb4:	2b2a      	cmp	r3, #42	; 0x2a
 800bfb6:	d015      	beq.n	800bfe4 <_vfiprintf_r+0x13c>
 800bfb8:	9a07      	ldr	r2, [sp, #28]
 800bfba:	4654      	mov	r4, sl
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	f04f 0c0a 	mov.w	ip, #10
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfc8:	3b30      	subs	r3, #48	; 0x30
 800bfca:	2b09      	cmp	r3, #9
 800bfcc:	d94e      	bls.n	800c06c <_vfiprintf_r+0x1c4>
 800bfce:	b1b0      	cbz	r0, 800bffe <_vfiprintf_r+0x156>
 800bfd0:	9207      	str	r2, [sp, #28]
 800bfd2:	e014      	b.n	800bffe <_vfiprintf_r+0x156>
 800bfd4:	eba0 0308 	sub.w	r3, r0, r8
 800bfd8:	fa09 f303 	lsl.w	r3, r9, r3
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	9304      	str	r3, [sp, #16]
 800bfe0:	46a2      	mov	sl, r4
 800bfe2:	e7d2      	b.n	800bf8a <_vfiprintf_r+0xe2>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	1d19      	adds	r1, r3, #4
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	9103      	str	r1, [sp, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	bfbb      	ittet	lt
 800bff0:	425b      	neglt	r3, r3
 800bff2:	f042 0202 	orrlt.w	r2, r2, #2
 800bff6:	9307      	strge	r3, [sp, #28]
 800bff8:	9307      	strlt	r3, [sp, #28]
 800bffa:	bfb8      	it	lt
 800bffc:	9204      	strlt	r2, [sp, #16]
 800bffe:	7823      	ldrb	r3, [r4, #0]
 800c000:	2b2e      	cmp	r3, #46	; 0x2e
 800c002:	d10c      	bne.n	800c01e <_vfiprintf_r+0x176>
 800c004:	7863      	ldrb	r3, [r4, #1]
 800c006:	2b2a      	cmp	r3, #42	; 0x2a
 800c008:	d135      	bne.n	800c076 <_vfiprintf_r+0x1ce>
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	1d1a      	adds	r2, r3, #4
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	9203      	str	r2, [sp, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	bfb8      	it	lt
 800c016:	f04f 33ff 	movlt.w	r3, #4294967295
 800c01a:	3402      	adds	r4, #2
 800c01c:	9305      	str	r3, [sp, #20]
 800c01e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c104 <_vfiprintf_r+0x25c>
 800c022:	7821      	ldrb	r1, [r4, #0]
 800c024:	2203      	movs	r2, #3
 800c026:	4650      	mov	r0, sl
 800c028:	f7f4 f8da 	bl	80001e0 <memchr>
 800c02c:	b140      	cbz	r0, 800c040 <_vfiprintf_r+0x198>
 800c02e:	2340      	movs	r3, #64	; 0x40
 800c030:	eba0 000a 	sub.w	r0, r0, sl
 800c034:	fa03 f000 	lsl.w	r0, r3, r0
 800c038:	9b04      	ldr	r3, [sp, #16]
 800c03a:	4303      	orrs	r3, r0
 800c03c:	3401      	adds	r4, #1
 800c03e:	9304      	str	r3, [sp, #16]
 800c040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c044:	482c      	ldr	r0, [pc, #176]	; (800c0f8 <_vfiprintf_r+0x250>)
 800c046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c04a:	2206      	movs	r2, #6
 800c04c:	f7f4 f8c8 	bl	80001e0 <memchr>
 800c050:	2800      	cmp	r0, #0
 800c052:	d03f      	beq.n	800c0d4 <_vfiprintf_r+0x22c>
 800c054:	4b29      	ldr	r3, [pc, #164]	; (800c0fc <_vfiprintf_r+0x254>)
 800c056:	bb1b      	cbnz	r3, 800c0a0 <_vfiprintf_r+0x1f8>
 800c058:	9b03      	ldr	r3, [sp, #12]
 800c05a:	3307      	adds	r3, #7
 800c05c:	f023 0307 	bic.w	r3, r3, #7
 800c060:	3308      	adds	r3, #8
 800c062:	9303      	str	r3, [sp, #12]
 800c064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c066:	443b      	add	r3, r7
 800c068:	9309      	str	r3, [sp, #36]	; 0x24
 800c06a:	e767      	b.n	800bf3c <_vfiprintf_r+0x94>
 800c06c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c070:	460c      	mov	r4, r1
 800c072:	2001      	movs	r0, #1
 800c074:	e7a5      	b.n	800bfc2 <_vfiprintf_r+0x11a>
 800c076:	2300      	movs	r3, #0
 800c078:	3401      	adds	r4, #1
 800c07a:	9305      	str	r3, [sp, #20]
 800c07c:	4619      	mov	r1, r3
 800c07e:	f04f 0c0a 	mov.w	ip, #10
 800c082:	4620      	mov	r0, r4
 800c084:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c088:	3a30      	subs	r2, #48	; 0x30
 800c08a:	2a09      	cmp	r2, #9
 800c08c:	d903      	bls.n	800c096 <_vfiprintf_r+0x1ee>
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d0c5      	beq.n	800c01e <_vfiprintf_r+0x176>
 800c092:	9105      	str	r1, [sp, #20]
 800c094:	e7c3      	b.n	800c01e <_vfiprintf_r+0x176>
 800c096:	fb0c 2101 	mla	r1, ip, r1, r2
 800c09a:	4604      	mov	r4, r0
 800c09c:	2301      	movs	r3, #1
 800c09e:	e7f0      	b.n	800c082 <_vfiprintf_r+0x1da>
 800c0a0:	ab03      	add	r3, sp, #12
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	4b16      	ldr	r3, [pc, #88]	; (800c100 <_vfiprintf_r+0x258>)
 800c0a8:	a904      	add	r1, sp, #16
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7fb ffec 	bl	8008088 <_printf_float>
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	1c78      	adds	r0, r7, #1
 800c0b4:	d1d6      	bne.n	800c064 <_vfiprintf_r+0x1bc>
 800c0b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0b8:	07d9      	lsls	r1, r3, #31
 800c0ba:	d405      	bmi.n	800c0c8 <_vfiprintf_r+0x220>
 800c0bc:	89ab      	ldrh	r3, [r5, #12]
 800c0be:	059a      	lsls	r2, r3, #22
 800c0c0:	d402      	bmi.n	800c0c8 <_vfiprintf_r+0x220>
 800c0c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0c4:	f7fe ff88 	bl	800afd8 <__retarget_lock_release_recursive>
 800c0c8:	89ab      	ldrh	r3, [r5, #12]
 800c0ca:	065b      	lsls	r3, r3, #25
 800c0cc:	f53f af12 	bmi.w	800bef4 <_vfiprintf_r+0x4c>
 800c0d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0d2:	e711      	b.n	800bef8 <_vfiprintf_r+0x50>
 800c0d4:	ab03      	add	r3, sp, #12
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	462a      	mov	r2, r5
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <_vfiprintf_r+0x258>)
 800c0dc:	a904      	add	r1, sp, #16
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f7fc fa76 	bl	80085d0 <_printf_i>
 800c0e4:	e7e4      	b.n	800c0b0 <_vfiprintf_r+0x208>
 800c0e6:	bf00      	nop
 800c0e8:	0800cb24 	.word	0x0800cb24
 800c0ec:	0800cb44 	.word	0x0800cb44
 800c0f0:	0800cb04 	.word	0x0800cb04
 800c0f4:	0800cd3c 	.word	0x0800cd3c
 800c0f8:	0800cd46 	.word	0x0800cd46
 800c0fc:	08008089 	.word	0x08008089
 800c100:	0800be83 	.word	0x0800be83
 800c104:	0800cd42 	.word	0x0800cd42

0800c108 <nan>:
 800c108:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c110 <nan+0x8>
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	00000000 	.word	0x00000000
 800c114:	7ff80000 	.word	0x7ff80000

0800c118 <_sbrk_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	; (800c134 <_sbrk_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f6 fc26 	bl	8002974 <_sbrk>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_sbrk_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_sbrk_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20000544 	.word	0x20000544

0800c138 <__sread>:
 800c138:	b510      	push	{r4, lr}
 800c13a:	460c      	mov	r4, r1
 800c13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c140:	f000 fb02 	bl	800c748 <_read_r>
 800c144:	2800      	cmp	r0, #0
 800c146:	bfab      	itete	ge
 800c148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c14a:	89a3      	ldrhlt	r3, [r4, #12]
 800c14c:	181b      	addge	r3, r3, r0
 800c14e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c152:	bfac      	ite	ge
 800c154:	6563      	strge	r3, [r4, #84]	; 0x54
 800c156:	81a3      	strhlt	r3, [r4, #12]
 800c158:	bd10      	pop	{r4, pc}

0800c15a <__swrite>:
 800c15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15e:	461f      	mov	r7, r3
 800c160:	898b      	ldrh	r3, [r1, #12]
 800c162:	05db      	lsls	r3, r3, #23
 800c164:	4605      	mov	r5, r0
 800c166:	460c      	mov	r4, r1
 800c168:	4616      	mov	r6, r2
 800c16a:	d505      	bpl.n	800c178 <__swrite+0x1e>
 800c16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c170:	2302      	movs	r3, #2
 800c172:	2200      	movs	r2, #0
 800c174:	f000 fa1a 	bl	800c5ac <_lseek_r>
 800c178:	89a3      	ldrh	r3, [r4, #12]
 800c17a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c17e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	4632      	mov	r2, r6
 800c186:	463b      	mov	r3, r7
 800c188:	4628      	mov	r0, r5
 800c18a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c18e:	f000 b88b 	b.w	800c2a8 <_write_r>

0800c192 <__sseek>:
 800c192:	b510      	push	{r4, lr}
 800c194:	460c      	mov	r4, r1
 800c196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c19a:	f000 fa07 	bl	800c5ac <_lseek_r>
 800c19e:	1c43      	adds	r3, r0, #1
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	bf15      	itete	ne
 800c1a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1ae:	81a3      	strheq	r3, [r4, #12]
 800c1b0:	bf18      	it	ne
 800c1b2:	81a3      	strhne	r3, [r4, #12]
 800c1b4:	bd10      	pop	{r4, pc}

0800c1b6 <__sclose>:
 800c1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ba:	f000 b913 	b.w	800c3e4 <_close_r>

0800c1be <strncmp>:
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	b17a      	cbz	r2, 800c1e2 <strncmp+0x24>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	3901      	subs	r1, #1
 800c1c6:	1884      	adds	r4, r0, r2
 800c1c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c1cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c1d0:	4290      	cmp	r0, r2
 800c1d2:	d101      	bne.n	800c1d8 <strncmp+0x1a>
 800c1d4:	42a3      	cmp	r3, r4
 800c1d6:	d101      	bne.n	800c1dc <strncmp+0x1e>
 800c1d8:	1a80      	subs	r0, r0, r2
 800c1da:	bd10      	pop	{r4, pc}
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d1f3      	bne.n	800c1c8 <strncmp+0xa>
 800c1e0:	e7fa      	b.n	800c1d8 <strncmp+0x1a>
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	e7f9      	b.n	800c1da <strncmp+0x1c>
	...

0800c1e8 <__swbuf_r>:
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ea:	460e      	mov	r6, r1
 800c1ec:	4614      	mov	r4, r2
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	b118      	cbz	r0, 800c1fa <__swbuf_r+0x12>
 800c1f2:	6983      	ldr	r3, [r0, #24]
 800c1f4:	b90b      	cbnz	r3, 800c1fa <__swbuf_r+0x12>
 800c1f6:	f7fe fadd 	bl	800a7b4 <__sinit>
 800c1fa:	4b21      	ldr	r3, [pc, #132]	; (800c280 <__swbuf_r+0x98>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	d12b      	bne.n	800c258 <__swbuf_r+0x70>
 800c200:	686c      	ldr	r4, [r5, #4]
 800c202:	69a3      	ldr	r3, [r4, #24]
 800c204:	60a3      	str	r3, [r4, #8]
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	071a      	lsls	r2, r3, #28
 800c20a:	d52f      	bpl.n	800c26c <__swbuf_r+0x84>
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	b36b      	cbz	r3, 800c26c <__swbuf_r+0x84>
 800c210:	6923      	ldr	r3, [r4, #16]
 800c212:	6820      	ldr	r0, [r4, #0]
 800c214:	1ac0      	subs	r0, r0, r3
 800c216:	6963      	ldr	r3, [r4, #20]
 800c218:	b2f6      	uxtb	r6, r6
 800c21a:	4283      	cmp	r3, r0
 800c21c:	4637      	mov	r7, r6
 800c21e:	dc04      	bgt.n	800c22a <__swbuf_r+0x42>
 800c220:	4621      	mov	r1, r4
 800c222:	4628      	mov	r0, r5
 800c224:	f000 f974 	bl	800c510 <_fflush_r>
 800c228:	bb30      	cbnz	r0, 800c278 <__swbuf_r+0x90>
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	60a3      	str	r3, [r4, #8]
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	6022      	str	r2, [r4, #0]
 800c236:	701e      	strb	r6, [r3, #0]
 800c238:	6963      	ldr	r3, [r4, #20]
 800c23a:	3001      	adds	r0, #1
 800c23c:	4283      	cmp	r3, r0
 800c23e:	d004      	beq.n	800c24a <__swbuf_r+0x62>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	07db      	lsls	r3, r3, #31
 800c244:	d506      	bpl.n	800c254 <__swbuf_r+0x6c>
 800c246:	2e0a      	cmp	r6, #10
 800c248:	d104      	bne.n	800c254 <__swbuf_r+0x6c>
 800c24a:	4621      	mov	r1, r4
 800c24c:	4628      	mov	r0, r5
 800c24e:	f000 f95f 	bl	800c510 <_fflush_r>
 800c252:	b988      	cbnz	r0, 800c278 <__swbuf_r+0x90>
 800c254:	4638      	mov	r0, r7
 800c256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <__swbuf_r+0x9c>)
 800c25a:	429c      	cmp	r4, r3
 800c25c:	d101      	bne.n	800c262 <__swbuf_r+0x7a>
 800c25e:	68ac      	ldr	r4, [r5, #8]
 800c260:	e7cf      	b.n	800c202 <__swbuf_r+0x1a>
 800c262:	4b09      	ldr	r3, [pc, #36]	; (800c288 <__swbuf_r+0xa0>)
 800c264:	429c      	cmp	r4, r3
 800c266:	bf08      	it	eq
 800c268:	68ec      	ldreq	r4, [r5, #12]
 800c26a:	e7ca      	b.n	800c202 <__swbuf_r+0x1a>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4628      	mov	r0, r5
 800c270:	f000 f82c 	bl	800c2cc <__swsetup_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	d0cb      	beq.n	800c210 <__swbuf_r+0x28>
 800c278:	f04f 37ff 	mov.w	r7, #4294967295
 800c27c:	e7ea      	b.n	800c254 <__swbuf_r+0x6c>
 800c27e:	bf00      	nop
 800c280:	0800cb24 	.word	0x0800cb24
 800c284:	0800cb44 	.word	0x0800cb44
 800c288:	0800cb04 	.word	0x0800cb04

0800c28c <__ascii_wctomb>:
 800c28c:	b149      	cbz	r1, 800c2a2 <__ascii_wctomb+0x16>
 800c28e:	2aff      	cmp	r2, #255	; 0xff
 800c290:	bf85      	ittet	hi
 800c292:	238a      	movhi	r3, #138	; 0x8a
 800c294:	6003      	strhi	r3, [r0, #0]
 800c296:	700a      	strbls	r2, [r1, #0]
 800c298:	f04f 30ff 	movhi.w	r0, #4294967295
 800c29c:	bf98      	it	ls
 800c29e:	2001      	movls	r0, #1
 800c2a0:	4770      	bx	lr
 800c2a2:	4608      	mov	r0, r1
 800c2a4:	4770      	bx	lr
	...

0800c2a8 <_write_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	; (800c2c8 <_write_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f5 fbec 	bl	8001a94 <_write>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_write_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_write_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20000544 	.word	0x20000544

0800c2cc <__swsetup_r>:
 800c2cc:	4b32      	ldr	r3, [pc, #200]	; (800c398 <__swsetup_r+0xcc>)
 800c2ce:	b570      	push	{r4, r5, r6, lr}
 800c2d0:	681d      	ldr	r5, [r3, #0]
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	b125      	cbz	r5, 800c2e2 <__swsetup_r+0x16>
 800c2d8:	69ab      	ldr	r3, [r5, #24]
 800c2da:	b913      	cbnz	r3, 800c2e2 <__swsetup_r+0x16>
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f7fe fa69 	bl	800a7b4 <__sinit>
 800c2e2:	4b2e      	ldr	r3, [pc, #184]	; (800c39c <__swsetup_r+0xd0>)
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	d10f      	bne.n	800c308 <__swsetup_r+0x3c>
 800c2e8:	686c      	ldr	r4, [r5, #4]
 800c2ea:	89a3      	ldrh	r3, [r4, #12]
 800c2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2f0:	0719      	lsls	r1, r3, #28
 800c2f2:	d42c      	bmi.n	800c34e <__swsetup_r+0x82>
 800c2f4:	06dd      	lsls	r5, r3, #27
 800c2f6:	d411      	bmi.n	800c31c <__swsetup_r+0x50>
 800c2f8:	2309      	movs	r3, #9
 800c2fa:	6033      	str	r3, [r6, #0]
 800c2fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c300:	81a3      	strh	r3, [r4, #12]
 800c302:	f04f 30ff 	mov.w	r0, #4294967295
 800c306:	e03e      	b.n	800c386 <__swsetup_r+0xba>
 800c308:	4b25      	ldr	r3, [pc, #148]	; (800c3a0 <__swsetup_r+0xd4>)
 800c30a:	429c      	cmp	r4, r3
 800c30c:	d101      	bne.n	800c312 <__swsetup_r+0x46>
 800c30e:	68ac      	ldr	r4, [r5, #8]
 800c310:	e7eb      	b.n	800c2ea <__swsetup_r+0x1e>
 800c312:	4b24      	ldr	r3, [pc, #144]	; (800c3a4 <__swsetup_r+0xd8>)
 800c314:	429c      	cmp	r4, r3
 800c316:	bf08      	it	eq
 800c318:	68ec      	ldreq	r4, [r5, #12]
 800c31a:	e7e6      	b.n	800c2ea <__swsetup_r+0x1e>
 800c31c:	0758      	lsls	r0, r3, #29
 800c31e:	d512      	bpl.n	800c346 <__swsetup_r+0x7a>
 800c320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c322:	b141      	cbz	r1, 800c336 <__swsetup_r+0x6a>
 800c324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c328:	4299      	cmp	r1, r3
 800c32a:	d002      	beq.n	800c332 <__swsetup_r+0x66>
 800c32c:	4630      	mov	r0, r6
 800c32e:	f7ff fb55 	bl	800b9dc <_free_r>
 800c332:	2300      	movs	r3, #0
 800c334:	6363      	str	r3, [r4, #52]	; 0x34
 800c336:	89a3      	ldrh	r3, [r4, #12]
 800c338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c33c:	81a3      	strh	r3, [r4, #12]
 800c33e:	2300      	movs	r3, #0
 800c340:	6063      	str	r3, [r4, #4]
 800c342:	6923      	ldr	r3, [r4, #16]
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	f043 0308 	orr.w	r3, r3, #8
 800c34c:	81a3      	strh	r3, [r4, #12]
 800c34e:	6923      	ldr	r3, [r4, #16]
 800c350:	b94b      	cbnz	r3, 800c366 <__swsetup_r+0x9a>
 800c352:	89a3      	ldrh	r3, [r4, #12]
 800c354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c35c:	d003      	beq.n	800c366 <__swsetup_r+0x9a>
 800c35e:	4621      	mov	r1, r4
 800c360:	4630      	mov	r0, r6
 800c362:	f000 f95b 	bl	800c61c <__smakebuf_r>
 800c366:	89a0      	ldrh	r0, [r4, #12]
 800c368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c36c:	f010 0301 	ands.w	r3, r0, #1
 800c370:	d00a      	beq.n	800c388 <__swsetup_r+0xbc>
 800c372:	2300      	movs	r3, #0
 800c374:	60a3      	str	r3, [r4, #8]
 800c376:	6963      	ldr	r3, [r4, #20]
 800c378:	425b      	negs	r3, r3
 800c37a:	61a3      	str	r3, [r4, #24]
 800c37c:	6923      	ldr	r3, [r4, #16]
 800c37e:	b943      	cbnz	r3, 800c392 <__swsetup_r+0xc6>
 800c380:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c384:	d1ba      	bne.n	800c2fc <__swsetup_r+0x30>
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	0781      	lsls	r1, r0, #30
 800c38a:	bf58      	it	pl
 800c38c:	6963      	ldrpl	r3, [r4, #20]
 800c38e:	60a3      	str	r3, [r4, #8]
 800c390:	e7f4      	b.n	800c37c <__swsetup_r+0xb0>
 800c392:	2000      	movs	r0, #0
 800c394:	e7f7      	b.n	800c386 <__swsetup_r+0xba>
 800c396:	bf00      	nop
 800c398:	2000000c 	.word	0x2000000c
 800c39c:	0800cb24 	.word	0x0800cb24
 800c3a0:	0800cb44 	.word	0x0800cb44
 800c3a4:	0800cb04 	.word	0x0800cb04

0800c3a8 <__assert_func>:
 800c3a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3aa:	4614      	mov	r4, r2
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <__assert_func+0x2c>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	68d8      	ldr	r0, [r3, #12]
 800c3b6:	b14c      	cbz	r4, 800c3cc <__assert_func+0x24>
 800c3b8:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <__assert_func+0x30>)
 800c3ba:	9100      	str	r1, [sp, #0]
 800c3bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3c0:	4906      	ldr	r1, [pc, #24]	; (800c3dc <__assert_func+0x34>)
 800c3c2:	462b      	mov	r3, r5
 800c3c4:	f000 f8e0 	bl	800c588 <fiprintf>
 800c3c8:	f000 f9d0 	bl	800c76c <abort>
 800c3cc:	4b04      	ldr	r3, [pc, #16]	; (800c3e0 <__assert_func+0x38>)
 800c3ce:	461c      	mov	r4, r3
 800c3d0:	e7f3      	b.n	800c3ba <__assert_func+0x12>
 800c3d2:	bf00      	nop
 800c3d4:	2000000c 	.word	0x2000000c
 800c3d8:	0800cd4d 	.word	0x0800cd4d
 800c3dc:	0800cd5a 	.word	0x0800cd5a
 800c3e0:	0800cd88 	.word	0x0800cd88

0800c3e4 <_close_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4d06      	ldr	r5, [pc, #24]	; (800c400 <_close_r+0x1c>)
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	602b      	str	r3, [r5, #0]
 800c3f0:	f7f6 fa8b 	bl	800290a <_close>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d102      	bne.n	800c3fe <_close_r+0x1a>
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	b103      	cbz	r3, 800c3fe <_close_r+0x1a>
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	20000544 	.word	0x20000544

0800c404 <__sflush_r>:
 800c404:	898a      	ldrh	r2, [r1, #12]
 800c406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40a:	4605      	mov	r5, r0
 800c40c:	0710      	lsls	r0, r2, #28
 800c40e:	460c      	mov	r4, r1
 800c410:	d458      	bmi.n	800c4c4 <__sflush_r+0xc0>
 800c412:	684b      	ldr	r3, [r1, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	dc05      	bgt.n	800c424 <__sflush_r+0x20>
 800c418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	dc02      	bgt.n	800c424 <__sflush_r+0x20>
 800c41e:	2000      	movs	r0, #0
 800c420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c426:	2e00      	cmp	r6, #0
 800c428:	d0f9      	beq.n	800c41e <__sflush_r+0x1a>
 800c42a:	2300      	movs	r3, #0
 800c42c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c430:	682f      	ldr	r7, [r5, #0]
 800c432:	602b      	str	r3, [r5, #0]
 800c434:	d032      	beq.n	800c49c <__sflush_r+0x98>
 800c436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	075a      	lsls	r2, r3, #29
 800c43c:	d505      	bpl.n	800c44a <__sflush_r+0x46>
 800c43e:	6863      	ldr	r3, [r4, #4]
 800c440:	1ac0      	subs	r0, r0, r3
 800c442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c444:	b10b      	cbz	r3, 800c44a <__sflush_r+0x46>
 800c446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c448:	1ac0      	subs	r0, r0, r3
 800c44a:	2300      	movs	r3, #0
 800c44c:	4602      	mov	r2, r0
 800c44e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c450:	6a21      	ldr	r1, [r4, #32]
 800c452:	4628      	mov	r0, r5
 800c454:	47b0      	blx	r6
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	d106      	bne.n	800c46a <__sflush_r+0x66>
 800c45c:	6829      	ldr	r1, [r5, #0]
 800c45e:	291d      	cmp	r1, #29
 800c460:	d82c      	bhi.n	800c4bc <__sflush_r+0xb8>
 800c462:	4a2a      	ldr	r2, [pc, #168]	; (800c50c <__sflush_r+0x108>)
 800c464:	40ca      	lsrs	r2, r1
 800c466:	07d6      	lsls	r6, r2, #31
 800c468:	d528      	bpl.n	800c4bc <__sflush_r+0xb8>
 800c46a:	2200      	movs	r2, #0
 800c46c:	6062      	str	r2, [r4, #4]
 800c46e:	04d9      	lsls	r1, r3, #19
 800c470:	6922      	ldr	r2, [r4, #16]
 800c472:	6022      	str	r2, [r4, #0]
 800c474:	d504      	bpl.n	800c480 <__sflush_r+0x7c>
 800c476:	1c42      	adds	r2, r0, #1
 800c478:	d101      	bne.n	800c47e <__sflush_r+0x7a>
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	b903      	cbnz	r3, 800c480 <__sflush_r+0x7c>
 800c47e:	6560      	str	r0, [r4, #84]	; 0x54
 800c480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c482:	602f      	str	r7, [r5, #0]
 800c484:	2900      	cmp	r1, #0
 800c486:	d0ca      	beq.n	800c41e <__sflush_r+0x1a>
 800c488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c48c:	4299      	cmp	r1, r3
 800c48e:	d002      	beq.n	800c496 <__sflush_r+0x92>
 800c490:	4628      	mov	r0, r5
 800c492:	f7ff faa3 	bl	800b9dc <_free_r>
 800c496:	2000      	movs	r0, #0
 800c498:	6360      	str	r0, [r4, #52]	; 0x34
 800c49a:	e7c1      	b.n	800c420 <__sflush_r+0x1c>
 800c49c:	6a21      	ldr	r1, [r4, #32]
 800c49e:	2301      	movs	r3, #1
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	47b0      	blx	r6
 800c4a4:	1c41      	adds	r1, r0, #1
 800c4a6:	d1c7      	bne.n	800c438 <__sflush_r+0x34>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0c4      	beq.n	800c438 <__sflush_r+0x34>
 800c4ae:	2b1d      	cmp	r3, #29
 800c4b0:	d001      	beq.n	800c4b6 <__sflush_r+0xb2>
 800c4b2:	2b16      	cmp	r3, #22
 800c4b4:	d101      	bne.n	800c4ba <__sflush_r+0xb6>
 800c4b6:	602f      	str	r7, [r5, #0]
 800c4b8:	e7b1      	b.n	800c41e <__sflush_r+0x1a>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c0:	81a3      	strh	r3, [r4, #12]
 800c4c2:	e7ad      	b.n	800c420 <__sflush_r+0x1c>
 800c4c4:	690f      	ldr	r7, [r1, #16]
 800c4c6:	2f00      	cmp	r7, #0
 800c4c8:	d0a9      	beq.n	800c41e <__sflush_r+0x1a>
 800c4ca:	0793      	lsls	r3, r2, #30
 800c4cc:	680e      	ldr	r6, [r1, #0]
 800c4ce:	bf08      	it	eq
 800c4d0:	694b      	ldreq	r3, [r1, #20]
 800c4d2:	600f      	str	r7, [r1, #0]
 800c4d4:	bf18      	it	ne
 800c4d6:	2300      	movne	r3, #0
 800c4d8:	eba6 0807 	sub.w	r8, r6, r7
 800c4dc:	608b      	str	r3, [r1, #8]
 800c4de:	f1b8 0f00 	cmp.w	r8, #0
 800c4e2:	dd9c      	ble.n	800c41e <__sflush_r+0x1a>
 800c4e4:	6a21      	ldr	r1, [r4, #32]
 800c4e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4e8:	4643      	mov	r3, r8
 800c4ea:	463a      	mov	r2, r7
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b0      	blx	r6
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	dc06      	bgt.n	800c502 <__sflush_r+0xfe>
 800c4f4:	89a3      	ldrh	r3, [r4, #12]
 800c4f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4fa:	81a3      	strh	r3, [r4, #12]
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	e78e      	b.n	800c420 <__sflush_r+0x1c>
 800c502:	4407      	add	r7, r0
 800c504:	eba8 0800 	sub.w	r8, r8, r0
 800c508:	e7e9      	b.n	800c4de <__sflush_r+0xda>
 800c50a:	bf00      	nop
 800c50c:	20400001 	.word	0x20400001

0800c510 <_fflush_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	690b      	ldr	r3, [r1, #16]
 800c514:	4605      	mov	r5, r0
 800c516:	460c      	mov	r4, r1
 800c518:	b913      	cbnz	r3, 800c520 <_fflush_r+0x10>
 800c51a:	2500      	movs	r5, #0
 800c51c:	4628      	mov	r0, r5
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	b118      	cbz	r0, 800c52a <_fflush_r+0x1a>
 800c522:	6983      	ldr	r3, [r0, #24]
 800c524:	b90b      	cbnz	r3, 800c52a <_fflush_r+0x1a>
 800c526:	f7fe f945 	bl	800a7b4 <__sinit>
 800c52a:	4b14      	ldr	r3, [pc, #80]	; (800c57c <_fflush_r+0x6c>)
 800c52c:	429c      	cmp	r4, r3
 800c52e:	d11b      	bne.n	800c568 <_fflush_r+0x58>
 800c530:	686c      	ldr	r4, [r5, #4]
 800c532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0ef      	beq.n	800c51a <_fflush_r+0xa>
 800c53a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c53c:	07d0      	lsls	r0, r2, #31
 800c53e:	d404      	bmi.n	800c54a <_fflush_r+0x3a>
 800c540:	0599      	lsls	r1, r3, #22
 800c542:	d402      	bmi.n	800c54a <_fflush_r+0x3a>
 800c544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c546:	f7fe fd46 	bl	800afd6 <__retarget_lock_acquire_recursive>
 800c54a:	4628      	mov	r0, r5
 800c54c:	4621      	mov	r1, r4
 800c54e:	f7ff ff59 	bl	800c404 <__sflush_r>
 800c552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c554:	07da      	lsls	r2, r3, #31
 800c556:	4605      	mov	r5, r0
 800c558:	d4e0      	bmi.n	800c51c <_fflush_r+0xc>
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	059b      	lsls	r3, r3, #22
 800c55e:	d4dd      	bmi.n	800c51c <_fflush_r+0xc>
 800c560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c562:	f7fe fd39 	bl	800afd8 <__retarget_lock_release_recursive>
 800c566:	e7d9      	b.n	800c51c <_fflush_r+0xc>
 800c568:	4b05      	ldr	r3, [pc, #20]	; (800c580 <_fflush_r+0x70>)
 800c56a:	429c      	cmp	r4, r3
 800c56c:	d101      	bne.n	800c572 <_fflush_r+0x62>
 800c56e:	68ac      	ldr	r4, [r5, #8]
 800c570:	e7df      	b.n	800c532 <_fflush_r+0x22>
 800c572:	4b04      	ldr	r3, [pc, #16]	; (800c584 <_fflush_r+0x74>)
 800c574:	429c      	cmp	r4, r3
 800c576:	bf08      	it	eq
 800c578:	68ec      	ldreq	r4, [r5, #12]
 800c57a:	e7da      	b.n	800c532 <_fflush_r+0x22>
 800c57c:	0800cb24 	.word	0x0800cb24
 800c580:	0800cb44 	.word	0x0800cb44
 800c584:	0800cb04 	.word	0x0800cb04

0800c588 <fiprintf>:
 800c588:	b40e      	push	{r1, r2, r3}
 800c58a:	b503      	push	{r0, r1, lr}
 800c58c:	4601      	mov	r1, r0
 800c58e:	ab03      	add	r3, sp, #12
 800c590:	4805      	ldr	r0, [pc, #20]	; (800c5a8 <fiprintf+0x20>)
 800c592:	f853 2b04 	ldr.w	r2, [r3], #4
 800c596:	6800      	ldr	r0, [r0, #0]
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	f7ff fc85 	bl	800bea8 <_vfiprintf_r>
 800c59e:	b002      	add	sp, #8
 800c5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5a4:	b003      	add	sp, #12
 800c5a6:	4770      	bx	lr
 800c5a8:	2000000c 	.word	0x2000000c

0800c5ac <_lseek_r>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	4d07      	ldr	r5, [pc, #28]	; (800c5cc <_lseek_r+0x20>)
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	4608      	mov	r0, r1
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	602a      	str	r2, [r5, #0]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f7f6 f9cc 	bl	8002958 <_lseek>
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d102      	bne.n	800c5ca <_lseek_r+0x1e>
 800c5c4:	682b      	ldr	r3, [r5, #0]
 800c5c6:	b103      	cbz	r3, 800c5ca <_lseek_r+0x1e>
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	20000544 	.word	0x20000544

0800c5d0 <__swhatbuf_r>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	460e      	mov	r6, r1
 800c5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d8:	2900      	cmp	r1, #0
 800c5da:	b096      	sub	sp, #88	; 0x58
 800c5dc:	4614      	mov	r4, r2
 800c5de:	461d      	mov	r5, r3
 800c5e0:	da08      	bge.n	800c5f4 <__swhatbuf_r+0x24>
 800c5e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	602a      	str	r2, [r5, #0]
 800c5ea:	061a      	lsls	r2, r3, #24
 800c5ec:	d410      	bmi.n	800c610 <__swhatbuf_r+0x40>
 800c5ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5f2:	e00e      	b.n	800c612 <__swhatbuf_r+0x42>
 800c5f4:	466a      	mov	r2, sp
 800c5f6:	f000 f8c1 	bl	800c77c <_fstat_r>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	dbf1      	blt.n	800c5e2 <__swhatbuf_r+0x12>
 800c5fe:	9a01      	ldr	r2, [sp, #4]
 800c600:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c604:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c608:	425a      	negs	r2, r3
 800c60a:	415a      	adcs	r2, r3
 800c60c:	602a      	str	r2, [r5, #0]
 800c60e:	e7ee      	b.n	800c5ee <__swhatbuf_r+0x1e>
 800c610:	2340      	movs	r3, #64	; 0x40
 800c612:	2000      	movs	r0, #0
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	b016      	add	sp, #88	; 0x58
 800c618:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c61c <__smakebuf_r>:
 800c61c:	898b      	ldrh	r3, [r1, #12]
 800c61e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c620:	079d      	lsls	r5, r3, #30
 800c622:	4606      	mov	r6, r0
 800c624:	460c      	mov	r4, r1
 800c626:	d507      	bpl.n	800c638 <__smakebuf_r+0x1c>
 800c628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	6123      	str	r3, [r4, #16]
 800c630:	2301      	movs	r3, #1
 800c632:	6163      	str	r3, [r4, #20]
 800c634:	b002      	add	sp, #8
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	ab01      	add	r3, sp, #4
 800c63a:	466a      	mov	r2, sp
 800c63c:	f7ff ffc8 	bl	800c5d0 <__swhatbuf_r>
 800c640:	9900      	ldr	r1, [sp, #0]
 800c642:	4605      	mov	r5, r0
 800c644:	4630      	mov	r0, r6
 800c646:	f7ff fa35 	bl	800bab4 <_malloc_r>
 800c64a:	b948      	cbnz	r0, 800c660 <__smakebuf_r+0x44>
 800c64c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c650:	059a      	lsls	r2, r3, #22
 800c652:	d4ef      	bmi.n	800c634 <__smakebuf_r+0x18>
 800c654:	f023 0303 	bic.w	r3, r3, #3
 800c658:	f043 0302 	orr.w	r3, r3, #2
 800c65c:	81a3      	strh	r3, [r4, #12]
 800c65e:	e7e3      	b.n	800c628 <__smakebuf_r+0xc>
 800c660:	4b0d      	ldr	r3, [pc, #52]	; (800c698 <__smakebuf_r+0x7c>)
 800c662:	62b3      	str	r3, [r6, #40]	; 0x28
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	6020      	str	r0, [r4, #0]
 800c668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	9b00      	ldr	r3, [sp, #0]
 800c670:	6163      	str	r3, [r4, #20]
 800c672:	9b01      	ldr	r3, [sp, #4]
 800c674:	6120      	str	r0, [r4, #16]
 800c676:	b15b      	cbz	r3, 800c690 <__smakebuf_r+0x74>
 800c678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c67c:	4630      	mov	r0, r6
 800c67e:	f000 f88f 	bl	800c7a0 <_isatty_r>
 800c682:	b128      	cbz	r0, 800c690 <__smakebuf_r+0x74>
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	f023 0303 	bic.w	r3, r3, #3
 800c68a:	f043 0301 	orr.w	r3, r3, #1
 800c68e:	81a3      	strh	r3, [r4, #12]
 800c690:	89a0      	ldrh	r0, [r4, #12]
 800c692:	4305      	orrs	r5, r0
 800c694:	81a5      	strh	r5, [r4, #12]
 800c696:	e7cd      	b.n	800c634 <__smakebuf_r+0x18>
 800c698:	0800a74d 	.word	0x0800a74d

0800c69c <memmove>:
 800c69c:	4288      	cmp	r0, r1
 800c69e:	b510      	push	{r4, lr}
 800c6a0:	eb01 0402 	add.w	r4, r1, r2
 800c6a4:	d902      	bls.n	800c6ac <memmove+0x10>
 800c6a6:	4284      	cmp	r4, r0
 800c6a8:	4623      	mov	r3, r4
 800c6aa:	d807      	bhi.n	800c6bc <memmove+0x20>
 800c6ac:	1e43      	subs	r3, r0, #1
 800c6ae:	42a1      	cmp	r1, r4
 800c6b0:	d008      	beq.n	800c6c4 <memmove+0x28>
 800c6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6ba:	e7f8      	b.n	800c6ae <memmove+0x12>
 800c6bc:	4402      	add	r2, r0
 800c6be:	4601      	mov	r1, r0
 800c6c0:	428a      	cmp	r2, r1
 800c6c2:	d100      	bne.n	800c6c6 <memmove+0x2a>
 800c6c4:	bd10      	pop	{r4, pc}
 800c6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6ce:	e7f7      	b.n	800c6c0 <memmove+0x24>

0800c6d0 <__malloc_lock>:
 800c6d0:	4801      	ldr	r0, [pc, #4]	; (800c6d8 <__malloc_lock+0x8>)
 800c6d2:	f7fe bc80 	b.w	800afd6 <__retarget_lock_acquire_recursive>
 800c6d6:	bf00      	nop
 800c6d8:	20000538 	.word	0x20000538

0800c6dc <__malloc_unlock>:
 800c6dc:	4801      	ldr	r0, [pc, #4]	; (800c6e4 <__malloc_unlock+0x8>)
 800c6de:	f7fe bc7b 	b.w	800afd8 <__retarget_lock_release_recursive>
 800c6e2:	bf00      	nop
 800c6e4:	20000538 	.word	0x20000538

0800c6e8 <_realloc_r>:
 800c6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ec:	4680      	mov	r8, r0
 800c6ee:	4614      	mov	r4, r2
 800c6f0:	460e      	mov	r6, r1
 800c6f2:	b921      	cbnz	r1, 800c6fe <_realloc_r+0x16>
 800c6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	f7ff b9db 	b.w	800bab4 <_malloc_r>
 800c6fe:	b92a      	cbnz	r2, 800c70c <_realloc_r+0x24>
 800c700:	f7ff f96c 	bl	800b9dc <_free_r>
 800c704:	4625      	mov	r5, r4
 800c706:	4628      	mov	r0, r5
 800c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c70c:	f000 f858 	bl	800c7c0 <_malloc_usable_size_r>
 800c710:	4284      	cmp	r4, r0
 800c712:	4607      	mov	r7, r0
 800c714:	d802      	bhi.n	800c71c <_realloc_r+0x34>
 800c716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c71a:	d812      	bhi.n	800c742 <_realloc_r+0x5a>
 800c71c:	4621      	mov	r1, r4
 800c71e:	4640      	mov	r0, r8
 800c720:	f7ff f9c8 	bl	800bab4 <_malloc_r>
 800c724:	4605      	mov	r5, r0
 800c726:	2800      	cmp	r0, #0
 800c728:	d0ed      	beq.n	800c706 <_realloc_r+0x1e>
 800c72a:	42bc      	cmp	r4, r7
 800c72c:	4622      	mov	r2, r4
 800c72e:	4631      	mov	r1, r6
 800c730:	bf28      	it	cs
 800c732:	463a      	movcs	r2, r7
 800c734:	f7fe fc6c 	bl	800b010 <memcpy>
 800c738:	4631      	mov	r1, r6
 800c73a:	4640      	mov	r0, r8
 800c73c:	f7ff f94e 	bl	800b9dc <_free_r>
 800c740:	e7e1      	b.n	800c706 <_realloc_r+0x1e>
 800c742:	4635      	mov	r5, r6
 800c744:	e7df      	b.n	800c706 <_realloc_r+0x1e>
	...

0800c748 <_read_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4d07      	ldr	r5, [pc, #28]	; (800c768 <_read_r+0x20>)
 800c74c:	4604      	mov	r4, r0
 800c74e:	4608      	mov	r0, r1
 800c750:	4611      	mov	r1, r2
 800c752:	2200      	movs	r2, #0
 800c754:	602a      	str	r2, [r5, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	f7f6 f8ba 	bl	80028d0 <_read>
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	d102      	bne.n	800c766 <_read_r+0x1e>
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	b103      	cbz	r3, 800c766 <_read_r+0x1e>
 800c764:	6023      	str	r3, [r4, #0]
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	20000544 	.word	0x20000544

0800c76c <abort>:
 800c76c:	b508      	push	{r3, lr}
 800c76e:	2006      	movs	r0, #6
 800c770:	f000 f856 	bl	800c820 <raise>
 800c774:	2001      	movs	r0, #1
 800c776:	f7f6 f8a1 	bl	80028bc <_exit>
	...

0800c77c <_fstat_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4d07      	ldr	r5, [pc, #28]	; (800c79c <_fstat_r+0x20>)
 800c780:	2300      	movs	r3, #0
 800c782:	4604      	mov	r4, r0
 800c784:	4608      	mov	r0, r1
 800c786:	4611      	mov	r1, r2
 800c788:	602b      	str	r3, [r5, #0]
 800c78a:	f7f6 f8ca 	bl	8002922 <_fstat>
 800c78e:	1c43      	adds	r3, r0, #1
 800c790:	d102      	bne.n	800c798 <_fstat_r+0x1c>
 800c792:	682b      	ldr	r3, [r5, #0]
 800c794:	b103      	cbz	r3, 800c798 <_fstat_r+0x1c>
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	bd38      	pop	{r3, r4, r5, pc}
 800c79a:	bf00      	nop
 800c79c:	20000544 	.word	0x20000544

0800c7a0 <_isatty_r>:
 800c7a0:	b538      	push	{r3, r4, r5, lr}
 800c7a2:	4d06      	ldr	r5, [pc, #24]	; (800c7bc <_isatty_r+0x1c>)
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	4608      	mov	r0, r1
 800c7aa:	602b      	str	r3, [r5, #0]
 800c7ac:	f7f6 f8c9 	bl	8002942 <_isatty>
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d102      	bne.n	800c7ba <_isatty_r+0x1a>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	b103      	cbz	r3, 800c7ba <_isatty_r+0x1a>
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	20000544 	.word	0x20000544

0800c7c0 <_malloc_usable_size_r>:
 800c7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c4:	1f18      	subs	r0, r3, #4
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfbc      	itt	lt
 800c7ca:	580b      	ldrlt	r3, [r1, r0]
 800c7cc:	18c0      	addlt	r0, r0, r3
 800c7ce:	4770      	bx	lr

0800c7d0 <_raise_r>:
 800c7d0:	291f      	cmp	r1, #31
 800c7d2:	b538      	push	{r3, r4, r5, lr}
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	d904      	bls.n	800c7e4 <_raise_r+0x14>
 800c7da:	2316      	movs	r3, #22
 800c7dc:	6003      	str	r3, [r0, #0]
 800c7de:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e2:	bd38      	pop	{r3, r4, r5, pc}
 800c7e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7e6:	b112      	cbz	r2, 800c7ee <_raise_r+0x1e>
 800c7e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7ec:	b94b      	cbnz	r3, 800c802 <_raise_r+0x32>
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f000 f830 	bl	800c854 <_getpid_r>
 800c7f4:	462a      	mov	r2, r5
 800c7f6:	4601      	mov	r1, r0
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7fe:	f000 b817 	b.w	800c830 <_kill_r>
 800c802:	2b01      	cmp	r3, #1
 800c804:	d00a      	beq.n	800c81c <_raise_r+0x4c>
 800c806:	1c59      	adds	r1, r3, #1
 800c808:	d103      	bne.n	800c812 <_raise_r+0x42>
 800c80a:	2316      	movs	r3, #22
 800c80c:	6003      	str	r3, [r0, #0]
 800c80e:	2001      	movs	r0, #1
 800c810:	e7e7      	b.n	800c7e2 <_raise_r+0x12>
 800c812:	2400      	movs	r4, #0
 800c814:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c818:	4628      	mov	r0, r5
 800c81a:	4798      	blx	r3
 800c81c:	2000      	movs	r0, #0
 800c81e:	e7e0      	b.n	800c7e2 <_raise_r+0x12>

0800c820 <raise>:
 800c820:	4b02      	ldr	r3, [pc, #8]	; (800c82c <raise+0xc>)
 800c822:	4601      	mov	r1, r0
 800c824:	6818      	ldr	r0, [r3, #0]
 800c826:	f7ff bfd3 	b.w	800c7d0 <_raise_r>
 800c82a:	bf00      	nop
 800c82c:	2000000c 	.word	0x2000000c

0800c830 <_kill_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d07      	ldr	r5, [pc, #28]	; (800c850 <_kill_r+0x20>)
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	4611      	mov	r1, r2
 800c83c:	602b      	str	r3, [r5, #0]
 800c83e:	f7f6 f82d 	bl	800289c <_kill>
 800c842:	1c43      	adds	r3, r0, #1
 800c844:	d102      	bne.n	800c84c <_kill_r+0x1c>
 800c846:	682b      	ldr	r3, [r5, #0]
 800c848:	b103      	cbz	r3, 800c84c <_kill_r+0x1c>
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	bd38      	pop	{r3, r4, r5, pc}
 800c84e:	bf00      	nop
 800c850:	20000544 	.word	0x20000544

0800c854 <_getpid_r>:
 800c854:	f7f6 b81a 	b.w	800288c <_getpid>

0800c858 <_init>:
 800c858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85a:	bf00      	nop
 800c85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85e:	bc08      	pop	{r3}
 800c860:	469e      	mov	lr, r3
 800c862:	4770      	bx	lr

0800c864 <_fini>:
 800c864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c866:	bf00      	nop
 800c868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86a:	bc08      	pop	{r3}
 800c86c:	469e      	mov	lr, r3
 800c86e:	4770      	bx	lr
