
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800b2f8  0800b2f8  0001b2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7e4  0800b7e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7e4  0800b7e4  0001b7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7ec  0800b7ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7ec  0800b7ec  0001b7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7f0  0800b7f0  0001b7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001e0  0800b9d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800b9d4  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b26  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7d  00000000  00000000  00035d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001480  00000000  00000000  00039e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a298  00000000  00000000  0003b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eea  00000000  00000000  00065598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a85c  00000000  00000000  0007c482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007378  00000000  00000000  00186d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2e0 	.word	0x0800b2e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b2e0 	.word	0x0800b2e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_write>:

#define DHT_PORT GPIOC
#define DHT_PIN GPIO_PIN_9


int _write ( int file , char *ptr , int len ) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2 , (uint8_t*)ptr , len , 50) ;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	b29a      	uxth	r2, r3
 8001008:	2332      	movs	r3, #50	; 0x32
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <_write+0x24>)
 800100e:	f004 fe61 	bl	8005cd4 <HAL_UART_Transmit>
	return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200003dc 	.word	0x200003dc

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
int main(void)
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fe44 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f824 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 fa86 	bl	8001544 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001038:	f000 fa2e 	bl	8001498 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800103c:	f000 f8a8 	bl	8001190 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001040:	f000 f91e 	bl	8001280 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001044:	f000 f9f8 	bl	8001438 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001048:	f000 fa56 	bl	80014f8 <MX_DMA_Init>
  MX_TIM3_Init();
 800104c:	f000 f9a6 	bl	800139c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001050:	f000 f954 	bl	80012fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001054:	217f      	movs	r1, #127	; 0x7f
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <main+0x50>)
 8001058:	f001 ff93 	bl	8002f82 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <main+0x50>)
 800105e:	f001 f9e3 	bl	8002428 <HAL_ADC_Start>

  HAL_TIM_Base_Start(&htim3);
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <main+0x54>)
 8001064:	f004 f91e 	bl	80052a4 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <main+0x58>)
 800106a:	f004 f983 	bl	8005374 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 800106e:	e7fe      	b.n	800106e <main+0x4e>
 8001070:	200001fc 	.word	0x200001fc
 8001074:	20000310 	.word	0x20000310
 8001078:	200002c4 	.word	0x200002c4

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0b8      	sub	sp, #224	; 0xe0
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001086:	2244      	movs	r2, #68	; 0x44
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f005 fcb0 	bl	80069f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2288      	movs	r2, #136	; 0x88
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fca2 	bl	80069f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ba:	2310      	movs	r3, #16
 80010bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010d2:	230a      	movs	r3, #10
 80010d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010d8:	2307      	movs	r3, #7
 80010da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fd34 	bl	8003b5c <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010fa:	f000 fa9f 	bl	800163c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800111c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f902 	bl	800432c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800112e:	f000 fa85 	bl	800163c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001132:	f244 0303 	movw	r3, #16387	; 0x4003
 8001136:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001138:	2300      	movs	r3, #0
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800113c:	2300      	movs	r3, #0
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001140:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001144:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001146:	2302      	movs	r3, #2
 8001148:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800114a:	2301      	movs	r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800114e:	2308      	movs	r3, #8
 8001150:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001152:	2307      	movs	r3, #7
 8001154:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001156:	2302      	movs	r3, #2
 8001158:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800115e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001162:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fae6 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001172:	f000 fa63 	bl	800163c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001176:	f44f 7000 	mov.w	r0, #512	; 0x200
 800117a:	f002 fc99 	bl	8003ab0 <HAL_PWREx_ControlVoltageScaling>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001184:	f000 fa5a 	bl	800163c <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	37e0      	adds	r7, #224	; 0xe0
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011b4:	4a30      	ldr	r2, [pc, #192]	; (8001278 <MX_ADC1_Init+0xe8>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011b8:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011d2:	2204      	movs	r2, #4
 80011d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011de:	2201      	movs	r2, #1
 80011e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_ADC1_Init+0xe4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_ADC1_Init+0xe4>)
 8001206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_ADC1_Init+0xe4>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001214:	4817      	ldr	r0, [pc, #92]	; (8001274 <MX_ADC1_Init+0xe4>)
 8001216:	f000 ffb3 	bl	8002180 <HAL_ADC_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001220:	f000 fa0c 	bl	800163c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_ADC1_Init+0xe4>)
 8001230:	f001 ff08 	bl	8003044 <HAL_ADCEx_MultiModeConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800123a:	f000 f9ff 	bl	800163c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_ADC1_Init+0xec>)
 8001240:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001242:	2306      	movs	r3, #6
 8001244:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001246:	2307      	movs	r3, #7
 8001248:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124a:	237f      	movs	r3, #127	; 0x7f
 800124c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124e:	2304      	movs	r3, #4
 8001250:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_ADC1_Init+0xe4>)
 800125c:	f001 f99e 	bl	800259c <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001266:	f000 f9e9 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001fc 	.word	0x200001fc
 8001278:	50040000 	.word	0x50040000
 800127c:	04300002 	.word	0x04300002

08001280 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_SPI2_Init+0x74>)
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <MX_SPI2_Init+0x78>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_SPI2_Init+0x74>)
 800128c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001290:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_SPI2_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_SPI2_Init+0x74>)
 800129a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800129e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012ce:	2207      	movs	r2, #7
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012da:	2208      	movs	r2, #8
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_SPI2_Init+0x74>)
 80012e0:	f003 fee6 	bl	80050b0 <HAL_SPI_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 f9a7 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000260 	.word	0x20000260
 80012f8:	40003800 	.word	0x40003800

080012fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <MX_TIM2_Init+0x98>)
 800131c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001320:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_TIM2_Init+0x98>)
 8001324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_TIM2_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 730959;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_TIM2_Init+0x98>)
 8001332:	4a19      	ldr	r2, [pc, #100]	; (8001398 <MX_TIM2_Init+0x9c>)
 8001334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_TIM2_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_TIM2_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001342:	4814      	ldr	r0, [pc, #80]	; (8001394 <MX_TIM2_Init+0x98>)
 8001344:	f003 ff57 	bl	80051f6 <HAL_TIM_Base_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800134e:	f000 f975 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001356:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_TIM2_Init+0x98>)
 8001360:	f004 f997 	bl	8005692 <HAL_TIM_ConfigClockSource>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800136a:	f000 f967 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <MX_TIM2_Init+0x98>)
 800137c:	f004 fbb6 	bl	8005aec <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001386:	f000 f959 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200002c4 	.word	0x200002c4
 8001398:	000b274f 	.word	0x000b274f

0800139c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_TIM3_Init+0x94>)
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <MX_TIM3_Init+0x98>)
 80013be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_TIM3_Init+0x94>)
 80013c2:	224f      	movs	r2, #79	; 0x4f
 80013c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_TIM3_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_TIM3_Init+0x94>)
 80013ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_TIM3_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_TIM3_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013e0:	4813      	ldr	r0, [pc, #76]	; (8001430 <MX_TIM3_Init+0x94>)
 80013e2:	f003 ff08 	bl	80051f6 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013ec:	f000 f926 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_TIM3_Init+0x94>)
 80013fe:	f004 f948 	bl	8005692 <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001408:	f000 f918 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_TIM3_Init+0x94>)
 800141a:	f004 fb67 	bl	8005aec <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001424:	f000 f90a 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000310 	.word	0x20000310
 8001434:	40000400 	.word	0x40000400

08001438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <MX_USART1_UART_Init+0x5c>)
 8001440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART1_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART1_UART_Init+0x58>)
 800147c:	f004 fbdc 	bl	8005c38 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001486:	f000 f8d9 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000035c 	.word	0x2000035c
 8001494:	40013800 	.word	0x40013800

08001498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <MX_USART2_UART_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014dc:	f004 fbac 	bl	8005c38 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014e6:	f000 f8a9 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200003dc 	.word	0x200003dc
 80014f4:	40004400 	.word	0x40004400

080014f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_DMA_Init+0x48>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <MX_DMA_Init+0x48>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6493      	str	r3, [r2, #72]	; 0x48
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <MX_DMA_Init+0x48>)
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2010      	movs	r0, #16
 800151c:	f001 ff19 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001520:	2010      	movs	r0, #16
 8001522:	f001 ff32 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2011      	movs	r0, #17
 800152c:	f001 ff11 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001530:	2011      	movs	r0, #17
 8001532:	f001 ff2a 	bl	800338a <HAL_NVIC_EnableIRQ>

}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <MX_GPIO_Init+0xec>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a34      	ldr	r2, [pc, #208]	; (8001630 <MX_GPIO_Init+0xec>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b32      	ldr	r3, [pc, #200]	; (8001630 <MX_GPIO_Init+0xec>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <MX_GPIO_Init+0xec>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <MX_GPIO_Init+0xec>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <MX_GPIO_Init+0xec>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_GPIO_Init+0xec>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a28      	ldr	r2, [pc, #160]	; (8001630 <MX_GPIO_Init+0xec>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_GPIO_Init+0xec>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <MX_GPIO_Init+0xec>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a22      	ldr	r2, [pc, #136]	; (8001630 <MX_GPIO_Init+0xec>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <MX_GPIO_Init+0xec>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CSB_Pin|DHT11_DATA_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f240 2102 	movw	r1, #514	; 0x202
 80015c0:	481c      	ldr	r0, [pc, #112]	; (8001634 <MX_GPIO_Init+0xf0>)
 80015c2:	f002 fa4f 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2120      	movs	r1, #32
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f002 fa49 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_GPIO_Init+0xf4>)
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4813      	ldr	r0, [pc, #76]	; (8001634 <MX_GPIO_Init+0xf0>)
 80015e8:	f002 f892 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CSB_Pin DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = SPI2_CSB_Pin|DHT11_DATA_Pin;
 80015ec:	f240 2302 	movw	r3, #514	; 0x202
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <MX_GPIO_Init+0xf0>)
 8001606:	f002 f883 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800160a:	2320      	movs	r3, #32
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f002 f874 	bl	8003710 <HAL_GPIO_Init>

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	48000800 	.word	0x48000800
 8001638:	10210000 	.word	0x10210000

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_MspInit+0x44>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	; 0x60
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x44>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x44>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x44>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a15      	ldr	r2, [pc, #84]	; (8001708 <HAL_ADC_MspInit+0x74>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d123      	bne.n	80016fe <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_ADC_MspInit+0x78>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_ADC_MspInit+0x78>)
 80016bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_ADC_MspInit+0x78>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_ADC_MspInit+0x78>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_ADC_MspInit+0x78>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_ADC_MspInit+0x78>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e6:	2301      	movs	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ea:	230b      	movs	r3, #11
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_ADC_MspInit+0x7c>)
 80016fa:	f002 f809 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	50040000 	.word	0x50040000
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800

08001714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <HAL_SPI_MspInit+0xb4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d144      	bne.n	80017c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6593      	str	r3, [r2, #88]	; 0x58
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800177e:	230c      	movs	r3, #12
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800178e:	2305      	movs	r3, #5
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <HAL_SPI_MspInit+0xbc>)
 800179a:	f001 ffb9 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b0:	2305      	movs	r3, #5
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <HAL_SPI_MspInit+0xc0>)
 80017bc:	f001 ffa8 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40003800 	.word	0x40003800
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000800 	.word	0x48000800
 80017d4:	48000400 	.word	0x48000400

080017d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d114      	bne.n	8001814 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	4a14      	ldr	r2, [pc, #80]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6593      	str	r3, [r2, #88]	; 0x58
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	201c      	movs	r0, #28
 8001808:	f001 fda3 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800180c:	201c      	movs	r0, #28
 800180e:	f001 fdbc 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001812:	e010      	b.n	8001836 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_TIM_Base_MspInit+0x6c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10b      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6593      	str	r3, [r2, #88]	; 0x58
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_TIM_Base_MspInit+0x68>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	40000400 	.word	0x40000400

08001848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a5d      	ldr	r2, [pc, #372]	; (80019dc <HAL_UART_MspInit+0x194>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d12a      	bne.n	80018c0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HAL_UART_MspInit+0x198>)
 800186c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186e:	4a5c      	ldr	r2, [pc, #368]	; (80019e0 <HAL_UART_MspInit+0x198>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6613      	str	r3, [r2, #96]	; 0x60
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_UART_MspInit+0x198>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HAL_UART_MspInit+0x198>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a56      	ldr	r2, [pc, #344]	; (80019e0 <HAL_UART_MspInit+0x198>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <HAL_UART_MspInit+0x198>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800189a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ac:	2307      	movs	r3, #7
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f001 ff29 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018be:	e088      	b.n	80019d2 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_UART_MspInit+0x19c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	f040 8083 	bne.w	80019d2 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <HAL_UART_MspInit+0x198>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	4a43      	ldr	r2, [pc, #268]	; (80019e0 <HAL_UART_MspInit+0x198>)
 80018d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d6:	6593      	str	r3, [r2, #88]	; 0x58
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <HAL_UART_MspInit+0x198>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_UART_MspInit+0x198>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	4a3d      	ldr	r2, [pc, #244]	; (80019e0 <HAL_UART_MspInit+0x198>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_UART_MspInit+0x198>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018fc:	230c      	movs	r3, #12
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190c:	2307      	movs	r3, #7
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191a:	f001 fef9 	bl	8003710 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 8001920:	4a32      	ldr	r2, [pc, #200]	; (80019ec <HAL_UART_MspInit+0x1a4>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 8001926:	2202      	movs	r2, #2
 8001928:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193c:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 800194a:	2220      	movs	r2, #32
 800194c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001954:	4824      	ldr	r0, [pc, #144]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 8001956:	f001 fd33 	bl	80033c0 <HAL_DMA_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001960:	f7ff fe6c 	bl	800163c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a20      	ldr	r2, [pc, #128]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 8001968:	66da      	str	r2, [r3, #108]	; 0x6c
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_UART_MspInit+0x1a0>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_UART_MspInit+0x1ac>)
 8001974:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 8001978:	2202      	movs	r2, #2
 800197a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 800197e:	2210      	movs	r2, #16
 8001980:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 800199c:	2220      	movs	r2, #32
 800199e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019a6:	4812      	ldr	r0, [pc, #72]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 80019a8:	f001 fd0a 	bl	80033c0 <HAL_DMA_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80019b2:	f7ff fe43 	bl	800163c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 80019ba:	669a      	str	r2, [r3, #104]	; 0x68
 80019bc:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <HAL_UART_MspInit+0x1a8>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2026      	movs	r0, #38	; 0x26
 80019c8:	f001 fcc3 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019cc:	2026      	movs	r0, #38	; 0x26
 80019ce:	f001 fcdc 	bl	800338a <HAL_NVIC_EnableIRQ>
}
 80019d2:	bf00      	nop
 80019d4:	3730      	adds	r7, #48	; 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40004400 	.word	0x40004400
 80019e8:	2000045c 	.word	0x2000045c
 80019ec:	4002006c 	.word	0x4002006c
 80019f0:	200004a4 	.word	0x200004a4
 80019f4:	40020080 	.word	0x40020080

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4c:	f000 f990 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <DMA1_Channel6_IRQHandler+0x10>)
 8001a5a:	f001 fdaa 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000045c 	.word	0x2000045c

08001a68 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <DMA1_Channel7_IRQHandler+0x10>)
 8001a6e:	f001 fda0 	bl	80035b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200004a4 	.word	0x200004a4

08001a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM2_IRQHandler+0x10>)
 8001a82:	f003 fce7 	bl	8005454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200002c4 	.word	0x200002c4

08001a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <USART2_IRQHandler+0x10>)
 8001a96:	f004 f9b1 	bl	8005dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200003dc 	.word	0x200003dc

08001aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
	return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_kill>:

int _kill(int pid, int sig)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001abe:	f004 ff6d 	bl	800699c <__errno>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2216      	movs	r2, #22
 8001ac6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_exit>:

void _exit (int status)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffe7 	bl	8001ab4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ae6:	e7fe      	b.n	8001ae6 <_exit+0x12>

08001ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e00a      	b.n	8001b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001afa:	f3af 8000 	nop.w
 8001afe:	4601      	mov	r1, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf0      	blt.n	8001afa <_read+0x12>
	}

return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_isatty>:

int _isatty(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	return 1;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f004 feee 	bl	800699c <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20018000 	.word	0x20018000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	200004ec 	.word	0x200004ec
 8001bf4:	20000508 	.word	0x20000508

08001bf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <SystemInit+0x64>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <SystemInit+0x64>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <SystemInit+0x68>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <SystemInit+0x68>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <SystemInit+0x68>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <SystemInit+0x68>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <SystemInit+0x68>)
 8001c24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <SystemInit+0x68>)
 8001c30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <SystemInit+0x68>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <SystemInit+0x68>)
 8001c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <SystemInit+0x68>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SystemInit+0x64>)
 8001c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00
 8001c60:	40021000 	.word	0x40021000

08001c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c68:	f7ff ffc6 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c6e:	e003      	b.n	8001c78 <LoopCopyDataInit>

08001c70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c76:	3104      	adds	r1, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c78:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c80:	d3f6      	bcc.n	8001c70 <CopyDataInit>
	ldr	r2, =_sbss
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c84:	e002      	b.n	8001c8c <LoopFillZerobss>

08001c86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c88:	f842 3b04 	str.w	r3, [r2], #4

08001c8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <LoopForever+0x16>)
	cmp	r2, r3
 8001c8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c90:	d3f9      	bcc.n	8001c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c92:	f004 fe89 	bl	80069a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c96:	f7ff f9c3 	bl	8001020 <main>

08001c9a <LoopForever>:

LoopForever:
    b LoopForever
 8001c9a:	e7fe      	b.n	8001c9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c9c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ca0:	0800b7f4 	.word	0x0800b7f4
	ldr	r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ca8:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001cac:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001cb0:	20000504 	.word	0x20000504

08001cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <ADC1_2_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_Init+0x3c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <HAL_Init+0x3c>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cce:	2003      	movs	r0, #3
 8001cd0:	f001 fb34 	bl	800333c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f000 f80f 	bl	8001cf8 <HAL_InitTick>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	e001      	b.n	8001cea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ce6:	f7ff fcb1 	bl	800164c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cea:	79fb      	ldrb	r3, [r7, #7]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_InitTick+0x6c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d023      	beq.n	8001d54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_InitTick+0x70>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_InitTick+0x6c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fb3f 	bl	80033a6 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10f      	bne.n	8001d4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d809      	bhi.n	8001d48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f001 fb09 	bl	8003352 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d40:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_InitTick+0x74>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e007      	b.n	8001d58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e004      	b.n	8001d58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e001      	b.n	8001d58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008
 8001d94:	200004f0 	.word	0x200004f0

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	200004f0 	.word	0x200004f0

08001db0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3360      	adds	r3, #96	; 0x60
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <LL_ADC_SetOffset+0x44>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	03fff000 	.word	0x03fff000

08001e60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3360      	adds	r3, #96	; 0x60
 8001e6e:	461a      	mov	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3360      	adds	r3, #96	; 0x60
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001eb6:	bf00      	nop
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b087      	sub	sp, #28
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3330      	adds	r3, #48	; 0x30
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	4413      	add	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	211f      	movs	r1, #31
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	f003 011f 	and.w	r1, r3, #31
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f0e:	bf00      	nop
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b087      	sub	sp, #28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0e5b      	lsrs	r3, r3, #25
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0d1b      	lsrs	r3, r3, #20
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2107      	movs	r1, #7
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	0d1b      	lsrs	r3, r3, #20
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0318 	and.w	r3, r3, #24
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f94:	40d9      	lsrs	r1, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	400b      	ands	r3, r1
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	0007ffff 	.word	0x0007ffff

08001fb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6093      	str	r3, [r2, #8]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800200c:	d101      	bne.n	8002012 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002034:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800205c:	d101      	bne.n	8002062 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ac:	f043 0202 	orr.w	r2, r3, #2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <LL_ADC_IsEnabled+0x18>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <LL_ADC_IsEnabled+0x1a>
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d101      	bne.n	80020fe <LL_ADC_IsDisableOngoing+0x18>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_ADC_IsDisableOngoing+0x1a>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800211c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002120:	f043 0204 	orr.w	r2, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b04      	cmp	r3, #4
 8002146:	d101      	bne.n	800214c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b08      	cmp	r3, #8
 800216c:	d101      	bne.n	8002172 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e134      	b.n	8002404 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fa73 	bl	8001694 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff19 	bl	8001ff8 <LL_ADC_IsDeepPowerDownEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff feff 	bl	8001fd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff34 	bl	8002048 <LL_ADC_IsInternalRegulatorEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d113      	bne.n	800220e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff18 	bl	8002020 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021f0:	4b86      	ldr	r3, [pc, #536]	; (800240c <HAL_ADC_Init+0x28c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	4a86      	ldr	r2, [pc, #536]	; (8002410 <HAL_ADC_Init+0x290>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002200:	e002      	b.n	8002208 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff18 	bl	8002048 <LL_ADC_IsInternalRegulatorEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff78 	bl	8002134 <LL_ADC_REG_IsConversionOngoing>
 8002244:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80cf 	bne.w	80023f2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 80cb 	bne.w	80023f2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002264:	f043 0202 	orr.w	r2, r3, #2
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff25 	bl	80020c0 <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d115      	bne.n	80022a8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800227c:	4865      	ldr	r0, [pc, #404]	; (8002414 <HAL_ADC_Init+0x294>)
 800227e:	f7ff ff1f 	bl	80020c0 <LL_ADC_IsEnabled>
 8002282:	4604      	mov	r4, r0
 8002284:	4864      	ldr	r0, [pc, #400]	; (8002418 <HAL_ADC_Init+0x298>)
 8002286:	f7ff ff1b 	bl	80020c0 <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	431c      	orrs	r4, r3
 800228e:	4863      	ldr	r0, [pc, #396]	; (800241c <HAL_ADC_Init+0x29c>)
 8002290:	f7ff ff16 	bl	80020c0 <LL_ADC_IsEnabled>
 8002294:	4603      	mov	r3, r0
 8002296:	4323      	orrs	r3, r4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4619      	mov	r1, r3
 80022a2:	485f      	ldr	r0, [pc, #380]	; (8002420 <HAL_ADC_Init+0x2a0>)
 80022a4:	f7ff fd84 	bl	8001db0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e5b      	ldrb	r3, [r3, #25]
 80022ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	3b01      	subs	r3, #1
 80022dc:	045b      	lsls	r3, r3, #17
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_ADC_Init+0x2a4>)
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	430b      	orrs	r3, r1
 8002312:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff0b 	bl	8002134 <LL_ADC_REG_IsConversionOngoing>
 800231e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff18 	bl	800215a <LL_ADC_INJ_IsConversionOngoing>
 800232a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d13d      	bne.n	80023ae <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d13a      	bne.n	80023ae <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800233c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002344:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002354:	f023 0302 	bic.w	r3, r3, #2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	69b9      	ldr	r1, [r7, #24]
 800235e:	430b      	orrs	r3, r1
 8002360:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002368:	2b01      	cmp	r3, #1
 800236a:	d118      	bne.n	800239e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002376:	f023 0304 	bic.w	r3, r3, #4
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002382:	4311      	orrs	r1, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800238e:	430a      	orrs	r2, r1
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	611a      	str	r2, [r3, #16]
 800239c:	e007      	b.n	80023ae <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10c      	bne.n	80023d0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	f023 010f 	bic.w	r1, r3, #15
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	1e5a      	subs	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
 80023ce:	e007      	b.n	80023e0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020f 	bic.w	r2, r2, #15
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f023 0303 	bic.w	r3, r3, #3
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
 80023f0:	e007      	b.n	8002402 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002402:	7ffb      	ldrb	r3, [r7, #31]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3724      	adds	r7, #36	; 0x24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	20000000 	.word	0x20000000
 8002410:	053e2d63 	.word	0x053e2d63
 8002414:	50040000 	.word	0x50040000
 8002418:	50040100 	.word	0x50040100
 800241c:	50040200 	.word	0x50040200
 8002420:	50040300 	.word	0x50040300
 8002424:	fff0c007 	.word	0xfff0c007

08002428 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002430:	4857      	ldr	r0, [pc, #348]	; (8002590 <HAL_ADC_Start+0x168>)
 8002432:	f7ff fdc1 	bl	8001fb8 <LL_ADC_GetMultimode>
 8002436:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fe79 	bl	8002134 <LL_ADC_REG_IsConversionOngoing>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 809c 	bne.w	8002582 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_ADC_Start+0x30>
 8002454:	2302      	movs	r3, #2
 8002456:	e097      	b.n	8002588 <HAL_ADC_Start+0x160>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fc89 	bl	8002d78 <ADC_Enable>
 8002466:	4603      	mov	r3, r0
 8002468:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8083 	bne.w	8002578 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a42      	ldr	r2, [pc, #264]	; (8002594 <HAL_ADC_Start+0x16c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d002      	beq.n	8002496 <HAL_ADC_Start+0x6e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	e000      	b.n	8002498 <HAL_ADC_Start+0x70>
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_ADC_Start+0x170>)
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	4293      	cmp	r3, r2
 800249e:	d002      	beq.n	80024a6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d106      	bne.n	80024ce <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f023 0206 	bic.w	r2, r3, #6
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58
 80024cc:	e002      	b.n	80024d4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	221c      	movs	r2, #28
 80024da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	; (8002594 <HAL_ADC_Start+0x16c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d002      	beq.n	80024f4 <HAL_ADC_Start+0xcc>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e000      	b.n	80024f6 <HAL_ADC_Start+0xce>
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_ADC_Start+0x170>)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d008      	beq.n	8002510 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d002      	beq.n	8002510 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b09      	cmp	r3, #9
 800250e:	d114      	bne.n	800253a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002526:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fdea 	bl	800210c <LL_ADC_REG_StartConversion>
 8002538:	e025      	b.n	8002586 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <HAL_ADC_Start+0x16c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d002      	beq.n	8002556 <HAL_ADC_Start+0x12e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e000      	b.n	8002558 <HAL_ADC_Start+0x130>
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_ADC_Start+0x170>)
 8002558:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800256e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
 8002576:	e006      	b.n	8002586 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002580:	e001      	b.n	8002586 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002582:	2302      	movs	r3, #2
 8002584:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	50040300 	.word	0x50040300
 8002594:	50040100 	.word	0x50040100
 8002598:	50040000 	.word	0x50040000

0800259c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0b6      	sub	sp, #216	; 0xd8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x22>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e3c6      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x7b0>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fdb2 	bl	8002134 <LL_ADC_REG_IsConversionOngoing>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 83a7 	bne.w	8002d26 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d824      	bhi.n	800262a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	3b02      	subs	r3, #2
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d81b      	bhi.n	8002622 <HAL_ADC_ConfigChannel+0x86>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_ADC_ConfigChannel+0x54>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002609 	.word	0x08002609
 80025f8:	08002611 	.word	0x08002611
 80025fc:	08002619 	.word	0x08002619
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	220c      	movs	r2, #12
 8002604:	605a      	str	r2, [r3, #4]
          break;
 8002606:	e011      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2212      	movs	r2, #18
 800260c:	605a      	str	r2, [r3, #4]
          break;
 800260e:	e00d      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2218      	movs	r2, #24
 8002614:	605a      	str	r2, [r3, #4]
          break;
 8002616:	e009      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261e:	605a      	str	r2, [r3, #4]
          break;
 8002620:	e004      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2206      	movs	r2, #6
 8002626:	605a      	str	r2, [r3, #4]
          break;
 8002628:	e000      	b.n	800262c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800262a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f7ff fc42 	bl	8001ec2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fd76 	bl	8002134 <LL_ADC_REG_IsConversionOngoing>
 8002648:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd82 	bl	800215a <LL_ADC_INJ_IsConversionOngoing>
 8002656:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800265a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 81a6 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 81a1 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	461a      	mov	r2, r3
 800267c:	f7ff fc4d 	bl	8001f1a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d00a      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026b2:	f7ff fbb1 	bl	8001e18 <LL_ADC_SetOffset>
 80026b6:	e17b      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fbce 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10a      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x148>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fbc3 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	e01e      	b.n	8002722 <HAL_ADC_ConfigChannel+0x186>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fbb8 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002706:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800270a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e004      	b.n	8002720 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_ADC_ConfigChannel+0x19e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	e018      	b.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800274e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002756:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e004      	b.n	800276c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800276c:	429a      	cmp	r2, r3
 800276e:	d106      	bne.n	800277e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fb87 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fb6b 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x20e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fb60 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	e01e      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x24c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fb55 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e004      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80027dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x264>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	e018      	b.n	8002832 <HAL_ADC_ConfigChannel+0x296>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800281c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e004      	b.n	8002832 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002832:	429a      	cmp	r2, r3
 8002834:	d106      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	2101      	movs	r1, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fb24 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2102      	movs	r1, #2
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fb08 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x2d4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2102      	movs	r1, #2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fafd 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	e01e      	b.n	80028ae <HAL_ADC_ConfigChannel+0x312>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2102      	movs	r1, #2
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff faf2 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800288e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002896:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e004      	b.n	80028ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x32a>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	e016      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x358>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e004      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80028ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fac3 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff faa7 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x396>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2103      	movs	r1, #3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fa9c 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	e017      	b.n	8002962 <HAL_ADC_ConfigChannel+0x3c6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2103      	movs	r1, #3
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fa91 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800294a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800294c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800294e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e003      	b.n	8002960 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_ConfigChannel+0x3de>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	e011      	b.n	800299e <HAL_ADC_ConfigChannel+0x402>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800298a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800298c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e003      	b.n	800299e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800299e:	429a      	cmp	r2, r3
 80029a0:	d106      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2103      	movs	r1, #3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fa6e 	bl	8001e8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fb83 	bl	80020c0 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 813f 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7ff face 	bl	8001f70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a8e      	ldr	r2, [pc, #568]	; (8002c14 <HAL_ADC_ConfigChannel+0x678>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	f040 8130 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x46c>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2b09      	cmp	r3, #9
 80029fe:	bf94      	ite	ls
 8002a00:	2301      	movls	r3, #1
 8002a02:	2300      	movhi	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e019      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x4a0>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a18:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e003      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	bf94      	ite	ls
 8002a36:	2301      	movls	r3, #1
 8002a38:	2300      	movhi	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d079      	beq.n	8002b34 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x4c0>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	3301      	adds	r3, #1
 8002a54:	069b      	lsls	r3, r3, #26
 8002a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5a:	e015      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x4ec>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x50c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	e017      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x53c>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	e003      	b.n	8002acc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	ea42 0103 	orr.w	r1, r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x562>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	051b      	lsls	r3, r3, #20
 8002afc:	e018      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x594>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e003      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b30:	430b      	orrs	r3, r1
 8002b32:	e080      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x5b4>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	3301      	adds	r3, #1
 8002b48:	069b      	lsls	r3, r3, #26
 8002b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4e:	e015      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x5e0>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e003      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	069b      	lsls	r3, r3, #26
 8002b78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x600>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2101      	movs	r1, #1
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	e017      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x630>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	61fb      	str	r3, [r7, #28]
  return result;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e003      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	ea42 0103 	orr.w	r1, r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x65c>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	3301      	adds	r3, #1
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	3b1e      	subs	r3, #30
 8002bf0:	051b      	lsls	r3, r3, #20
 8002bf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	e01d      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x698>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	613b      	str	r3, [r7, #16]
  return result;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d103      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c10:	2320      	movs	r3, #32
 8002c12:	e005      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x684>
 8002c14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b1e      	subs	r3, #30
 8002c2e:	051b      	lsls	r3, r3, #20
 8002c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c34:	430b      	orrs	r3, r1
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	6892      	ldr	r2, [r2, #8]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7ff f96d 	bl	8001f1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d079      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c4c:	4842      	ldr	r0, [pc, #264]	; (8002d58 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c4e:	f7ff f8d5 	bl	8001dfc <LL_ADC_GetCommonPathInternalCh>
 8002c52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <HAL_ADC_ConfigChannel+0x7c0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d12b      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d125      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_ADC_ConfigChannel+0x6e4>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3a      	ldr	r2, [pc, #232]	; (8002d64 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d15c      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4833      	ldr	r0, [pc, #204]	; (8002d58 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c8c:	f7ff f8a3 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	4a35      	ldr	r2, [pc, #212]	; (8002d6c <HAL_ADC_ConfigChannel+0x7d0>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	099a      	lsrs	r2, r3, #6
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ca8:	e002      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f9      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb6:	e040      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d118      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x758>
 8002cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d112      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_ADC_ConfigChannel+0x746>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d12d      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	4619      	mov	r1, r3
 8002cec:	481a      	ldr	r0, [pc, #104]	; (8002d58 <HAL_ADC_ConfigChannel+0x7bc>)
 8002cee:	f7ff f872 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf2:	e024      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d120      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11a      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d115      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480e      	ldr	r0, [pc, #56]	; (8002d58 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d20:	f7ff f859 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
 8002d24:	e00c      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d38:	e002      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d48:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	37d8      	adds	r7, #216	; 0xd8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	80080000 	.word	0x80080000
 8002d58:	50040300 	.word	0x50040300
 8002d5c:	c7520000 	.word	0xc7520000
 8002d60:	50040000 	.word	0x50040000
 8002d64:	50040200 	.word	0x50040200
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	053e2d63 	.word	0x053e2d63
 8002d70:	cb840000 	.word	0xcb840000
 8002d74:	80000001 	.word	0x80000001

08002d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f99b 	bl	80020c0 <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d146      	bne.n	8002e1e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <ADC_Enable+0xb0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e032      	b.n	8002e20 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff f956 	bl	8002070 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe ffe8 	bl	8001d98 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dca:	e021      	b.n	8002e10 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f975 	bl	80020c0 <LL_ADC_IsEnabled>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f945 	bl	8002070 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002de6:	f7fe ffd7 	bl	8001d98 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d90d      	bls.n	8002e10 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e007      	b.n	8002e20 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d1d6      	bne.n	8002dcc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	8000003f 	.word	0x8000003f

08002e2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f954 	bl	80020e6 <LL_ADC_IsDisableOngoing>
 8002e3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff f93b 	bl	80020c0 <LL_ADC_IsEnabled>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d040      	beq.n	8002ed2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d13d      	bne.n	8002ed2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030d 	and.w	r3, r3, #13
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d10c      	bne.n	8002e7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f915 	bl	8002098 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2203      	movs	r2, #3
 8002e74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e76:	f7fe ff8f 	bl	8001d98 <HAL_GetTick>
 8002e7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e7c:	e022      	b.n	8002ec4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f043 0210 	orr.w	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f043 0201 	orr.w	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e01c      	b.n	8002ed4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e9a:	f7fe ff7d 	bl	8001d98 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d90d      	bls.n	8002ec4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f043 0210 	orr.w	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e007      	b.n	8002ed4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e3      	bne.n	8002e9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <LL_ADC_IsEnabled>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <LL_ADC_IsEnabled+0x18>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <LL_ADC_IsEnabled+0x1a>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_ADC_StartCalibration>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f48:	d101      	bne.n	8002f4e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d101      	bne.n	8002f74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADCEx_Calibration_Start+0x1c>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e04d      	b.n	800303a <HAL_ADCEx_Calibration_Start+0xb8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ff40 	bl	8002e2c <ADC_Disable>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d136      	bne.n	8003024 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fbe:	f023 0302 	bic.w	r3, r3, #2
 8002fc2:	f043 0202 	orr.w	r2, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff96 	bl	8002f02 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fd6:	e014      	b.n	8003002 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002fe4:	d30d      	bcc.n	8003002 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f023 0312 	bic.w	r3, r3, #18
 8002fee:	f043 0210 	orr.w	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e01b      	b.n	800303a <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff94 	bl	8002f34 <LL_ADC_IsCalibrationOnGoing>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e2      	bne.n	8002fd8 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
 8003022:	e005      	b.n	8003030 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f043 0210 	orr.w	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b09f      	sub	sp, #124	; 0x7c
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800305e:	2302      	movs	r3, #2
 8003060:	e08f      	b.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a47      	ldr	r2, [pc, #284]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d102      	bne.n	800307a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003074:	4b46      	ldr	r3, [pc, #280]	; (8003190 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	e001      	b.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e072      	b.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff5c 	bl	8002f5c <LL_ADC_REG_IsConversionOngoing>
 80030a4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff56 	bl	8002f5c <LL_ADC_REG_IsConversionOngoing>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d154      	bne.n	8003160 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d151      	bne.n	8003160 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030be:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02c      	beq.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030da:	035b      	lsls	r3, r3, #13
 80030dc:	430b      	orrs	r3, r1
 80030de:	431a      	orrs	r2, r3
 80030e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030e4:	4829      	ldr	r0, [pc, #164]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80030e6:	f7ff fef9 	bl	8002edc <LL_ADC_IsEnabled>
 80030ea:	4604      	mov	r4, r0
 80030ec:	4828      	ldr	r0, [pc, #160]	; (8003190 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80030ee:	f7ff fef5 	bl	8002edc <LL_ADC_IsEnabled>
 80030f2:	4603      	mov	r3, r0
 80030f4:	431c      	orrs	r4, r3
 80030f6:	4828      	ldr	r0, [pc, #160]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030f8:	f7ff fef0 	bl	8002edc <LL_ADC_IsEnabled>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4323      	orrs	r3, r4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d137      	bne.n	8003174 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800310c:	f023 030f 	bic.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	6811      	ldr	r1, [r2, #0]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	430a      	orrs	r2, r1
 800311a:	431a      	orrs	r2, r3
 800311c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003120:	e028      	b.n	8003174 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800312e:	4817      	ldr	r0, [pc, #92]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003130:	f7ff fed4 	bl	8002edc <LL_ADC_IsEnabled>
 8003134:	4604      	mov	r4, r0
 8003136:	4816      	ldr	r0, [pc, #88]	; (8003190 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003138:	f7ff fed0 	bl	8002edc <LL_ADC_IsEnabled>
 800313c:	4603      	mov	r3, r0
 800313e:	431c      	orrs	r4, r3
 8003140:	4815      	ldr	r0, [pc, #84]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003142:	f7ff fecb 	bl	8002edc <LL_ADC_IsEnabled>
 8003146:	4603      	mov	r3, r0
 8003148:	4323      	orrs	r3, r4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d112      	bne.n	8003174 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800314e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003156:	f023 030f 	bic.w	r3, r3, #15
 800315a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800315c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800315e:	e009      	b.n	8003174 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003172:	e000      	b.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003174:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800317e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003182:	4618      	mov	r0, r3
 8003184:	377c      	adds	r7, #124	; 0x7c
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	bf00      	nop
 800318c:	50040000 	.word	0x50040000
 8003190:	50040100 	.word	0x50040100
 8003194:	50040300 	.word	0x50040300
 8003198:	50040200 	.word	0x50040200

0800319c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db0b      	blt.n	800322a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	4907      	ldr	r1, [pc, #28]	; (8003238 <__NVIC_EnableIRQ+0x38>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2001      	movs	r0, #1
 8003222:	fa00 f202 	lsl.w	r2, r0, r2
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000e100 	.word	0xe000e100

0800323c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	2b00      	cmp	r3, #0
 800324e:	db0a      	blt.n	8003266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <__NVIC_SetPriority+0x4c>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	440b      	add	r3, r1
 8003260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003264:	e00a      	b.n	800327c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <__NVIC_SetPriority+0x50>)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	3b04      	subs	r3, #4
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	440b      	add	r3, r1
 800327a:	761a      	strb	r2, [r3, #24]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f1c3 0307 	rsb	r3, r3, #7
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	bf28      	it	cs
 80032ae:	2304      	movcs	r3, #4
 80032b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d902      	bls.n	80032c0 <NVIC_EncodePriority+0x30>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3b03      	subs	r3, #3
 80032be:	e000      	b.n	80032c2 <NVIC_EncodePriority+0x32>
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	401a      	ands	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d8:	f04f 31ff 	mov.w	r1, #4294967295
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43d9      	mvns	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	4313      	orrs	r3, r2
         );
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003308:	d301      	bcc.n	800330e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330a:	2301      	movs	r3, #1
 800330c:	e00f      	b.n	800332e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <SysTick_Config+0x40>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003316:	210f      	movs	r1, #15
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f7ff ff8e 	bl	800323c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <SysTick_Config+0x40>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <SysTick_Config+0x40>)
 8003328:	2207      	movs	r2, #7
 800332a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000e010 	.word	0xe000e010

0800333c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff29 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003364:	f7ff ff3e 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 8003368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	6978      	ldr	r0, [r7, #20]
 8003370:	f7ff ff8e 	bl	8003290 <NVIC_EncodePriority>
 8003374:	4602      	mov	r2, r0
 8003376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff5d 	bl	800323c <__NVIC_SetPriority>
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff31 	bl	8003200 <__NVIC_EnableIRQ>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ffa2 	bl	80032f8 <SysTick_Config>
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e098      	b.n	8003504 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b4d      	ldr	r3, [pc, #308]	; (8003510 <HAL_DMA_Init+0x150>)
 80033da:	429a      	cmp	r2, r3
 80033dc:	d80f      	bhi.n	80033fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b4b      	ldr	r3, [pc, #300]	; (8003514 <HAL_DMA_Init+0x154>)
 80033e6:	4413      	add	r3, r2
 80033e8:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <HAL_DMA_Init+0x158>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a48      	ldr	r2, [pc, #288]	; (800351c <HAL_DMA_Init+0x15c>)
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
 80033fc:	e00e      	b.n	800341c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	4b46      	ldr	r3, [pc, #280]	; (8003520 <HAL_DMA_Init+0x160>)
 8003406:	4413      	add	r3, r2
 8003408:	4a43      	ldr	r2, [pc, #268]	; (8003518 <HAL_DMA_Init+0x158>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	009a      	lsls	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a42      	ldr	r2, [pc, #264]	; (8003524 <HAL_DMA_Init+0x164>)
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003436:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003476:	d039      	beq.n	80034ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	4a27      	ldr	r2, [pc, #156]	; (800351c <HAL_DMA_Init+0x15c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d11a      	bne.n	80034b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003482:	4b29      	ldr	r3, [pc, #164]	; (8003528 <HAL_DMA_Init+0x168>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f003 031c 	and.w	r3, r3, #28
 800348e:	210f      	movs	r1, #15
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	4924      	ldr	r1, [pc, #144]	; (8003528 <HAL_DMA_Init+0x168>)
 8003498:	4013      	ands	r3, r2
 800349a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <HAL_DMA_Init+0x168>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f003 031c 	and.w	r3, r3, #28
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	491d      	ldr	r1, [pc, #116]	; (8003528 <HAL_DMA_Init+0x168>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
 80034b6:	e019      	b.n	80034ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <HAL_DMA_Init+0x16c>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f003 031c 	and.w	r3, r3, #28
 80034c4:	210f      	movs	r1, #15
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	4917      	ldr	r1, [pc, #92]	; (800352c <HAL_DMA_Init+0x16c>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <HAL_DMA_Init+0x16c>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f003 031c 	and.w	r3, r3, #28
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	4911      	ldr	r1, [pc, #68]	; (800352c <HAL_DMA_Init+0x16c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40020407 	.word	0x40020407
 8003514:	bffdfff8 	.word	0xbffdfff8
 8003518:	cccccccd 	.word	0xcccccccd
 800351c:	40020000 	.word	0x40020000
 8003520:	bffdfbf8 	.word	0xbffdfbf8
 8003524:	40020400 	.word	0x40020400
 8003528:	400200a8 	.word	0x400200a8
 800352c:	400204a8 	.word	0x400204a8

08003530 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d005      	beq.n	8003554 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2204      	movs	r2, #4
 800354c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e029      	b.n	80035a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 020e 	bic.w	r2, r2, #14
 8003562:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	f003 021c 	and.w	r2, r3, #28
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
    }
  }
  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f003 031c 	and.w	r3, r3, #28
 80035d2:	2204      	movs	r2, #4
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d026      	beq.n	800362c <HAL_DMA_IRQHandler+0x7a>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d021      	beq.n	800362c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0204 	bic.w	r2, r2, #4
 8003604:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f003 021c 	and.w	r2, r3, #28
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2104      	movs	r1, #4
 8003614:	fa01 f202 	lsl.w	r2, r1, r2
 8003618:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	2b00      	cmp	r3, #0
 8003620:	d071      	beq.n	8003706 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800362a:	e06c      	b.n	8003706 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f003 031c 	and.w	r3, r3, #28
 8003634:	2202      	movs	r2, #2
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d02e      	beq.n	800369e <HAL_DMA_IRQHandler+0xec>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d029      	beq.n	800369e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 020a 	bic.w	r2, r2, #10
 8003666:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f003 021c 	and.w	r2, r3, #28
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2102      	movs	r1, #2
 800367e:	fa01 f202 	lsl.w	r2, r1, r2
 8003682:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d038      	beq.n	8003706 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800369c:	e033      	b.n	8003706 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f003 031c 	and.w	r3, r3, #28
 80036a6:	2208      	movs	r2, #8
 80036a8:	409a      	lsls	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02a      	beq.n	8003708 <HAL_DMA_IRQHandler+0x156>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d025      	beq.n	8003708 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 020e 	bic.w	r2, r2, #14
 80036ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f003 021c 	and.w	r2, r3, #28
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003706:	bf00      	nop
 8003708:	bf00      	nop
}
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371e:	e17f      	b.n	8003a20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	4013      	ands	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8171 	beq.w	8003a1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d00b      	beq.n	8003758 <HAL_GPIO_Init+0x48>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d007      	beq.n	8003758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800374c:	2b11      	cmp	r3, #17
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b12      	cmp	r3, #18
 8003756:	d130      	bne.n	80037ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2203      	movs	r2, #3
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800378e:	2201      	movs	r2, #1
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	f003 0201 	and.w	r2, r3, #1
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d118      	bne.n	80037f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037cc:	2201      	movs	r2, #1
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	08db      	lsrs	r3, r3, #3
 80037e2:	f003 0201 	and.w	r2, r3, #1
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x128>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b12      	cmp	r3, #18
 8003836:	d123      	bne.n	8003880 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	08da      	lsrs	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3208      	adds	r2, #8
 8003840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	220f      	movs	r2, #15
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	08da      	lsrs	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3208      	adds	r2, #8
 800387a:	6939      	ldr	r1, [r7, #16]
 800387c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0203 	and.w	r2, r3, #3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80ac 	beq.w	8003a1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_GPIO_Init+0x330>)
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	4a5e      	ldr	r2, [pc, #376]	; (8003a40 <HAL_GPIO_Init+0x330>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6613      	str	r3, [r2, #96]	; 0x60
 80038ce:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_GPIO_Init+0x330>)
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038da:	4a5a      	ldr	r2, [pc, #360]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	220f      	movs	r2, #15
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003904:	d025      	beq.n	8003952 <HAL_GPIO_Init+0x242>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4f      	ldr	r2, [pc, #316]	; (8003a48 <HAL_GPIO_Init+0x338>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01f      	beq.n	800394e <HAL_GPIO_Init+0x23e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4e      	ldr	r2, [pc, #312]	; (8003a4c <HAL_GPIO_Init+0x33c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d019      	beq.n	800394a <HAL_GPIO_Init+0x23a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a4d      	ldr	r2, [pc, #308]	; (8003a50 <HAL_GPIO_Init+0x340>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_GPIO_Init+0x236>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4c      	ldr	r2, [pc, #304]	; (8003a54 <HAL_GPIO_Init+0x344>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00d      	beq.n	8003942 <HAL_GPIO_Init+0x232>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4b      	ldr	r2, [pc, #300]	; (8003a58 <HAL_GPIO_Init+0x348>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <HAL_GPIO_Init+0x22e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4a      	ldr	r2, [pc, #296]	; (8003a5c <HAL_GPIO_Init+0x34c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_GPIO_Init+0x22a>
 8003936:	2306      	movs	r3, #6
 8003938:	e00c      	b.n	8003954 <HAL_GPIO_Init+0x244>
 800393a:	2307      	movs	r3, #7
 800393c:	e00a      	b.n	8003954 <HAL_GPIO_Init+0x244>
 800393e:	2305      	movs	r3, #5
 8003940:	e008      	b.n	8003954 <HAL_GPIO_Init+0x244>
 8003942:	2304      	movs	r3, #4
 8003944:	e006      	b.n	8003954 <HAL_GPIO_Init+0x244>
 8003946:	2303      	movs	r3, #3
 8003948:	e004      	b.n	8003954 <HAL_GPIO_Init+0x244>
 800394a:	2302      	movs	r3, #2
 800394c:	e002      	b.n	8003954 <HAL_GPIO_Init+0x244>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_GPIO_Init+0x244>
 8003952:	2300      	movs	r3, #0
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	f002 0203 	and.w	r2, r2, #3
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	4093      	lsls	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003964:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_GPIO_Init+0x334>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_GPIO_Init+0x350>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003996:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <HAL_GPIO_Init+0x350>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800399c:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_GPIO_Init+0x350>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <HAL_GPIO_Init+0x350>)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_GPIO_Init+0x350>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ea:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <HAL_GPIO_Init+0x350>)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_GPIO_Init+0x350>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a14:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <HAL_GPIO_Init+0x350>)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f47f ae78 	bne.w	8003720 <HAL_GPIO_Init+0x10>
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40010000 	.word	0x40010000
 8003a48:	48000400 	.word	0x48000400
 8003a4c:	48000800 	.word	0x48000800
 8003a50:	48000c00 	.word	0x48000c00
 8003a54:	48001000 	.word	0x48001000
 8003a58:	48001400 	.word	0x48001400
 8003a5c:	48001800 	.word	0x48001800
 8003a60:	40010400 	.word	0x40010400

08003a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a74:	787b      	ldrb	r3, [r7, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a80:	e002      	b.n	8003a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <HAL_PWREx_GetVoltageRange+0x18>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40007000 	.word	0x40007000

08003ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abe:	d130      	bne.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac0:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d038      	beq.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad6:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2232      	movs	r2, #50	; 0x32
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0c9b      	lsrs	r3, r3, #18
 8003af0:	3301      	adds	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af4:	e002      	b.n	8003afc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b08:	d102      	bne.n	8003b10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f2      	bne.n	8003af6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1c:	d110      	bne.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e00f      	b.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d007      	beq.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b38:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40007000 	.word	0x40007000
 8003b54:	20000000 	.word	0x20000000
 8003b58:	431bde83 	.word	0x431bde83

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e3d8      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b6e:	4b97      	ldr	r3, [pc, #604]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b78:	4b94      	ldr	r3, [pc, #592]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80e4 	beq.w	8003d58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x4a>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	f040 808b 	bne.w	8003cb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	f040 8087 	bne.w	8003cb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba6:	4b89      	ldr	r3, [pc, #548]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e3b0      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	4b82      	ldr	r3, [pc, #520]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x7c>
 8003bce:	4b7f      	ldr	r3, [pc, #508]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd6:	e005      	b.n	8003be4 <HAL_RCC_OscConfig+0x88>
 8003bd8:	4b7c      	ldr	r3, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d223      	bcs.n	8003c30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fd43 	bl	8004678 <RCC_SetFlashLatencyFromMSIRange>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e391      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bfc:	4b73      	ldr	r3, [pc, #460]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a72      	ldr	r2, [pc, #456]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c02:	f043 0308 	orr.w	r3, r3, #8
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b70      	ldr	r3, [pc, #448]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	496d      	ldr	r1, [pc, #436]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c1a:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	4968      	ldr	r1, [pc, #416]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
 8003c2e:	e025      	b.n	8003c7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a65      	ldr	r2, [pc, #404]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c36:	f043 0308 	orr.w	r3, r3, #8
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4960      	ldr	r1, [pc, #384]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	495b      	ldr	r1, [pc, #364]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fd03 	bl	8004678 <RCC_SetFlashLatencyFromMSIRange>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e351      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c7c:	f000 fc38 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b52      	ldr	r3, [pc, #328]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	4950      	ldr	r1, [pc, #320]	; (8003dd0 <HAL_RCC_OscConfig+0x274>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
 8003c98:	4a4e      	ldr	r2, [pc, #312]	; (8003dd4 <HAL_RCC_OscConfig+0x278>)
 8003c9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c9c:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe f829 	bl	8001cf8 <HAL_InitTick>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d052      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	e335      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d032      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cbc:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a42      	ldr	r2, [pc, #264]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f866 	bl	8001d98 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd0:	f7fe f862 	bl	8001d98 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e31e      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ce2:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a36      	ldr	r2, [pc, #216]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003cf4:	f043 0308 	orr.w	r3, r3, #8
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	4931      	ldr	r1, [pc, #196]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	492c      	ldr	r1, [pc, #176]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
 8003d20:	e01a      	b.n	8003d58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d22:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a29      	ldr	r2, [pc, #164]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d2e:	f7fe f833 	bl	8001d98 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d36:	f7fe f82f 	bl	8001d98 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e2eb      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x1da>
 8003d54:	e000      	b.n	8003d58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d074      	beq.n	8003e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x21a>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d10e      	bne.n	8003d8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d064      	beq.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d160      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e2c8      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x24a>
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e026      	b.n	8003df4 <HAL_RCC_OscConfig+0x298>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dae:	d115      	bne.n	8003ddc <HAL_RCC_OscConfig+0x280>
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a02      	ldr	r2, [pc, #8]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e014      	b.n	8003df4 <HAL_RCC_OscConfig+0x298>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	0800b2f8 	.word	0x0800b2f8
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	20000004 	.word	0x20000004
 8003ddc:	4ba0      	ldr	r3, [pc, #640]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a9f      	ldr	r2, [pc, #636]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b9d      	ldr	r3, [pc, #628]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a9c      	ldr	r2, [pc, #624]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd ffcc 	bl	8001d98 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fd ffc8 	bl	8001d98 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e284      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e16:	4b92      	ldr	r3, [pc, #584]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x2a8>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fd ffb8 	bl	8001d98 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fd ffb4 	bl	8001d98 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e270      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e3e:	4b88      	ldr	r3, [pc, #544]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x2d0>
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d060      	beq.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_OscConfig+0x310>
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d119      	bne.n	8003e9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d116      	bne.n	8003e9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6c:	4b7c      	ldr	r3, [pc, #496]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_OscConfig+0x328>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e24d      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b76      	ldr	r3, [pc, #472]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	061b      	lsls	r3, r3, #24
 8003e92:	4973      	ldr	r1, [pc, #460]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e98:	e040      	b.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d023      	beq.n	8003eea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea2:	4b6f      	ldr	r3, [pc, #444]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6e      	ldr	r2, [pc, #440]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fd ff73 	bl	8001d98 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fd ff6f 	bl	8001d98 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e22b      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec8:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	495f      	ldr	r1, [pc, #380]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
 8003ee8:	e018      	b.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b5d      	ldr	r3, [pc, #372]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5c      	ldr	r2, [pc, #368]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fd ff4f 	bl	8001d98 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efe:	f7fd ff4b 	bl	8001d98 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e207      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d03c      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f30:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	4a4a      	ldr	r2, [pc, #296]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fd ff2a 	bl	8001d98 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f48:	f7fd ff26 	bl	8001d98 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1e2      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ef      	beq.n	8003f48 <HAL_RCC_OscConfig+0x3ec>
 8003f68:	e01b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f70:	4a3b      	ldr	r2, [pc, #236]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7fd ff0d 	bl	8001d98 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f82:	f7fd ff09 	bl	8001d98 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e1c5      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f94:	4b32      	ldr	r3, [pc, #200]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1ef      	bne.n	8003f82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80a6 	beq.w	80040fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	4a26      	ldr	r2, [pc, #152]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6593      	str	r3, [r2, #88]	; 0x58
 8003fcc:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fdc:	4b21      	ldr	r3, [pc, #132]	; (8004064 <HAL_RCC_OscConfig+0x508>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d118      	bne.n	800401a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <HAL_RCC_OscConfig+0x508>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <HAL_RCC_OscConfig+0x508>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff4:	f7fd fed0 	bl	8001d98 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fd fecc 	bl	8001d98 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e188      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <HAL_RCC_OscConfig+0x508>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d108      	bne.n	8004034 <HAL_RCC_OscConfig+0x4d8>
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004032:	e029      	b.n	8004088 <HAL_RCC_OscConfig+0x52c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d115      	bne.n	8004068 <HAL_RCC_OscConfig+0x50c>
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	4a07      	ldr	r2, [pc, #28]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	4a03      	ldr	r2, [pc, #12]	; (8004060 <HAL_RCC_OscConfig+0x504>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800405c:	e014      	b.n	8004088 <HAL_RCC_OscConfig+0x52c>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
 8004068:	4b91      	ldr	r3, [pc, #580]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	4a90      	ldr	r2, [pc, #576]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004078:	4b8d      	ldr	r3, [pc, #564]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	4a8c      	ldr	r2, [pc, #560]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d016      	beq.n	80040be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd fe82 	bl	8001d98 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fd fe7e 	bl	8001d98 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e138      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ae:	4b80      	ldr	r3, [pc, #512]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ed      	beq.n	8004098 <HAL_RCC_OscConfig+0x53c>
 80040bc:	e015      	b.n	80040ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fd fe6b 	bl	8001d98 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd fe67 	bl	8001d98 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e121      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040dc:	4b74      	ldr	r3, [pc, #464]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ed      	bne.n	80040c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ea:	7ffb      	ldrb	r3, [r7, #31]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d105      	bne.n	80040fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f0:	4b6f      	ldr	r3, [pc, #444]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	4a6e      	ldr	r2, [pc, #440]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80040f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 810c 	beq.w	800431e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	2b02      	cmp	r3, #2
 800410c:	f040 80d4 	bne.w	80042b8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004110:	4b67      	ldr	r3, [pc, #412]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	429a      	cmp	r2, r3
 8004122:	d130      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	3b01      	subs	r3, #1
 8004130:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d127      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d11f      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004150:	2a07      	cmp	r2, #7
 8004152:	bf14      	ite	ne
 8004154:	2201      	movne	r2, #1
 8004156:	2200      	moveq	r2, #0
 8004158:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415a:	4293      	cmp	r3, r2
 800415c:	d113      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	3b01      	subs	r3, #1
 800416c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d109      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	3b01      	subs	r3, #1
 8004180:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d06e      	beq.n	8004264 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b0c      	cmp	r3, #12
 800418a:	d069      	beq.n	8004260 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800418c:	4b48      	ldr	r3, [pc, #288]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004198:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0bb      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041a8:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a40      	ldr	r2, [pc, #256]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b4:	f7fd fdf0 	bl	8001d98 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd fdec 	bl	8001d98 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0a8      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ce:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_RCC_OscConfig+0x758>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041ea:	3a01      	subs	r2, #1
 80041ec:	0112      	lsls	r2, r2, #4
 80041ee:	4311      	orrs	r1, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f4:	0212      	lsls	r2, r2, #8
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041fc:	0852      	lsrs	r2, r2, #1
 80041fe:	3a01      	subs	r2, #1
 8004200:	0552      	lsls	r2, r2, #21
 8004202:	4311      	orrs	r1, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004208:	0852      	lsrs	r2, r2, #1
 800420a:	3a01      	subs	r2, #1
 800420c:	0652      	lsls	r2, r2, #25
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004214:	0912      	lsrs	r2, r2, #4
 8004216:	0452      	lsls	r2, r2, #17
 8004218:	430a      	orrs	r2, r1
 800421a:	4925      	ldr	r1, [pc, #148]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 800421c:	4313      	orrs	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004238:	f7fd fdae 	bl	8001d98 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004240:	f7fd fdaa 	bl	8001d98 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e066      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800425e:	e05e      	b.n	800431e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e05d      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d156      	bne.n	800431e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a0e      	ldr	r2, [pc, #56]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a0b      	ldr	r2, [pc, #44]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 8004282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004286:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004288:	f7fd fd86 	bl	8001d98 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004290:	f7fd fd82 	bl	8001d98 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e03e      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a2:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_RCC_OscConfig+0x754>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x734>
 80042ae:	e036      	b.n	800431e <HAL_RCC_OscConfig+0x7c2>
 80042b0:	40021000 	.word	0x40021000
 80042b4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d02d      	beq.n	800431a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_RCC_OscConfig+0x7cc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_RCC_OscConfig+0x7cc>)
 80042c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80042ca:	4b17      	ldr	r3, [pc, #92]	; (8004328 <HAL_RCC_OscConfig+0x7cc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d105      	bne.n	80042e2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_RCC_OscConfig+0x7cc>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4a13      	ldr	r2, [pc, #76]	; (8004328 <HAL_RCC_OscConfig+0x7cc>)
 80042dc:	f023 0303 	bic.w	r3, r3, #3
 80042e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_RCC_OscConfig+0x7cc>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_RCC_OscConfig+0x7cc>)
 80042e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fd fd51 	bl	8001d98 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fd fd4d 	bl	8001d98 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e009      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_RCC_OscConfig+0x7cc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x79e>
 8004318:	e001      	b.n	800431e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021000 	.word	0x40021000

0800432c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0c8      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b66      	ldr	r3, [pc, #408]	; (80044dc <HAL_RCC_ClockConfig+0x1b0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d910      	bls.n	8004370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b63      	ldr	r3, [pc, #396]	; (80044dc <HAL_RCC_ClockConfig+0x1b0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 0207 	bic.w	r2, r3, #7
 8004356:	4961      	ldr	r1, [pc, #388]	; (80044dc <HAL_RCC_ClockConfig+0x1b0>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b5f      	ldr	r3, [pc, #380]	; (80044dc <HAL_RCC_ClockConfig+0x1b0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0b0      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d04c      	beq.n	8004416 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d107      	bne.n	8004394 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004384:	4b56      	ldr	r3, [pc, #344]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d121      	bne.n	80043d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e09e      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d107      	bne.n	80043ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439c:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d115      	bne.n	80043d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e092      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043b4:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e086      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c4:	4b46      	ldr	r3, [pc, #280]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e07e      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043d4:	4b42      	ldr	r3, [pc, #264]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 0203 	bic.w	r2, r3, #3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	493f      	ldr	r1, [pc, #252]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e6:	f7fd fcd7 	bl	8001d98 <HAL_GetTick>
 80043ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ee:	f7fd fcd3 	bl	8001d98 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e066      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004404:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 020c 	and.w	r2, r3, #12
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	429a      	cmp	r2, r3
 8004414:	d1eb      	bne.n	80043ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004422:	4b2f      	ldr	r3, [pc, #188]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	492c      	ldr	r1, [pc, #176]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_RCC_ClockConfig+0x1b0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d210      	bcs.n	8004464 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_RCC_ClockConfig+0x1b0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 0207 	bic.w	r2, r3, #7
 800444a:	4924      	ldr	r1, [pc, #144]	; (80044dc <HAL_RCC_ClockConfig+0x1b0>)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	4b22      	ldr	r3, [pc, #136]	; (80044dc <HAL_RCC_ClockConfig+0x1b0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e036      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4918      	ldr	r1, [pc, #96]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4910      	ldr	r1, [pc, #64]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044a2:	f000 f825 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 80044a6:	4602      	mov	r2, r0
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <HAL_RCC_ClockConfig+0x1b4>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	490c      	ldr	r1, [pc, #48]	; (80044e4 <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	5ccb      	ldrb	r3, [r1, r3]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	fa22 f303 	lsr.w	r3, r2, r3
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fd fc16 	bl	8001cf8 <HAL_InitTick>
 80044cc:	4603      	mov	r3, r0
 80044ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80044d0:	7afb      	ldrb	r3, [r7, #11]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40022000 	.word	0x40022000
 80044e0:	40021000 	.word	0x40021000
 80044e4:	0800b2f8 	.word	0x0800b2f8
 80044e8:	20000000 	.word	0x20000000
 80044ec:	20000004 	.word	0x20000004

080044f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fe:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004508:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x34>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b0c      	cmp	r3, #12
 800451c:	d121      	bne.n	8004562 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d11e      	bne.n	8004562 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004524:	4b34      	ldr	r3, [pc, #208]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d107      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004530:	4b31      	ldr	r3, [pc, #196]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	e005      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004540:	4b2d      	ldr	r3, [pc, #180]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800454c:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004554:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10d      	bne.n	8004578 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d102      	bne.n	800456e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <HAL_RCC_GetSysClockFreq+0x110>)
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e004      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d101      	bne.n	8004578 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004574:	4b23      	ldr	r3, [pc, #140]	; (8004604 <HAL_RCC_GetSysClockFreq+0x114>)
 8004576:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d134      	bne.n	80045e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457e:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d003      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0xa6>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d003      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0xac>
 8004594:	e005      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004596:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <HAL_RCC_GetSysClockFreq+0x110>)
 8004598:	617b      	str	r3, [r7, #20]
      break;
 800459a:	e005      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_RCC_GetSysClockFreq+0x114>)
 800459e:	617b      	str	r3, [r7, #20]
      break;
 80045a0:	e002      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	617b      	str	r3, [r7, #20]
      break;
 80045a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	3301      	adds	r3, #1
 80045b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	fb03 f202 	mul.w	r2, r3, r2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	0e5b      	lsrs	r3, r3, #25
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	3301      	adds	r3, #1
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045e8:	69bb      	ldr	r3, [r7, #24]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	0800b310 	.word	0x0800b310
 8004600:	00f42400 	.word	0x00f42400
 8004604:	007a1200 	.word	0x007a1200

08004608 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <HAL_RCC_GetHCLKFreq+0x14>)
 800460e:	681b      	ldr	r3, [r3, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000000 	.word	0x20000000

08004620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004624:	f7ff fff0 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4904      	ldr	r1, [pc, #16]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	0800b308 	.word	0x0800b308

0800464c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004650:	f7ff ffda 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0adb      	lsrs	r3, r3, #11
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000
 8004674:	0800b308 	.word	0x0800b308

08004678 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004684:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004690:	f7ff fa00 	bl	8003a94 <HAL_PWREx_GetVoltageRange>
 8004694:	6178      	str	r0, [r7, #20]
 8004696:	e014      	b.n	80046c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	4a24      	ldr	r2, [pc, #144]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800469e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a2:	6593      	str	r3, [r2, #88]	; 0x58
 80046a4:	4b22      	ldr	r3, [pc, #136]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046b0:	f7ff f9f0 	bl	8003a94 <HAL_PWREx_GetVoltageRange>
 80046b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d10b      	bne.n	80046e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b80      	cmp	r3, #128	; 0x80
 80046ce:	d919      	bls.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2ba0      	cmp	r3, #160	; 0xa0
 80046d4:	d902      	bls.n	80046dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046d6:	2302      	movs	r3, #2
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e013      	b.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046dc:	2301      	movs	r3, #1
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e010      	b.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	d902      	bls.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046e8:	2303      	movs	r3, #3
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e00a      	b.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d102      	bne.n	80046fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046f4:	2302      	movs	r3, #2
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	e004      	b.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b70      	cmp	r3, #112	; 0x70
 80046fe:	d101      	bne.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004700:	2301      	movs	r3, #1
 8004702:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f023 0207 	bic.w	r2, r3, #7
 800470c:	4909      	ldr	r1, [pc, #36]	; (8004734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004714:	4b07      	ldr	r3, [pc, #28]	; (8004734 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	429a      	cmp	r2, r3
 8004720:	d001      	beq.n	8004726 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	40022000 	.word	0x40022000

08004738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004740:	2300      	movs	r3, #0
 8004742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004744:	2300      	movs	r3, #0
 8004746:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004750:	2b00      	cmp	r3, #0
 8004752:	d041      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004758:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800475c:	d02a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800475e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004762:	d824      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004768:	d008      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800476a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476e:	d81e      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004778:	d010      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800477a:	e018      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800477c:	4b86      	ldr	r3, [pc, #536]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a85      	ldr	r2, [pc, #532]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004786:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004788:	e015      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3304      	adds	r3, #4
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fabb 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800479a:	e00c      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3320      	adds	r3, #32
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fba6 	bl	8004ef4 <RCCEx_PLLSAI2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ac:	e003      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	74fb      	strb	r3, [r7, #19]
      break;
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047bc:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ca:	4973      	ldr	r1, [pc, #460]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047d2:	e001      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d041      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047ec:	d02a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80047ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047f2:	d824      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f8:	d008      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047fe:	d81e      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004808:	d010      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800480a:	e018      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800480c:	4b62      	ldr	r3, [pc, #392]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a61      	ldr	r2, [pc, #388]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004816:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004818:	e015      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3304      	adds	r3, #4
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fa73 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800482a:	e00c      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3320      	adds	r3, #32
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fb5e 	bl	8004ef4 <RCCEx_PLLSAI2_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800483c:	e003      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	74fb      	strb	r3, [r7, #19]
      break;
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800484c:	4b52      	ldr	r3, [pc, #328]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800485a:	494f      	ldr	r1, [pc, #316]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004862:	e001      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80a0 	beq.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800487a:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	4a40      	ldr	r2, [pc, #256]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489a:	6593      	str	r3, [r2, #88]	; 0x58
 800489c:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a8:	2301      	movs	r3, #1
 80048aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ac:	4b3b      	ldr	r3, [pc, #236]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a3a      	ldr	r2, [pc, #232]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b8:	f7fd fa6e 	bl	8001d98 <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048be:	e009      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c0:	f7fd fa6a 	bl	8001d98 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d902      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	74fb      	strb	r3, [r7, #19]
        break;
 80048d2:	e005      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ef      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d15c      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048e6:	4b2c      	ldr	r3, [pc, #176]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01f      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	429a      	cmp	r2, r3
 8004902:	d019      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004904:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	4a20      	ldr	r2, [pc, #128]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004930:	4a19      	ldr	r2, [pc, #100]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fd fa29 	bl	8001d98 <HAL_GetTick>
 8004946:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004948:	e00b      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fd fa25 	bl	8001d98 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d902      	bls.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	74fb      	strb	r3, [r7, #19]
            break;
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ec      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004986:	4904      	ldr	r1, [pc, #16]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800498e:	e009      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	74bb      	strb	r3, [r7, #18]
 8004994:	e006      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a4:	7c7b      	ldrb	r3, [r7, #17]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049aa:	4b9e      	ldr	r3, [pc, #632]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	4a9d      	ldr	r2, [pc, #628]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c2:	4b98      	ldr	r3, [pc, #608]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f023 0203 	bic.w	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	4994      	ldr	r1, [pc, #592]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e4:	4b8f      	ldr	r3, [pc, #572]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f023 020c 	bic.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	498c      	ldr	r1, [pc, #560]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a06:	4b87      	ldr	r3, [pc, #540]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	4983      	ldr	r1, [pc, #524]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a28:	4b7e      	ldr	r3, [pc, #504]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	497b      	ldr	r1, [pc, #492]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a4a:	4b76      	ldr	r3, [pc, #472]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a58:	4972      	ldr	r1, [pc, #456]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a6c:	4b6d      	ldr	r3, [pc, #436]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	496a      	ldr	r1, [pc, #424]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a8e:	4b65      	ldr	r3, [pc, #404]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	4961      	ldr	r1, [pc, #388]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ab0:	4b5c      	ldr	r3, [pc, #368]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abe:	4959      	ldr	r1, [pc, #356]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ad2:	4b54      	ldr	r3, [pc, #336]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae0:	4950      	ldr	r1, [pc, #320]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af4:	4b4b      	ldr	r3, [pc, #300]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	4948      	ldr	r1, [pc, #288]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b16:	4b43      	ldr	r3, [pc, #268]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	493f      	ldr	r1, [pc, #252]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d028      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b38:	4b3a      	ldr	r3, [pc, #232]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b46:	4937      	ldr	r1, [pc, #220]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b56:	d106      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a31      	ldr	r2, [pc, #196]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
 8004b64:	e011      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b6e:	d10c      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	2101      	movs	r1, #1
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f8c8 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d028      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b96:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	491f      	ldr	r1, [pc, #124]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc0:	60d3      	str	r3, [r2, #12]
 8004bc2:	e011      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 f899 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02b      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	4908      	ldr	r1, [pc, #32]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c12:	d109      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4a02      	ldr	r2, [pc, #8]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1e:	60d3      	str	r3, [r2, #12]
 8004c20:	e014      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	2101      	movs	r1, #1
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f867 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02f      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c58:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c66:	4928      	ldr	r1, [pc, #160]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c76:	d10d      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f844 	bl	8004d0c <RCCEx_PLLSAI1_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d014      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c8e:	7cfb      	ldrb	r3, [r7, #19]
 8004c90:	74bb      	strb	r3, [r7, #18]
 8004c92:	e011      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3320      	adds	r3, #32
 8004ca2:	2102      	movs	r1, #2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f925 	bl	8004ef4 <RCCEx_PLLSAI2_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cc4:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd2:	490d      	ldr	r1, [pc, #52]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf6:	4904      	ldr	r1, [pc, #16]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000

08004d0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d1a:	4b75      	ldr	r3, [pc, #468]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d26:	4b72      	ldr	r3, [pc, #456]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0203 	and.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d10d      	bne.n	8004d52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
       ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d3e:	4b6c      	ldr	r3, [pc, #432]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d047      	beq.n	8004de2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e044      	b.n	8004de2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d018      	beq.n	8004d92 <RCCEx_PLLSAI1_Config+0x86>
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d825      	bhi.n	8004db0 <RCCEx_PLLSAI1_Config+0xa4>
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d002      	beq.n	8004d6e <RCCEx_PLLSAI1_Config+0x62>
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d009      	beq.n	8004d80 <RCCEx_PLLSAI1_Config+0x74>
 8004d6c:	e020      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d6e:	4b60      	ldr	r3, [pc, #384]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d11d      	bne.n	8004db6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7e:	e01a      	b.n	8004db6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d80:	4b5b      	ldr	r3, [pc, #364]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d116      	bne.n	8004dba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d90:	e013      	b.n	8004dba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d92:	4b57      	ldr	r3, [pc, #348]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d9e:	4b54      	ldr	r3, [pc, #336]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dae:	e006      	b.n	8004dbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	e004      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10d      	bne.n	8004de2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dc6:	4b4a      	ldr	r3, [pc, #296]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	4944      	ldr	r1, [pc, #272]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d17d      	bne.n	8004ee4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004de8:	4b41      	ldr	r3, [pc, #260]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a40      	ldr	r2, [pc, #256]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df4:	f7fc ffd0 	bl	8001d98 <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dfa:	e009      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dfc:	f7fc ffcc 	bl	8001d98 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0e:	e005      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e10:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ef      	bne.n	8004dfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d160      	bne.n	8004ee4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d111      	bne.n	8004e4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e28:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6892      	ldr	r2, [r2, #8]
 8004e38:	0211      	lsls	r1, r2, #8
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68d2      	ldr	r2, [r2, #12]
 8004e3e:	0912      	lsrs	r2, r2, #4
 8004e40:	0452      	lsls	r2, r2, #17
 8004e42:	430a      	orrs	r2, r1
 8004e44:	492a      	ldr	r1, [pc, #168]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	610b      	str	r3, [r1, #16]
 8004e4a:	e027      	b.n	8004e9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d112      	bne.n	8004e78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e52:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	0211      	lsls	r1, r2, #8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6912      	ldr	r2, [r2, #16]
 8004e68:	0852      	lsrs	r2, r2, #1
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	0552      	lsls	r2, r2, #21
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	491f      	ldr	r1, [pc, #124]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	610b      	str	r3, [r1, #16]
 8004e76:	e011      	b.n	8004e9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e78:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6892      	ldr	r2, [r2, #8]
 8004e88:	0211      	lsls	r1, r2, #8
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6952      	ldr	r2, [r2, #20]
 8004e8e:	0852      	lsrs	r2, r2, #1
 8004e90:	3a01      	subs	r2, #1
 8004e92:	0652      	lsls	r2, r2, #25
 8004e94:	430a      	orrs	r2, r1
 8004e96:	4916      	ldr	r1, [pc, #88]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e9c:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea8:	f7fc ff76 	bl	8001d98 <HAL_GetTick>
 8004eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eae:	e009      	b.n	8004ec4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eb0:	f7fc ff72 	bl	8001d98 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ec2:	e005      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0ef      	beq.n	8004eb0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	4904      	ldr	r1, [pc, #16]	; (8004ef0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000

08004ef4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f02:	4b6a      	ldr	r3, [pc, #424]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d018      	beq.n	8004f40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f0e:	4b67      	ldr	r3, [pc, #412]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0203 	and.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d10d      	bne.n	8004f3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
       ||
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f26:	4b61      	ldr	r3, [pc, #388]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
       ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d047      	beq.n	8004fca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
 8004f3e:	e044      	b.n	8004fca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d018      	beq.n	8004f7a <RCCEx_PLLSAI2_Config+0x86>
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d825      	bhi.n	8004f98 <RCCEx_PLLSAI2_Config+0xa4>
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d002      	beq.n	8004f56 <RCCEx_PLLSAI2_Config+0x62>
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d009      	beq.n	8004f68 <RCCEx_PLLSAI2_Config+0x74>
 8004f54:	e020      	b.n	8004f98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f56:	4b55      	ldr	r3, [pc, #340]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d11d      	bne.n	8004f9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f66:	e01a      	b.n	8004f9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f68:	4b50      	ldr	r3, [pc, #320]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d116      	bne.n	8004fa2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f78:	e013      	b.n	8004fa2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f7a:	4b4c      	ldr	r3, [pc, #304]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10f      	bne.n	8004fa6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f86:	4b49      	ldr	r3, [pc, #292]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f96:	e006      	b.n	8004fa6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9c:	e004      	b.n	8004fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e002      	b.n	8004fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fae:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	4939      	ldr	r1, [pc, #228]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d167      	bne.n	80050a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fd0:	4b36      	ldr	r3, [pc, #216]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a35      	ldr	r2, [pc, #212]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fdc:	f7fc fedc 	bl	8001d98 <HAL_GetTick>
 8004fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fe2:	e009      	b.n	8004ff8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fe4:	f7fc fed8 	bl	8001d98 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d902      	bls.n	8004ff8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ff6:	e005      	b.n	8005004 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ff8:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ef      	bne.n	8004fe4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d14a      	bne.n	80050a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d111      	bne.n	8005034 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005010:	4b26      	ldr	r3, [pc, #152]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6892      	ldr	r2, [r2, #8]
 8005020:	0211      	lsls	r1, r2, #8
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68d2      	ldr	r2, [r2, #12]
 8005026:	0912      	lsrs	r2, r2, #4
 8005028:	0452      	lsls	r2, r2, #17
 800502a:	430a      	orrs	r2, r1
 800502c:	491f      	ldr	r1, [pc, #124]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800502e:	4313      	orrs	r3, r2
 8005030:	614b      	str	r3, [r1, #20]
 8005032:	e011      	b.n	8005058 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005034:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800503c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6892      	ldr	r2, [r2, #8]
 8005044:	0211      	lsls	r1, r2, #8
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6912      	ldr	r2, [r2, #16]
 800504a:	0852      	lsrs	r2, r2, #1
 800504c:	3a01      	subs	r2, #1
 800504e:	0652      	lsls	r2, r2, #25
 8005050:	430a      	orrs	r2, r1
 8005052:	4916      	ldr	r1, [pc, #88]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005054:	4313      	orrs	r3, r2
 8005056:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a13      	ldr	r2, [pc, #76]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800505e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005062:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7fc fe98 	bl	8001d98 <HAL_GetTick>
 8005068:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800506a:	e009      	b.n	8005080 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800506c:	f7fc fe94 	bl	8001d98 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d902      	bls.n	8005080 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	73fb      	strb	r3, [r7, #15]
          break;
 800507e:	e005      	b.n	800508c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ef      	beq.n	800506c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	4904      	ldr	r1, [pc, #16]	; (80050ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800509c:	4313      	orrs	r3, r2
 800509e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000

080050b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e095      	b.n	80051ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d108      	bne.n	80050dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d2:	d009      	beq.n	80050e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	61da      	str	r2, [r3, #28]
 80050da:	e005      	b.n	80050e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fc fb06 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005128:	d902      	bls.n	8005130 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e002      	b.n	8005136 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005134:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800513e:	d007      	beq.n	8005150 <HAL_SPI_Init+0xa0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005148:	d002      	beq.n	8005150 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	ea42 0103 	orr.w	r1, r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	f003 0204 	and.w	r2, r3, #4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051cc:	ea42 0103 	orr.w	r1, r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e049      	b.n	800529c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fc fadb 	bl	80017d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f000 fb25 	bl	8005884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d001      	beq.n	80052bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e047      	b.n	800534c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a23      	ldr	r2, [pc, #140]	; (8005358 <HAL_TIM_Base_Start+0xb4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_TIM_Base_Start+0x66>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d6:	d018      	beq.n	800530a <HAL_TIM_Base_Start+0x66>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	; (800535c <HAL_TIM_Base_Start+0xb8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIM_Base_Start+0x66>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_TIM_Base_Start+0xbc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIM_Base_Start+0x66>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_TIM_Base_Start+0xc0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIM_Base_Start+0x66>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <HAL_TIM_Base_Start+0xc4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIM_Base_Start+0x66>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_TIM_Base_Start+0xc8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d115      	bne.n	8005336 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <HAL_TIM_Base_Start+0xcc>)
 8005312:	4013      	ands	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b06      	cmp	r3, #6
 800531a:	d015      	beq.n	8005348 <HAL_TIM_Base_Start+0xa4>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d011      	beq.n	8005348 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	e008      	b.n	8005348 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e000      	b.n	800534a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40014000 	.word	0x40014000
 8005370:	00010007 	.word	0x00010007

08005374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d001      	beq.n	800538c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e04f      	b.n	800542c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a23      	ldr	r2, [pc, #140]	; (8005438 <HAL_TIM_Base_Start_IT+0xc4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01d      	beq.n	80053ea <HAL_TIM_Base_Start_IT+0x76>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b6:	d018      	beq.n	80053ea <HAL_TIM_Base_Start_IT+0x76>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_TIM_Base_Start_IT+0xc8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIM_Base_Start_IT+0x76>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_TIM_Base_Start_IT+0xcc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIM_Base_Start_IT+0x76>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_TIM_Base_Start_IT+0xd0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIM_Base_Start_IT+0x76>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <HAL_TIM_Base_Start_IT+0xd4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIM_Base_Start_IT+0x76>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a19      	ldr	r2, [pc, #100]	; (800544c <HAL_TIM_Base_Start_IT+0xd8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d115      	bne.n	8005416 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	4b17      	ldr	r3, [pc, #92]	; (8005450 <HAL_TIM_Base_Start_IT+0xdc>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d015      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0xb4>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005402:	d011      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	e008      	b.n	8005428 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e000      	b.n	800542a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	00010007 	.word	0x00010007

08005454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b02      	cmp	r3, #2
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0202 	mvn.w	r2, #2
 8005480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9d5 	bl	8005846 <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f9c7 	bl	8005832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f9d8 	bl	800585a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0204 	mvn.w	r2, #4
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f9ab 	bl	8005846 <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f99d 	bl	8005832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f9ae 	bl	800585a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b08      	cmp	r3, #8
 8005510:	d122      	bne.n	8005558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d11b      	bne.n	8005558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0208 	mvn.w	r2, #8
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2204      	movs	r2, #4
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f981 	bl	8005846 <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f973 	bl	8005832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f984 	bl	800585a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b10      	cmp	r3, #16
 8005564:	d122      	bne.n	80055ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b10      	cmp	r3, #16
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0210 	mvn.w	r2, #16
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2208      	movs	r2, #8
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f957 	bl	8005846 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f949 	bl	8005832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f95a 	bl	800585a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d10e      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d107      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0201 	mvn.w	r2, #1
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f923 	bl	800581e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	d10e      	bne.n	8005604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d107      	bne.n	8005604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb06 	bl	8005c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005612:	d10e      	bne.n	8005632 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d107      	bne.n	8005632 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800562a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 faf9 	bl	8005c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d10e      	bne.n	800565e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b40      	cmp	r3, #64	; 0x40
 800564c:	d107      	bne.n	800565e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f908 	bl	800586e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b20      	cmp	r3, #32
 800566a:	d10e      	bne.n	800568a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b20      	cmp	r3, #32
 8005678:	d107      	bne.n	800568a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f06f 0220 	mvn.w	r2, #32
 8005682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fab9 	bl	8005bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_TIM_ConfigClockSource+0x18>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e0b5      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x184>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e6:	d03e      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0xd4>
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ec:	f200 8087 	bhi.w	80057fe <HAL_TIM_ConfigClockSource+0x16c>
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f4:	f000 8085 	beq.w	8005802 <HAL_TIM_ConfigClockSource+0x170>
 80056f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fc:	d87f      	bhi.n	80057fe <HAL_TIM_ConfigClockSource+0x16c>
 80056fe:	2b70      	cmp	r3, #112	; 0x70
 8005700:	d01a      	beq.n	8005738 <HAL_TIM_ConfigClockSource+0xa6>
 8005702:	2b70      	cmp	r3, #112	; 0x70
 8005704:	d87b      	bhi.n	80057fe <HAL_TIM_ConfigClockSource+0x16c>
 8005706:	2b60      	cmp	r3, #96	; 0x60
 8005708:	d050      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x11a>
 800570a:	2b60      	cmp	r3, #96	; 0x60
 800570c:	d877      	bhi.n	80057fe <HAL_TIM_ConfigClockSource+0x16c>
 800570e:	2b50      	cmp	r3, #80	; 0x50
 8005710:	d03c      	beq.n	800578c <HAL_TIM_ConfigClockSource+0xfa>
 8005712:	2b50      	cmp	r3, #80	; 0x50
 8005714:	d873      	bhi.n	80057fe <HAL_TIM_ConfigClockSource+0x16c>
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d058      	beq.n	80057cc <HAL_TIM_ConfigClockSource+0x13a>
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d86f      	bhi.n	80057fe <HAL_TIM_ConfigClockSource+0x16c>
 800571e:	2b30      	cmp	r3, #48	; 0x30
 8005720:	d064      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x15a>
 8005722:	2b30      	cmp	r3, #48	; 0x30
 8005724:	d86b      	bhi.n	80057fe <HAL_TIM_ConfigClockSource+0x16c>
 8005726:	2b20      	cmp	r3, #32
 8005728:	d060      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x15a>
 800572a:	2b20      	cmp	r3, #32
 800572c:	d867      	bhi.n	80057fe <HAL_TIM_ConfigClockSource+0x16c>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d05c      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x15a>
 8005732:	2b10      	cmp	r3, #16
 8005734:	d05a      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005736:	e062      	b.n	80057fe <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6899      	ldr	r1, [r3, #8]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f000 f9b0 	bl	8005aac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800575a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	609a      	str	r2, [r3, #8]
      break;
 8005764:	e04e      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f000 f999 	bl	8005aac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005788:	609a      	str	r2, [r3, #8]
      break;
 800578a:	e03b      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6859      	ldr	r1, [r3, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	461a      	mov	r2, r3
 800579a:	f000 f90d 	bl	80059b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2150      	movs	r1, #80	; 0x50
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 f966 	bl	8005a76 <TIM_ITRx_SetConfig>
      break;
 80057aa:	e02b      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	461a      	mov	r2, r3
 80057ba:	f000 f92c 	bl	8005a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2160      	movs	r1, #96	; 0x60
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 f956 	bl	8005a76 <TIM_ITRx_SetConfig>
      break;
 80057ca:	e01b      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	461a      	mov	r2, r3
 80057da:	f000 f8ed 	bl	80059b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2140      	movs	r1, #64	; 0x40
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f946 	bl	8005a76 <TIM_ITRx_SetConfig>
      break;
 80057ea:	e00b      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 f93d 	bl	8005a76 <TIM_ITRx_SetConfig>
        break;
 80057fc:	e002      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a40      	ldr	r2, [pc, #256]	; (8005998 <TIM_Base_SetConfig+0x114>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d013      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a2:	d00f      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a3d      	ldr	r2, [pc, #244]	; (800599c <TIM_Base_SetConfig+0x118>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00b      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3c      	ldr	r2, [pc, #240]	; (80059a0 <TIM_Base_SetConfig+0x11c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d007      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3b      	ldr	r2, [pc, #236]	; (80059a4 <TIM_Base_SetConfig+0x120>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3a      	ldr	r2, [pc, #232]	; (80059a8 <TIM_Base_SetConfig+0x124>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d108      	bne.n	80058d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2f      	ldr	r2, [pc, #188]	; (8005998 <TIM_Base_SetConfig+0x114>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <TIM_Base_SetConfig+0x9a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e4:	d01b      	beq.n	800591e <TIM_Base_SetConfig+0x9a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2c      	ldr	r2, [pc, #176]	; (800599c <TIM_Base_SetConfig+0x118>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d017      	beq.n	800591e <TIM_Base_SetConfig+0x9a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <TIM_Base_SetConfig+0x11c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <TIM_Base_SetConfig+0x9a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <TIM_Base_SetConfig+0x120>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_Base_SetConfig+0x9a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a29      	ldr	r2, [pc, #164]	; (80059a8 <TIM_Base_SetConfig+0x124>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0x9a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a28      	ldr	r2, [pc, #160]	; (80059ac <TIM_Base_SetConfig+0x128>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0x9a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <TIM_Base_SetConfig+0x12c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0x9a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <TIM_Base_SetConfig+0x130>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a10      	ldr	r2, [pc, #64]	; (8005998 <TIM_Base_SetConfig+0x114>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00f      	beq.n	800597c <TIM_Base_SetConfig+0xf8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <TIM_Base_SetConfig+0x124>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00b      	beq.n	800597c <TIM_Base_SetConfig+0xf8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a11      	ldr	r2, [pc, #68]	; (80059ac <TIM_Base_SetConfig+0x128>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0xf8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a10      	ldr	r2, [pc, #64]	; (80059b0 <TIM_Base_SetConfig+0x12c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0xf8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a0f      	ldr	r2, [pc, #60]	; (80059b4 <TIM_Base_SetConfig+0x130>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800

080059b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f023 030a 	bic.w	r3, r3, #10
 80059f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0210 	bic.w	r2, r3, #16
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f043 0307 	orr.w	r3, r3, #7
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	609a      	str	r2, [r3, #8]
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	021a      	lsls	r2, r3, #8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	609a      	str	r2, [r3, #8]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e068      	b.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a2e      	ldr	r2, [pc, #184]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2d      	ldr	r2, [pc, #180]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d108      	bne.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b76:	d018      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1a      	ldr	r2, [pc, #104]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40013400 	.word	0x40013400
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40014000 	.word	0x40014000

08005bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e040      	b.n	8005ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fb fdf4 	bl	8001848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2224      	movs	r2, #36	; 0x24
 8005c64:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0201 	bic.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa1a 	bl	80060b0 <UART_SetConfig>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e022      	b.n	8005ccc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fcc8 	bl	8006624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0201 	orr.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fd4f 	bl	8006768 <UART_CheckIdleState>
 8005cca:	4603      	mov	r3, r0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	f040 8081 	bne.w	8005df0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_UART_Transmit+0x26>
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e079      	b.n	8005df2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Transmit+0x38>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e072      	b.n	8005df2 <HAL_UART_Transmit+0x11e>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2221      	movs	r2, #33	; 0x21
 8005d1e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005d20:	f7fc f83a 	bl	8001d98 <HAL_GetTick>
 8005d24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	88fa      	ldrh	r2, [r7, #6]
 8005d2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	88fa      	ldrh	r2, [r7, #6]
 8005d32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d108      	bne.n	8005d52 <HAL_UART_Transmit+0x7e>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	e003      	b.n	8005d5a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005d62:	e02d      	b.n	8005dc0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2180      	movs	r1, #128	; 0x80
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fd3f 	bl	80067f2 <UART_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e039      	b.n	8005df2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10b      	bne.n	8005d9c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	881a      	ldrh	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d90:	b292      	uxth	r2, r2
 8005d92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	3302      	adds	r3, #2
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	e008      	b.n	8005dae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	b292      	uxth	r2, r2
 8005da6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3301      	adds	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1cb      	bne.n	8005d64 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2140      	movs	r1, #64	; 0x40
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fd0b 	bl	80067f2 <UART_WaitOnFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e005      	b.n	8005df2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e000      	b.n	8005df2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
  }
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e22:	4013      	ands	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d113      	bne.n	8005e54 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00e      	beq.n	8005e54 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8113 	beq.w	8006070 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
      }
      return;
 8005e52:	e10d      	b.n	8006070 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 80d6 	beq.w	8006008 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d105      	bne.n	8005e72 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4b85      	ldr	r3, [pc, #532]	; (8006080 <HAL_UART_IRQHandler+0x284>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80cb 	beq.w	8006008 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00e      	beq.n	8005e9a <HAL_UART_IRQHandler+0x9e>
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xc6>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eba:	f043 0204 	orr.w	r2, r3, #4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00e      	beq.n	8005eea <HAL_UART_IRQHandler+0xee>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2204      	movs	r2, #4
 8005edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d013      	beq.n	8005f1c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f14:	f043 0208 	orr.w	r2, r3, #8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00f      	beq.n	8005f46 <HAL_UART_IRQHandler+0x14a>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f3e:	f043 0220 	orr.w	r2, r3, #32
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 8092 	beq.w	8006074 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f78:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d004      	beq.n	8005f92 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d031      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fca8 	bl	80068e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d123      	bne.n	8005fee <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d013      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fc2:	4a30      	ldr	r2, [pc, #192]	; (8006084 <HAL_UART_IRQHandler+0x288>)
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd fab0 	bl	8003530 <HAL_DMA_Abort_IT>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d016      	beq.n	8006004 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e00e      	b.n	8006004 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f858 	bl	800609c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	e00a      	b.n	8006004 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f854 	bl	800609c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	e006      	b.n	8006004 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f850 	bl	800609c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006002:	e037      	b.n	8006074 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006004:	bf00      	nop
    return;
 8006006:	e035      	b.n	8006074 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00d      	beq.n	800602e <HAL_UART_IRQHandler+0x232>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fcad 	bl	8006986 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800602c:	e025      	b.n	800607a <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006046:	2b00      	cmp	r3, #0
 8006048:	d016      	beq.n	8006078 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
    }
    return;
 8006052:	e011      	b.n	8006078 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <HAL_UART_IRQHandler+0x27e>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fc73 	bl	8006954 <UART_EndTransmit_IT>
    return;
 800606e:	e004      	b.n	800607a <HAL_UART_IRQHandler+0x27e>
      return;
 8006070:	bf00      	nop
 8006072:	e002      	b.n	800607a <HAL_UART_IRQHandler+0x27e>
    return;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <HAL_UART_IRQHandler+0x27e>
    return;
 8006078:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	04000120 	.word	0x04000120
 8006084:	08006929 	.word	0x08006929

08006088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b4:	b08a      	sub	sp, #40	; 0x28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4ba4      	ldr	r3, [pc, #656]	; (8006370 <UART_SetConfig+0x2c0>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a99      	ldr	r2, [pc, #612]	; (8006374 <UART_SetConfig+0x2c4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006118:	4313      	orrs	r3, r2
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a90      	ldr	r2, [pc, #576]	; (8006378 <UART_SetConfig+0x2c8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d126      	bne.n	8006188 <UART_SetConfig+0xd8>
 800613a:	4b90      	ldr	r3, [pc, #576]	; (800637c <UART_SetConfig+0x2cc>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	2b03      	cmp	r3, #3
 8006146:	d81b      	bhi.n	8006180 <UART_SetConfig+0xd0>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0xa0>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006161 	.word	0x08006161
 8006154:	08006171 	.word	0x08006171
 8006158:	08006169 	.word	0x08006169
 800615c:	08006179 	.word	0x08006179
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006166:	e116      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006168:	2302      	movs	r3, #2
 800616a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616e:	e112      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006176:	e10e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617e:	e10a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006186:	e106      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a7c      	ldr	r2, [pc, #496]	; (8006380 <UART_SetConfig+0x2d0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d138      	bne.n	8006204 <UART_SetConfig+0x154>
 8006192:	4b7a      	ldr	r3, [pc, #488]	; (800637c <UART_SetConfig+0x2cc>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d82d      	bhi.n	80061fc <UART_SetConfig+0x14c>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <UART_SetConfig+0xf8>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061dd 	.word	0x080061dd
 80061ac:	080061fd 	.word	0x080061fd
 80061b0:	080061fd 	.word	0x080061fd
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	080061ed 	.word	0x080061ed
 80061bc:	080061fd 	.word	0x080061fd
 80061c0:	080061fd 	.word	0x080061fd
 80061c4:	080061fd 	.word	0x080061fd
 80061c8:	080061e5 	.word	0x080061e5
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e2:	e0d8      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e0d4      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e0d0      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e0cc      	b.n	8006396 <UART_SetConfig+0x2e6>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006202:	e0c8      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5e      	ldr	r2, [pc, #376]	; (8006384 <UART_SetConfig+0x2d4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d125      	bne.n	800625a <UART_SetConfig+0x1aa>
 800620e:	4b5b      	ldr	r3, [pc, #364]	; (800637c <UART_SetConfig+0x2cc>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006218:	2b30      	cmp	r3, #48	; 0x30
 800621a:	d016      	beq.n	800624a <UART_SetConfig+0x19a>
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d818      	bhi.n	8006252 <UART_SetConfig+0x1a2>
 8006220:	2b20      	cmp	r3, #32
 8006222:	d00a      	beq.n	800623a <UART_SetConfig+0x18a>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d814      	bhi.n	8006252 <UART_SetConfig+0x1a2>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <UART_SetConfig+0x182>
 800622c:	2b10      	cmp	r3, #16
 800622e:	d008      	beq.n	8006242 <UART_SetConfig+0x192>
 8006230:	e00f      	b.n	8006252 <UART_SetConfig+0x1a2>
 8006232:	2300      	movs	r3, #0
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006238:	e0ad      	b.n	8006396 <UART_SetConfig+0x2e6>
 800623a:	2302      	movs	r3, #2
 800623c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006240:	e0a9      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006242:	2304      	movs	r3, #4
 8006244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006248:	e0a5      	b.n	8006396 <UART_SetConfig+0x2e6>
 800624a:	2308      	movs	r3, #8
 800624c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006250:	e0a1      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006252:	2310      	movs	r3, #16
 8006254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006258:	e09d      	b.n	8006396 <UART_SetConfig+0x2e6>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a4a      	ldr	r2, [pc, #296]	; (8006388 <UART_SetConfig+0x2d8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d125      	bne.n	80062b0 <UART_SetConfig+0x200>
 8006264:	4b45      	ldr	r3, [pc, #276]	; (800637c <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800626e:	2bc0      	cmp	r3, #192	; 0xc0
 8006270:	d016      	beq.n	80062a0 <UART_SetConfig+0x1f0>
 8006272:	2bc0      	cmp	r3, #192	; 0xc0
 8006274:	d818      	bhi.n	80062a8 <UART_SetConfig+0x1f8>
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d00a      	beq.n	8006290 <UART_SetConfig+0x1e0>
 800627a:	2b80      	cmp	r3, #128	; 0x80
 800627c:	d814      	bhi.n	80062a8 <UART_SetConfig+0x1f8>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <UART_SetConfig+0x1d8>
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d008      	beq.n	8006298 <UART_SetConfig+0x1e8>
 8006286:	e00f      	b.n	80062a8 <UART_SetConfig+0x1f8>
 8006288:	2300      	movs	r3, #0
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628e:	e082      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006290:	2302      	movs	r3, #2
 8006292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006296:	e07e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006298:	2304      	movs	r3, #4
 800629a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629e:	e07a      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062a0:	2308      	movs	r3, #8
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a6:	e076      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ae:	e072      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a35      	ldr	r2, [pc, #212]	; (800638c <UART_SetConfig+0x2dc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d12a      	bne.n	8006310 <UART_SetConfig+0x260>
 80062ba:	4b30      	ldr	r3, [pc, #192]	; (800637c <UART_SetConfig+0x2cc>)
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c8:	d01a      	beq.n	8006300 <UART_SetConfig+0x250>
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ce:	d81b      	bhi.n	8006308 <UART_SetConfig+0x258>
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d4:	d00c      	beq.n	80062f0 <UART_SetConfig+0x240>
 80062d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062da:	d815      	bhi.n	8006308 <UART_SetConfig+0x258>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <UART_SetConfig+0x238>
 80062e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e4:	d008      	beq.n	80062f8 <UART_SetConfig+0x248>
 80062e6:	e00f      	b.n	8006308 <UART_SetConfig+0x258>
 80062e8:	2300      	movs	r3, #0
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ee:	e052      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062f0:	2302      	movs	r3, #2
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f6:	e04e      	b.n	8006396 <UART_SetConfig+0x2e6>
 80062f8:	2304      	movs	r3, #4
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fe:	e04a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006300:	2308      	movs	r3, #8
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006306:	e046      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006308:	2310      	movs	r3, #16
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800630e:	e042      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a17      	ldr	r2, [pc, #92]	; (8006374 <UART_SetConfig+0x2c4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d13a      	bne.n	8006390 <UART_SetConfig+0x2e0>
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <UART_SetConfig+0x2cc>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006328:	d01a      	beq.n	8006360 <UART_SetConfig+0x2b0>
 800632a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800632e:	d81b      	bhi.n	8006368 <UART_SetConfig+0x2b8>
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006334:	d00c      	beq.n	8006350 <UART_SetConfig+0x2a0>
 8006336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800633a:	d815      	bhi.n	8006368 <UART_SetConfig+0x2b8>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <UART_SetConfig+0x298>
 8006340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006344:	d008      	beq.n	8006358 <UART_SetConfig+0x2a8>
 8006346:	e00f      	b.n	8006368 <UART_SetConfig+0x2b8>
 8006348:	2300      	movs	r3, #0
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800634e:	e022      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006350:	2302      	movs	r3, #2
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006356:	e01e      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006358:	2304      	movs	r3, #4
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800635e:	e01a      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006360:	2308      	movs	r3, #8
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006366:	e016      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006368:	2310      	movs	r3, #16
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636e:	e012      	b.n	8006396 <UART_SetConfig+0x2e6>
 8006370:	efff69f3 	.word	0xefff69f3
 8006374:	40008000 	.word	0x40008000
 8006378:	40013800 	.word	0x40013800
 800637c:	40021000 	.word	0x40021000
 8006380:	40004400 	.word	0x40004400
 8006384:	40004800 	.word	0x40004800
 8006388:	40004c00 	.word	0x40004c00
 800638c:	40005000 	.word	0x40005000
 8006390:	2310      	movs	r3, #16
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4aa0      	ldr	r2, [pc, #640]	; (800661c <UART_SetConfig+0x56c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d17a      	bne.n	8006496 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d824      	bhi.n	80063f2 <UART_SetConfig+0x342>
 80063a8:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x300>)
 80063aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ae:	bf00      	nop
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063f3 	.word	0x080063f3
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063f3 	.word	0x080063f3
 80063c0:	080063e3 	.word	0x080063e3
 80063c4:	080063f3 	.word	0x080063f3
 80063c8:	080063f3 	.word	0x080063f3
 80063cc:	080063f3 	.word	0x080063f3
 80063d0:	080063eb 	.word	0x080063eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d4:	f7fe f924 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 80063d8:	61f8      	str	r0, [r7, #28]
        break;
 80063da:	e010      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063dc:	4b90      	ldr	r3, [pc, #576]	; (8006620 <UART_SetConfig+0x570>)
 80063de:	61fb      	str	r3, [r7, #28]
        break;
 80063e0:	e00d      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e2:	f7fe f885 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 80063e6:	61f8      	str	r0, [r7, #28]
        break;
 80063e8:	e009      	b.n	80063fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ee:	61fb      	str	r3, [r7, #28]
        break;
 80063f0:	e005      	b.n	80063fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80fd 	beq.w	8006600 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	429a      	cmp	r2, r3
 8006414:	d305      	bcc.n	8006422 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	429a      	cmp	r2, r3
 8006420:	d903      	bls.n	800642a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006428:	e0ea      	b.n	8006600 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2200      	movs	r2, #0
 800642e:	461c      	mov	r4, r3
 8006430:	4615      	mov	r5, r2
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	022b      	lsls	r3, r5, #8
 800643c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006440:	0222      	lsls	r2, r4, #8
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	6849      	ldr	r1, [r1, #4]
 8006446:	0849      	lsrs	r1, r1, #1
 8006448:	2000      	movs	r0, #0
 800644a:	4688      	mov	r8, r1
 800644c:	4681      	mov	r9, r0
 800644e:	eb12 0a08 	adds.w	sl, r2, r8
 8006452:	eb43 0b09 	adc.w	fp, r3, r9
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006464:	4650      	mov	r0, sl
 8006466:	4659      	mov	r1, fp
 8006468:	f7fa fc0e 	bl	8000c88 <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4613      	mov	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647a:	d308      	bcc.n	800648e <UART_SetConfig+0x3de>
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006482:	d204      	bcs.n	800648e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	e0b8      	b.n	8006600 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006494:	e0b4      	b.n	8006600 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800649e:	d15f      	bne.n	8006560 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80064a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d828      	bhi.n	80064fa <UART_SetConfig+0x44a>
 80064a8:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x400>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fe f8a4 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 80064d8:	61f8      	str	r0, [r7, #28]
        break;
 80064da:	e014      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fe f8b6 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 80064e0:	61f8      	str	r0, [r7, #28]
        break;
 80064e2:	e010      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b4e      	ldr	r3, [pc, #312]	; (8006620 <UART_SetConfig+0x570>)
 80064e6:	61fb      	str	r3, [r7, #28]
        break;
 80064e8:	e00d      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fe f801 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 80064ee:	61f8      	str	r0, [r7, #28]
        break;
 80064f0:	e009      	b.n	8006506 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f6:	61fb      	str	r3, [r7, #28]
        break;
 80064f8:	e005      	b.n	8006506 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d079      	beq.n	8006600 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	005a      	lsls	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	441a      	add	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	b29b      	uxth	r3, r3
 8006522:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	d916      	bls.n	8006558 <UART_SetConfig+0x4a8>
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006530:	d212      	bcs.n	8006558 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	b29b      	uxth	r3, r3
 8006536:	f023 030f 	bic.w	r3, r3, #15
 800653a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	b29b      	uxth	r3, r3
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	b29a      	uxth	r2, r3
 8006548:	8afb      	ldrh	r3, [r7, #22]
 800654a:	4313      	orrs	r3, r2
 800654c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	8afa      	ldrh	r2, [r7, #22]
 8006554:	60da      	str	r2, [r3, #12]
 8006556:	e053      	b.n	8006600 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800655e:	e04f      	b.n	8006600 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006564:	2b08      	cmp	r3, #8
 8006566:	d828      	bhi.n	80065ba <UART_SetConfig+0x50a>
 8006568:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <UART_SetConfig+0x4c0>)
 800656a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656e:	bf00      	nop
 8006570:	08006595 	.word	0x08006595
 8006574:	0800659d 	.word	0x0800659d
 8006578:	080065a5 	.word	0x080065a5
 800657c:	080065bb 	.word	0x080065bb
 8006580:	080065ab 	.word	0x080065ab
 8006584:	080065bb 	.word	0x080065bb
 8006588:	080065bb 	.word	0x080065bb
 800658c:	080065bb 	.word	0x080065bb
 8006590:	080065b3 	.word	0x080065b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006594:	f7fe f844 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 8006598:	61f8      	str	r0, [r7, #28]
        break;
 800659a:	e014      	b.n	80065c6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800659c:	f7fe f856 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 80065a0:	61f8      	str	r0, [r7, #28]
        break;
 80065a2:	e010      	b.n	80065c6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a4:	4b1e      	ldr	r3, [pc, #120]	; (8006620 <UART_SetConfig+0x570>)
 80065a6:	61fb      	str	r3, [r7, #28]
        break;
 80065a8:	e00d      	b.n	80065c6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065aa:	f7fd ffa1 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 80065ae:	61f8      	str	r0, [r7, #28]
        break;
 80065b0:	e009      	b.n	80065c6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b6:	61fb      	str	r3, [r7, #28]
        break;
 80065b8:	e005      	b.n	80065c6 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065c4:	bf00      	nop
    }

    if (pclk != 0U)
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d019      	beq.n	8006600 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	085a      	lsrs	r2, r3, #1
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	441a      	add	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	fbb2 f3f3 	udiv	r3, r2, r3
 80065de:	b29b      	uxth	r3, r3
 80065e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b0f      	cmp	r3, #15
 80065e6:	d908      	bls.n	80065fa <UART_SetConfig+0x54a>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ee:	d204      	bcs.n	80065fa <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	60da      	str	r2, [r3, #12]
 80065f8:	e002      	b.n	8006600 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800660c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006610:	4618      	mov	r0, r3
 8006612:	3728      	adds	r7, #40	; 0x28
 8006614:	46bd      	mov	sp, r7
 8006616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661a:	bf00      	nop
 800661c:	40008000 	.word	0x40008000
 8006620:	00f42400 	.word	0x00f42400

08006624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00a      	beq.n	800664e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01a      	beq.n	800673a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006722:	d10a      	bne.n	800673a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af02      	add	r7, sp, #8
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006776:	f7fb fb0f 	bl	8001d98 <HAL_GetTick>
 800677a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b08      	cmp	r3, #8
 8006788:	d10e      	bne.n	80067a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800678a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f82a 	bl	80067f2 <UART_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e020      	b.n	80067ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d10e      	bne.n	80067d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f814 	bl	80067f2 <UART_WaitOnFlagUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e00a      	b.n	80067ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	603b      	str	r3, [r7, #0]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006802:	e05d      	b.n	80068c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d059      	beq.n	80068c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680c:	f7fb fac4 	bl	8001d98 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	429a      	cmp	r2, r3
 800681a:	d302      	bcc.n	8006822 <UART_WaitOnFlagUntilTimeout+0x30>
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d11b      	bne.n	800685a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006830:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e042      	b.n	80068e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d02b      	beq.n	80068c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006876:	d123      	bne.n	80068c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006880:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006890:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0201 	bic.w	r2, r2, #1
 80068a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e00f      	b.n	80068e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69da      	ldr	r2, [r3, #28]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4013      	ands	r3, r2
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	461a      	mov	r2, r3
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d092      	beq.n	8006804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7ff fba8 	bl	800609c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800696a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fb85 	bl	8006088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <__errno>:
 800699c:	4b01      	ldr	r3, [pc, #4]	; (80069a4 <__errno+0x8>)
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c

080069a8 <__libc_init_array>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	4d0d      	ldr	r5, [pc, #52]	; (80069e0 <__libc_init_array+0x38>)
 80069ac:	4c0d      	ldr	r4, [pc, #52]	; (80069e4 <__libc_init_array+0x3c>)
 80069ae:	1b64      	subs	r4, r4, r5
 80069b0:	10a4      	asrs	r4, r4, #2
 80069b2:	2600      	movs	r6, #0
 80069b4:	42a6      	cmp	r6, r4
 80069b6:	d109      	bne.n	80069cc <__libc_init_array+0x24>
 80069b8:	4d0b      	ldr	r5, [pc, #44]	; (80069e8 <__libc_init_array+0x40>)
 80069ba:	4c0c      	ldr	r4, [pc, #48]	; (80069ec <__libc_init_array+0x44>)
 80069bc:	f004 fc90 	bl	800b2e0 <_init>
 80069c0:	1b64      	subs	r4, r4, r5
 80069c2:	10a4      	asrs	r4, r4, #2
 80069c4:	2600      	movs	r6, #0
 80069c6:	42a6      	cmp	r6, r4
 80069c8:	d105      	bne.n	80069d6 <__libc_init_array+0x2e>
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d0:	4798      	blx	r3
 80069d2:	3601      	adds	r6, #1
 80069d4:	e7ee      	b.n	80069b4 <__libc_init_array+0xc>
 80069d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069da:	4798      	blx	r3
 80069dc:	3601      	adds	r6, #1
 80069de:	e7f2      	b.n	80069c6 <__libc_init_array+0x1e>
 80069e0:	0800b7ec 	.word	0x0800b7ec
 80069e4:	0800b7ec 	.word	0x0800b7ec
 80069e8:	0800b7ec 	.word	0x0800b7ec
 80069ec:	0800b7f0 	.word	0x0800b7f0

080069f0 <memset>:
 80069f0:	4402      	add	r2, r0
 80069f2:	4603      	mov	r3, r0
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d100      	bne.n	80069fa <memset+0xa>
 80069f8:	4770      	bx	lr
 80069fa:	f803 1b01 	strb.w	r1, [r3], #1
 80069fe:	e7f9      	b.n	80069f4 <memset+0x4>

08006a00 <__cvt>:
 8006a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	ec55 4b10 	vmov	r4, r5, d0
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	460e      	mov	r6, r1
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	462b      	mov	r3, r5
 8006a10:	bfbb      	ittet	lt
 8006a12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a16:	461d      	movlt	r5, r3
 8006a18:	2300      	movge	r3, #0
 8006a1a:	232d      	movlt	r3, #45	; 0x2d
 8006a1c:	700b      	strb	r3, [r1, #0]
 8006a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a24:	4691      	mov	r9, r2
 8006a26:	f023 0820 	bic.w	r8, r3, #32
 8006a2a:	bfbc      	itt	lt
 8006a2c:	4622      	movlt	r2, r4
 8006a2e:	4614      	movlt	r4, r2
 8006a30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a34:	d005      	beq.n	8006a42 <__cvt+0x42>
 8006a36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a3a:	d100      	bne.n	8006a3e <__cvt+0x3e>
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	2102      	movs	r1, #2
 8006a40:	e000      	b.n	8006a44 <__cvt+0x44>
 8006a42:	2103      	movs	r1, #3
 8006a44:	ab03      	add	r3, sp, #12
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	ab02      	add	r3, sp, #8
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	ec45 4b10 	vmov	d0, r4, r5
 8006a50:	4653      	mov	r3, sl
 8006a52:	4632      	mov	r2, r6
 8006a54:	f001 fdac 	bl	80085b0 <_dtoa_r>
 8006a58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	d102      	bne.n	8006a66 <__cvt+0x66>
 8006a60:	f019 0f01 	tst.w	r9, #1
 8006a64:	d022      	beq.n	8006aac <__cvt+0xac>
 8006a66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a6a:	eb07 0906 	add.w	r9, r7, r6
 8006a6e:	d110      	bne.n	8006a92 <__cvt+0x92>
 8006a70:	783b      	ldrb	r3, [r7, #0]
 8006a72:	2b30      	cmp	r3, #48	; 0x30
 8006a74:	d10a      	bne.n	8006a8c <__cvt+0x8c>
 8006a76:	2200      	movs	r2, #0
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7fa f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a82:	b918      	cbnz	r0, 8006a8c <__cvt+0x8c>
 8006a84:	f1c6 0601 	rsb	r6, r6, #1
 8006a88:	f8ca 6000 	str.w	r6, [sl]
 8006a8c:	f8da 3000 	ldr.w	r3, [sl]
 8006a90:	4499      	add	r9, r3
 8006a92:	2200      	movs	r2, #0
 8006a94:	2300      	movs	r3, #0
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7fa f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a9e:	b108      	cbz	r0, 8006aa4 <__cvt+0xa4>
 8006aa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006aa4:	2230      	movs	r2, #48	; 0x30
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	454b      	cmp	r3, r9
 8006aaa:	d307      	bcc.n	8006abc <__cvt+0xbc>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ab0:	1bdb      	subs	r3, r3, r7
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	b004      	add	sp, #16
 8006ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abc:	1c59      	adds	r1, r3, #1
 8006abe:	9103      	str	r1, [sp, #12]
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e7f0      	b.n	8006aa6 <__cvt+0xa6>

08006ac4 <__exponent>:
 8006ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	bfb8      	it	lt
 8006acc:	4249      	neglt	r1, r1
 8006ace:	f803 2b02 	strb.w	r2, [r3], #2
 8006ad2:	bfb4      	ite	lt
 8006ad4:	222d      	movlt	r2, #45	; 0x2d
 8006ad6:	222b      	movge	r2, #43	; 0x2b
 8006ad8:	2909      	cmp	r1, #9
 8006ada:	7042      	strb	r2, [r0, #1]
 8006adc:	dd2a      	ble.n	8006b34 <__exponent+0x70>
 8006ade:	f10d 0407 	add.w	r4, sp, #7
 8006ae2:	46a4      	mov	ip, r4
 8006ae4:	270a      	movs	r7, #10
 8006ae6:	46a6      	mov	lr, r4
 8006ae8:	460a      	mov	r2, r1
 8006aea:	fb91 f6f7 	sdiv	r6, r1, r7
 8006aee:	fb07 1516 	mls	r5, r7, r6, r1
 8006af2:	3530      	adds	r5, #48	; 0x30
 8006af4:	2a63      	cmp	r2, #99	; 0x63
 8006af6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006afa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006afe:	4631      	mov	r1, r6
 8006b00:	dcf1      	bgt.n	8006ae6 <__exponent+0x22>
 8006b02:	3130      	adds	r1, #48	; 0x30
 8006b04:	f1ae 0502 	sub.w	r5, lr, #2
 8006b08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b0c:	1c44      	adds	r4, r0, #1
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4561      	cmp	r1, ip
 8006b12:	d30a      	bcc.n	8006b2a <__exponent+0x66>
 8006b14:	f10d 0209 	add.w	r2, sp, #9
 8006b18:	eba2 020e 	sub.w	r2, r2, lr
 8006b1c:	4565      	cmp	r5, ip
 8006b1e:	bf88      	it	hi
 8006b20:	2200      	movhi	r2, #0
 8006b22:	4413      	add	r3, r2
 8006b24:	1a18      	subs	r0, r3, r0
 8006b26:	b003      	add	sp, #12
 8006b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b32:	e7ed      	b.n	8006b10 <__exponent+0x4c>
 8006b34:	2330      	movs	r3, #48	; 0x30
 8006b36:	3130      	adds	r1, #48	; 0x30
 8006b38:	7083      	strb	r3, [r0, #2]
 8006b3a:	70c1      	strb	r1, [r0, #3]
 8006b3c:	1d03      	adds	r3, r0, #4
 8006b3e:	e7f1      	b.n	8006b24 <__exponent+0x60>

08006b40 <_printf_float>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	ed2d 8b02 	vpush	{d8}
 8006b48:	b08d      	sub	sp, #52	; 0x34
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b50:	4616      	mov	r6, r2
 8006b52:	461f      	mov	r7, r3
 8006b54:	4605      	mov	r5, r0
 8006b56:	f002 fe89 	bl	800986c <_localeconv_r>
 8006b5a:	f8d0 a000 	ldr.w	sl, [r0]
 8006b5e:	4650      	mov	r0, sl
 8006b60:	f7f9 fb36 	bl	80001d0 <strlen>
 8006b64:	2300      	movs	r3, #0
 8006b66:	930a      	str	r3, [sp, #40]	; 0x28
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b74:	3307      	adds	r3, #7
 8006b76:	f023 0307 	bic.w	r3, r3, #7
 8006b7a:	f103 0208 	add.w	r2, r3, #8
 8006b7e:	f8c8 2000 	str.w	r2, [r8]
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b92:	9307      	str	r3, [sp, #28]
 8006b94:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b98:	ee08 0a10 	vmov	s16, r0
 8006b9c:	4b9f      	ldr	r3, [pc, #636]	; (8006e1c <_printf_float+0x2dc>)
 8006b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba6:	f7f9 ffc1 	bl	8000b2c <__aeabi_dcmpun>
 8006baa:	bb88      	cbnz	r0, 8006c10 <_printf_float+0xd0>
 8006bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb0:	4b9a      	ldr	r3, [pc, #616]	; (8006e1c <_printf_float+0x2dc>)
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb6:	f7f9 ff9b 	bl	8000af0 <__aeabi_dcmple>
 8006bba:	bb48      	cbnz	r0, 8006c10 <_printf_float+0xd0>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	f7f9 ff8a 	bl	8000adc <__aeabi_dcmplt>
 8006bc8:	b110      	cbz	r0, 8006bd0 <_printf_float+0x90>
 8006bca:	232d      	movs	r3, #45	; 0x2d
 8006bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd0:	4b93      	ldr	r3, [pc, #588]	; (8006e20 <_printf_float+0x2e0>)
 8006bd2:	4894      	ldr	r0, [pc, #592]	; (8006e24 <_printf_float+0x2e4>)
 8006bd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bd8:	bf94      	ite	ls
 8006bda:	4698      	movls	r8, r3
 8006bdc:	4680      	movhi	r8, r0
 8006bde:	2303      	movs	r3, #3
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	f023 0204 	bic.w	r2, r3, #4
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	f04f 0900 	mov.w	r9, #0
 8006bee:	9700      	str	r7, [sp, #0]
 8006bf0:	4633      	mov	r3, r6
 8006bf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f9d8 	bl	8006fac <_printf_common>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f040 8090 	bne.w	8006d22 <_printf_float+0x1e2>
 8006c02:	f04f 30ff 	mov.w	r0, #4294967295
 8006c06:	b00d      	add	sp, #52	; 0x34
 8006c08:	ecbd 8b02 	vpop	{d8}
 8006c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	4640      	mov	r0, r8
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 ff88 	bl	8000b2c <__aeabi_dcmpun>
 8006c1c:	b140      	cbz	r0, 8006c30 <_printf_float+0xf0>
 8006c1e:	464b      	mov	r3, r9
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfbc      	itt	lt
 8006c24:	232d      	movlt	r3, #45	; 0x2d
 8006c26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c2a:	487f      	ldr	r0, [pc, #508]	; (8006e28 <_printf_float+0x2e8>)
 8006c2c:	4b7f      	ldr	r3, [pc, #508]	; (8006e2c <_printf_float+0x2ec>)
 8006c2e:	e7d1      	b.n	8006bd4 <_printf_float+0x94>
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c36:	9206      	str	r2, [sp, #24]
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	d13f      	bne.n	8006cbc <_printf_float+0x17c>
 8006c3c:	2306      	movs	r3, #6
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	9b05      	ldr	r3, [sp, #20]
 8006c42:	6861      	ldr	r1, [r4, #4]
 8006c44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	ab0a      	add	r3, sp, #40	; 0x28
 8006c4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c52:	ab09      	add	r3, sp, #36	; 0x24
 8006c54:	ec49 8b10 	vmov	d0, r8, r9
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	6022      	str	r2, [r4, #0]
 8006c5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7ff fecd 	bl	8006a00 <__cvt>
 8006c66:	9b06      	ldr	r3, [sp, #24]
 8006c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c6a:	2b47      	cmp	r3, #71	; 0x47
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	d108      	bne.n	8006c82 <_printf_float+0x142>
 8006c70:	1cc8      	adds	r0, r1, #3
 8006c72:	db02      	blt.n	8006c7a <_printf_float+0x13a>
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	4299      	cmp	r1, r3
 8006c78:	dd41      	ble.n	8006cfe <_printf_float+0x1be>
 8006c7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c7e:	fa5f fb8b 	uxtb.w	fp, fp
 8006c82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c86:	d820      	bhi.n	8006cca <_printf_float+0x18a>
 8006c88:	3901      	subs	r1, #1
 8006c8a:	465a      	mov	r2, fp
 8006c8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c90:	9109      	str	r1, [sp, #36]	; 0x24
 8006c92:	f7ff ff17 	bl	8006ac4 <__exponent>
 8006c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c98:	1813      	adds	r3, r2, r0
 8006c9a:	2a01      	cmp	r2, #1
 8006c9c:	4681      	mov	r9, r0
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	dc02      	bgt.n	8006ca8 <_printf_float+0x168>
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	07d2      	lsls	r2, r2, #31
 8006ca6:	d501      	bpl.n	8006cac <_printf_float+0x16c>
 8006ca8:	3301      	adds	r3, #1
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d09c      	beq.n	8006bee <_printf_float+0xae>
 8006cb4:	232d      	movs	r3, #45	; 0x2d
 8006cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cba:	e798      	b.n	8006bee <_printf_float+0xae>
 8006cbc:	9a06      	ldr	r2, [sp, #24]
 8006cbe:	2a47      	cmp	r2, #71	; 0x47
 8006cc0:	d1be      	bne.n	8006c40 <_printf_float+0x100>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1bc      	bne.n	8006c40 <_printf_float+0x100>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7b9      	b.n	8006c3e <_printf_float+0xfe>
 8006cca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cce:	d118      	bne.n	8006d02 <_printf_float+0x1c2>
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	6863      	ldr	r3, [r4, #4]
 8006cd4:	dd0b      	ble.n	8006cee <_printf_float+0x1ae>
 8006cd6:	6121      	str	r1, [r4, #16]
 8006cd8:	b913      	cbnz	r3, 8006ce0 <_printf_float+0x1a0>
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	07d0      	lsls	r0, r2, #31
 8006cde:	d502      	bpl.n	8006ce6 <_printf_float+0x1a6>
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	440b      	add	r3, r1
 8006ce4:	6123      	str	r3, [r4, #16]
 8006ce6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ce8:	f04f 0900 	mov.w	r9, #0
 8006cec:	e7de      	b.n	8006cac <_printf_float+0x16c>
 8006cee:	b913      	cbnz	r3, 8006cf6 <_printf_float+0x1b6>
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	07d2      	lsls	r2, r2, #31
 8006cf4:	d501      	bpl.n	8006cfa <_printf_float+0x1ba>
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	e7f4      	b.n	8006ce4 <_printf_float+0x1a4>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e7f2      	b.n	8006ce4 <_printf_float+0x1a4>
 8006cfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d04:	4299      	cmp	r1, r3
 8006d06:	db05      	blt.n	8006d14 <_printf_float+0x1d4>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	6121      	str	r1, [r4, #16]
 8006d0c:	07d8      	lsls	r0, r3, #31
 8006d0e:	d5ea      	bpl.n	8006ce6 <_printf_float+0x1a6>
 8006d10:	1c4b      	adds	r3, r1, #1
 8006d12:	e7e7      	b.n	8006ce4 <_printf_float+0x1a4>
 8006d14:	2900      	cmp	r1, #0
 8006d16:	bfd4      	ite	le
 8006d18:	f1c1 0202 	rsble	r2, r1, #2
 8006d1c:	2201      	movgt	r2, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	e7e0      	b.n	8006ce4 <_printf_float+0x1a4>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	055a      	lsls	r2, r3, #21
 8006d26:	d407      	bmi.n	8006d38 <_printf_float+0x1f8>
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	4642      	mov	r2, r8
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	d12c      	bne.n	8006d90 <_printf_float+0x250>
 8006d36:	e764      	b.n	8006c02 <_printf_float+0xc2>
 8006d38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d3c:	f240 80e0 	bls.w	8006f00 <_printf_float+0x3c0>
 8006d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d44:	2200      	movs	r2, #0
 8006d46:	2300      	movs	r3, #0
 8006d48:	f7f9 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d034      	beq.n	8006dba <_printf_float+0x27a>
 8006d50:	4a37      	ldr	r2, [pc, #220]	; (8006e30 <_printf_float+0x2f0>)
 8006d52:	2301      	movs	r3, #1
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f43f af51 	beq.w	8006c02 <_printf_float+0xc2>
 8006d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d64:	429a      	cmp	r2, r3
 8006d66:	db02      	blt.n	8006d6e <_printf_float+0x22e>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	07d8      	lsls	r0, r3, #31
 8006d6c:	d510      	bpl.n	8006d90 <_printf_float+0x250>
 8006d6e:	ee18 3a10 	vmov	r3, s16
 8006d72:	4652      	mov	r2, sl
 8006d74:	4631      	mov	r1, r6
 8006d76:	4628      	mov	r0, r5
 8006d78:	47b8      	blx	r7
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	f43f af41 	beq.w	8006c02 <_printf_float+0xc2>
 8006d80:	f04f 0800 	mov.w	r8, #0
 8006d84:	f104 091a 	add.w	r9, r4, #26
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	4543      	cmp	r3, r8
 8006d8e:	dc09      	bgt.n	8006da4 <_printf_float+0x264>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	079b      	lsls	r3, r3, #30
 8006d94:	f100 8105 	bmi.w	8006fa2 <_printf_float+0x462>
 8006d98:	68e0      	ldr	r0, [r4, #12]
 8006d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d9c:	4298      	cmp	r0, r3
 8006d9e:	bfb8      	it	lt
 8006da0:	4618      	movlt	r0, r3
 8006da2:	e730      	b.n	8006c06 <_printf_float+0xc6>
 8006da4:	2301      	movs	r3, #1
 8006da6:	464a      	mov	r2, r9
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af27 	beq.w	8006c02 <_printf_float+0xc2>
 8006db4:	f108 0801 	add.w	r8, r8, #1
 8006db8:	e7e6      	b.n	8006d88 <_printf_float+0x248>
 8006dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dc39      	bgt.n	8006e34 <_printf_float+0x2f4>
 8006dc0:	4a1b      	ldr	r2, [pc, #108]	; (8006e30 <_printf_float+0x2f0>)
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	f43f af19 	beq.w	8006c02 <_printf_float+0xc2>
 8006dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	d102      	bne.n	8006dde <_printf_float+0x29e>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	07d9      	lsls	r1, r3, #31
 8006ddc:	d5d8      	bpl.n	8006d90 <_printf_float+0x250>
 8006dde:	ee18 3a10 	vmov	r3, s16
 8006de2:	4652      	mov	r2, sl
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f af09 	beq.w	8006c02 <_printf_float+0xc2>
 8006df0:	f04f 0900 	mov.w	r9, #0
 8006df4:	f104 0a1a 	add.w	sl, r4, #26
 8006df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfa:	425b      	negs	r3, r3
 8006dfc:	454b      	cmp	r3, r9
 8006dfe:	dc01      	bgt.n	8006e04 <_printf_float+0x2c4>
 8006e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e02:	e792      	b.n	8006d2a <_printf_float+0x1ea>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4652      	mov	r2, sl
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f aef7 	beq.w	8006c02 <_printf_float+0xc2>
 8006e14:	f109 0901 	add.w	r9, r9, #1
 8006e18:	e7ee      	b.n	8006df8 <_printf_float+0x2b8>
 8006e1a:	bf00      	nop
 8006e1c:	7fefffff 	.word	0x7fefffff
 8006e20:	0800b344 	.word	0x0800b344
 8006e24:	0800b348 	.word	0x0800b348
 8006e28:	0800b350 	.word	0x0800b350
 8006e2c:	0800b34c 	.word	0x0800b34c
 8006e30:	0800b354 	.word	0x0800b354
 8006e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	bfa8      	it	ge
 8006e3c:	461a      	movge	r2, r3
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	4691      	mov	r9, r2
 8006e42:	dc37      	bgt.n	8006eb4 <_printf_float+0x374>
 8006e44:	f04f 0b00 	mov.w	fp, #0
 8006e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e4c:	f104 021a 	add.w	r2, r4, #26
 8006e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	eba3 0309 	sub.w	r3, r3, r9
 8006e58:	455b      	cmp	r3, fp
 8006e5a:	dc33      	bgt.n	8006ec4 <_printf_float+0x384>
 8006e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e60:	429a      	cmp	r2, r3
 8006e62:	db3b      	blt.n	8006edc <_printf_float+0x39c>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07da      	lsls	r2, r3, #31
 8006e68:	d438      	bmi.n	8006edc <_printf_float+0x39c>
 8006e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6c:	9a05      	ldr	r2, [sp, #20]
 8006e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e70:	1a9a      	subs	r2, r3, r2
 8006e72:	eba3 0901 	sub.w	r9, r3, r1
 8006e76:	4591      	cmp	r9, r2
 8006e78:	bfa8      	it	ge
 8006e7a:	4691      	movge	r9, r2
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	dc35      	bgt.n	8006eee <_printf_float+0x3ae>
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8a:	f104 0a1a 	add.w	sl, r4, #26
 8006e8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	eba3 0309 	sub.w	r3, r3, r9
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	f77f af79 	ble.w	8006d90 <_printf_float+0x250>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4652      	mov	r2, sl
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f aeaa 	beq.w	8006c02 <_printf_float+0xc2>
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	e7ec      	b.n	8006e8e <_printf_float+0x34e>
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b8      	blx	r7
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d1c0      	bne.n	8006e44 <_printf_float+0x304>
 8006ec2:	e69e      	b.n	8006c02 <_printf_float+0xc2>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	9205      	str	r2, [sp, #20]
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f43f ae97 	beq.w	8006c02 <_printf_float+0xc2>
 8006ed4:	9a05      	ldr	r2, [sp, #20]
 8006ed6:	f10b 0b01 	add.w	fp, fp, #1
 8006eda:	e7b9      	b.n	8006e50 <_printf_float+0x310>
 8006edc:	ee18 3a10 	vmov	r3, s16
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d1be      	bne.n	8006e6a <_printf_float+0x32a>
 8006eec:	e689      	b.n	8006c02 <_printf_float+0xc2>
 8006eee:	9a05      	ldr	r2, [sp, #20]
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	4442      	add	r2, r8
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	d1c1      	bne.n	8006e82 <_printf_float+0x342>
 8006efe:	e680      	b.n	8006c02 <_printf_float+0xc2>
 8006f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f02:	2a01      	cmp	r2, #1
 8006f04:	dc01      	bgt.n	8006f0a <_printf_float+0x3ca>
 8006f06:	07db      	lsls	r3, r3, #31
 8006f08:	d538      	bpl.n	8006f7c <_printf_float+0x43c>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f ae74 	beq.w	8006c02 <_printf_float+0xc2>
 8006f1a:	ee18 3a10 	vmov	r3, s16
 8006f1e:	4652      	mov	r2, sl
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	f43f ae6b 	beq.w	8006c02 <_printf_float+0xc2>
 8006f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	f7f9 fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f38:	b9d8      	cbnz	r0, 8006f72 <_printf_float+0x432>
 8006f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f3c:	f108 0201 	add.w	r2, r8, #1
 8006f40:	3b01      	subs	r3, #1
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d10e      	bne.n	8006f6a <_printf_float+0x42a>
 8006f4c:	e659      	b.n	8006c02 <_printf_float+0xc2>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4652      	mov	r2, sl
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f ae52 	beq.w	8006c02 <_printf_float+0xc2>
 8006f5e:	f108 0801 	add.w	r8, r8, #1
 8006f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4543      	cmp	r3, r8
 8006f68:	dcf1      	bgt.n	8006f4e <_printf_float+0x40e>
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f70:	e6dc      	b.n	8006d2c <_printf_float+0x1ec>
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	f104 0a1a 	add.w	sl, r4, #26
 8006f7a:	e7f2      	b.n	8006f62 <_printf_float+0x422>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4642      	mov	r2, r8
 8006f80:	e7df      	b.n	8006f42 <_printf_float+0x402>
 8006f82:	2301      	movs	r3, #1
 8006f84:	464a      	mov	r2, r9
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae38 	beq.w	8006c02 <_printf_float+0xc2>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f9a:	1a5b      	subs	r3, r3, r1
 8006f9c:	4543      	cmp	r3, r8
 8006f9e:	dcf0      	bgt.n	8006f82 <_printf_float+0x442>
 8006fa0:	e6fa      	b.n	8006d98 <_printf_float+0x258>
 8006fa2:	f04f 0800 	mov.w	r8, #0
 8006fa6:	f104 0919 	add.w	r9, r4, #25
 8006faa:	e7f4      	b.n	8006f96 <_printf_float+0x456>

08006fac <_printf_common>:
 8006fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	4699      	mov	r9, r3
 8006fb4:	688a      	ldr	r2, [r1, #8]
 8006fb6:	690b      	ldr	r3, [r1, #16]
 8006fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	bfb8      	it	lt
 8006fc0:	4613      	movlt	r3, r2
 8006fc2:	6033      	str	r3, [r6, #0]
 8006fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fc8:	4607      	mov	r7, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b10a      	cbz	r2, 8006fd2 <_printf_common+0x26>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	6033      	str	r3, [r6, #0]
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	0699      	lsls	r1, r3, #26
 8006fd6:	bf42      	ittt	mi
 8006fd8:	6833      	ldrmi	r3, [r6, #0]
 8006fda:	3302      	addmi	r3, #2
 8006fdc:	6033      	strmi	r3, [r6, #0]
 8006fde:	6825      	ldr	r5, [r4, #0]
 8006fe0:	f015 0506 	ands.w	r5, r5, #6
 8006fe4:	d106      	bne.n	8006ff4 <_printf_common+0x48>
 8006fe6:	f104 0a19 	add.w	sl, r4, #25
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	6832      	ldr	r2, [r6, #0]
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	42ab      	cmp	r3, r5
 8006ff2:	dc26      	bgt.n	8007042 <_printf_common+0x96>
 8006ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ff8:	1e13      	subs	r3, r2, #0
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	bf18      	it	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	0692      	lsls	r2, r2, #26
 8007002:	d42b      	bmi.n	800705c <_printf_common+0xb0>
 8007004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007008:	4649      	mov	r1, r9
 800700a:	4638      	mov	r0, r7
 800700c:	47c0      	blx	r8
 800700e:	3001      	adds	r0, #1
 8007010:	d01e      	beq.n	8007050 <_printf_common+0xa4>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	68e5      	ldr	r5, [r4, #12]
 8007016:	6832      	ldr	r2, [r6, #0]
 8007018:	f003 0306 	and.w	r3, r3, #6
 800701c:	2b04      	cmp	r3, #4
 800701e:	bf08      	it	eq
 8007020:	1aad      	subeq	r5, r5, r2
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	6922      	ldr	r2, [r4, #16]
 8007026:	bf0c      	ite	eq
 8007028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800702c:	2500      	movne	r5, #0
 800702e:	4293      	cmp	r3, r2
 8007030:	bfc4      	itt	gt
 8007032:	1a9b      	subgt	r3, r3, r2
 8007034:	18ed      	addgt	r5, r5, r3
 8007036:	2600      	movs	r6, #0
 8007038:	341a      	adds	r4, #26
 800703a:	42b5      	cmp	r5, r6
 800703c:	d11a      	bne.n	8007074 <_printf_common+0xc8>
 800703e:	2000      	movs	r0, #0
 8007040:	e008      	b.n	8007054 <_printf_common+0xa8>
 8007042:	2301      	movs	r3, #1
 8007044:	4652      	mov	r2, sl
 8007046:	4649      	mov	r1, r9
 8007048:	4638      	mov	r0, r7
 800704a:	47c0      	blx	r8
 800704c:	3001      	adds	r0, #1
 800704e:	d103      	bne.n	8007058 <_printf_common+0xac>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007058:	3501      	adds	r5, #1
 800705a:	e7c6      	b.n	8006fea <_printf_common+0x3e>
 800705c:	18e1      	adds	r1, r4, r3
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	2030      	movs	r0, #48	; 0x30
 8007062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007066:	4422      	add	r2, r4
 8007068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800706c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007070:	3302      	adds	r3, #2
 8007072:	e7c7      	b.n	8007004 <_printf_common+0x58>
 8007074:	2301      	movs	r3, #1
 8007076:	4622      	mov	r2, r4
 8007078:	4649      	mov	r1, r9
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	3001      	adds	r0, #1
 8007080:	d0e6      	beq.n	8007050 <_printf_common+0xa4>
 8007082:	3601      	adds	r6, #1
 8007084:	e7d9      	b.n	800703a <_printf_common+0x8e>
	...

08007088 <_printf_i>:
 8007088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	7e0f      	ldrb	r7, [r1, #24]
 800708e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007090:	2f78      	cmp	r7, #120	; 0x78
 8007092:	4691      	mov	r9, r2
 8007094:	4680      	mov	r8, r0
 8007096:	460c      	mov	r4, r1
 8007098:	469a      	mov	sl, r3
 800709a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800709e:	d807      	bhi.n	80070b0 <_printf_i+0x28>
 80070a0:	2f62      	cmp	r7, #98	; 0x62
 80070a2:	d80a      	bhi.n	80070ba <_printf_i+0x32>
 80070a4:	2f00      	cmp	r7, #0
 80070a6:	f000 80d8 	beq.w	800725a <_printf_i+0x1d2>
 80070aa:	2f58      	cmp	r7, #88	; 0x58
 80070ac:	f000 80a3 	beq.w	80071f6 <_printf_i+0x16e>
 80070b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070b8:	e03a      	b.n	8007130 <_printf_i+0xa8>
 80070ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070be:	2b15      	cmp	r3, #21
 80070c0:	d8f6      	bhi.n	80070b0 <_printf_i+0x28>
 80070c2:	a101      	add	r1, pc, #4	; (adr r1, 80070c8 <_printf_i+0x40>)
 80070c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007135 	.word	0x08007135
 80070d0:	080070b1 	.word	0x080070b1
 80070d4:	080070b1 	.word	0x080070b1
 80070d8:	080070b1 	.word	0x080070b1
 80070dc:	080070b1 	.word	0x080070b1
 80070e0:	08007135 	.word	0x08007135
 80070e4:	080070b1 	.word	0x080070b1
 80070e8:	080070b1 	.word	0x080070b1
 80070ec:	080070b1 	.word	0x080070b1
 80070f0:	080070b1 	.word	0x080070b1
 80070f4:	08007241 	.word	0x08007241
 80070f8:	08007165 	.word	0x08007165
 80070fc:	08007223 	.word	0x08007223
 8007100:	080070b1 	.word	0x080070b1
 8007104:	080070b1 	.word	0x080070b1
 8007108:	08007263 	.word	0x08007263
 800710c:	080070b1 	.word	0x080070b1
 8007110:	08007165 	.word	0x08007165
 8007114:	080070b1 	.word	0x080070b1
 8007118:	080070b1 	.word	0x080070b1
 800711c:	0800722b 	.word	0x0800722b
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	1d1a      	adds	r2, r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	602a      	str	r2, [r5, #0]
 8007128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800712c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007130:	2301      	movs	r3, #1
 8007132:	e0a3      	b.n	800727c <_printf_i+0x1f4>
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	6829      	ldr	r1, [r5, #0]
 8007138:	0606      	lsls	r6, r0, #24
 800713a:	f101 0304 	add.w	r3, r1, #4
 800713e:	d50a      	bpl.n	8007156 <_printf_i+0xce>
 8007140:	680e      	ldr	r6, [r1, #0]
 8007142:	602b      	str	r3, [r5, #0]
 8007144:	2e00      	cmp	r6, #0
 8007146:	da03      	bge.n	8007150 <_printf_i+0xc8>
 8007148:	232d      	movs	r3, #45	; 0x2d
 800714a:	4276      	negs	r6, r6
 800714c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007150:	485e      	ldr	r0, [pc, #376]	; (80072cc <_printf_i+0x244>)
 8007152:	230a      	movs	r3, #10
 8007154:	e019      	b.n	800718a <_printf_i+0x102>
 8007156:	680e      	ldr	r6, [r1, #0]
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800715e:	bf18      	it	ne
 8007160:	b236      	sxthne	r6, r6
 8007162:	e7ef      	b.n	8007144 <_printf_i+0xbc>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	6820      	ldr	r0, [r4, #0]
 8007168:	1d19      	adds	r1, r3, #4
 800716a:	6029      	str	r1, [r5, #0]
 800716c:	0601      	lsls	r1, r0, #24
 800716e:	d501      	bpl.n	8007174 <_printf_i+0xec>
 8007170:	681e      	ldr	r6, [r3, #0]
 8007172:	e002      	b.n	800717a <_printf_i+0xf2>
 8007174:	0646      	lsls	r6, r0, #25
 8007176:	d5fb      	bpl.n	8007170 <_printf_i+0xe8>
 8007178:	881e      	ldrh	r6, [r3, #0]
 800717a:	4854      	ldr	r0, [pc, #336]	; (80072cc <_printf_i+0x244>)
 800717c:	2f6f      	cmp	r7, #111	; 0x6f
 800717e:	bf0c      	ite	eq
 8007180:	2308      	moveq	r3, #8
 8007182:	230a      	movne	r3, #10
 8007184:	2100      	movs	r1, #0
 8007186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800718a:	6865      	ldr	r5, [r4, #4]
 800718c:	60a5      	str	r5, [r4, #8]
 800718e:	2d00      	cmp	r5, #0
 8007190:	bfa2      	ittt	ge
 8007192:	6821      	ldrge	r1, [r4, #0]
 8007194:	f021 0104 	bicge.w	r1, r1, #4
 8007198:	6021      	strge	r1, [r4, #0]
 800719a:	b90e      	cbnz	r6, 80071a0 <_printf_i+0x118>
 800719c:	2d00      	cmp	r5, #0
 800719e:	d04d      	beq.n	800723c <_printf_i+0x1b4>
 80071a0:	4615      	mov	r5, r2
 80071a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80071a6:	fb03 6711 	mls	r7, r3, r1, r6
 80071aa:	5dc7      	ldrb	r7, [r0, r7]
 80071ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071b0:	4637      	mov	r7, r6
 80071b2:	42bb      	cmp	r3, r7
 80071b4:	460e      	mov	r6, r1
 80071b6:	d9f4      	bls.n	80071a2 <_printf_i+0x11a>
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d10b      	bne.n	80071d4 <_printf_i+0x14c>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	07de      	lsls	r6, r3, #31
 80071c0:	d508      	bpl.n	80071d4 <_printf_i+0x14c>
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	6861      	ldr	r1, [r4, #4]
 80071c6:	4299      	cmp	r1, r3
 80071c8:	bfde      	ittt	le
 80071ca:	2330      	movle	r3, #48	; 0x30
 80071cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071d4:	1b52      	subs	r2, r2, r5
 80071d6:	6122      	str	r2, [r4, #16]
 80071d8:	f8cd a000 	str.w	sl, [sp]
 80071dc:	464b      	mov	r3, r9
 80071de:	aa03      	add	r2, sp, #12
 80071e0:	4621      	mov	r1, r4
 80071e2:	4640      	mov	r0, r8
 80071e4:	f7ff fee2 	bl	8006fac <_printf_common>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d14c      	bne.n	8007286 <_printf_i+0x1fe>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	b004      	add	sp, #16
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	4835      	ldr	r0, [pc, #212]	; (80072cc <_printf_i+0x244>)
 80071f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071fc:	6829      	ldr	r1, [r5, #0]
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	f851 6b04 	ldr.w	r6, [r1], #4
 8007204:	6029      	str	r1, [r5, #0]
 8007206:	061d      	lsls	r5, r3, #24
 8007208:	d514      	bpl.n	8007234 <_printf_i+0x1ac>
 800720a:	07df      	lsls	r7, r3, #31
 800720c:	bf44      	itt	mi
 800720e:	f043 0320 	orrmi.w	r3, r3, #32
 8007212:	6023      	strmi	r3, [r4, #0]
 8007214:	b91e      	cbnz	r6, 800721e <_printf_i+0x196>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f023 0320 	bic.w	r3, r3, #32
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	2310      	movs	r3, #16
 8007220:	e7b0      	b.n	8007184 <_printf_i+0xfc>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f043 0320 	orr.w	r3, r3, #32
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	2378      	movs	r3, #120	; 0x78
 800722c:	4828      	ldr	r0, [pc, #160]	; (80072d0 <_printf_i+0x248>)
 800722e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007232:	e7e3      	b.n	80071fc <_printf_i+0x174>
 8007234:	0659      	lsls	r1, r3, #25
 8007236:	bf48      	it	mi
 8007238:	b2b6      	uxthmi	r6, r6
 800723a:	e7e6      	b.n	800720a <_printf_i+0x182>
 800723c:	4615      	mov	r5, r2
 800723e:	e7bb      	b.n	80071b8 <_printf_i+0x130>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	6826      	ldr	r6, [r4, #0]
 8007244:	6961      	ldr	r1, [r4, #20]
 8007246:	1d18      	adds	r0, r3, #4
 8007248:	6028      	str	r0, [r5, #0]
 800724a:	0635      	lsls	r5, r6, #24
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	d501      	bpl.n	8007254 <_printf_i+0x1cc>
 8007250:	6019      	str	r1, [r3, #0]
 8007252:	e002      	b.n	800725a <_printf_i+0x1d2>
 8007254:	0670      	lsls	r0, r6, #25
 8007256:	d5fb      	bpl.n	8007250 <_printf_i+0x1c8>
 8007258:	8019      	strh	r1, [r3, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	4615      	mov	r5, r2
 8007260:	e7ba      	b.n	80071d8 <_printf_i+0x150>
 8007262:	682b      	ldr	r3, [r5, #0]
 8007264:	1d1a      	adds	r2, r3, #4
 8007266:	602a      	str	r2, [r5, #0]
 8007268:	681d      	ldr	r5, [r3, #0]
 800726a:	6862      	ldr	r2, [r4, #4]
 800726c:	2100      	movs	r1, #0
 800726e:	4628      	mov	r0, r5
 8007270:	f7f8 ffb6 	bl	80001e0 <memchr>
 8007274:	b108      	cbz	r0, 800727a <_printf_i+0x1f2>
 8007276:	1b40      	subs	r0, r0, r5
 8007278:	6060      	str	r0, [r4, #4]
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	2300      	movs	r3, #0
 8007280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007284:	e7a8      	b.n	80071d8 <_printf_i+0x150>
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	462a      	mov	r2, r5
 800728a:	4649      	mov	r1, r9
 800728c:	4640      	mov	r0, r8
 800728e:	47d0      	blx	sl
 8007290:	3001      	adds	r0, #1
 8007292:	d0ab      	beq.n	80071ec <_printf_i+0x164>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	079b      	lsls	r3, r3, #30
 8007298:	d413      	bmi.n	80072c2 <_printf_i+0x23a>
 800729a:	68e0      	ldr	r0, [r4, #12]
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	4298      	cmp	r0, r3
 80072a0:	bfb8      	it	lt
 80072a2:	4618      	movlt	r0, r3
 80072a4:	e7a4      	b.n	80071f0 <_printf_i+0x168>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4632      	mov	r2, r6
 80072aa:	4649      	mov	r1, r9
 80072ac:	4640      	mov	r0, r8
 80072ae:	47d0      	blx	sl
 80072b0:	3001      	adds	r0, #1
 80072b2:	d09b      	beq.n	80071ec <_printf_i+0x164>
 80072b4:	3501      	adds	r5, #1
 80072b6:	68e3      	ldr	r3, [r4, #12]
 80072b8:	9903      	ldr	r1, [sp, #12]
 80072ba:	1a5b      	subs	r3, r3, r1
 80072bc:	42ab      	cmp	r3, r5
 80072be:	dcf2      	bgt.n	80072a6 <_printf_i+0x21e>
 80072c0:	e7eb      	b.n	800729a <_printf_i+0x212>
 80072c2:	2500      	movs	r5, #0
 80072c4:	f104 0619 	add.w	r6, r4, #25
 80072c8:	e7f5      	b.n	80072b6 <_printf_i+0x22e>
 80072ca:	bf00      	nop
 80072cc:	0800b356 	.word	0x0800b356
 80072d0:	0800b367 	.word	0x0800b367

080072d4 <_scanf_float>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	b087      	sub	sp, #28
 80072da:	4617      	mov	r7, r2
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	688b      	ldr	r3, [r1, #8]
 80072e0:	1e5a      	subs	r2, r3, #1
 80072e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80072e6:	bf83      	ittte	hi
 80072e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80072ec:	195b      	addhi	r3, r3, r5
 80072ee:	9302      	strhi	r3, [sp, #8]
 80072f0:	2300      	movls	r3, #0
 80072f2:	bf86      	itte	hi
 80072f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80072f8:	608b      	strhi	r3, [r1, #8]
 80072fa:	9302      	strls	r3, [sp, #8]
 80072fc:	680b      	ldr	r3, [r1, #0]
 80072fe:	468b      	mov	fp, r1
 8007300:	2500      	movs	r5, #0
 8007302:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007306:	f84b 3b1c 	str.w	r3, [fp], #28
 800730a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800730e:	4680      	mov	r8, r0
 8007310:	460c      	mov	r4, r1
 8007312:	465e      	mov	r6, fp
 8007314:	46aa      	mov	sl, r5
 8007316:	46a9      	mov	r9, r5
 8007318:	9501      	str	r5, [sp, #4]
 800731a:	68a2      	ldr	r2, [r4, #8]
 800731c:	b152      	cbz	r2, 8007334 <_scanf_float+0x60>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b4e      	cmp	r3, #78	; 0x4e
 8007324:	d864      	bhi.n	80073f0 <_scanf_float+0x11c>
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d83c      	bhi.n	80073a4 <_scanf_float+0xd0>
 800732a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800732e:	b2c8      	uxtb	r0, r1
 8007330:	280e      	cmp	r0, #14
 8007332:	d93a      	bls.n	80073aa <_scanf_float+0xd6>
 8007334:	f1b9 0f00 	cmp.w	r9, #0
 8007338:	d003      	beq.n	8007342 <_scanf_float+0x6e>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007346:	f1ba 0f01 	cmp.w	sl, #1
 800734a:	f200 8113 	bhi.w	8007574 <_scanf_float+0x2a0>
 800734e:	455e      	cmp	r6, fp
 8007350:	f200 8105 	bhi.w	800755e <_scanf_float+0x28a>
 8007354:	2501      	movs	r5, #1
 8007356:	4628      	mov	r0, r5
 8007358:	b007      	add	sp, #28
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007362:	2a0d      	cmp	r2, #13
 8007364:	d8e6      	bhi.n	8007334 <_scanf_float+0x60>
 8007366:	a101      	add	r1, pc, #4	; (adr r1, 800736c <_scanf_float+0x98>)
 8007368:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800736c:	080074ab 	.word	0x080074ab
 8007370:	08007335 	.word	0x08007335
 8007374:	08007335 	.word	0x08007335
 8007378:	08007335 	.word	0x08007335
 800737c:	0800750b 	.word	0x0800750b
 8007380:	080074e3 	.word	0x080074e3
 8007384:	08007335 	.word	0x08007335
 8007388:	08007335 	.word	0x08007335
 800738c:	080074b9 	.word	0x080074b9
 8007390:	08007335 	.word	0x08007335
 8007394:	08007335 	.word	0x08007335
 8007398:	08007335 	.word	0x08007335
 800739c:	08007335 	.word	0x08007335
 80073a0:	08007471 	.word	0x08007471
 80073a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80073a8:	e7db      	b.n	8007362 <_scanf_float+0x8e>
 80073aa:	290e      	cmp	r1, #14
 80073ac:	d8c2      	bhi.n	8007334 <_scanf_float+0x60>
 80073ae:	a001      	add	r0, pc, #4	; (adr r0, 80073b4 <_scanf_float+0xe0>)
 80073b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073b4:	08007463 	.word	0x08007463
 80073b8:	08007335 	.word	0x08007335
 80073bc:	08007463 	.word	0x08007463
 80073c0:	080074f7 	.word	0x080074f7
 80073c4:	08007335 	.word	0x08007335
 80073c8:	08007411 	.word	0x08007411
 80073cc:	0800744d 	.word	0x0800744d
 80073d0:	0800744d 	.word	0x0800744d
 80073d4:	0800744d 	.word	0x0800744d
 80073d8:	0800744d 	.word	0x0800744d
 80073dc:	0800744d 	.word	0x0800744d
 80073e0:	0800744d 	.word	0x0800744d
 80073e4:	0800744d 	.word	0x0800744d
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	0800744d 	.word	0x0800744d
 80073f0:	2b6e      	cmp	r3, #110	; 0x6e
 80073f2:	d809      	bhi.n	8007408 <_scanf_float+0x134>
 80073f4:	2b60      	cmp	r3, #96	; 0x60
 80073f6:	d8b2      	bhi.n	800735e <_scanf_float+0x8a>
 80073f8:	2b54      	cmp	r3, #84	; 0x54
 80073fa:	d077      	beq.n	80074ec <_scanf_float+0x218>
 80073fc:	2b59      	cmp	r3, #89	; 0x59
 80073fe:	d199      	bne.n	8007334 <_scanf_float+0x60>
 8007400:	2d07      	cmp	r5, #7
 8007402:	d197      	bne.n	8007334 <_scanf_float+0x60>
 8007404:	2508      	movs	r5, #8
 8007406:	e029      	b.n	800745c <_scanf_float+0x188>
 8007408:	2b74      	cmp	r3, #116	; 0x74
 800740a:	d06f      	beq.n	80074ec <_scanf_float+0x218>
 800740c:	2b79      	cmp	r3, #121	; 0x79
 800740e:	e7f6      	b.n	80073fe <_scanf_float+0x12a>
 8007410:	6821      	ldr	r1, [r4, #0]
 8007412:	05c8      	lsls	r0, r1, #23
 8007414:	d51a      	bpl.n	800744c <_scanf_float+0x178>
 8007416:	9b02      	ldr	r3, [sp, #8]
 8007418:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800741c:	6021      	str	r1, [r4, #0]
 800741e:	f109 0901 	add.w	r9, r9, #1
 8007422:	b11b      	cbz	r3, 800742c <_scanf_float+0x158>
 8007424:	3b01      	subs	r3, #1
 8007426:	3201      	adds	r2, #1
 8007428:	9302      	str	r3, [sp, #8]
 800742a:	60a2      	str	r2, [r4, #8]
 800742c:	68a3      	ldr	r3, [r4, #8]
 800742e:	3b01      	subs	r3, #1
 8007430:	60a3      	str	r3, [r4, #8]
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	3301      	adds	r3, #1
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3b01      	subs	r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	f340 8084 	ble.w	800754c <_scanf_float+0x278>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	3301      	adds	r3, #1
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	e766      	b.n	800731a <_scanf_float+0x46>
 800744c:	eb1a 0f05 	cmn.w	sl, r5
 8007450:	f47f af70 	bne.w	8007334 <_scanf_float+0x60>
 8007454:	6822      	ldr	r2, [r4, #0]
 8007456:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800745a:	6022      	str	r2, [r4, #0]
 800745c:	f806 3b01 	strb.w	r3, [r6], #1
 8007460:	e7e4      	b.n	800742c <_scanf_float+0x158>
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	0610      	lsls	r0, r2, #24
 8007466:	f57f af65 	bpl.w	8007334 <_scanf_float+0x60>
 800746a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800746e:	e7f4      	b.n	800745a <_scanf_float+0x186>
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	d10e      	bne.n	8007494 <_scanf_float+0x1c0>
 8007476:	f1b9 0f00 	cmp.w	r9, #0
 800747a:	d10e      	bne.n	800749a <_scanf_float+0x1c6>
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007482:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007486:	d108      	bne.n	800749a <_scanf_float+0x1c6>
 8007488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	f04f 0a01 	mov.w	sl, #1
 8007492:	e7e3      	b.n	800745c <_scanf_float+0x188>
 8007494:	f1ba 0f02 	cmp.w	sl, #2
 8007498:	d055      	beq.n	8007546 <_scanf_float+0x272>
 800749a:	2d01      	cmp	r5, #1
 800749c:	d002      	beq.n	80074a4 <_scanf_float+0x1d0>
 800749e:	2d04      	cmp	r5, #4
 80074a0:	f47f af48 	bne.w	8007334 <_scanf_float+0x60>
 80074a4:	3501      	adds	r5, #1
 80074a6:	b2ed      	uxtb	r5, r5
 80074a8:	e7d8      	b.n	800745c <_scanf_float+0x188>
 80074aa:	f1ba 0f01 	cmp.w	sl, #1
 80074ae:	f47f af41 	bne.w	8007334 <_scanf_float+0x60>
 80074b2:	f04f 0a02 	mov.w	sl, #2
 80074b6:	e7d1      	b.n	800745c <_scanf_float+0x188>
 80074b8:	b97d      	cbnz	r5, 80074da <_scanf_float+0x206>
 80074ba:	f1b9 0f00 	cmp.w	r9, #0
 80074be:	f47f af3c 	bne.w	800733a <_scanf_float+0x66>
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074cc:	f47f af39 	bne.w	8007342 <_scanf_float+0x6e>
 80074d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074d4:	6022      	str	r2, [r4, #0]
 80074d6:	2501      	movs	r5, #1
 80074d8:	e7c0      	b.n	800745c <_scanf_float+0x188>
 80074da:	2d03      	cmp	r5, #3
 80074dc:	d0e2      	beq.n	80074a4 <_scanf_float+0x1d0>
 80074de:	2d05      	cmp	r5, #5
 80074e0:	e7de      	b.n	80074a0 <_scanf_float+0x1cc>
 80074e2:	2d02      	cmp	r5, #2
 80074e4:	f47f af26 	bne.w	8007334 <_scanf_float+0x60>
 80074e8:	2503      	movs	r5, #3
 80074ea:	e7b7      	b.n	800745c <_scanf_float+0x188>
 80074ec:	2d06      	cmp	r5, #6
 80074ee:	f47f af21 	bne.w	8007334 <_scanf_float+0x60>
 80074f2:	2507      	movs	r5, #7
 80074f4:	e7b2      	b.n	800745c <_scanf_float+0x188>
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	0591      	lsls	r1, r2, #22
 80074fa:	f57f af1b 	bpl.w	8007334 <_scanf_float+0x60>
 80074fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007502:	6022      	str	r2, [r4, #0]
 8007504:	f8cd 9004 	str.w	r9, [sp, #4]
 8007508:	e7a8      	b.n	800745c <_scanf_float+0x188>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007510:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007514:	d006      	beq.n	8007524 <_scanf_float+0x250>
 8007516:	0550      	lsls	r0, r2, #21
 8007518:	f57f af0c 	bpl.w	8007334 <_scanf_float+0x60>
 800751c:	f1b9 0f00 	cmp.w	r9, #0
 8007520:	f43f af0f 	beq.w	8007342 <_scanf_float+0x6e>
 8007524:	0591      	lsls	r1, r2, #22
 8007526:	bf58      	it	pl
 8007528:	9901      	ldrpl	r1, [sp, #4]
 800752a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800752e:	bf58      	it	pl
 8007530:	eba9 0101 	subpl.w	r1, r9, r1
 8007534:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007538:	bf58      	it	pl
 800753a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800753e:	6022      	str	r2, [r4, #0]
 8007540:	f04f 0900 	mov.w	r9, #0
 8007544:	e78a      	b.n	800745c <_scanf_float+0x188>
 8007546:	f04f 0a03 	mov.w	sl, #3
 800754a:	e787      	b.n	800745c <_scanf_float+0x188>
 800754c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007550:	4639      	mov	r1, r7
 8007552:	4640      	mov	r0, r8
 8007554:	4798      	blx	r3
 8007556:	2800      	cmp	r0, #0
 8007558:	f43f aedf 	beq.w	800731a <_scanf_float+0x46>
 800755c:	e6ea      	b.n	8007334 <_scanf_float+0x60>
 800755e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007562:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007566:	463a      	mov	r2, r7
 8007568:	4640      	mov	r0, r8
 800756a:	4798      	blx	r3
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	3b01      	subs	r3, #1
 8007570:	6123      	str	r3, [r4, #16]
 8007572:	e6ec      	b.n	800734e <_scanf_float+0x7a>
 8007574:	1e6b      	subs	r3, r5, #1
 8007576:	2b06      	cmp	r3, #6
 8007578:	d825      	bhi.n	80075c6 <_scanf_float+0x2f2>
 800757a:	2d02      	cmp	r5, #2
 800757c:	d836      	bhi.n	80075ec <_scanf_float+0x318>
 800757e:	455e      	cmp	r6, fp
 8007580:	f67f aee8 	bls.w	8007354 <_scanf_float+0x80>
 8007584:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007588:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800758c:	463a      	mov	r2, r7
 800758e:	4640      	mov	r0, r8
 8007590:	4798      	blx	r3
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	3b01      	subs	r3, #1
 8007596:	6123      	str	r3, [r4, #16]
 8007598:	e7f1      	b.n	800757e <_scanf_float+0x2aa>
 800759a:	9802      	ldr	r0, [sp, #8]
 800759c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80075a4:	9002      	str	r0, [sp, #8]
 80075a6:	463a      	mov	r2, r7
 80075a8:	4640      	mov	r0, r8
 80075aa:	4798      	blx	r3
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075b6:	fa5f fa8a 	uxtb.w	sl, sl
 80075ba:	f1ba 0f02 	cmp.w	sl, #2
 80075be:	d1ec      	bne.n	800759a <_scanf_float+0x2c6>
 80075c0:	3d03      	subs	r5, #3
 80075c2:	b2ed      	uxtb	r5, r5
 80075c4:	1b76      	subs	r6, r6, r5
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	05da      	lsls	r2, r3, #23
 80075ca:	d52f      	bpl.n	800762c <_scanf_float+0x358>
 80075cc:	055b      	lsls	r3, r3, #21
 80075ce:	d510      	bpl.n	80075f2 <_scanf_float+0x31e>
 80075d0:	455e      	cmp	r6, fp
 80075d2:	f67f aebf 	bls.w	8007354 <_scanf_float+0x80>
 80075d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075de:	463a      	mov	r2, r7
 80075e0:	4640      	mov	r0, r8
 80075e2:	4798      	blx	r3
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	e7f1      	b.n	80075d0 <_scanf_float+0x2fc>
 80075ec:	46aa      	mov	sl, r5
 80075ee:	9602      	str	r6, [sp, #8]
 80075f0:	e7df      	b.n	80075b2 <_scanf_float+0x2de>
 80075f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	2965      	cmp	r1, #101	; 0x65
 80075fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80075fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007602:	6123      	str	r3, [r4, #16]
 8007604:	d00c      	beq.n	8007620 <_scanf_float+0x34c>
 8007606:	2945      	cmp	r1, #69	; 0x45
 8007608:	d00a      	beq.n	8007620 <_scanf_float+0x34c>
 800760a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800760e:	463a      	mov	r2, r7
 8007610:	4640      	mov	r0, r8
 8007612:	4798      	blx	r3
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800761a:	3b01      	subs	r3, #1
 800761c:	1eb5      	subs	r5, r6, #2
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007624:	463a      	mov	r2, r7
 8007626:	4640      	mov	r0, r8
 8007628:	4798      	blx	r3
 800762a:	462e      	mov	r6, r5
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	f015 0510 	ands.w	r5, r5, #16
 8007632:	d159      	bne.n	80076e8 <_scanf_float+0x414>
 8007634:	7035      	strb	r5, [r6, #0]
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800763c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007640:	d11b      	bne.n	800767a <_scanf_float+0x3a6>
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	454b      	cmp	r3, r9
 8007646:	eba3 0209 	sub.w	r2, r3, r9
 800764a:	d123      	bne.n	8007694 <_scanf_float+0x3c0>
 800764c:	2200      	movs	r2, #0
 800764e:	4659      	mov	r1, fp
 8007650:	4640      	mov	r0, r8
 8007652:	f000 fe97 	bl	8008384 <_strtod_r>
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	f012 0f02 	tst.w	r2, #2
 800765e:	ec57 6b10 	vmov	r6, r7, d0
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	d021      	beq.n	80076aa <_scanf_float+0x3d6>
 8007666:	9903      	ldr	r1, [sp, #12]
 8007668:	1d1a      	adds	r2, r3, #4
 800766a:	600a      	str	r2, [r1, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	e9c3 6700 	strd	r6, r7, [r3]
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60e3      	str	r3, [r4, #12]
 8007678:	e66d      	b.n	8007356 <_scanf_float+0x82>
 800767a:	9b04      	ldr	r3, [sp, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0e5      	beq.n	800764c <_scanf_float+0x378>
 8007680:	9905      	ldr	r1, [sp, #20]
 8007682:	230a      	movs	r3, #10
 8007684:	462a      	mov	r2, r5
 8007686:	3101      	adds	r1, #1
 8007688:	4640      	mov	r0, r8
 800768a:	f000 ff03 	bl	8008494 <_strtol_r>
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	9e05      	ldr	r6, [sp, #20]
 8007692:	1ac2      	subs	r2, r0, r3
 8007694:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007698:	429e      	cmp	r6, r3
 800769a:	bf28      	it	cs
 800769c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80076a0:	4912      	ldr	r1, [pc, #72]	; (80076ec <_scanf_float+0x418>)
 80076a2:	4630      	mov	r0, r6
 80076a4:	f000 f82c 	bl	8007700 <siprintf>
 80076a8:	e7d0      	b.n	800764c <_scanf_float+0x378>
 80076aa:	9903      	ldr	r1, [sp, #12]
 80076ac:	f012 0f04 	tst.w	r2, #4
 80076b0:	f103 0204 	add.w	r2, r3, #4
 80076b4:	600a      	str	r2, [r1, #0]
 80076b6:	d1d9      	bne.n	800766c <_scanf_float+0x398>
 80076b8:	f8d3 8000 	ldr.w	r8, [r3]
 80076bc:	ee10 2a10 	vmov	r2, s0
 80076c0:	ee10 0a10 	vmov	r0, s0
 80076c4:	463b      	mov	r3, r7
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f9 fa30 	bl	8000b2c <__aeabi_dcmpun>
 80076cc:	b128      	cbz	r0, 80076da <_scanf_float+0x406>
 80076ce:	4808      	ldr	r0, [pc, #32]	; (80076f0 <_scanf_float+0x41c>)
 80076d0:	f000 f810 	bl	80076f4 <nanf>
 80076d4:	ed88 0a00 	vstr	s0, [r8]
 80076d8:	e7cb      	b.n	8007672 <_scanf_float+0x39e>
 80076da:	4630      	mov	r0, r6
 80076dc:	4639      	mov	r1, r7
 80076de:	f7f9 fa83 	bl	8000be8 <__aeabi_d2f>
 80076e2:	f8c8 0000 	str.w	r0, [r8]
 80076e6:	e7c4      	b.n	8007672 <_scanf_float+0x39e>
 80076e8:	2500      	movs	r5, #0
 80076ea:	e634      	b.n	8007356 <_scanf_float+0x82>
 80076ec:	0800b378 	.word	0x0800b378
 80076f0:	0800b780 	.word	0x0800b780

080076f4 <nanf>:
 80076f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80076fc <nanf+0x8>
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	7fc00000 	.word	0x7fc00000

08007700 <siprintf>:
 8007700:	b40e      	push	{r1, r2, r3}
 8007702:	b500      	push	{lr}
 8007704:	b09c      	sub	sp, #112	; 0x70
 8007706:	ab1d      	add	r3, sp, #116	; 0x74
 8007708:	9002      	str	r0, [sp, #8]
 800770a:	9006      	str	r0, [sp, #24]
 800770c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007710:	4809      	ldr	r0, [pc, #36]	; (8007738 <siprintf+0x38>)
 8007712:	9107      	str	r1, [sp, #28]
 8007714:	9104      	str	r1, [sp, #16]
 8007716:	4909      	ldr	r1, [pc, #36]	; (800773c <siprintf+0x3c>)
 8007718:	f853 2b04 	ldr.w	r2, [r3], #4
 800771c:	9105      	str	r1, [sp, #20]
 800771e:	6800      	ldr	r0, [r0, #0]
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	a902      	add	r1, sp, #8
 8007724:	f002 fee2 	bl	800a4ec <_svfiprintf_r>
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	b01c      	add	sp, #112	; 0x70
 8007730:	f85d eb04 	ldr.w	lr, [sp], #4
 8007734:	b003      	add	sp, #12
 8007736:	4770      	bx	lr
 8007738:	2000000c 	.word	0x2000000c
 800773c:	ffff0208 	.word	0xffff0208

08007740 <sulp>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4604      	mov	r4, r0
 8007744:	460d      	mov	r5, r1
 8007746:	ec45 4b10 	vmov	d0, r4, r5
 800774a:	4616      	mov	r6, r2
 800774c:	f002 fc2c 	bl	8009fa8 <__ulp>
 8007750:	ec51 0b10 	vmov	r0, r1, d0
 8007754:	b17e      	cbz	r6, 8007776 <sulp+0x36>
 8007756:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800775a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800775e:	2b00      	cmp	r3, #0
 8007760:	dd09      	ble.n	8007776 <sulp+0x36>
 8007762:	051b      	lsls	r3, r3, #20
 8007764:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007768:	2400      	movs	r4, #0
 800776a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	f7f8 ff41 	bl	80005f8 <__aeabi_dmul>
 8007776:	bd70      	pop	{r4, r5, r6, pc}

08007778 <_strtod_l>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	ed2d 8b02 	vpush	{d8}
 8007780:	b09d      	sub	sp, #116	; 0x74
 8007782:	461f      	mov	r7, r3
 8007784:	2300      	movs	r3, #0
 8007786:	9318      	str	r3, [sp, #96]	; 0x60
 8007788:	4ba2      	ldr	r3, [pc, #648]	; (8007a14 <_strtod_l+0x29c>)
 800778a:	9213      	str	r2, [sp, #76]	; 0x4c
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	9305      	str	r3, [sp, #20]
 8007790:	4604      	mov	r4, r0
 8007792:	4618      	mov	r0, r3
 8007794:	4688      	mov	r8, r1
 8007796:	f7f8 fd1b 	bl	80001d0 <strlen>
 800779a:	f04f 0a00 	mov.w	sl, #0
 800779e:	4605      	mov	r5, r0
 80077a0:	f04f 0b00 	mov.w	fp, #0
 80077a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80077a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	2a2b      	cmp	r2, #43	; 0x2b
 80077ae:	d04e      	beq.n	800784e <_strtod_l+0xd6>
 80077b0:	d83b      	bhi.n	800782a <_strtod_l+0xb2>
 80077b2:	2a0d      	cmp	r2, #13
 80077b4:	d834      	bhi.n	8007820 <_strtod_l+0xa8>
 80077b6:	2a08      	cmp	r2, #8
 80077b8:	d834      	bhi.n	8007824 <_strtod_l+0xac>
 80077ba:	2a00      	cmp	r2, #0
 80077bc:	d03e      	beq.n	800783c <_strtod_l+0xc4>
 80077be:	2300      	movs	r3, #0
 80077c0:	930a      	str	r3, [sp, #40]	; 0x28
 80077c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80077c4:	7833      	ldrb	r3, [r6, #0]
 80077c6:	2b30      	cmp	r3, #48	; 0x30
 80077c8:	f040 80b0 	bne.w	800792c <_strtod_l+0x1b4>
 80077cc:	7873      	ldrb	r3, [r6, #1]
 80077ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077d2:	2b58      	cmp	r3, #88	; 0x58
 80077d4:	d168      	bne.n	80078a8 <_strtod_l+0x130>
 80077d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	ab18      	add	r3, sp, #96	; 0x60
 80077dc:	9702      	str	r7, [sp, #8]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4a8d      	ldr	r2, [pc, #564]	; (8007a18 <_strtod_l+0x2a0>)
 80077e2:	ab19      	add	r3, sp, #100	; 0x64
 80077e4:	a917      	add	r1, sp, #92	; 0x5c
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 fd38 	bl	800925c <__gethex>
 80077ec:	f010 0707 	ands.w	r7, r0, #7
 80077f0:	4605      	mov	r5, r0
 80077f2:	d005      	beq.n	8007800 <_strtod_l+0x88>
 80077f4:	2f06      	cmp	r7, #6
 80077f6:	d12c      	bne.n	8007852 <_strtod_l+0xda>
 80077f8:	3601      	adds	r6, #1
 80077fa:	2300      	movs	r3, #0
 80077fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80077fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007802:	2b00      	cmp	r3, #0
 8007804:	f040 8590 	bne.w	8008328 <_strtod_l+0xbb0>
 8007808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780a:	b1eb      	cbz	r3, 8007848 <_strtod_l+0xd0>
 800780c:	4652      	mov	r2, sl
 800780e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007812:	ec43 2b10 	vmov	d0, r2, r3
 8007816:	b01d      	add	sp, #116	; 0x74
 8007818:	ecbd 8b02 	vpop	{d8}
 800781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007820:	2a20      	cmp	r2, #32
 8007822:	d1cc      	bne.n	80077be <_strtod_l+0x46>
 8007824:	3301      	adds	r3, #1
 8007826:	9317      	str	r3, [sp, #92]	; 0x5c
 8007828:	e7be      	b.n	80077a8 <_strtod_l+0x30>
 800782a:	2a2d      	cmp	r2, #45	; 0x2d
 800782c:	d1c7      	bne.n	80077be <_strtod_l+0x46>
 800782e:	2201      	movs	r2, #1
 8007830:	920a      	str	r2, [sp, #40]	; 0x28
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	9217      	str	r2, [sp, #92]	; 0x5c
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1c2      	bne.n	80077c2 <_strtod_l+0x4a>
 800783c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800783e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 856e 	bne.w	8008324 <_strtod_l+0xbac>
 8007848:	4652      	mov	r2, sl
 800784a:	465b      	mov	r3, fp
 800784c:	e7e1      	b.n	8007812 <_strtod_l+0x9a>
 800784e:	2200      	movs	r2, #0
 8007850:	e7ee      	b.n	8007830 <_strtod_l+0xb8>
 8007852:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007854:	b13a      	cbz	r2, 8007866 <_strtod_l+0xee>
 8007856:	2135      	movs	r1, #53	; 0x35
 8007858:	a81a      	add	r0, sp, #104	; 0x68
 800785a:	f002 fcb0 	bl	800a1be <__copybits>
 800785e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007860:	4620      	mov	r0, r4
 8007862:	f002 f86f 	bl	8009944 <_Bfree>
 8007866:	3f01      	subs	r7, #1
 8007868:	2f04      	cmp	r7, #4
 800786a:	d806      	bhi.n	800787a <_strtod_l+0x102>
 800786c:	e8df f007 	tbb	[pc, r7]
 8007870:	1714030a 	.word	0x1714030a
 8007874:	0a          	.byte	0x0a
 8007875:	00          	.byte	0x00
 8007876:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800787a:	0728      	lsls	r0, r5, #28
 800787c:	d5c0      	bpl.n	8007800 <_strtod_l+0x88>
 800787e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007882:	e7bd      	b.n	8007800 <_strtod_l+0x88>
 8007884:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800788a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800788e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007892:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007896:	e7f0      	b.n	800787a <_strtod_l+0x102>
 8007898:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007a1c <_strtod_l+0x2a4>
 800789c:	e7ed      	b.n	800787a <_strtod_l+0x102>
 800789e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80078a2:	f04f 3aff 	mov.w	sl, #4294967295
 80078a6:	e7e8      	b.n	800787a <_strtod_l+0x102>
 80078a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b30      	cmp	r3, #48	; 0x30
 80078b2:	d0f9      	beq.n	80078a8 <_strtod_l+0x130>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0a3      	beq.n	8007800 <_strtod_l+0x88>
 80078b8:	2301      	movs	r3, #1
 80078ba:	f04f 0900 	mov.w	r9, #0
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078c2:	9308      	str	r3, [sp, #32]
 80078c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80078c8:	464f      	mov	r7, r9
 80078ca:	220a      	movs	r2, #10
 80078cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80078ce:	7806      	ldrb	r6, [r0, #0]
 80078d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80078d4:	b2d9      	uxtb	r1, r3
 80078d6:	2909      	cmp	r1, #9
 80078d8:	d92a      	bls.n	8007930 <_strtod_l+0x1b8>
 80078da:	9905      	ldr	r1, [sp, #20]
 80078dc:	462a      	mov	r2, r5
 80078de:	f002 ff1f 	bl	800a720 <strncmp>
 80078e2:	b398      	cbz	r0, 800794c <_strtod_l+0x1d4>
 80078e4:	2000      	movs	r0, #0
 80078e6:	4632      	mov	r2, r6
 80078e8:	463d      	mov	r5, r7
 80078ea:	9005      	str	r0, [sp, #20]
 80078ec:	4603      	mov	r3, r0
 80078ee:	2a65      	cmp	r2, #101	; 0x65
 80078f0:	d001      	beq.n	80078f6 <_strtod_l+0x17e>
 80078f2:	2a45      	cmp	r2, #69	; 0x45
 80078f4:	d118      	bne.n	8007928 <_strtod_l+0x1b0>
 80078f6:	b91d      	cbnz	r5, 8007900 <_strtod_l+0x188>
 80078f8:	9a04      	ldr	r2, [sp, #16]
 80078fa:	4302      	orrs	r2, r0
 80078fc:	d09e      	beq.n	800783c <_strtod_l+0xc4>
 80078fe:	2500      	movs	r5, #0
 8007900:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007904:	f108 0201 	add.w	r2, r8, #1
 8007908:	9217      	str	r2, [sp, #92]	; 0x5c
 800790a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800790e:	2a2b      	cmp	r2, #43	; 0x2b
 8007910:	d075      	beq.n	80079fe <_strtod_l+0x286>
 8007912:	2a2d      	cmp	r2, #45	; 0x2d
 8007914:	d07b      	beq.n	8007a0e <_strtod_l+0x296>
 8007916:	f04f 0c00 	mov.w	ip, #0
 800791a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800791e:	2909      	cmp	r1, #9
 8007920:	f240 8082 	bls.w	8007a28 <_strtod_l+0x2b0>
 8007924:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007928:	2600      	movs	r6, #0
 800792a:	e09d      	b.n	8007a68 <_strtod_l+0x2f0>
 800792c:	2300      	movs	r3, #0
 800792e:	e7c4      	b.n	80078ba <_strtod_l+0x142>
 8007930:	2f08      	cmp	r7, #8
 8007932:	bfd8      	it	le
 8007934:	9907      	ldrle	r1, [sp, #28]
 8007936:	f100 0001 	add.w	r0, r0, #1
 800793a:	bfda      	itte	le
 800793c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007940:	9307      	strle	r3, [sp, #28]
 8007942:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007946:	3701      	adds	r7, #1
 8007948:	9017      	str	r0, [sp, #92]	; 0x5c
 800794a:	e7bf      	b.n	80078cc <_strtod_l+0x154>
 800794c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800794e:	195a      	adds	r2, r3, r5
 8007950:	9217      	str	r2, [sp, #92]	; 0x5c
 8007952:	5d5a      	ldrb	r2, [r3, r5]
 8007954:	2f00      	cmp	r7, #0
 8007956:	d037      	beq.n	80079c8 <_strtod_l+0x250>
 8007958:	9005      	str	r0, [sp, #20]
 800795a:	463d      	mov	r5, r7
 800795c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007960:	2b09      	cmp	r3, #9
 8007962:	d912      	bls.n	800798a <_strtod_l+0x212>
 8007964:	2301      	movs	r3, #1
 8007966:	e7c2      	b.n	80078ee <_strtod_l+0x176>
 8007968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	9217      	str	r2, [sp, #92]	; 0x5c
 800796e:	785a      	ldrb	r2, [r3, #1]
 8007970:	3001      	adds	r0, #1
 8007972:	2a30      	cmp	r2, #48	; 0x30
 8007974:	d0f8      	beq.n	8007968 <_strtod_l+0x1f0>
 8007976:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800797a:	2b08      	cmp	r3, #8
 800797c:	f200 84d9 	bhi.w	8008332 <_strtod_l+0xbba>
 8007980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007982:	9005      	str	r0, [sp, #20]
 8007984:	2000      	movs	r0, #0
 8007986:	9308      	str	r3, [sp, #32]
 8007988:	4605      	mov	r5, r0
 800798a:	3a30      	subs	r2, #48	; 0x30
 800798c:	f100 0301 	add.w	r3, r0, #1
 8007990:	d014      	beq.n	80079bc <_strtod_l+0x244>
 8007992:	9905      	ldr	r1, [sp, #20]
 8007994:	4419      	add	r1, r3
 8007996:	9105      	str	r1, [sp, #20]
 8007998:	462b      	mov	r3, r5
 800799a:	eb00 0e05 	add.w	lr, r0, r5
 800799e:	210a      	movs	r1, #10
 80079a0:	4573      	cmp	r3, lr
 80079a2:	d113      	bne.n	80079cc <_strtod_l+0x254>
 80079a4:	182b      	adds	r3, r5, r0
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	f105 0501 	add.w	r5, r5, #1
 80079ac:	4405      	add	r5, r0
 80079ae:	dc1c      	bgt.n	80079ea <_strtod_l+0x272>
 80079b0:	9907      	ldr	r1, [sp, #28]
 80079b2:	230a      	movs	r3, #10
 80079b4:	fb03 2301 	mla	r3, r3, r1, r2
 80079b8:	9307      	str	r3, [sp, #28]
 80079ba:	2300      	movs	r3, #0
 80079bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079be:	1c51      	adds	r1, r2, #1
 80079c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80079c2:	7852      	ldrb	r2, [r2, #1]
 80079c4:	4618      	mov	r0, r3
 80079c6:	e7c9      	b.n	800795c <_strtod_l+0x1e4>
 80079c8:	4638      	mov	r0, r7
 80079ca:	e7d2      	b.n	8007972 <_strtod_l+0x1fa>
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	dc04      	bgt.n	80079da <_strtod_l+0x262>
 80079d0:	9e07      	ldr	r6, [sp, #28]
 80079d2:	434e      	muls	r6, r1
 80079d4:	9607      	str	r6, [sp, #28]
 80079d6:	3301      	adds	r3, #1
 80079d8:	e7e2      	b.n	80079a0 <_strtod_l+0x228>
 80079da:	f103 0c01 	add.w	ip, r3, #1
 80079de:	f1bc 0f10 	cmp.w	ip, #16
 80079e2:	bfd8      	it	le
 80079e4:	fb01 f909 	mulle.w	r9, r1, r9
 80079e8:	e7f5      	b.n	80079d6 <_strtod_l+0x25e>
 80079ea:	2d10      	cmp	r5, #16
 80079ec:	bfdc      	itt	le
 80079ee:	230a      	movle	r3, #10
 80079f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80079f4:	e7e1      	b.n	80079ba <_strtod_l+0x242>
 80079f6:	2300      	movs	r3, #0
 80079f8:	9305      	str	r3, [sp, #20]
 80079fa:	2301      	movs	r3, #1
 80079fc:	e77c      	b.n	80078f8 <_strtod_l+0x180>
 80079fe:	f04f 0c00 	mov.w	ip, #0
 8007a02:	f108 0202 	add.w	r2, r8, #2
 8007a06:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007a0c:	e785      	b.n	800791a <_strtod_l+0x1a2>
 8007a0e:	f04f 0c01 	mov.w	ip, #1
 8007a12:	e7f6      	b.n	8007a02 <_strtod_l+0x28a>
 8007a14:	0800b5c8 	.word	0x0800b5c8
 8007a18:	0800b380 	.word	0x0800b380
 8007a1c:	7ff00000 	.word	0x7ff00000
 8007a20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a22:	1c51      	adds	r1, r2, #1
 8007a24:	9117      	str	r1, [sp, #92]	; 0x5c
 8007a26:	7852      	ldrb	r2, [r2, #1]
 8007a28:	2a30      	cmp	r2, #48	; 0x30
 8007a2a:	d0f9      	beq.n	8007a20 <_strtod_l+0x2a8>
 8007a2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007a30:	2908      	cmp	r1, #8
 8007a32:	f63f af79 	bhi.w	8007928 <_strtod_l+0x1b0>
 8007a36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007a3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a3c:	9206      	str	r2, [sp, #24]
 8007a3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a40:	1c51      	adds	r1, r2, #1
 8007a42:	9117      	str	r1, [sp, #92]	; 0x5c
 8007a44:	7852      	ldrb	r2, [r2, #1]
 8007a46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007a4a:	2e09      	cmp	r6, #9
 8007a4c:	d937      	bls.n	8007abe <_strtod_l+0x346>
 8007a4e:	9e06      	ldr	r6, [sp, #24]
 8007a50:	1b89      	subs	r1, r1, r6
 8007a52:	2908      	cmp	r1, #8
 8007a54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007a58:	dc02      	bgt.n	8007a60 <_strtod_l+0x2e8>
 8007a5a:	4576      	cmp	r6, lr
 8007a5c:	bfa8      	it	ge
 8007a5e:	4676      	movge	r6, lr
 8007a60:	f1bc 0f00 	cmp.w	ip, #0
 8007a64:	d000      	beq.n	8007a68 <_strtod_l+0x2f0>
 8007a66:	4276      	negs	r6, r6
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	d14d      	bne.n	8007b08 <_strtod_l+0x390>
 8007a6c:	9904      	ldr	r1, [sp, #16]
 8007a6e:	4301      	orrs	r1, r0
 8007a70:	f47f aec6 	bne.w	8007800 <_strtod_l+0x88>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f47f aee1 	bne.w	800783c <_strtod_l+0xc4>
 8007a7a:	2a69      	cmp	r2, #105	; 0x69
 8007a7c:	d027      	beq.n	8007ace <_strtod_l+0x356>
 8007a7e:	dc24      	bgt.n	8007aca <_strtod_l+0x352>
 8007a80:	2a49      	cmp	r2, #73	; 0x49
 8007a82:	d024      	beq.n	8007ace <_strtod_l+0x356>
 8007a84:	2a4e      	cmp	r2, #78	; 0x4e
 8007a86:	f47f aed9 	bne.w	800783c <_strtod_l+0xc4>
 8007a8a:	499f      	ldr	r1, [pc, #636]	; (8007d08 <_strtod_l+0x590>)
 8007a8c:	a817      	add	r0, sp, #92	; 0x5c
 8007a8e:	f001 fe3d 	bl	800970c <__match>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f43f aed2 	beq.w	800783c <_strtod_l+0xc4>
 8007a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b28      	cmp	r3, #40	; 0x28
 8007a9e:	d12d      	bne.n	8007afc <_strtod_l+0x384>
 8007aa0:	499a      	ldr	r1, [pc, #616]	; (8007d0c <_strtod_l+0x594>)
 8007aa2:	aa1a      	add	r2, sp, #104	; 0x68
 8007aa4:	a817      	add	r0, sp, #92	; 0x5c
 8007aa6:	f001 fe45 	bl	8009734 <__hexnan>
 8007aaa:	2805      	cmp	r0, #5
 8007aac:	d126      	bne.n	8007afc <_strtod_l+0x384>
 8007aae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ab0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007ab4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ab8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007abc:	e6a0      	b.n	8007800 <_strtod_l+0x88>
 8007abe:	210a      	movs	r1, #10
 8007ac0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007ac4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ac8:	e7b9      	b.n	8007a3e <_strtod_l+0x2c6>
 8007aca:	2a6e      	cmp	r2, #110	; 0x6e
 8007acc:	e7db      	b.n	8007a86 <_strtod_l+0x30e>
 8007ace:	4990      	ldr	r1, [pc, #576]	; (8007d10 <_strtod_l+0x598>)
 8007ad0:	a817      	add	r0, sp, #92	; 0x5c
 8007ad2:	f001 fe1b 	bl	800970c <__match>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f43f aeb0 	beq.w	800783c <_strtod_l+0xc4>
 8007adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ade:	498d      	ldr	r1, [pc, #564]	; (8007d14 <_strtod_l+0x59c>)
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	a817      	add	r0, sp, #92	; 0x5c
 8007ae4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ae6:	f001 fe11 	bl	800970c <__match>
 8007aea:	b910      	cbnz	r0, 8007af2 <_strtod_l+0x37a>
 8007aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aee:	3301      	adds	r3, #1
 8007af0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007af2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007d24 <_strtod_l+0x5ac>
 8007af6:	f04f 0a00 	mov.w	sl, #0
 8007afa:	e681      	b.n	8007800 <_strtod_l+0x88>
 8007afc:	4886      	ldr	r0, [pc, #536]	; (8007d18 <_strtod_l+0x5a0>)
 8007afe:	f002 fdf7 	bl	800a6f0 <nan>
 8007b02:	ec5b ab10 	vmov	sl, fp, d0
 8007b06:	e67b      	b.n	8007800 <_strtod_l+0x88>
 8007b08:	9b05      	ldr	r3, [sp, #20]
 8007b0a:	9807      	ldr	r0, [sp, #28]
 8007b0c:	1af3      	subs	r3, r6, r3
 8007b0e:	2f00      	cmp	r7, #0
 8007b10:	bf08      	it	eq
 8007b12:	462f      	moveq	r7, r5
 8007b14:	2d10      	cmp	r5, #16
 8007b16:	9306      	str	r3, [sp, #24]
 8007b18:	46a8      	mov	r8, r5
 8007b1a:	bfa8      	it	ge
 8007b1c:	f04f 0810 	movge.w	r8, #16
 8007b20:	f7f8 fcf0 	bl	8000504 <__aeabi_ui2d>
 8007b24:	2d09      	cmp	r5, #9
 8007b26:	4682      	mov	sl, r0
 8007b28:	468b      	mov	fp, r1
 8007b2a:	dd13      	ble.n	8007b54 <_strtod_l+0x3dc>
 8007b2c:	4b7b      	ldr	r3, [pc, #492]	; (8007d1c <_strtod_l+0x5a4>)
 8007b2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b36:	f7f8 fd5f 	bl	80005f8 <__aeabi_dmul>
 8007b3a:	4682      	mov	sl, r0
 8007b3c:	4648      	mov	r0, r9
 8007b3e:	468b      	mov	fp, r1
 8007b40:	f7f8 fce0 	bl	8000504 <__aeabi_ui2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4650      	mov	r0, sl
 8007b4a:	4659      	mov	r1, fp
 8007b4c:	f7f8 fb9e 	bl	800028c <__adddf3>
 8007b50:	4682      	mov	sl, r0
 8007b52:	468b      	mov	fp, r1
 8007b54:	2d0f      	cmp	r5, #15
 8007b56:	dc38      	bgt.n	8007bca <_strtod_l+0x452>
 8007b58:	9b06      	ldr	r3, [sp, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f43f ae50 	beq.w	8007800 <_strtod_l+0x88>
 8007b60:	dd24      	ble.n	8007bac <_strtod_l+0x434>
 8007b62:	2b16      	cmp	r3, #22
 8007b64:	dc0b      	bgt.n	8007b7e <_strtod_l+0x406>
 8007b66:	496d      	ldr	r1, [pc, #436]	; (8007d1c <_strtod_l+0x5a4>)
 8007b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b70:	4652      	mov	r2, sl
 8007b72:	465b      	mov	r3, fp
 8007b74:	f7f8 fd40 	bl	80005f8 <__aeabi_dmul>
 8007b78:	4682      	mov	sl, r0
 8007b7a:	468b      	mov	fp, r1
 8007b7c:	e640      	b.n	8007800 <_strtod_l+0x88>
 8007b7e:	9a06      	ldr	r2, [sp, #24]
 8007b80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007b84:	4293      	cmp	r3, r2
 8007b86:	db20      	blt.n	8007bca <_strtod_l+0x452>
 8007b88:	4c64      	ldr	r4, [pc, #400]	; (8007d1c <_strtod_l+0x5a4>)
 8007b8a:	f1c5 050f 	rsb	r5, r5, #15
 8007b8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007b92:	4652      	mov	r2, sl
 8007b94:	465b      	mov	r3, fp
 8007b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b9a:	f7f8 fd2d 	bl	80005f8 <__aeabi_dmul>
 8007b9e:	9b06      	ldr	r3, [sp, #24]
 8007ba0:	1b5d      	subs	r5, r3, r5
 8007ba2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ba6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007baa:	e7e3      	b.n	8007b74 <_strtod_l+0x3fc>
 8007bac:	9b06      	ldr	r3, [sp, #24]
 8007bae:	3316      	adds	r3, #22
 8007bb0:	db0b      	blt.n	8007bca <_strtod_l+0x452>
 8007bb2:	9b05      	ldr	r3, [sp, #20]
 8007bb4:	1b9e      	subs	r6, r3, r6
 8007bb6:	4b59      	ldr	r3, [pc, #356]	; (8007d1c <_strtod_l+0x5a4>)
 8007bb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bc0:	4650      	mov	r0, sl
 8007bc2:	4659      	mov	r1, fp
 8007bc4:	f7f8 fe42 	bl	800084c <__aeabi_ddiv>
 8007bc8:	e7d6      	b.n	8007b78 <_strtod_l+0x400>
 8007bca:	9b06      	ldr	r3, [sp, #24]
 8007bcc:	eba5 0808 	sub.w	r8, r5, r8
 8007bd0:	4498      	add	r8, r3
 8007bd2:	f1b8 0f00 	cmp.w	r8, #0
 8007bd6:	dd74      	ble.n	8007cc2 <_strtod_l+0x54a>
 8007bd8:	f018 030f 	ands.w	r3, r8, #15
 8007bdc:	d00a      	beq.n	8007bf4 <_strtod_l+0x47c>
 8007bde:	494f      	ldr	r1, [pc, #316]	; (8007d1c <_strtod_l+0x5a4>)
 8007be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007be4:	4652      	mov	r2, sl
 8007be6:	465b      	mov	r3, fp
 8007be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bec:	f7f8 fd04 	bl	80005f8 <__aeabi_dmul>
 8007bf0:	4682      	mov	sl, r0
 8007bf2:	468b      	mov	fp, r1
 8007bf4:	f038 080f 	bics.w	r8, r8, #15
 8007bf8:	d04f      	beq.n	8007c9a <_strtod_l+0x522>
 8007bfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007bfe:	dd22      	ble.n	8007c46 <_strtod_l+0x4ce>
 8007c00:	2500      	movs	r5, #0
 8007c02:	462e      	mov	r6, r5
 8007c04:	9507      	str	r5, [sp, #28]
 8007c06:	9505      	str	r5, [sp, #20]
 8007c08:	2322      	movs	r3, #34	; 0x22
 8007c0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007d24 <_strtod_l+0x5ac>
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	f04f 0a00 	mov.w	sl, #0
 8007c14:	9b07      	ldr	r3, [sp, #28]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f43f adf2 	beq.w	8007800 <_strtod_l+0x88>
 8007c1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f001 fe90 	bl	8009944 <_Bfree>
 8007c24:	9905      	ldr	r1, [sp, #20]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f001 fe8c 	bl	8009944 <_Bfree>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f001 fe88 	bl	8009944 <_Bfree>
 8007c34:	9907      	ldr	r1, [sp, #28]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f001 fe84 	bl	8009944 <_Bfree>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f001 fe80 	bl	8009944 <_Bfree>
 8007c44:	e5dc      	b.n	8007800 <_strtod_l+0x88>
 8007c46:	4b36      	ldr	r3, [pc, #216]	; (8007d20 <_strtod_l+0x5a8>)
 8007c48:	9304      	str	r3, [sp, #16]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007c50:	4650      	mov	r0, sl
 8007c52:	4659      	mov	r1, fp
 8007c54:	4699      	mov	r9, r3
 8007c56:	f1b8 0f01 	cmp.w	r8, #1
 8007c5a:	dc21      	bgt.n	8007ca0 <_strtod_l+0x528>
 8007c5c:	b10b      	cbz	r3, 8007c62 <_strtod_l+0x4ea>
 8007c5e:	4682      	mov	sl, r0
 8007c60:	468b      	mov	fp, r1
 8007c62:	4b2f      	ldr	r3, [pc, #188]	; (8007d20 <_strtod_l+0x5a8>)
 8007c64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007c68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	465b      	mov	r3, fp
 8007c70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007c74:	f7f8 fcc0 	bl	80005f8 <__aeabi_dmul>
 8007c78:	4b2a      	ldr	r3, [pc, #168]	; (8007d24 <_strtod_l+0x5ac>)
 8007c7a:	460a      	mov	r2, r1
 8007c7c:	400b      	ands	r3, r1
 8007c7e:	492a      	ldr	r1, [pc, #168]	; (8007d28 <_strtod_l+0x5b0>)
 8007c80:	428b      	cmp	r3, r1
 8007c82:	4682      	mov	sl, r0
 8007c84:	d8bc      	bhi.n	8007c00 <_strtod_l+0x488>
 8007c86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c8a:	428b      	cmp	r3, r1
 8007c8c:	bf86      	itte	hi
 8007c8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007d2c <_strtod_l+0x5b4>
 8007c92:	f04f 3aff 	movhi.w	sl, #4294967295
 8007c96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	e084      	b.n	8007daa <_strtod_l+0x632>
 8007ca0:	f018 0f01 	tst.w	r8, #1
 8007ca4:	d005      	beq.n	8007cb2 <_strtod_l+0x53a>
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f7f8 fca4 	bl	80005f8 <__aeabi_dmul>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	3208      	adds	r2, #8
 8007cb6:	f109 0901 	add.w	r9, r9, #1
 8007cba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007cbe:	9204      	str	r2, [sp, #16]
 8007cc0:	e7c9      	b.n	8007c56 <_strtod_l+0x4de>
 8007cc2:	d0ea      	beq.n	8007c9a <_strtod_l+0x522>
 8007cc4:	f1c8 0800 	rsb	r8, r8, #0
 8007cc8:	f018 020f 	ands.w	r2, r8, #15
 8007ccc:	d00a      	beq.n	8007ce4 <_strtod_l+0x56c>
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <_strtod_l+0x5a4>)
 8007cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	4659      	mov	r1, fp
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7f8 fdb6 	bl	800084c <__aeabi_ddiv>
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	468b      	mov	fp, r1
 8007ce4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007ce8:	d0d7      	beq.n	8007c9a <_strtod_l+0x522>
 8007cea:	f1b8 0f1f 	cmp.w	r8, #31
 8007cee:	dd1f      	ble.n	8007d30 <_strtod_l+0x5b8>
 8007cf0:	2500      	movs	r5, #0
 8007cf2:	462e      	mov	r6, r5
 8007cf4:	9507      	str	r5, [sp, #28]
 8007cf6:	9505      	str	r5, [sp, #20]
 8007cf8:	2322      	movs	r3, #34	; 0x22
 8007cfa:	f04f 0a00 	mov.w	sl, #0
 8007cfe:	f04f 0b00 	mov.w	fp, #0
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	e786      	b.n	8007c14 <_strtod_l+0x49c>
 8007d06:	bf00      	nop
 8007d08:	0800b351 	.word	0x0800b351
 8007d0c:	0800b394 	.word	0x0800b394
 8007d10:	0800b349 	.word	0x0800b349
 8007d14:	0800b4d4 	.word	0x0800b4d4
 8007d18:	0800b780 	.word	0x0800b780
 8007d1c:	0800b660 	.word	0x0800b660
 8007d20:	0800b638 	.word	0x0800b638
 8007d24:	7ff00000 	.word	0x7ff00000
 8007d28:	7ca00000 	.word	0x7ca00000
 8007d2c:	7fefffff 	.word	0x7fefffff
 8007d30:	f018 0310 	ands.w	r3, r8, #16
 8007d34:	bf18      	it	ne
 8007d36:	236a      	movne	r3, #106	; 0x6a
 8007d38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80080e8 <_strtod_l+0x970>
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	4650      	mov	r0, sl
 8007d40:	4659      	mov	r1, fp
 8007d42:	2300      	movs	r3, #0
 8007d44:	f018 0f01 	tst.w	r8, #1
 8007d48:	d004      	beq.n	8007d54 <_strtod_l+0x5dc>
 8007d4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d4e:	f7f8 fc53 	bl	80005f8 <__aeabi_dmul>
 8007d52:	2301      	movs	r3, #1
 8007d54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007d58:	f109 0908 	add.w	r9, r9, #8
 8007d5c:	d1f2      	bne.n	8007d44 <_strtod_l+0x5cc>
 8007d5e:	b10b      	cbz	r3, 8007d64 <_strtod_l+0x5ec>
 8007d60:	4682      	mov	sl, r0
 8007d62:	468b      	mov	fp, r1
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	b1c3      	cbz	r3, 8007d9a <_strtod_l+0x622>
 8007d68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	4659      	mov	r1, fp
 8007d74:	dd11      	ble.n	8007d9a <_strtod_l+0x622>
 8007d76:	2b1f      	cmp	r3, #31
 8007d78:	f340 8124 	ble.w	8007fc4 <_strtod_l+0x84c>
 8007d7c:	2b34      	cmp	r3, #52	; 0x34
 8007d7e:	bfde      	ittt	le
 8007d80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007d84:	f04f 33ff 	movle.w	r3, #4294967295
 8007d88:	fa03 f202 	lslle.w	r2, r3, r2
 8007d8c:	f04f 0a00 	mov.w	sl, #0
 8007d90:	bfcc      	ite	gt
 8007d92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007d96:	ea02 0b01 	andle.w	fp, r2, r1
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4650      	mov	r0, sl
 8007da0:	4659      	mov	r1, fp
 8007da2:	f7f8 fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d1a2      	bne.n	8007cf0 <_strtod_l+0x578>
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	9908      	ldr	r1, [sp, #32]
 8007db0:	462b      	mov	r3, r5
 8007db2:	463a      	mov	r2, r7
 8007db4:	4620      	mov	r0, r4
 8007db6:	f001 fe2d 	bl	8009a14 <__s2b>
 8007dba:	9007      	str	r0, [sp, #28]
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f43f af1f 	beq.w	8007c00 <_strtod_l+0x488>
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	1b9e      	subs	r6, r3, r6
 8007dc6:	9b06      	ldr	r3, [sp, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfb4      	ite	lt
 8007dcc:	4633      	movlt	r3, r6
 8007dce:	2300      	movge	r3, #0
 8007dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8007dd2:	9b06      	ldr	r3, [sp, #24]
 8007dd4:	2500      	movs	r5, #0
 8007dd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007dda:	9312      	str	r3, [sp, #72]	; 0x48
 8007ddc:	462e      	mov	r6, r5
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	4620      	mov	r0, r4
 8007de2:	6859      	ldr	r1, [r3, #4]
 8007de4:	f001 fd6e 	bl	80098c4 <_Balloc>
 8007de8:	9005      	str	r0, [sp, #20]
 8007dea:	2800      	cmp	r0, #0
 8007dec:	f43f af0c 	beq.w	8007c08 <_strtod_l+0x490>
 8007df0:	9b07      	ldr	r3, [sp, #28]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	3202      	adds	r2, #2
 8007df6:	f103 010c 	add.w	r1, r3, #12
 8007dfa:	0092      	lsls	r2, r2, #2
 8007dfc:	300c      	adds	r0, #12
 8007dfe:	f001 fd53 	bl	80098a8 <memcpy>
 8007e02:	ec4b ab10 	vmov	d0, sl, fp
 8007e06:	aa1a      	add	r2, sp, #104	; 0x68
 8007e08:	a919      	add	r1, sp, #100	; 0x64
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f002 f948 	bl	800a0a0 <__d2b>
 8007e10:	ec4b ab18 	vmov	d8, sl, fp
 8007e14:	9018      	str	r0, [sp, #96]	; 0x60
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f43f aef6 	beq.w	8007c08 <_strtod_l+0x490>
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f001 fe92 	bl	8009b48 <__i2b>
 8007e24:	4606      	mov	r6, r0
 8007e26:	2800      	cmp	r0, #0
 8007e28:	f43f aeee 	beq.w	8007c08 <_strtod_l+0x490>
 8007e2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e2e:	9904      	ldr	r1, [sp, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bfab      	itete	ge
 8007e34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007e36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007e38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007e3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007e3e:	bfac      	ite	ge
 8007e40:	eb03 0902 	addge.w	r9, r3, r2
 8007e44:	1ad7      	sublt	r7, r2, r3
 8007e46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e48:	eba3 0801 	sub.w	r8, r3, r1
 8007e4c:	4490      	add	r8, r2
 8007e4e:	4ba1      	ldr	r3, [pc, #644]	; (80080d4 <_strtod_l+0x95c>)
 8007e50:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e54:	4598      	cmp	r8, r3
 8007e56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e5a:	f280 80c7 	bge.w	8007fec <_strtod_l+0x874>
 8007e5e:	eba3 0308 	sub.w	r3, r3, r8
 8007e62:	2b1f      	cmp	r3, #31
 8007e64:	eba2 0203 	sub.w	r2, r2, r3
 8007e68:	f04f 0101 	mov.w	r1, #1
 8007e6c:	f300 80b1 	bgt.w	8007fd2 <_strtod_l+0x85a>
 8007e70:	fa01 f303 	lsl.w	r3, r1, r3
 8007e74:	930d      	str	r3, [sp, #52]	; 0x34
 8007e76:	2300      	movs	r3, #0
 8007e78:	9308      	str	r3, [sp, #32]
 8007e7a:	eb09 0802 	add.w	r8, r9, r2
 8007e7e:	9b04      	ldr	r3, [sp, #16]
 8007e80:	45c1      	cmp	r9, r8
 8007e82:	4417      	add	r7, r2
 8007e84:	441f      	add	r7, r3
 8007e86:	464b      	mov	r3, r9
 8007e88:	bfa8      	it	ge
 8007e8a:	4643      	movge	r3, r8
 8007e8c:	42bb      	cmp	r3, r7
 8007e8e:	bfa8      	it	ge
 8007e90:	463b      	movge	r3, r7
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bfc2      	ittt	gt
 8007e96:	eba8 0803 	subgt.w	r8, r8, r3
 8007e9a:	1aff      	subgt	r7, r7, r3
 8007e9c:	eba9 0903 	subgt.w	r9, r9, r3
 8007ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dd17      	ble.n	8007ed6 <_strtod_l+0x75e>
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f001 ff0c 	bl	8009cc8 <__pow5mult>
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f43f aea8 	beq.w	8007c08 <_strtod_l+0x490>
 8007eb8:	4601      	mov	r1, r0
 8007eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f001 fe59 	bl	8009b74 <__multiply>
 8007ec2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f43f ae9f 	beq.w	8007c08 <_strtod_l+0x490>
 8007eca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f001 fd39 	bl	8009944 <_Bfree>
 8007ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed4:	9318      	str	r3, [sp, #96]	; 0x60
 8007ed6:	f1b8 0f00 	cmp.w	r8, #0
 8007eda:	f300 808c 	bgt.w	8007ff6 <_strtod_l+0x87e>
 8007ede:	9b06      	ldr	r3, [sp, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dd08      	ble.n	8007ef6 <_strtod_l+0x77e>
 8007ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ee6:	9905      	ldr	r1, [sp, #20]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f001 feed 	bl	8009cc8 <__pow5mult>
 8007eee:	9005      	str	r0, [sp, #20]
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f43f ae89 	beq.w	8007c08 <_strtod_l+0x490>
 8007ef6:	2f00      	cmp	r7, #0
 8007ef8:	dd08      	ble.n	8007f0c <_strtod_l+0x794>
 8007efa:	9905      	ldr	r1, [sp, #20]
 8007efc:	463a      	mov	r2, r7
 8007efe:	4620      	mov	r0, r4
 8007f00:	f001 ff3c 	bl	8009d7c <__lshift>
 8007f04:	9005      	str	r0, [sp, #20]
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f43f ae7e 	beq.w	8007c08 <_strtod_l+0x490>
 8007f0c:	f1b9 0f00 	cmp.w	r9, #0
 8007f10:	dd08      	ble.n	8007f24 <_strtod_l+0x7ac>
 8007f12:	4631      	mov	r1, r6
 8007f14:	464a      	mov	r2, r9
 8007f16:	4620      	mov	r0, r4
 8007f18:	f001 ff30 	bl	8009d7c <__lshift>
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f43f ae72 	beq.w	8007c08 <_strtod_l+0x490>
 8007f24:	9a05      	ldr	r2, [sp, #20]
 8007f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f001 ffb3 	bl	8009e94 <__mdiff>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	2800      	cmp	r0, #0
 8007f32:	f43f ae69 	beq.w	8007c08 <_strtod_l+0x490>
 8007f36:	68c3      	ldr	r3, [r0, #12]
 8007f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60c3      	str	r3, [r0, #12]
 8007f3e:	4631      	mov	r1, r6
 8007f40:	f001 ff8c 	bl	8009e5c <__mcmp>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	da60      	bge.n	800800a <_strtod_l+0x892>
 8007f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f4a:	ea53 030a 	orrs.w	r3, r3, sl
 8007f4e:	f040 8082 	bne.w	8008056 <_strtod_l+0x8de>
 8007f52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d17d      	bne.n	8008056 <_strtod_l+0x8de>
 8007f5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f5e:	0d1b      	lsrs	r3, r3, #20
 8007f60:	051b      	lsls	r3, r3, #20
 8007f62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f66:	d976      	bls.n	8008056 <_strtod_l+0x8de>
 8007f68:	696b      	ldr	r3, [r5, #20]
 8007f6a:	b913      	cbnz	r3, 8007f72 <_strtod_l+0x7fa>
 8007f6c:	692b      	ldr	r3, [r5, #16]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	dd71      	ble.n	8008056 <_strtod_l+0x8de>
 8007f72:	4629      	mov	r1, r5
 8007f74:	2201      	movs	r2, #1
 8007f76:	4620      	mov	r0, r4
 8007f78:	f001 ff00 	bl	8009d7c <__lshift>
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4605      	mov	r5, r0
 8007f80:	f001 ff6c 	bl	8009e5c <__mcmp>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	dd66      	ble.n	8008056 <_strtod_l+0x8de>
 8007f88:	9904      	ldr	r1, [sp, #16]
 8007f8a:	4a53      	ldr	r2, [pc, #332]	; (80080d8 <_strtod_l+0x960>)
 8007f8c:	465b      	mov	r3, fp
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	f000 8081 	beq.w	8008096 <_strtod_l+0x91e>
 8007f94:	ea02 010b 	and.w	r1, r2, fp
 8007f98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f9c:	dc7b      	bgt.n	8008096 <_strtod_l+0x91e>
 8007f9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007fa2:	f77f aea9 	ble.w	8007cf8 <_strtod_l+0x580>
 8007fa6:	4b4d      	ldr	r3, [pc, #308]	; (80080dc <_strtod_l+0x964>)
 8007fa8:	4650      	mov	r0, sl
 8007faa:	4659      	mov	r1, fp
 8007fac:	2200      	movs	r2, #0
 8007fae:	f7f8 fb23 	bl	80005f8 <__aeabi_dmul>
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4303      	orrs	r3, r0
 8007fb6:	bf08      	it	eq
 8007fb8:	2322      	moveq	r3, #34	; 0x22
 8007fba:	4682      	mov	sl, r0
 8007fbc:	468b      	mov	fp, r1
 8007fbe:	bf08      	it	eq
 8007fc0:	6023      	streq	r3, [r4, #0]
 8007fc2:	e62b      	b.n	8007c1c <_strtod_l+0x4a4>
 8007fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fcc:	ea03 0a0a 	and.w	sl, r3, sl
 8007fd0:	e6e3      	b.n	8007d9a <_strtod_l+0x622>
 8007fd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007fd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007fda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007fde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007fe2:	fa01 f308 	lsl.w	r3, r1, r8
 8007fe6:	9308      	str	r3, [sp, #32]
 8007fe8:	910d      	str	r1, [sp, #52]	; 0x34
 8007fea:	e746      	b.n	8007e7a <_strtod_l+0x702>
 8007fec:	2300      	movs	r3, #0
 8007fee:	9308      	str	r3, [sp, #32]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ff4:	e741      	b.n	8007e7a <_strtod_l+0x702>
 8007ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f001 febe 	bl	8009d7c <__lshift>
 8008000:	9018      	str	r0, [sp, #96]	; 0x60
 8008002:	2800      	cmp	r0, #0
 8008004:	f47f af6b 	bne.w	8007ede <_strtod_l+0x766>
 8008008:	e5fe      	b.n	8007c08 <_strtod_l+0x490>
 800800a:	465f      	mov	r7, fp
 800800c:	d16e      	bne.n	80080ec <_strtod_l+0x974>
 800800e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008014:	b342      	cbz	r2, 8008068 <_strtod_l+0x8f0>
 8008016:	4a32      	ldr	r2, [pc, #200]	; (80080e0 <_strtod_l+0x968>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d128      	bne.n	800806e <_strtod_l+0x8f6>
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	4651      	mov	r1, sl
 8008020:	b1eb      	cbz	r3, 800805e <_strtod_l+0x8e6>
 8008022:	4b2d      	ldr	r3, [pc, #180]	; (80080d8 <_strtod_l+0x960>)
 8008024:	403b      	ands	r3, r7
 8008026:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	d819      	bhi.n	8008064 <_strtod_l+0x8ec>
 8008030:	0d1b      	lsrs	r3, r3, #20
 8008032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008036:	fa02 f303 	lsl.w	r3, r2, r3
 800803a:	4299      	cmp	r1, r3
 800803c:	d117      	bne.n	800806e <_strtod_l+0x8f6>
 800803e:	4b29      	ldr	r3, [pc, #164]	; (80080e4 <_strtod_l+0x96c>)
 8008040:	429f      	cmp	r7, r3
 8008042:	d102      	bne.n	800804a <_strtod_l+0x8d2>
 8008044:	3101      	adds	r1, #1
 8008046:	f43f addf 	beq.w	8007c08 <_strtod_l+0x490>
 800804a:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <_strtod_l+0x960>)
 800804c:	403b      	ands	r3, r7
 800804e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008052:	f04f 0a00 	mov.w	sl, #0
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1a4      	bne.n	8007fa6 <_strtod_l+0x82e>
 800805c:	e5de      	b.n	8007c1c <_strtod_l+0x4a4>
 800805e:	f04f 33ff 	mov.w	r3, #4294967295
 8008062:	e7ea      	b.n	800803a <_strtod_l+0x8c2>
 8008064:	4613      	mov	r3, r2
 8008066:	e7e8      	b.n	800803a <_strtod_l+0x8c2>
 8008068:	ea53 030a 	orrs.w	r3, r3, sl
 800806c:	d08c      	beq.n	8007f88 <_strtod_l+0x810>
 800806e:	9b08      	ldr	r3, [sp, #32]
 8008070:	b1db      	cbz	r3, 80080aa <_strtod_l+0x932>
 8008072:	423b      	tst	r3, r7
 8008074:	d0ef      	beq.n	8008056 <_strtod_l+0x8de>
 8008076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008078:	9a04      	ldr	r2, [sp, #16]
 800807a:	4650      	mov	r0, sl
 800807c:	4659      	mov	r1, fp
 800807e:	b1c3      	cbz	r3, 80080b2 <_strtod_l+0x93a>
 8008080:	f7ff fb5e 	bl	8007740 <sulp>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	ec51 0b18 	vmov	r0, r1, d8
 800808c:	f7f8 f8fe 	bl	800028c <__adddf3>
 8008090:	4682      	mov	sl, r0
 8008092:	468b      	mov	fp, r1
 8008094:	e7df      	b.n	8008056 <_strtod_l+0x8de>
 8008096:	4013      	ands	r3, r2
 8008098:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800809c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080a4:	f04f 3aff 	mov.w	sl, #4294967295
 80080a8:	e7d5      	b.n	8008056 <_strtod_l+0x8de>
 80080aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ac:	ea13 0f0a 	tst.w	r3, sl
 80080b0:	e7e0      	b.n	8008074 <_strtod_l+0x8fc>
 80080b2:	f7ff fb45 	bl	8007740 <sulp>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	ec51 0b18 	vmov	r0, r1, d8
 80080be:	f7f8 f8e3 	bl	8000288 <__aeabi_dsub>
 80080c2:	2200      	movs	r2, #0
 80080c4:	2300      	movs	r3, #0
 80080c6:	4682      	mov	sl, r0
 80080c8:	468b      	mov	fp, r1
 80080ca:	f7f8 fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d0c1      	beq.n	8008056 <_strtod_l+0x8de>
 80080d2:	e611      	b.n	8007cf8 <_strtod_l+0x580>
 80080d4:	fffffc02 	.word	0xfffffc02
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	39500000 	.word	0x39500000
 80080e0:	000fffff 	.word	0x000fffff
 80080e4:	7fefffff 	.word	0x7fefffff
 80080e8:	0800b3a8 	.word	0x0800b3a8
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	f002 f832 	bl	800a158 <__ratio>
 80080f4:	ec59 8b10 	vmov	r8, r9, d0
 80080f8:	ee10 0a10 	vmov	r0, s0
 80080fc:	2200      	movs	r2, #0
 80080fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008102:	4649      	mov	r1, r9
 8008104:	f7f8 fcf4 	bl	8000af0 <__aeabi_dcmple>
 8008108:	2800      	cmp	r0, #0
 800810a:	d07a      	beq.n	8008202 <_strtod_l+0xa8a>
 800810c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d04a      	beq.n	80081a8 <_strtod_l+0xa30>
 8008112:	4b95      	ldr	r3, [pc, #596]	; (8008368 <_strtod_l+0xbf0>)
 8008114:	2200      	movs	r2, #0
 8008116:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800811a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008368 <_strtod_l+0xbf0>
 800811e:	f04f 0800 	mov.w	r8, #0
 8008122:	4b92      	ldr	r3, [pc, #584]	; (800836c <_strtod_l+0xbf4>)
 8008124:	403b      	ands	r3, r7
 8008126:	930d      	str	r3, [sp, #52]	; 0x34
 8008128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800812a:	4b91      	ldr	r3, [pc, #580]	; (8008370 <_strtod_l+0xbf8>)
 800812c:	429a      	cmp	r2, r3
 800812e:	f040 80b0 	bne.w	8008292 <_strtod_l+0xb1a>
 8008132:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008136:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800813a:	ec4b ab10 	vmov	d0, sl, fp
 800813e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008142:	f001 ff31 	bl	8009fa8 <__ulp>
 8008146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800814a:	ec53 2b10 	vmov	r2, r3, d0
 800814e:	f7f8 fa53 	bl	80005f8 <__aeabi_dmul>
 8008152:	4652      	mov	r2, sl
 8008154:	465b      	mov	r3, fp
 8008156:	f7f8 f899 	bl	800028c <__adddf3>
 800815a:	460b      	mov	r3, r1
 800815c:	4983      	ldr	r1, [pc, #524]	; (800836c <_strtod_l+0xbf4>)
 800815e:	4a85      	ldr	r2, [pc, #532]	; (8008374 <_strtod_l+0xbfc>)
 8008160:	4019      	ands	r1, r3
 8008162:	4291      	cmp	r1, r2
 8008164:	4682      	mov	sl, r0
 8008166:	d960      	bls.n	800822a <_strtod_l+0xab2>
 8008168:	ee18 3a90 	vmov	r3, s17
 800816c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008170:	4293      	cmp	r3, r2
 8008172:	d104      	bne.n	800817e <_strtod_l+0xa06>
 8008174:	ee18 3a10 	vmov	r3, s16
 8008178:	3301      	adds	r3, #1
 800817a:	f43f ad45 	beq.w	8007c08 <_strtod_l+0x490>
 800817e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008380 <_strtod_l+0xc08>
 8008182:	f04f 3aff 	mov.w	sl, #4294967295
 8008186:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008188:	4620      	mov	r0, r4
 800818a:	f001 fbdb 	bl	8009944 <_Bfree>
 800818e:	9905      	ldr	r1, [sp, #20]
 8008190:	4620      	mov	r0, r4
 8008192:	f001 fbd7 	bl	8009944 <_Bfree>
 8008196:	4631      	mov	r1, r6
 8008198:	4620      	mov	r0, r4
 800819a:	f001 fbd3 	bl	8009944 <_Bfree>
 800819e:	4629      	mov	r1, r5
 80081a0:	4620      	mov	r0, r4
 80081a2:	f001 fbcf 	bl	8009944 <_Bfree>
 80081a6:	e61a      	b.n	8007dde <_strtod_l+0x666>
 80081a8:	f1ba 0f00 	cmp.w	sl, #0
 80081ac:	d11b      	bne.n	80081e6 <_strtod_l+0xa6e>
 80081ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081b2:	b9f3      	cbnz	r3, 80081f2 <_strtod_l+0xa7a>
 80081b4:	4b6c      	ldr	r3, [pc, #432]	; (8008368 <_strtod_l+0xbf0>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	4640      	mov	r0, r8
 80081ba:	4649      	mov	r1, r9
 80081bc:	f7f8 fc8e 	bl	8000adc <__aeabi_dcmplt>
 80081c0:	b9d0      	cbnz	r0, 80081f8 <_strtod_l+0xa80>
 80081c2:	4640      	mov	r0, r8
 80081c4:	4649      	mov	r1, r9
 80081c6:	4b6c      	ldr	r3, [pc, #432]	; (8008378 <_strtod_l+0xc00>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	f7f8 fa15 	bl	80005f8 <__aeabi_dmul>
 80081ce:	4680      	mov	r8, r0
 80081d0:	4689      	mov	r9, r1
 80081d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80081d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80081da:	9315      	str	r3, [sp, #84]	; 0x54
 80081dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80081e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081e4:	e79d      	b.n	8008122 <_strtod_l+0x9aa>
 80081e6:	f1ba 0f01 	cmp.w	sl, #1
 80081ea:	d102      	bne.n	80081f2 <_strtod_l+0xa7a>
 80081ec:	2f00      	cmp	r7, #0
 80081ee:	f43f ad83 	beq.w	8007cf8 <_strtod_l+0x580>
 80081f2:	4b62      	ldr	r3, [pc, #392]	; (800837c <_strtod_l+0xc04>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	e78e      	b.n	8008116 <_strtod_l+0x99e>
 80081f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008378 <_strtod_l+0xc00>
 80081fc:	f04f 0800 	mov.w	r8, #0
 8008200:	e7e7      	b.n	80081d2 <_strtod_l+0xa5a>
 8008202:	4b5d      	ldr	r3, [pc, #372]	; (8008378 <_strtod_l+0xc00>)
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	2200      	movs	r2, #0
 800820a:	f7f8 f9f5 	bl	80005f8 <__aeabi_dmul>
 800820e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008210:	4680      	mov	r8, r0
 8008212:	4689      	mov	r9, r1
 8008214:	b933      	cbnz	r3, 8008224 <_strtod_l+0xaac>
 8008216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800821a:	900e      	str	r0, [sp, #56]	; 0x38
 800821c:	930f      	str	r3, [sp, #60]	; 0x3c
 800821e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008222:	e7dd      	b.n	80081e0 <_strtod_l+0xa68>
 8008224:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008228:	e7f9      	b.n	800821e <_strtod_l+0xaa6>
 800822a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1a8      	bne.n	8008186 <_strtod_l+0xa0e>
 8008234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800823a:	0d1b      	lsrs	r3, r3, #20
 800823c:	051b      	lsls	r3, r3, #20
 800823e:	429a      	cmp	r2, r3
 8008240:	d1a1      	bne.n	8008186 <_strtod_l+0xa0e>
 8008242:	4640      	mov	r0, r8
 8008244:	4649      	mov	r1, r9
 8008246:	f7f8 fd37 	bl	8000cb8 <__aeabi_d2lz>
 800824a:	f7f8 f9a7 	bl	800059c <__aeabi_l2d>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4640      	mov	r0, r8
 8008254:	4649      	mov	r1, r9
 8008256:	f7f8 f817 	bl	8000288 <__aeabi_dsub>
 800825a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800825c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008260:	ea43 030a 	orr.w	r3, r3, sl
 8008264:	4313      	orrs	r3, r2
 8008266:	4680      	mov	r8, r0
 8008268:	4689      	mov	r9, r1
 800826a:	d055      	beq.n	8008318 <_strtod_l+0xba0>
 800826c:	a336      	add	r3, pc, #216	; (adr r3, 8008348 <_strtod_l+0xbd0>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f7f8 fc33 	bl	8000adc <__aeabi_dcmplt>
 8008276:	2800      	cmp	r0, #0
 8008278:	f47f acd0 	bne.w	8007c1c <_strtod_l+0x4a4>
 800827c:	a334      	add	r3, pc, #208	; (adr r3, 8008350 <_strtod_l+0xbd8>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f8 fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800828a:	2800      	cmp	r0, #0
 800828c:	f43f af7b 	beq.w	8008186 <_strtod_l+0xa0e>
 8008290:	e4c4      	b.n	8007c1c <_strtod_l+0x4a4>
 8008292:	9b04      	ldr	r3, [sp, #16]
 8008294:	b333      	cbz	r3, 80082e4 <_strtod_l+0xb6c>
 8008296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008298:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800829c:	d822      	bhi.n	80082e4 <_strtod_l+0xb6c>
 800829e:	a32e      	add	r3, pc, #184	; (adr r3, 8008358 <_strtod_l+0xbe0>)
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	f7f8 fc22 	bl	8000af0 <__aeabi_dcmple>
 80082ac:	b1a0      	cbz	r0, 80082d8 <_strtod_l+0xb60>
 80082ae:	4649      	mov	r1, r9
 80082b0:	4640      	mov	r0, r8
 80082b2:	f7f8 fc79 	bl	8000ba8 <__aeabi_d2uiz>
 80082b6:	2801      	cmp	r0, #1
 80082b8:	bf38      	it	cc
 80082ba:	2001      	movcc	r0, #1
 80082bc:	f7f8 f922 	bl	8000504 <__aeabi_ui2d>
 80082c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c2:	4680      	mov	r8, r0
 80082c4:	4689      	mov	r9, r1
 80082c6:	bb23      	cbnz	r3, 8008312 <_strtod_l+0xb9a>
 80082c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082cc:	9010      	str	r0, [sp, #64]	; 0x40
 80082ce:	9311      	str	r3, [sp, #68]	; 0x44
 80082d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80082d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	9309      	str	r3, [sp, #36]	; 0x24
 80082e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082e8:	eeb0 0a48 	vmov.f32	s0, s16
 80082ec:	eef0 0a68 	vmov.f32	s1, s17
 80082f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082f4:	f001 fe58 	bl	8009fa8 <__ulp>
 80082f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082fc:	ec53 2b10 	vmov	r2, r3, d0
 8008300:	f7f8 f97a 	bl	80005f8 <__aeabi_dmul>
 8008304:	ec53 2b18 	vmov	r2, r3, d8
 8008308:	f7f7 ffc0 	bl	800028c <__adddf3>
 800830c:	4682      	mov	sl, r0
 800830e:	468b      	mov	fp, r1
 8008310:	e78d      	b.n	800822e <_strtod_l+0xab6>
 8008312:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008316:	e7db      	b.n	80082d0 <_strtod_l+0xb58>
 8008318:	a311      	add	r3, pc, #68	; (adr r3, 8008360 <_strtod_l+0xbe8>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f8 fbdd 	bl	8000adc <__aeabi_dcmplt>
 8008322:	e7b2      	b.n	800828a <_strtod_l+0xb12>
 8008324:	2300      	movs	r3, #0
 8008326:	930a      	str	r3, [sp, #40]	; 0x28
 8008328:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800832a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	f7ff ba6b 	b.w	8007808 <_strtod_l+0x90>
 8008332:	2a65      	cmp	r2, #101	; 0x65
 8008334:	f43f ab5f 	beq.w	80079f6 <_strtod_l+0x27e>
 8008338:	2a45      	cmp	r2, #69	; 0x45
 800833a:	f43f ab5c 	beq.w	80079f6 <_strtod_l+0x27e>
 800833e:	2301      	movs	r3, #1
 8008340:	f7ff bb94 	b.w	8007a6c <_strtod_l+0x2f4>
 8008344:	f3af 8000 	nop.w
 8008348:	94a03595 	.word	0x94a03595
 800834c:	3fdfffff 	.word	0x3fdfffff
 8008350:	35afe535 	.word	0x35afe535
 8008354:	3fe00000 	.word	0x3fe00000
 8008358:	ffc00000 	.word	0xffc00000
 800835c:	41dfffff 	.word	0x41dfffff
 8008360:	94a03595 	.word	0x94a03595
 8008364:	3fcfffff 	.word	0x3fcfffff
 8008368:	3ff00000 	.word	0x3ff00000
 800836c:	7ff00000 	.word	0x7ff00000
 8008370:	7fe00000 	.word	0x7fe00000
 8008374:	7c9fffff 	.word	0x7c9fffff
 8008378:	3fe00000 	.word	0x3fe00000
 800837c:	bff00000 	.word	0xbff00000
 8008380:	7fefffff 	.word	0x7fefffff

08008384 <_strtod_r>:
 8008384:	4b01      	ldr	r3, [pc, #4]	; (800838c <_strtod_r+0x8>)
 8008386:	f7ff b9f7 	b.w	8007778 <_strtod_l>
 800838a:	bf00      	nop
 800838c:	20000074 	.word	0x20000074

08008390 <_strtol_l.constprop.0>:
 8008390:	2b01      	cmp	r3, #1
 8008392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008396:	d001      	beq.n	800839c <_strtol_l.constprop.0+0xc>
 8008398:	2b24      	cmp	r3, #36	; 0x24
 800839a:	d906      	bls.n	80083aa <_strtol_l.constprop.0+0x1a>
 800839c:	f7fe fafe 	bl	800699c <__errno>
 80083a0:	2316      	movs	r3, #22
 80083a2:	6003      	str	r3, [r0, #0]
 80083a4:	2000      	movs	r0, #0
 80083a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008490 <_strtol_l.constprop.0+0x100>
 80083ae:	460d      	mov	r5, r1
 80083b0:	462e      	mov	r6, r5
 80083b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80083ba:	f017 0708 	ands.w	r7, r7, #8
 80083be:	d1f7      	bne.n	80083b0 <_strtol_l.constprop.0+0x20>
 80083c0:	2c2d      	cmp	r4, #45	; 0x2d
 80083c2:	d132      	bne.n	800842a <_strtol_l.constprop.0+0x9a>
 80083c4:	782c      	ldrb	r4, [r5, #0]
 80083c6:	2701      	movs	r7, #1
 80083c8:	1cb5      	adds	r5, r6, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d05b      	beq.n	8008486 <_strtol_l.constprop.0+0xf6>
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d109      	bne.n	80083e6 <_strtol_l.constprop.0+0x56>
 80083d2:	2c30      	cmp	r4, #48	; 0x30
 80083d4:	d107      	bne.n	80083e6 <_strtol_l.constprop.0+0x56>
 80083d6:	782c      	ldrb	r4, [r5, #0]
 80083d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80083dc:	2c58      	cmp	r4, #88	; 0x58
 80083de:	d14d      	bne.n	800847c <_strtol_l.constprop.0+0xec>
 80083e0:	786c      	ldrb	r4, [r5, #1]
 80083e2:	2310      	movs	r3, #16
 80083e4:	3502      	adds	r5, #2
 80083e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80083ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80083ee:	f04f 0c00 	mov.w	ip, #0
 80083f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80083f6:	4666      	mov	r6, ip
 80083f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80083fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008400:	f1be 0f09 	cmp.w	lr, #9
 8008404:	d816      	bhi.n	8008434 <_strtol_l.constprop.0+0xa4>
 8008406:	4674      	mov	r4, lr
 8008408:	42a3      	cmp	r3, r4
 800840a:	dd24      	ble.n	8008456 <_strtol_l.constprop.0+0xc6>
 800840c:	f1bc 0f00 	cmp.w	ip, #0
 8008410:	db1e      	blt.n	8008450 <_strtol_l.constprop.0+0xc0>
 8008412:	45b1      	cmp	r9, r6
 8008414:	d31c      	bcc.n	8008450 <_strtol_l.constprop.0+0xc0>
 8008416:	d101      	bne.n	800841c <_strtol_l.constprop.0+0x8c>
 8008418:	45a2      	cmp	sl, r4
 800841a:	db19      	blt.n	8008450 <_strtol_l.constprop.0+0xc0>
 800841c:	fb06 4603 	mla	r6, r6, r3, r4
 8008420:	f04f 0c01 	mov.w	ip, #1
 8008424:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008428:	e7e8      	b.n	80083fc <_strtol_l.constprop.0+0x6c>
 800842a:	2c2b      	cmp	r4, #43	; 0x2b
 800842c:	bf04      	itt	eq
 800842e:	782c      	ldrbeq	r4, [r5, #0]
 8008430:	1cb5      	addeq	r5, r6, #2
 8008432:	e7ca      	b.n	80083ca <_strtol_l.constprop.0+0x3a>
 8008434:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008438:	f1be 0f19 	cmp.w	lr, #25
 800843c:	d801      	bhi.n	8008442 <_strtol_l.constprop.0+0xb2>
 800843e:	3c37      	subs	r4, #55	; 0x37
 8008440:	e7e2      	b.n	8008408 <_strtol_l.constprop.0+0x78>
 8008442:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008446:	f1be 0f19 	cmp.w	lr, #25
 800844a:	d804      	bhi.n	8008456 <_strtol_l.constprop.0+0xc6>
 800844c:	3c57      	subs	r4, #87	; 0x57
 800844e:	e7db      	b.n	8008408 <_strtol_l.constprop.0+0x78>
 8008450:	f04f 3cff 	mov.w	ip, #4294967295
 8008454:	e7e6      	b.n	8008424 <_strtol_l.constprop.0+0x94>
 8008456:	f1bc 0f00 	cmp.w	ip, #0
 800845a:	da05      	bge.n	8008468 <_strtol_l.constprop.0+0xd8>
 800845c:	2322      	movs	r3, #34	; 0x22
 800845e:	6003      	str	r3, [r0, #0]
 8008460:	4646      	mov	r6, r8
 8008462:	b942      	cbnz	r2, 8008476 <_strtol_l.constprop.0+0xe6>
 8008464:	4630      	mov	r0, r6
 8008466:	e79e      	b.n	80083a6 <_strtol_l.constprop.0+0x16>
 8008468:	b107      	cbz	r7, 800846c <_strtol_l.constprop.0+0xdc>
 800846a:	4276      	negs	r6, r6
 800846c:	2a00      	cmp	r2, #0
 800846e:	d0f9      	beq.n	8008464 <_strtol_l.constprop.0+0xd4>
 8008470:	f1bc 0f00 	cmp.w	ip, #0
 8008474:	d000      	beq.n	8008478 <_strtol_l.constprop.0+0xe8>
 8008476:	1e69      	subs	r1, r5, #1
 8008478:	6011      	str	r1, [r2, #0]
 800847a:	e7f3      	b.n	8008464 <_strtol_l.constprop.0+0xd4>
 800847c:	2430      	movs	r4, #48	; 0x30
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1b1      	bne.n	80083e6 <_strtol_l.constprop.0+0x56>
 8008482:	2308      	movs	r3, #8
 8008484:	e7af      	b.n	80083e6 <_strtol_l.constprop.0+0x56>
 8008486:	2c30      	cmp	r4, #48	; 0x30
 8008488:	d0a5      	beq.n	80083d6 <_strtol_l.constprop.0+0x46>
 800848a:	230a      	movs	r3, #10
 800848c:	e7ab      	b.n	80083e6 <_strtol_l.constprop.0+0x56>
 800848e:	bf00      	nop
 8008490:	0800b3d1 	.word	0x0800b3d1

08008494 <_strtol_r>:
 8008494:	f7ff bf7c 	b.w	8008390 <_strtol_l.constprop.0>

08008498 <quorem>:
 8008498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	6903      	ldr	r3, [r0, #16]
 800849e:	690c      	ldr	r4, [r1, #16]
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	4607      	mov	r7, r0
 80084a4:	f2c0 8081 	blt.w	80085aa <quorem+0x112>
 80084a8:	3c01      	subs	r4, #1
 80084aa:	f101 0814 	add.w	r8, r1, #20
 80084ae:	f100 0514 	add.w	r5, r0, #20
 80084b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c0:	3301      	adds	r3, #1
 80084c2:	429a      	cmp	r2, r3
 80084c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80084d0:	d331      	bcc.n	8008536 <quorem+0x9e>
 80084d2:	f04f 0e00 	mov.w	lr, #0
 80084d6:	4640      	mov	r0, r8
 80084d8:	46ac      	mov	ip, r5
 80084da:	46f2      	mov	sl, lr
 80084dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80084e0:	b293      	uxth	r3, r2
 80084e2:	fb06 e303 	mla	r3, r6, r3, lr
 80084e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	ebaa 0303 	sub.w	r3, sl, r3
 80084f0:	f8dc a000 	ldr.w	sl, [ip]
 80084f4:	0c12      	lsrs	r2, r2, #16
 80084f6:	fa13 f38a 	uxtah	r3, r3, sl
 80084fa:	fb06 e202 	mla	r2, r6, r2, lr
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	9b00      	ldr	r3, [sp, #0]
 8008502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008506:	b292      	uxth	r2, r2
 8008508:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800850c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008510:	f8bd 3000 	ldrh.w	r3, [sp]
 8008514:	4581      	cmp	r9, r0
 8008516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800851a:	f84c 3b04 	str.w	r3, [ip], #4
 800851e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008522:	d2db      	bcs.n	80084dc <quorem+0x44>
 8008524:	f855 300b 	ldr.w	r3, [r5, fp]
 8008528:	b92b      	cbnz	r3, 8008536 <quorem+0x9e>
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	3b04      	subs	r3, #4
 800852e:	429d      	cmp	r5, r3
 8008530:	461a      	mov	r2, r3
 8008532:	d32e      	bcc.n	8008592 <quorem+0xfa>
 8008534:	613c      	str	r4, [r7, #16]
 8008536:	4638      	mov	r0, r7
 8008538:	f001 fc90 	bl	8009e5c <__mcmp>
 800853c:	2800      	cmp	r0, #0
 800853e:	db24      	blt.n	800858a <quorem+0xf2>
 8008540:	3601      	adds	r6, #1
 8008542:	4628      	mov	r0, r5
 8008544:	f04f 0c00 	mov.w	ip, #0
 8008548:	f858 2b04 	ldr.w	r2, [r8], #4
 800854c:	f8d0 e000 	ldr.w	lr, [r0]
 8008550:	b293      	uxth	r3, r2
 8008552:	ebac 0303 	sub.w	r3, ip, r3
 8008556:	0c12      	lsrs	r2, r2, #16
 8008558:	fa13 f38e 	uxtah	r3, r3, lr
 800855c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008564:	b29b      	uxth	r3, r3
 8008566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800856a:	45c1      	cmp	r9, r8
 800856c:	f840 3b04 	str.w	r3, [r0], #4
 8008570:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008574:	d2e8      	bcs.n	8008548 <quorem+0xb0>
 8008576:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800857a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800857e:	b922      	cbnz	r2, 800858a <quorem+0xf2>
 8008580:	3b04      	subs	r3, #4
 8008582:	429d      	cmp	r5, r3
 8008584:	461a      	mov	r2, r3
 8008586:	d30a      	bcc.n	800859e <quorem+0x106>
 8008588:	613c      	str	r4, [r7, #16]
 800858a:	4630      	mov	r0, r6
 800858c:	b003      	add	sp, #12
 800858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008592:	6812      	ldr	r2, [r2, #0]
 8008594:	3b04      	subs	r3, #4
 8008596:	2a00      	cmp	r2, #0
 8008598:	d1cc      	bne.n	8008534 <quorem+0x9c>
 800859a:	3c01      	subs	r4, #1
 800859c:	e7c7      	b.n	800852e <quorem+0x96>
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	3b04      	subs	r3, #4
 80085a2:	2a00      	cmp	r2, #0
 80085a4:	d1f0      	bne.n	8008588 <quorem+0xf0>
 80085a6:	3c01      	subs	r4, #1
 80085a8:	e7eb      	b.n	8008582 <quorem+0xea>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e7ee      	b.n	800858c <quorem+0xf4>
	...

080085b0 <_dtoa_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	ed2d 8b04 	vpush	{d8-d9}
 80085b8:	ec57 6b10 	vmov	r6, r7, d0
 80085bc:	b093      	sub	sp, #76	; 0x4c
 80085be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085c4:	9106      	str	r1, [sp, #24]
 80085c6:	ee10 aa10 	vmov	sl, s0
 80085ca:	4604      	mov	r4, r0
 80085cc:	9209      	str	r2, [sp, #36]	; 0x24
 80085ce:	930c      	str	r3, [sp, #48]	; 0x30
 80085d0:	46bb      	mov	fp, r7
 80085d2:	b975      	cbnz	r5, 80085f2 <_dtoa_r+0x42>
 80085d4:	2010      	movs	r0, #16
 80085d6:	f001 f94d 	bl	8009874 <malloc>
 80085da:	4602      	mov	r2, r0
 80085dc:	6260      	str	r0, [r4, #36]	; 0x24
 80085de:	b920      	cbnz	r0, 80085ea <_dtoa_r+0x3a>
 80085e0:	4ba7      	ldr	r3, [pc, #668]	; (8008880 <_dtoa_r+0x2d0>)
 80085e2:	21ea      	movs	r1, #234	; 0xea
 80085e4:	48a7      	ldr	r0, [pc, #668]	; (8008884 <_dtoa_r+0x2d4>)
 80085e6:	f002 f8bd 	bl	800a764 <__assert_func>
 80085ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085ee:	6005      	str	r5, [r0, #0]
 80085f0:	60c5      	str	r5, [r0, #12]
 80085f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f4:	6819      	ldr	r1, [r3, #0]
 80085f6:	b151      	cbz	r1, 800860e <_dtoa_r+0x5e>
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	604a      	str	r2, [r1, #4]
 80085fc:	2301      	movs	r3, #1
 80085fe:	4093      	lsls	r3, r2
 8008600:	608b      	str	r3, [r1, #8]
 8008602:	4620      	mov	r0, r4
 8008604:	f001 f99e 	bl	8009944 <_Bfree>
 8008608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	1e3b      	subs	r3, r7, #0
 8008610:	bfaa      	itet	ge
 8008612:	2300      	movge	r3, #0
 8008614:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008618:	f8c8 3000 	strge.w	r3, [r8]
 800861c:	4b9a      	ldr	r3, [pc, #616]	; (8008888 <_dtoa_r+0x2d8>)
 800861e:	bfbc      	itt	lt
 8008620:	2201      	movlt	r2, #1
 8008622:	f8c8 2000 	strlt.w	r2, [r8]
 8008626:	ea33 030b 	bics.w	r3, r3, fp
 800862a:	d11b      	bne.n	8008664 <_dtoa_r+0xb4>
 800862c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800862e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008638:	4333      	orrs	r3, r6
 800863a:	f000 8592 	beq.w	8009162 <_dtoa_r+0xbb2>
 800863e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008640:	b963      	cbnz	r3, 800865c <_dtoa_r+0xac>
 8008642:	4b92      	ldr	r3, [pc, #584]	; (800888c <_dtoa_r+0x2dc>)
 8008644:	e022      	b.n	800868c <_dtoa_r+0xdc>
 8008646:	4b92      	ldr	r3, [pc, #584]	; (8008890 <_dtoa_r+0x2e0>)
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	3308      	adds	r3, #8
 800864c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	9801      	ldr	r0, [sp, #4]
 8008652:	b013      	add	sp, #76	; 0x4c
 8008654:	ecbd 8b04 	vpop	{d8-d9}
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	4b8b      	ldr	r3, [pc, #556]	; (800888c <_dtoa_r+0x2dc>)
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	3303      	adds	r3, #3
 8008662:	e7f3      	b.n	800864c <_dtoa_r+0x9c>
 8008664:	2200      	movs	r2, #0
 8008666:	2300      	movs	r3, #0
 8008668:	4650      	mov	r0, sl
 800866a:	4659      	mov	r1, fp
 800866c:	f7f8 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008670:	ec4b ab19 	vmov	d9, sl, fp
 8008674:	4680      	mov	r8, r0
 8008676:	b158      	cbz	r0, 8008690 <_dtoa_r+0xe0>
 8008678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800867a:	2301      	movs	r3, #1
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 856b 	beq.w	800915c <_dtoa_r+0xbac>
 8008686:	4883      	ldr	r0, [pc, #524]	; (8008894 <_dtoa_r+0x2e4>)
 8008688:	6018      	str	r0, [r3, #0]
 800868a:	1e43      	subs	r3, r0, #1
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	e7df      	b.n	8008650 <_dtoa_r+0xa0>
 8008690:	ec4b ab10 	vmov	d0, sl, fp
 8008694:	aa10      	add	r2, sp, #64	; 0x40
 8008696:	a911      	add	r1, sp, #68	; 0x44
 8008698:	4620      	mov	r0, r4
 800869a:	f001 fd01 	bl	800a0a0 <__d2b>
 800869e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80086a2:	ee08 0a10 	vmov	s16, r0
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	f000 8084 	beq.w	80087b4 <_dtoa_r+0x204>
 80086ac:	ee19 3a90 	vmov	r3, s19
 80086b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80086b8:	4656      	mov	r6, sl
 80086ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80086be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80086c6:	4b74      	ldr	r3, [pc, #464]	; (8008898 <_dtoa_r+0x2e8>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	4630      	mov	r0, r6
 80086cc:	4639      	mov	r1, r7
 80086ce:	f7f7 fddb 	bl	8000288 <__aeabi_dsub>
 80086d2:	a365      	add	r3, pc, #404	; (adr r3, 8008868 <_dtoa_r+0x2b8>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f7f7 ff8e 	bl	80005f8 <__aeabi_dmul>
 80086dc:	a364      	add	r3, pc, #400	; (adr r3, 8008870 <_dtoa_r+0x2c0>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 fdd3 	bl	800028c <__adddf3>
 80086e6:	4606      	mov	r6, r0
 80086e8:	4628      	mov	r0, r5
 80086ea:	460f      	mov	r7, r1
 80086ec:	f7f7 ff1a 	bl	8000524 <__aeabi_i2d>
 80086f0:	a361      	add	r3, pc, #388	; (adr r3, 8008878 <_dtoa_r+0x2c8>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 ff7f 	bl	80005f8 <__aeabi_dmul>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4630      	mov	r0, r6
 8008700:	4639      	mov	r1, r7
 8008702:	f7f7 fdc3 	bl	800028c <__adddf3>
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	f7f8 fa25 	bl	8000b58 <__aeabi_d2iz>
 800870e:	2200      	movs	r2, #0
 8008710:	9000      	str	r0, [sp, #0]
 8008712:	2300      	movs	r3, #0
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800871c:	b150      	cbz	r0, 8008734 <_dtoa_r+0x184>
 800871e:	9800      	ldr	r0, [sp, #0]
 8008720:	f7f7 ff00 	bl	8000524 <__aeabi_i2d>
 8008724:	4632      	mov	r2, r6
 8008726:	463b      	mov	r3, r7
 8008728:	f7f8 f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800872c:	b910      	cbnz	r0, 8008734 <_dtoa_r+0x184>
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	3b01      	subs	r3, #1
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	9b00      	ldr	r3, [sp, #0]
 8008736:	2b16      	cmp	r3, #22
 8008738:	d85a      	bhi.n	80087f0 <_dtoa_r+0x240>
 800873a:	9a00      	ldr	r2, [sp, #0]
 800873c:	4b57      	ldr	r3, [pc, #348]	; (800889c <_dtoa_r+0x2ec>)
 800873e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	ec51 0b19 	vmov	r0, r1, d9
 800874a:	f7f8 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	d050      	beq.n	80087f4 <_dtoa_r+0x244>
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	3b01      	subs	r3, #1
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	930b      	str	r3, [sp, #44]	; 0x2c
 800875c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800875e:	1b5d      	subs	r5, r3, r5
 8008760:	1e6b      	subs	r3, r5, #1
 8008762:	9305      	str	r3, [sp, #20]
 8008764:	bf45      	ittet	mi
 8008766:	f1c5 0301 	rsbmi	r3, r5, #1
 800876a:	9304      	strmi	r3, [sp, #16]
 800876c:	2300      	movpl	r3, #0
 800876e:	2300      	movmi	r3, #0
 8008770:	bf4c      	ite	mi
 8008772:	9305      	strmi	r3, [sp, #20]
 8008774:	9304      	strpl	r3, [sp, #16]
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	db3d      	blt.n	80087f8 <_dtoa_r+0x248>
 800877c:	9b05      	ldr	r3, [sp, #20]
 800877e:	9a00      	ldr	r2, [sp, #0]
 8008780:	920a      	str	r2, [sp, #40]	; 0x28
 8008782:	4413      	add	r3, r2
 8008784:	9305      	str	r3, [sp, #20]
 8008786:	2300      	movs	r3, #0
 8008788:	9307      	str	r3, [sp, #28]
 800878a:	9b06      	ldr	r3, [sp, #24]
 800878c:	2b09      	cmp	r3, #9
 800878e:	f200 8089 	bhi.w	80088a4 <_dtoa_r+0x2f4>
 8008792:	2b05      	cmp	r3, #5
 8008794:	bfc4      	itt	gt
 8008796:	3b04      	subgt	r3, #4
 8008798:	9306      	strgt	r3, [sp, #24]
 800879a:	9b06      	ldr	r3, [sp, #24]
 800879c:	f1a3 0302 	sub.w	r3, r3, #2
 80087a0:	bfcc      	ite	gt
 80087a2:	2500      	movgt	r5, #0
 80087a4:	2501      	movle	r5, #1
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	f200 8087 	bhi.w	80088ba <_dtoa_r+0x30a>
 80087ac:	e8df f003 	tbb	[pc, r3]
 80087b0:	59383a2d 	.word	0x59383a2d
 80087b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087b8:	441d      	add	r5, r3
 80087ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087be:	2b20      	cmp	r3, #32
 80087c0:	bfc1      	itttt	gt
 80087c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80087ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80087ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80087d2:	bfda      	itte	le
 80087d4:	f1c3 0320 	rsble	r3, r3, #32
 80087d8:	fa06 f003 	lslle.w	r0, r6, r3
 80087dc:	4318      	orrgt	r0, r3
 80087de:	f7f7 fe91 	bl	8000504 <__aeabi_ui2d>
 80087e2:	2301      	movs	r3, #1
 80087e4:	4606      	mov	r6, r0
 80087e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80087ea:	3d01      	subs	r5, #1
 80087ec:	930e      	str	r3, [sp, #56]	; 0x38
 80087ee:	e76a      	b.n	80086c6 <_dtoa_r+0x116>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e7b2      	b.n	800875a <_dtoa_r+0x1aa>
 80087f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80087f6:	e7b1      	b.n	800875c <_dtoa_r+0x1ac>
 80087f8:	9b04      	ldr	r3, [sp, #16]
 80087fa:	9a00      	ldr	r2, [sp, #0]
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	9304      	str	r3, [sp, #16]
 8008800:	4253      	negs	r3, r2
 8008802:	9307      	str	r3, [sp, #28]
 8008804:	2300      	movs	r3, #0
 8008806:	930a      	str	r3, [sp, #40]	; 0x28
 8008808:	e7bf      	b.n	800878a <_dtoa_r+0x1da>
 800880a:	2300      	movs	r3, #0
 800880c:	9308      	str	r3, [sp, #32]
 800880e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc55      	bgt.n	80088c0 <_dtoa_r+0x310>
 8008814:	2301      	movs	r3, #1
 8008816:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800881a:	461a      	mov	r2, r3
 800881c:	9209      	str	r2, [sp, #36]	; 0x24
 800881e:	e00c      	b.n	800883a <_dtoa_r+0x28a>
 8008820:	2301      	movs	r3, #1
 8008822:	e7f3      	b.n	800880c <_dtoa_r+0x25c>
 8008824:	2300      	movs	r3, #0
 8008826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008828:	9308      	str	r3, [sp, #32]
 800882a:	9b00      	ldr	r3, [sp, #0]
 800882c:	4413      	add	r3, r2
 800882e:	9302      	str	r3, [sp, #8]
 8008830:	3301      	adds	r3, #1
 8008832:	2b01      	cmp	r3, #1
 8008834:	9303      	str	r3, [sp, #12]
 8008836:	bfb8      	it	lt
 8008838:	2301      	movlt	r3, #1
 800883a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800883c:	2200      	movs	r2, #0
 800883e:	6042      	str	r2, [r0, #4]
 8008840:	2204      	movs	r2, #4
 8008842:	f102 0614 	add.w	r6, r2, #20
 8008846:	429e      	cmp	r6, r3
 8008848:	6841      	ldr	r1, [r0, #4]
 800884a:	d93d      	bls.n	80088c8 <_dtoa_r+0x318>
 800884c:	4620      	mov	r0, r4
 800884e:	f001 f839 	bl	80098c4 <_Balloc>
 8008852:	9001      	str	r0, [sp, #4]
 8008854:	2800      	cmp	r0, #0
 8008856:	d13b      	bne.n	80088d0 <_dtoa_r+0x320>
 8008858:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <_dtoa_r+0x2f0>)
 800885a:	4602      	mov	r2, r0
 800885c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008860:	e6c0      	b.n	80085e4 <_dtoa_r+0x34>
 8008862:	2301      	movs	r3, #1
 8008864:	e7df      	b.n	8008826 <_dtoa_r+0x276>
 8008866:	bf00      	nop
 8008868:	636f4361 	.word	0x636f4361
 800886c:	3fd287a7 	.word	0x3fd287a7
 8008870:	8b60c8b3 	.word	0x8b60c8b3
 8008874:	3fc68a28 	.word	0x3fc68a28
 8008878:	509f79fb 	.word	0x509f79fb
 800887c:	3fd34413 	.word	0x3fd34413
 8008880:	0800b4de 	.word	0x0800b4de
 8008884:	0800b4f5 	.word	0x0800b4f5
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	0800b4da 	.word	0x0800b4da
 8008890:	0800b4d1 	.word	0x0800b4d1
 8008894:	0800b355 	.word	0x0800b355
 8008898:	3ff80000 	.word	0x3ff80000
 800889c:	0800b660 	.word	0x0800b660
 80088a0:	0800b550 	.word	0x0800b550
 80088a4:	2501      	movs	r5, #1
 80088a6:	2300      	movs	r3, #0
 80088a8:	9306      	str	r3, [sp, #24]
 80088aa:	9508      	str	r5, [sp, #32]
 80088ac:	f04f 33ff 	mov.w	r3, #4294967295
 80088b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	2312      	movs	r3, #18
 80088b8:	e7b0      	b.n	800881c <_dtoa_r+0x26c>
 80088ba:	2301      	movs	r3, #1
 80088bc:	9308      	str	r3, [sp, #32]
 80088be:	e7f5      	b.n	80088ac <_dtoa_r+0x2fc>
 80088c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088c6:	e7b8      	b.n	800883a <_dtoa_r+0x28a>
 80088c8:	3101      	adds	r1, #1
 80088ca:	6041      	str	r1, [r0, #4]
 80088cc:	0052      	lsls	r2, r2, #1
 80088ce:	e7b8      	b.n	8008842 <_dtoa_r+0x292>
 80088d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d2:	9a01      	ldr	r2, [sp, #4]
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	9b03      	ldr	r3, [sp, #12]
 80088d8:	2b0e      	cmp	r3, #14
 80088da:	f200 809d 	bhi.w	8008a18 <_dtoa_r+0x468>
 80088de:	2d00      	cmp	r5, #0
 80088e0:	f000 809a 	beq.w	8008a18 <_dtoa_r+0x468>
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dd32      	ble.n	8008950 <_dtoa_r+0x3a0>
 80088ea:	4ab7      	ldr	r2, [pc, #732]	; (8008bc8 <_dtoa_r+0x618>)
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	05d8      	lsls	r0, r3, #23
 80088fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008900:	d516      	bpl.n	8008930 <_dtoa_r+0x380>
 8008902:	4bb2      	ldr	r3, [pc, #712]	; (8008bcc <_dtoa_r+0x61c>)
 8008904:	ec51 0b19 	vmov	r0, r1, d9
 8008908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800890c:	f7f7 ff9e 	bl	800084c <__aeabi_ddiv>
 8008910:	f007 070f 	and.w	r7, r7, #15
 8008914:	4682      	mov	sl, r0
 8008916:	468b      	mov	fp, r1
 8008918:	2503      	movs	r5, #3
 800891a:	4eac      	ldr	r6, [pc, #688]	; (8008bcc <_dtoa_r+0x61c>)
 800891c:	b957      	cbnz	r7, 8008934 <_dtoa_r+0x384>
 800891e:	4642      	mov	r2, r8
 8008920:	464b      	mov	r3, r9
 8008922:	4650      	mov	r0, sl
 8008924:	4659      	mov	r1, fp
 8008926:	f7f7 ff91 	bl	800084c <__aeabi_ddiv>
 800892a:	4682      	mov	sl, r0
 800892c:	468b      	mov	fp, r1
 800892e:	e028      	b.n	8008982 <_dtoa_r+0x3d2>
 8008930:	2502      	movs	r5, #2
 8008932:	e7f2      	b.n	800891a <_dtoa_r+0x36a>
 8008934:	07f9      	lsls	r1, r7, #31
 8008936:	d508      	bpl.n	800894a <_dtoa_r+0x39a>
 8008938:	4640      	mov	r0, r8
 800893a:	4649      	mov	r1, r9
 800893c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008940:	f7f7 fe5a 	bl	80005f8 <__aeabi_dmul>
 8008944:	3501      	adds	r5, #1
 8008946:	4680      	mov	r8, r0
 8008948:	4689      	mov	r9, r1
 800894a:	107f      	asrs	r7, r7, #1
 800894c:	3608      	adds	r6, #8
 800894e:	e7e5      	b.n	800891c <_dtoa_r+0x36c>
 8008950:	f000 809b 	beq.w	8008a8a <_dtoa_r+0x4da>
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	4f9d      	ldr	r7, [pc, #628]	; (8008bcc <_dtoa_r+0x61c>)
 8008958:	425e      	negs	r6, r3
 800895a:	4b9b      	ldr	r3, [pc, #620]	; (8008bc8 <_dtoa_r+0x618>)
 800895c:	f006 020f 	and.w	r2, r6, #15
 8008960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	ec51 0b19 	vmov	r0, r1, d9
 800896c:	f7f7 fe44 	bl	80005f8 <__aeabi_dmul>
 8008970:	1136      	asrs	r6, r6, #4
 8008972:	4682      	mov	sl, r0
 8008974:	468b      	mov	fp, r1
 8008976:	2300      	movs	r3, #0
 8008978:	2502      	movs	r5, #2
 800897a:	2e00      	cmp	r6, #0
 800897c:	d17a      	bne.n	8008a74 <_dtoa_r+0x4c4>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1d3      	bne.n	800892a <_dtoa_r+0x37a>
 8008982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8082 	beq.w	8008a8e <_dtoa_r+0x4de>
 800898a:	4b91      	ldr	r3, [pc, #580]	; (8008bd0 <_dtoa_r+0x620>)
 800898c:	2200      	movs	r2, #0
 800898e:	4650      	mov	r0, sl
 8008990:	4659      	mov	r1, fp
 8008992:	f7f8 f8a3 	bl	8000adc <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	d079      	beq.n	8008a8e <_dtoa_r+0x4de>
 800899a:	9b03      	ldr	r3, [sp, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d076      	beq.n	8008a8e <_dtoa_r+0x4de>
 80089a0:	9b02      	ldr	r3, [sp, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dd36      	ble.n	8008a14 <_dtoa_r+0x464>
 80089a6:	9b00      	ldr	r3, [sp, #0]
 80089a8:	4650      	mov	r0, sl
 80089aa:	4659      	mov	r1, fp
 80089ac:	1e5f      	subs	r7, r3, #1
 80089ae:	2200      	movs	r2, #0
 80089b0:	4b88      	ldr	r3, [pc, #544]	; (8008bd4 <_dtoa_r+0x624>)
 80089b2:	f7f7 fe21 	bl	80005f8 <__aeabi_dmul>
 80089b6:	9e02      	ldr	r6, [sp, #8]
 80089b8:	4682      	mov	sl, r0
 80089ba:	468b      	mov	fp, r1
 80089bc:	3501      	adds	r5, #1
 80089be:	4628      	mov	r0, r5
 80089c0:	f7f7 fdb0 	bl	8000524 <__aeabi_i2d>
 80089c4:	4652      	mov	r2, sl
 80089c6:	465b      	mov	r3, fp
 80089c8:	f7f7 fe16 	bl	80005f8 <__aeabi_dmul>
 80089cc:	4b82      	ldr	r3, [pc, #520]	; (8008bd8 <_dtoa_r+0x628>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	f7f7 fc5c 	bl	800028c <__adddf3>
 80089d4:	46d0      	mov	r8, sl
 80089d6:	46d9      	mov	r9, fp
 80089d8:	4682      	mov	sl, r0
 80089da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80089de:	2e00      	cmp	r6, #0
 80089e0:	d158      	bne.n	8008a94 <_dtoa_r+0x4e4>
 80089e2:	4b7e      	ldr	r3, [pc, #504]	; (8008bdc <_dtoa_r+0x62c>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	4640      	mov	r0, r8
 80089e8:	4649      	mov	r1, r9
 80089ea:	f7f7 fc4d 	bl	8000288 <__aeabi_dsub>
 80089ee:	4652      	mov	r2, sl
 80089f0:	465b      	mov	r3, fp
 80089f2:	4680      	mov	r8, r0
 80089f4:	4689      	mov	r9, r1
 80089f6:	f7f8 f88f 	bl	8000b18 <__aeabi_dcmpgt>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f040 8295 	bne.w	8008f2a <_dtoa_r+0x97a>
 8008a00:	4652      	mov	r2, sl
 8008a02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a06:	4640      	mov	r0, r8
 8008a08:	4649      	mov	r1, r9
 8008a0a:	f7f8 f867 	bl	8000adc <__aeabi_dcmplt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f040 8289 	bne.w	8008f26 <_dtoa_r+0x976>
 8008a14:	ec5b ab19 	vmov	sl, fp, d9
 8008a18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f2c0 8148 	blt.w	8008cb0 <_dtoa_r+0x700>
 8008a20:	9a00      	ldr	r2, [sp, #0]
 8008a22:	2a0e      	cmp	r2, #14
 8008a24:	f300 8144 	bgt.w	8008cb0 <_dtoa_r+0x700>
 8008a28:	4b67      	ldr	r3, [pc, #412]	; (8008bc8 <_dtoa_r+0x618>)
 8008a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f280 80d5 	bge.w	8008be4 <_dtoa_r+0x634>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f300 80d1 	bgt.w	8008be4 <_dtoa_r+0x634>
 8008a42:	f040 826f 	bne.w	8008f24 <_dtoa_r+0x974>
 8008a46:	4b65      	ldr	r3, [pc, #404]	; (8008bdc <_dtoa_r+0x62c>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	f7f7 fdd3 	bl	80005f8 <__aeabi_dmul>
 8008a52:	4652      	mov	r2, sl
 8008a54:	465b      	mov	r3, fp
 8008a56:	f7f8 f855 	bl	8000b04 <__aeabi_dcmpge>
 8008a5a:	9e03      	ldr	r6, [sp, #12]
 8008a5c:	4637      	mov	r7, r6
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f040 8245 	bne.w	8008eee <_dtoa_r+0x93e>
 8008a64:	9d01      	ldr	r5, [sp, #4]
 8008a66:	2331      	movs	r3, #49	; 0x31
 8008a68:	f805 3b01 	strb.w	r3, [r5], #1
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	e240      	b.n	8008ef6 <_dtoa_r+0x946>
 8008a74:	07f2      	lsls	r2, r6, #31
 8008a76:	d505      	bpl.n	8008a84 <_dtoa_r+0x4d4>
 8008a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	3501      	adds	r5, #1
 8008a82:	2301      	movs	r3, #1
 8008a84:	1076      	asrs	r6, r6, #1
 8008a86:	3708      	adds	r7, #8
 8008a88:	e777      	b.n	800897a <_dtoa_r+0x3ca>
 8008a8a:	2502      	movs	r5, #2
 8008a8c:	e779      	b.n	8008982 <_dtoa_r+0x3d2>
 8008a8e:	9f00      	ldr	r7, [sp, #0]
 8008a90:	9e03      	ldr	r6, [sp, #12]
 8008a92:	e794      	b.n	80089be <_dtoa_r+0x40e>
 8008a94:	9901      	ldr	r1, [sp, #4]
 8008a96:	4b4c      	ldr	r3, [pc, #304]	; (8008bc8 <_dtoa_r+0x618>)
 8008a98:	4431      	add	r1, r6
 8008a9a:	910d      	str	r1, [sp, #52]	; 0x34
 8008a9c:	9908      	ldr	r1, [sp, #32]
 8008a9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008aa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d043      	beq.n	8008b32 <_dtoa_r+0x582>
 8008aaa:	494d      	ldr	r1, [pc, #308]	; (8008be0 <_dtoa_r+0x630>)
 8008aac:	2000      	movs	r0, #0
 8008aae:	f7f7 fecd 	bl	800084c <__aeabi_ddiv>
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	465b      	mov	r3, fp
 8008ab6:	f7f7 fbe7 	bl	8000288 <__aeabi_dsub>
 8008aba:	9d01      	ldr	r5, [sp, #4]
 8008abc:	4682      	mov	sl, r0
 8008abe:	468b      	mov	fp, r1
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f7f8 f848 	bl	8000b58 <__aeabi_d2iz>
 8008ac8:	4606      	mov	r6, r0
 8008aca:	f7f7 fd2b 	bl	8000524 <__aeabi_i2d>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	f7f7 fbd7 	bl	8000288 <__aeabi_dsub>
 8008ada:	3630      	adds	r6, #48	; 0x30
 8008adc:	f805 6b01 	strb.w	r6, [r5], #1
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4689      	mov	r9, r1
 8008ae8:	f7f7 fff8 	bl	8000adc <__aeabi_dcmplt>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d163      	bne.n	8008bb8 <_dtoa_r+0x608>
 8008af0:	4642      	mov	r2, r8
 8008af2:	464b      	mov	r3, r9
 8008af4:	4936      	ldr	r1, [pc, #216]	; (8008bd0 <_dtoa_r+0x620>)
 8008af6:	2000      	movs	r0, #0
 8008af8:	f7f7 fbc6 	bl	8000288 <__aeabi_dsub>
 8008afc:	4652      	mov	r2, sl
 8008afe:	465b      	mov	r3, fp
 8008b00:	f7f7 ffec 	bl	8000adc <__aeabi_dcmplt>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	f040 80b5 	bne.w	8008c74 <_dtoa_r+0x6c4>
 8008b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0c:	429d      	cmp	r5, r3
 8008b0e:	d081      	beq.n	8008a14 <_dtoa_r+0x464>
 8008b10:	4b30      	ldr	r3, [pc, #192]	; (8008bd4 <_dtoa_r+0x624>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	4650      	mov	r0, sl
 8008b16:	4659      	mov	r1, fp
 8008b18:	f7f7 fd6e 	bl	80005f8 <__aeabi_dmul>
 8008b1c:	4b2d      	ldr	r3, [pc, #180]	; (8008bd4 <_dtoa_r+0x624>)
 8008b1e:	4682      	mov	sl, r0
 8008b20:	468b      	mov	fp, r1
 8008b22:	4640      	mov	r0, r8
 8008b24:	4649      	mov	r1, r9
 8008b26:	2200      	movs	r2, #0
 8008b28:	f7f7 fd66 	bl	80005f8 <__aeabi_dmul>
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	e7c6      	b.n	8008ac0 <_dtoa_r+0x510>
 8008b32:	4650      	mov	r0, sl
 8008b34:	4659      	mov	r1, fp
 8008b36:	f7f7 fd5f 	bl	80005f8 <__aeabi_dmul>
 8008b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b3c:	9d01      	ldr	r5, [sp, #4]
 8008b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b40:	4682      	mov	sl, r0
 8008b42:	468b      	mov	fp, r1
 8008b44:	4649      	mov	r1, r9
 8008b46:	4640      	mov	r0, r8
 8008b48:	f7f8 f806 	bl	8000b58 <__aeabi_d2iz>
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	f7f7 fce9 	bl	8000524 <__aeabi_i2d>
 8008b52:	3630      	adds	r6, #48	; 0x30
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 fb94 	bl	8000288 <__aeabi_dsub>
 8008b60:	f805 6b01 	strb.w	r6, [r5], #1
 8008b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b66:	429d      	cmp	r5, r3
 8008b68:	4680      	mov	r8, r0
 8008b6a:	4689      	mov	r9, r1
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	d124      	bne.n	8008bbc <_dtoa_r+0x60c>
 8008b72:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <_dtoa_r+0x630>)
 8008b74:	4650      	mov	r0, sl
 8008b76:	4659      	mov	r1, fp
 8008b78:	f7f7 fb88 	bl	800028c <__adddf3>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4640      	mov	r0, r8
 8008b82:	4649      	mov	r1, r9
 8008b84:	f7f7 ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d173      	bne.n	8008c74 <_dtoa_r+0x6c4>
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	465b      	mov	r3, fp
 8008b90:	4913      	ldr	r1, [pc, #76]	; (8008be0 <_dtoa_r+0x630>)
 8008b92:	2000      	movs	r0, #0
 8008b94:	f7f7 fb78 	bl	8000288 <__aeabi_dsub>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	f7f7 ff9c 	bl	8000adc <__aeabi_dcmplt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f43f af35 	beq.w	8008a14 <_dtoa_r+0x464>
 8008baa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bac:	1e6b      	subs	r3, r5, #1
 8008bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bb4:	2b30      	cmp	r3, #48	; 0x30
 8008bb6:	d0f8      	beq.n	8008baa <_dtoa_r+0x5fa>
 8008bb8:	9700      	str	r7, [sp, #0]
 8008bba:	e049      	b.n	8008c50 <_dtoa_r+0x6a0>
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <_dtoa_r+0x624>)
 8008bbe:	f7f7 fd1b 	bl	80005f8 <__aeabi_dmul>
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	4689      	mov	r9, r1
 8008bc6:	e7bd      	b.n	8008b44 <_dtoa_r+0x594>
 8008bc8:	0800b660 	.word	0x0800b660
 8008bcc:	0800b638 	.word	0x0800b638
 8008bd0:	3ff00000 	.word	0x3ff00000
 8008bd4:	40240000 	.word	0x40240000
 8008bd8:	401c0000 	.word	0x401c0000
 8008bdc:	40140000 	.word	0x40140000
 8008be0:	3fe00000 	.word	0x3fe00000
 8008be4:	9d01      	ldr	r5, [sp, #4]
 8008be6:	4656      	mov	r6, sl
 8008be8:	465f      	mov	r7, fp
 8008bea:	4642      	mov	r2, r8
 8008bec:	464b      	mov	r3, r9
 8008bee:	4630      	mov	r0, r6
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	f7f7 fe2b 	bl	800084c <__aeabi_ddiv>
 8008bf6:	f7f7 ffaf 	bl	8000b58 <__aeabi_d2iz>
 8008bfa:	4682      	mov	sl, r0
 8008bfc:	f7f7 fc92 	bl	8000524 <__aeabi_i2d>
 8008c00:	4642      	mov	r2, r8
 8008c02:	464b      	mov	r3, r9
 8008c04:	f7f7 fcf8 	bl	80005f8 <__aeabi_dmul>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008c14:	f7f7 fb38 	bl	8000288 <__aeabi_dsub>
 8008c18:	f805 6b01 	strb.w	r6, [r5], #1
 8008c1c:	9e01      	ldr	r6, [sp, #4]
 8008c1e:	9f03      	ldr	r7, [sp, #12]
 8008c20:	1bae      	subs	r6, r5, r6
 8008c22:	42b7      	cmp	r7, r6
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	d135      	bne.n	8008c96 <_dtoa_r+0x6e6>
 8008c2a:	f7f7 fb2f 	bl	800028c <__adddf3>
 8008c2e:	4642      	mov	r2, r8
 8008c30:	464b      	mov	r3, r9
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	f7f7 ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 8008c3a:	b9d0      	cbnz	r0, 8008c72 <_dtoa_r+0x6c2>
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	464b      	mov	r3, r9
 8008c40:	4630      	mov	r0, r6
 8008c42:	4639      	mov	r1, r7
 8008c44:	f7f7 ff40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c48:	b110      	cbz	r0, 8008c50 <_dtoa_r+0x6a0>
 8008c4a:	f01a 0f01 	tst.w	sl, #1
 8008c4e:	d110      	bne.n	8008c72 <_dtoa_r+0x6c2>
 8008c50:	4620      	mov	r0, r4
 8008c52:	ee18 1a10 	vmov	r1, s16
 8008c56:	f000 fe75 	bl	8009944 <_Bfree>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9800      	ldr	r0, [sp, #0]
 8008c5e:	702b      	strb	r3, [r5, #0]
 8008c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c62:	3001      	adds	r0, #1
 8008c64:	6018      	str	r0, [r3, #0]
 8008c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f43f acf1 	beq.w	8008650 <_dtoa_r+0xa0>
 8008c6e:	601d      	str	r5, [r3, #0]
 8008c70:	e4ee      	b.n	8008650 <_dtoa_r+0xa0>
 8008c72:	9f00      	ldr	r7, [sp, #0]
 8008c74:	462b      	mov	r3, r5
 8008c76:	461d      	mov	r5, r3
 8008c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c7c:	2a39      	cmp	r2, #57	; 0x39
 8008c7e:	d106      	bne.n	8008c8e <_dtoa_r+0x6de>
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d1f7      	bne.n	8008c76 <_dtoa_r+0x6c6>
 8008c86:	9901      	ldr	r1, [sp, #4]
 8008c88:	2230      	movs	r2, #48	; 0x30
 8008c8a:	3701      	adds	r7, #1
 8008c8c:	700a      	strb	r2, [r1, #0]
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	3201      	adds	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	e790      	b.n	8008bb8 <_dtoa_r+0x608>
 8008c96:	4ba6      	ldr	r3, [pc, #664]	; (8008f30 <_dtoa_r+0x980>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f7f7 fcad 	bl	80005f8 <__aeabi_dmul>
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	f7f7 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d09d      	beq.n	8008bea <_dtoa_r+0x63a>
 8008cae:	e7cf      	b.n	8008c50 <_dtoa_r+0x6a0>
 8008cb0:	9a08      	ldr	r2, [sp, #32]
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	f000 80d7 	beq.w	8008e66 <_dtoa_r+0x8b6>
 8008cb8:	9a06      	ldr	r2, [sp, #24]
 8008cba:	2a01      	cmp	r2, #1
 8008cbc:	f300 80ba 	bgt.w	8008e34 <_dtoa_r+0x884>
 8008cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	f000 80b2 	beq.w	8008e2c <_dtoa_r+0x87c>
 8008cc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ccc:	9e07      	ldr	r6, [sp, #28]
 8008cce:	9d04      	ldr	r5, [sp, #16]
 8008cd0:	9a04      	ldr	r2, [sp, #16]
 8008cd2:	441a      	add	r2, r3
 8008cd4:	9204      	str	r2, [sp, #16]
 8008cd6:	9a05      	ldr	r2, [sp, #20]
 8008cd8:	2101      	movs	r1, #1
 8008cda:	441a      	add	r2, r3
 8008cdc:	4620      	mov	r0, r4
 8008cde:	9205      	str	r2, [sp, #20]
 8008ce0:	f000 ff32 	bl	8009b48 <__i2b>
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	dd0c      	ble.n	8008d04 <_dtoa_r+0x754>
 8008cea:	9b05      	ldr	r3, [sp, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd09      	ble.n	8008d04 <_dtoa_r+0x754>
 8008cf0:	42ab      	cmp	r3, r5
 8008cf2:	9a04      	ldr	r2, [sp, #16]
 8008cf4:	bfa8      	it	ge
 8008cf6:	462b      	movge	r3, r5
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	9204      	str	r2, [sp, #16]
 8008cfc:	9a05      	ldr	r2, [sp, #20]
 8008cfe:	1aed      	subs	r5, r5, r3
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	9305      	str	r3, [sp, #20]
 8008d04:	9b07      	ldr	r3, [sp, #28]
 8008d06:	b31b      	cbz	r3, 8008d50 <_dtoa_r+0x7a0>
 8008d08:	9b08      	ldr	r3, [sp, #32]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 80af 	beq.w	8008e6e <_dtoa_r+0x8be>
 8008d10:	2e00      	cmp	r6, #0
 8008d12:	dd13      	ble.n	8008d3c <_dtoa_r+0x78c>
 8008d14:	4639      	mov	r1, r7
 8008d16:	4632      	mov	r2, r6
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 ffd5 	bl	8009cc8 <__pow5mult>
 8008d1e:	ee18 2a10 	vmov	r2, s16
 8008d22:	4601      	mov	r1, r0
 8008d24:	4607      	mov	r7, r0
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 ff24 	bl	8009b74 <__multiply>
 8008d2c:	ee18 1a10 	vmov	r1, s16
 8008d30:	4680      	mov	r8, r0
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fe06 	bl	8009944 <_Bfree>
 8008d38:	ee08 8a10 	vmov	s16, r8
 8008d3c:	9b07      	ldr	r3, [sp, #28]
 8008d3e:	1b9a      	subs	r2, r3, r6
 8008d40:	d006      	beq.n	8008d50 <_dtoa_r+0x7a0>
 8008d42:	ee18 1a10 	vmov	r1, s16
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 ffbe 	bl	8009cc8 <__pow5mult>
 8008d4c:	ee08 0a10 	vmov	s16, r0
 8008d50:	2101      	movs	r1, #1
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fef8 	bl	8009b48 <__i2b>
 8008d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	f340 8088 	ble.w	8008e72 <_dtoa_r+0x8c2>
 8008d62:	461a      	mov	r2, r3
 8008d64:	4601      	mov	r1, r0
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 ffae 	bl	8009cc8 <__pow5mult>
 8008d6c:	9b06      	ldr	r3, [sp, #24]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	4606      	mov	r6, r0
 8008d72:	f340 8081 	ble.w	8008e78 <_dtoa_r+0x8c8>
 8008d76:	f04f 0800 	mov.w	r8, #0
 8008d7a:	6933      	ldr	r3, [r6, #16]
 8008d7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d80:	6918      	ldr	r0, [r3, #16]
 8008d82:	f000 fe91 	bl	8009aa8 <__hi0bits>
 8008d86:	f1c0 0020 	rsb	r0, r0, #32
 8008d8a:	9b05      	ldr	r3, [sp, #20]
 8008d8c:	4418      	add	r0, r3
 8008d8e:	f010 001f 	ands.w	r0, r0, #31
 8008d92:	f000 8092 	beq.w	8008eba <_dtoa_r+0x90a>
 8008d96:	f1c0 0320 	rsb	r3, r0, #32
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	f340 808a 	ble.w	8008eb4 <_dtoa_r+0x904>
 8008da0:	f1c0 001c 	rsb	r0, r0, #28
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	4403      	add	r3, r0
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	9b05      	ldr	r3, [sp, #20]
 8008dac:	4403      	add	r3, r0
 8008dae:	4405      	add	r5, r0
 8008db0:	9305      	str	r3, [sp, #20]
 8008db2:	9b04      	ldr	r3, [sp, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dd07      	ble.n	8008dc8 <_dtoa_r+0x818>
 8008db8:	ee18 1a10 	vmov	r1, s16
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 ffdc 	bl	8009d7c <__lshift>
 8008dc4:	ee08 0a10 	vmov	s16, r0
 8008dc8:	9b05      	ldr	r3, [sp, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dd05      	ble.n	8008dda <_dtoa_r+0x82a>
 8008dce:	4631      	mov	r1, r6
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 ffd2 	bl	8009d7c <__lshift>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d06e      	beq.n	8008ebe <_dtoa_r+0x90e>
 8008de0:	ee18 0a10 	vmov	r0, s16
 8008de4:	4631      	mov	r1, r6
 8008de6:	f001 f839 	bl	8009e5c <__mcmp>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	da67      	bge.n	8008ebe <_dtoa_r+0x90e>
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	ee18 1a10 	vmov	r1, s16
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	220a      	movs	r2, #10
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fdc3 	bl	8009988 <__multadd>
 8008e02:	9b08      	ldr	r3, [sp, #32]
 8008e04:	ee08 0a10 	vmov	s16, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 81b1 	beq.w	8009170 <_dtoa_r+0xbc0>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	4639      	mov	r1, r7
 8008e12:	220a      	movs	r2, #10
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 fdb7 	bl	8009988 <__multadd>
 8008e1a:	9b02      	ldr	r3, [sp, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	4607      	mov	r7, r0
 8008e20:	f300 808e 	bgt.w	8008f40 <_dtoa_r+0x990>
 8008e24:	9b06      	ldr	r3, [sp, #24]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	dc51      	bgt.n	8008ece <_dtoa_r+0x91e>
 8008e2a:	e089      	b.n	8008f40 <_dtoa_r+0x990>
 8008e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e32:	e74b      	b.n	8008ccc <_dtoa_r+0x71c>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	1e5e      	subs	r6, r3, #1
 8008e38:	9b07      	ldr	r3, [sp, #28]
 8008e3a:	42b3      	cmp	r3, r6
 8008e3c:	bfbf      	itttt	lt
 8008e3e:	9b07      	ldrlt	r3, [sp, #28]
 8008e40:	9607      	strlt	r6, [sp, #28]
 8008e42:	1af2      	sublt	r2, r6, r3
 8008e44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008e46:	bfb6      	itet	lt
 8008e48:	189b      	addlt	r3, r3, r2
 8008e4a:	1b9e      	subge	r6, r3, r6
 8008e4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	bfb8      	it	lt
 8008e52:	2600      	movlt	r6, #0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bfb7      	itett	lt
 8008e58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008e5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e60:	1a9d      	sublt	r5, r3, r2
 8008e62:	2300      	movlt	r3, #0
 8008e64:	e734      	b.n	8008cd0 <_dtoa_r+0x720>
 8008e66:	9e07      	ldr	r6, [sp, #28]
 8008e68:	9d04      	ldr	r5, [sp, #16]
 8008e6a:	9f08      	ldr	r7, [sp, #32]
 8008e6c:	e73b      	b.n	8008ce6 <_dtoa_r+0x736>
 8008e6e:	9a07      	ldr	r2, [sp, #28]
 8008e70:	e767      	b.n	8008d42 <_dtoa_r+0x792>
 8008e72:	9b06      	ldr	r3, [sp, #24]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	dc18      	bgt.n	8008eaa <_dtoa_r+0x8fa>
 8008e78:	f1ba 0f00 	cmp.w	sl, #0
 8008e7c:	d115      	bne.n	8008eaa <_dtoa_r+0x8fa>
 8008e7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e82:	b993      	cbnz	r3, 8008eaa <_dtoa_r+0x8fa>
 8008e84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e88:	0d1b      	lsrs	r3, r3, #20
 8008e8a:	051b      	lsls	r3, r3, #20
 8008e8c:	b183      	cbz	r3, 8008eb0 <_dtoa_r+0x900>
 8008e8e:	9b04      	ldr	r3, [sp, #16]
 8008e90:	3301      	adds	r3, #1
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	9b05      	ldr	r3, [sp, #20]
 8008e96:	3301      	adds	r3, #1
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	f04f 0801 	mov.w	r8, #1
 8008e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f47f af6a 	bne.w	8008d7a <_dtoa_r+0x7ca>
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	e76f      	b.n	8008d8a <_dtoa_r+0x7da>
 8008eaa:	f04f 0800 	mov.w	r8, #0
 8008eae:	e7f6      	b.n	8008e9e <_dtoa_r+0x8ee>
 8008eb0:	4698      	mov	r8, r3
 8008eb2:	e7f4      	b.n	8008e9e <_dtoa_r+0x8ee>
 8008eb4:	f43f af7d 	beq.w	8008db2 <_dtoa_r+0x802>
 8008eb8:	4618      	mov	r0, r3
 8008eba:	301c      	adds	r0, #28
 8008ebc:	e772      	b.n	8008da4 <_dtoa_r+0x7f4>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	dc37      	bgt.n	8008f34 <_dtoa_r+0x984>
 8008ec4:	9b06      	ldr	r3, [sp, #24]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	dd34      	ble.n	8008f34 <_dtoa_r+0x984>
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	9302      	str	r3, [sp, #8]
 8008ece:	9b02      	ldr	r3, [sp, #8]
 8008ed0:	b96b      	cbnz	r3, 8008eee <_dtoa_r+0x93e>
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 fd56 	bl	8009988 <__multadd>
 8008edc:	4601      	mov	r1, r0
 8008ede:	4606      	mov	r6, r0
 8008ee0:	ee18 0a10 	vmov	r0, s16
 8008ee4:	f000 ffba 	bl	8009e5c <__mcmp>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f73f adbb 	bgt.w	8008a64 <_dtoa_r+0x4b4>
 8008eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef0:	9d01      	ldr	r5, [sp, #4]
 8008ef2:	43db      	mvns	r3, r3
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	f04f 0800 	mov.w	r8, #0
 8008efa:	4631      	mov	r1, r6
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fd21 	bl	8009944 <_Bfree>
 8008f02:	2f00      	cmp	r7, #0
 8008f04:	f43f aea4 	beq.w	8008c50 <_dtoa_r+0x6a0>
 8008f08:	f1b8 0f00 	cmp.w	r8, #0
 8008f0c:	d005      	beq.n	8008f1a <_dtoa_r+0x96a>
 8008f0e:	45b8      	cmp	r8, r7
 8008f10:	d003      	beq.n	8008f1a <_dtoa_r+0x96a>
 8008f12:	4641      	mov	r1, r8
 8008f14:	4620      	mov	r0, r4
 8008f16:	f000 fd15 	bl	8009944 <_Bfree>
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 fd11 	bl	8009944 <_Bfree>
 8008f22:	e695      	b.n	8008c50 <_dtoa_r+0x6a0>
 8008f24:	2600      	movs	r6, #0
 8008f26:	4637      	mov	r7, r6
 8008f28:	e7e1      	b.n	8008eee <_dtoa_r+0x93e>
 8008f2a:	9700      	str	r7, [sp, #0]
 8008f2c:	4637      	mov	r7, r6
 8008f2e:	e599      	b.n	8008a64 <_dtoa_r+0x4b4>
 8008f30:	40240000 	.word	0x40240000
 8008f34:	9b08      	ldr	r3, [sp, #32]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 80ca 	beq.w	80090d0 <_dtoa_r+0xb20>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	9302      	str	r3, [sp, #8]
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	dd05      	ble.n	8008f50 <_dtoa_r+0x9a0>
 8008f44:	4639      	mov	r1, r7
 8008f46:	462a      	mov	r2, r5
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 ff17 	bl	8009d7c <__lshift>
 8008f4e:	4607      	mov	r7, r0
 8008f50:	f1b8 0f00 	cmp.w	r8, #0
 8008f54:	d05b      	beq.n	800900e <_dtoa_r+0xa5e>
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 fcb3 	bl	80098c4 <_Balloc>
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b928      	cbnz	r0, 8008f6e <_dtoa_r+0x9be>
 8008f62:	4b87      	ldr	r3, [pc, #540]	; (8009180 <_dtoa_r+0xbd0>)
 8008f64:	4602      	mov	r2, r0
 8008f66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f6a:	f7ff bb3b 	b.w	80085e4 <_dtoa_r+0x34>
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	3202      	adds	r2, #2
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	f107 010c 	add.w	r1, r7, #12
 8008f78:	300c      	adds	r0, #12
 8008f7a:	f000 fc95 	bl	80098a8 <memcpy>
 8008f7e:	2201      	movs	r2, #1
 8008f80:	4629      	mov	r1, r5
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fefa 	bl	8009d7c <__lshift>
 8008f88:	9b01      	ldr	r3, [sp, #4]
 8008f8a:	f103 0901 	add.w	r9, r3, #1
 8008f8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	9305      	str	r3, [sp, #20]
 8008f96:	f00a 0301 	and.w	r3, sl, #1
 8008f9a:	46b8      	mov	r8, r7
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	ee18 0a10 	vmov	r0, s16
 8008fa6:	f7ff fa77 	bl	8008498 <quorem>
 8008faa:	4641      	mov	r1, r8
 8008fac:	9002      	str	r0, [sp, #8]
 8008fae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fb2:	ee18 0a10 	vmov	r0, s16
 8008fb6:	f000 ff51 	bl	8009e5c <__mcmp>
 8008fba:	463a      	mov	r2, r7
 8008fbc:	9003      	str	r0, [sp, #12]
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 ff67 	bl	8009e94 <__mdiff>
 8008fc6:	68c2      	ldr	r2, [r0, #12]
 8008fc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008fcc:	4605      	mov	r5, r0
 8008fce:	bb02      	cbnz	r2, 8009012 <_dtoa_r+0xa62>
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	ee18 0a10 	vmov	r0, s16
 8008fd6:	f000 ff41 	bl	8009e5c <__mcmp>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4620      	mov	r0, r4
 8008fe0:	9207      	str	r2, [sp, #28]
 8008fe2:	f000 fcaf 	bl	8009944 <_Bfree>
 8008fe6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008fea:	ea43 0102 	orr.w	r1, r3, r2
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	464d      	mov	r5, r9
 8008ff4:	d10f      	bne.n	8009016 <_dtoa_r+0xa66>
 8008ff6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ffa:	d02a      	beq.n	8009052 <_dtoa_r+0xaa2>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	dd02      	ble.n	8009008 <_dtoa_r+0xa58>
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009008:	f88b a000 	strb.w	sl, [fp]
 800900c:	e775      	b.n	8008efa <_dtoa_r+0x94a>
 800900e:	4638      	mov	r0, r7
 8009010:	e7ba      	b.n	8008f88 <_dtoa_r+0x9d8>
 8009012:	2201      	movs	r2, #1
 8009014:	e7e2      	b.n	8008fdc <_dtoa_r+0xa2c>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db04      	blt.n	8009026 <_dtoa_r+0xa76>
 800901c:	9906      	ldr	r1, [sp, #24]
 800901e:	430b      	orrs	r3, r1
 8009020:	9904      	ldr	r1, [sp, #16]
 8009022:	430b      	orrs	r3, r1
 8009024:	d122      	bne.n	800906c <_dtoa_r+0xabc>
 8009026:	2a00      	cmp	r2, #0
 8009028:	ddee      	ble.n	8009008 <_dtoa_r+0xa58>
 800902a:	ee18 1a10 	vmov	r1, s16
 800902e:	2201      	movs	r2, #1
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fea3 	bl	8009d7c <__lshift>
 8009036:	4631      	mov	r1, r6
 8009038:	ee08 0a10 	vmov	s16, r0
 800903c:	f000 ff0e 	bl	8009e5c <__mcmp>
 8009040:	2800      	cmp	r0, #0
 8009042:	dc03      	bgt.n	800904c <_dtoa_r+0xa9c>
 8009044:	d1e0      	bne.n	8009008 <_dtoa_r+0xa58>
 8009046:	f01a 0f01 	tst.w	sl, #1
 800904a:	d0dd      	beq.n	8009008 <_dtoa_r+0xa58>
 800904c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009050:	d1d7      	bne.n	8009002 <_dtoa_r+0xa52>
 8009052:	2339      	movs	r3, #57	; 0x39
 8009054:	f88b 3000 	strb.w	r3, [fp]
 8009058:	462b      	mov	r3, r5
 800905a:	461d      	mov	r5, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009062:	2a39      	cmp	r2, #57	; 0x39
 8009064:	d071      	beq.n	800914a <_dtoa_r+0xb9a>
 8009066:	3201      	adds	r2, #1
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	e746      	b.n	8008efa <_dtoa_r+0x94a>
 800906c:	2a00      	cmp	r2, #0
 800906e:	dd07      	ble.n	8009080 <_dtoa_r+0xad0>
 8009070:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009074:	d0ed      	beq.n	8009052 <_dtoa_r+0xaa2>
 8009076:	f10a 0301 	add.w	r3, sl, #1
 800907a:	f88b 3000 	strb.w	r3, [fp]
 800907e:	e73c      	b.n	8008efa <_dtoa_r+0x94a>
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009086:	4599      	cmp	r9, r3
 8009088:	d047      	beq.n	800911a <_dtoa_r+0xb6a>
 800908a:	ee18 1a10 	vmov	r1, s16
 800908e:	2300      	movs	r3, #0
 8009090:	220a      	movs	r2, #10
 8009092:	4620      	mov	r0, r4
 8009094:	f000 fc78 	bl	8009988 <__multadd>
 8009098:	45b8      	cmp	r8, r7
 800909a:	ee08 0a10 	vmov	s16, r0
 800909e:	f04f 0300 	mov.w	r3, #0
 80090a2:	f04f 020a 	mov.w	r2, #10
 80090a6:	4641      	mov	r1, r8
 80090a8:	4620      	mov	r0, r4
 80090aa:	d106      	bne.n	80090ba <_dtoa_r+0xb0a>
 80090ac:	f000 fc6c 	bl	8009988 <__multadd>
 80090b0:	4680      	mov	r8, r0
 80090b2:	4607      	mov	r7, r0
 80090b4:	f109 0901 	add.w	r9, r9, #1
 80090b8:	e772      	b.n	8008fa0 <_dtoa_r+0x9f0>
 80090ba:	f000 fc65 	bl	8009988 <__multadd>
 80090be:	4639      	mov	r1, r7
 80090c0:	4680      	mov	r8, r0
 80090c2:	2300      	movs	r3, #0
 80090c4:	220a      	movs	r2, #10
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 fc5e 	bl	8009988 <__multadd>
 80090cc:	4607      	mov	r7, r0
 80090ce:	e7f1      	b.n	80090b4 <_dtoa_r+0xb04>
 80090d0:	9b03      	ldr	r3, [sp, #12]
 80090d2:	9302      	str	r3, [sp, #8]
 80090d4:	9d01      	ldr	r5, [sp, #4]
 80090d6:	ee18 0a10 	vmov	r0, s16
 80090da:	4631      	mov	r1, r6
 80090dc:	f7ff f9dc 	bl	8008498 <quorem>
 80090e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	f805 ab01 	strb.w	sl, [r5], #1
 80090ea:	1aea      	subs	r2, r5, r3
 80090ec:	9b02      	ldr	r3, [sp, #8]
 80090ee:	4293      	cmp	r3, r2
 80090f0:	dd09      	ble.n	8009106 <_dtoa_r+0xb56>
 80090f2:	ee18 1a10 	vmov	r1, s16
 80090f6:	2300      	movs	r3, #0
 80090f8:	220a      	movs	r2, #10
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fc44 	bl	8009988 <__multadd>
 8009100:	ee08 0a10 	vmov	s16, r0
 8009104:	e7e7      	b.n	80090d6 <_dtoa_r+0xb26>
 8009106:	9b02      	ldr	r3, [sp, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfc8      	it	gt
 800910c:	461d      	movgt	r5, r3
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	bfd8      	it	le
 8009112:	2501      	movle	r5, #1
 8009114:	441d      	add	r5, r3
 8009116:	f04f 0800 	mov.w	r8, #0
 800911a:	ee18 1a10 	vmov	r1, s16
 800911e:	2201      	movs	r2, #1
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fe2b 	bl	8009d7c <__lshift>
 8009126:	4631      	mov	r1, r6
 8009128:	ee08 0a10 	vmov	s16, r0
 800912c:	f000 fe96 	bl	8009e5c <__mcmp>
 8009130:	2800      	cmp	r0, #0
 8009132:	dc91      	bgt.n	8009058 <_dtoa_r+0xaa8>
 8009134:	d102      	bne.n	800913c <_dtoa_r+0xb8c>
 8009136:	f01a 0f01 	tst.w	sl, #1
 800913a:	d18d      	bne.n	8009058 <_dtoa_r+0xaa8>
 800913c:	462b      	mov	r3, r5
 800913e:	461d      	mov	r5, r3
 8009140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009144:	2a30      	cmp	r2, #48	; 0x30
 8009146:	d0fa      	beq.n	800913e <_dtoa_r+0xb8e>
 8009148:	e6d7      	b.n	8008efa <_dtoa_r+0x94a>
 800914a:	9a01      	ldr	r2, [sp, #4]
 800914c:	429a      	cmp	r2, r3
 800914e:	d184      	bne.n	800905a <_dtoa_r+0xaaa>
 8009150:	9b00      	ldr	r3, [sp, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	2331      	movs	r3, #49	; 0x31
 8009158:	7013      	strb	r3, [r2, #0]
 800915a:	e6ce      	b.n	8008efa <_dtoa_r+0x94a>
 800915c:	4b09      	ldr	r3, [pc, #36]	; (8009184 <_dtoa_r+0xbd4>)
 800915e:	f7ff ba95 	b.w	800868c <_dtoa_r+0xdc>
 8009162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009164:	2b00      	cmp	r3, #0
 8009166:	f47f aa6e 	bne.w	8008646 <_dtoa_r+0x96>
 800916a:	4b07      	ldr	r3, [pc, #28]	; (8009188 <_dtoa_r+0xbd8>)
 800916c:	f7ff ba8e 	b.w	800868c <_dtoa_r+0xdc>
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	dcae      	bgt.n	80090d4 <_dtoa_r+0xb24>
 8009176:	9b06      	ldr	r3, [sp, #24]
 8009178:	2b02      	cmp	r3, #2
 800917a:	f73f aea8 	bgt.w	8008ece <_dtoa_r+0x91e>
 800917e:	e7a9      	b.n	80090d4 <_dtoa_r+0xb24>
 8009180:	0800b550 	.word	0x0800b550
 8009184:	0800b354 	.word	0x0800b354
 8009188:	0800b4d1 	.word	0x0800b4d1

0800918c <rshift>:
 800918c:	6903      	ldr	r3, [r0, #16]
 800918e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009196:	ea4f 1261 	mov.w	r2, r1, asr #5
 800919a:	f100 0414 	add.w	r4, r0, #20
 800919e:	dd45      	ble.n	800922c <rshift+0xa0>
 80091a0:	f011 011f 	ands.w	r1, r1, #31
 80091a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091ac:	d10c      	bne.n	80091c8 <rshift+0x3c>
 80091ae:	f100 0710 	add.w	r7, r0, #16
 80091b2:	4629      	mov	r1, r5
 80091b4:	42b1      	cmp	r1, r6
 80091b6:	d334      	bcc.n	8009222 <rshift+0x96>
 80091b8:	1a9b      	subs	r3, r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	1eea      	subs	r2, r5, #3
 80091be:	4296      	cmp	r6, r2
 80091c0:	bf38      	it	cc
 80091c2:	2300      	movcc	r3, #0
 80091c4:	4423      	add	r3, r4
 80091c6:	e015      	b.n	80091f4 <rshift+0x68>
 80091c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091cc:	f1c1 0820 	rsb	r8, r1, #32
 80091d0:	40cf      	lsrs	r7, r1
 80091d2:	f105 0e04 	add.w	lr, r5, #4
 80091d6:	46a1      	mov	r9, r4
 80091d8:	4576      	cmp	r6, lr
 80091da:	46f4      	mov	ip, lr
 80091dc:	d815      	bhi.n	800920a <rshift+0x7e>
 80091de:	1a9a      	subs	r2, r3, r2
 80091e0:	0092      	lsls	r2, r2, #2
 80091e2:	3a04      	subs	r2, #4
 80091e4:	3501      	adds	r5, #1
 80091e6:	42ae      	cmp	r6, r5
 80091e8:	bf38      	it	cc
 80091ea:	2200      	movcc	r2, #0
 80091ec:	18a3      	adds	r3, r4, r2
 80091ee:	50a7      	str	r7, [r4, r2]
 80091f0:	b107      	cbz	r7, 80091f4 <rshift+0x68>
 80091f2:	3304      	adds	r3, #4
 80091f4:	1b1a      	subs	r2, r3, r4
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091fc:	bf08      	it	eq
 80091fe:	2300      	moveq	r3, #0
 8009200:	6102      	str	r2, [r0, #16]
 8009202:	bf08      	it	eq
 8009204:	6143      	streq	r3, [r0, #20]
 8009206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800920a:	f8dc c000 	ldr.w	ip, [ip]
 800920e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009212:	ea4c 0707 	orr.w	r7, ip, r7
 8009216:	f849 7b04 	str.w	r7, [r9], #4
 800921a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800921e:	40cf      	lsrs	r7, r1
 8009220:	e7da      	b.n	80091d8 <rshift+0x4c>
 8009222:	f851 cb04 	ldr.w	ip, [r1], #4
 8009226:	f847 cf04 	str.w	ip, [r7, #4]!
 800922a:	e7c3      	b.n	80091b4 <rshift+0x28>
 800922c:	4623      	mov	r3, r4
 800922e:	e7e1      	b.n	80091f4 <rshift+0x68>

08009230 <__hexdig_fun>:
 8009230:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009234:	2b09      	cmp	r3, #9
 8009236:	d802      	bhi.n	800923e <__hexdig_fun+0xe>
 8009238:	3820      	subs	r0, #32
 800923a:	b2c0      	uxtb	r0, r0
 800923c:	4770      	bx	lr
 800923e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009242:	2b05      	cmp	r3, #5
 8009244:	d801      	bhi.n	800924a <__hexdig_fun+0x1a>
 8009246:	3847      	subs	r0, #71	; 0x47
 8009248:	e7f7      	b.n	800923a <__hexdig_fun+0xa>
 800924a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800924e:	2b05      	cmp	r3, #5
 8009250:	d801      	bhi.n	8009256 <__hexdig_fun+0x26>
 8009252:	3827      	subs	r0, #39	; 0x27
 8009254:	e7f1      	b.n	800923a <__hexdig_fun+0xa>
 8009256:	2000      	movs	r0, #0
 8009258:	4770      	bx	lr
	...

0800925c <__gethex>:
 800925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009260:	ed2d 8b02 	vpush	{d8}
 8009264:	b089      	sub	sp, #36	; 0x24
 8009266:	ee08 0a10 	vmov	s16, r0
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	4bb4      	ldr	r3, [pc, #720]	; (8009540 <__gethex+0x2e4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	4618      	mov	r0, r3
 8009274:	468b      	mov	fp, r1
 8009276:	4690      	mov	r8, r2
 8009278:	f7f6 ffaa 	bl	80001d0 <strlen>
 800927c:	9b01      	ldr	r3, [sp, #4]
 800927e:	f8db 2000 	ldr.w	r2, [fp]
 8009282:	4403      	add	r3, r0
 8009284:	4682      	mov	sl, r0
 8009286:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	1c93      	adds	r3, r2, #2
 800928e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009292:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009296:	32fe      	adds	r2, #254	; 0xfe
 8009298:	18d1      	adds	r1, r2, r3
 800929a:	461f      	mov	r7, r3
 800929c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092a0:	9100      	str	r1, [sp, #0]
 80092a2:	2830      	cmp	r0, #48	; 0x30
 80092a4:	d0f8      	beq.n	8009298 <__gethex+0x3c>
 80092a6:	f7ff ffc3 	bl	8009230 <__hexdig_fun>
 80092aa:	4604      	mov	r4, r0
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d13a      	bne.n	8009326 <__gethex+0xca>
 80092b0:	9901      	ldr	r1, [sp, #4]
 80092b2:	4652      	mov	r2, sl
 80092b4:	4638      	mov	r0, r7
 80092b6:	f001 fa33 	bl	800a720 <strncmp>
 80092ba:	4605      	mov	r5, r0
 80092bc:	2800      	cmp	r0, #0
 80092be:	d168      	bne.n	8009392 <__gethex+0x136>
 80092c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80092c4:	eb07 060a 	add.w	r6, r7, sl
 80092c8:	f7ff ffb2 	bl	8009230 <__hexdig_fun>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d062      	beq.n	8009396 <__gethex+0x13a>
 80092d0:	4633      	mov	r3, r6
 80092d2:	7818      	ldrb	r0, [r3, #0]
 80092d4:	2830      	cmp	r0, #48	; 0x30
 80092d6:	461f      	mov	r7, r3
 80092d8:	f103 0301 	add.w	r3, r3, #1
 80092dc:	d0f9      	beq.n	80092d2 <__gethex+0x76>
 80092de:	f7ff ffa7 	bl	8009230 <__hexdig_fun>
 80092e2:	2301      	movs	r3, #1
 80092e4:	fab0 f480 	clz	r4, r0
 80092e8:	0964      	lsrs	r4, r4, #5
 80092ea:	4635      	mov	r5, r6
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	463a      	mov	r2, r7
 80092f0:	4616      	mov	r6, r2
 80092f2:	3201      	adds	r2, #1
 80092f4:	7830      	ldrb	r0, [r6, #0]
 80092f6:	f7ff ff9b 	bl	8009230 <__hexdig_fun>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d1f8      	bne.n	80092f0 <__gethex+0x94>
 80092fe:	9901      	ldr	r1, [sp, #4]
 8009300:	4652      	mov	r2, sl
 8009302:	4630      	mov	r0, r6
 8009304:	f001 fa0c 	bl	800a720 <strncmp>
 8009308:	b980      	cbnz	r0, 800932c <__gethex+0xd0>
 800930a:	b94d      	cbnz	r5, 8009320 <__gethex+0xc4>
 800930c:	eb06 050a 	add.w	r5, r6, sl
 8009310:	462a      	mov	r2, r5
 8009312:	4616      	mov	r6, r2
 8009314:	3201      	adds	r2, #1
 8009316:	7830      	ldrb	r0, [r6, #0]
 8009318:	f7ff ff8a 	bl	8009230 <__hexdig_fun>
 800931c:	2800      	cmp	r0, #0
 800931e:	d1f8      	bne.n	8009312 <__gethex+0xb6>
 8009320:	1bad      	subs	r5, r5, r6
 8009322:	00ad      	lsls	r5, r5, #2
 8009324:	e004      	b.n	8009330 <__gethex+0xd4>
 8009326:	2400      	movs	r4, #0
 8009328:	4625      	mov	r5, r4
 800932a:	e7e0      	b.n	80092ee <__gethex+0x92>
 800932c:	2d00      	cmp	r5, #0
 800932e:	d1f7      	bne.n	8009320 <__gethex+0xc4>
 8009330:	7833      	ldrb	r3, [r6, #0]
 8009332:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009336:	2b50      	cmp	r3, #80	; 0x50
 8009338:	d13b      	bne.n	80093b2 <__gethex+0x156>
 800933a:	7873      	ldrb	r3, [r6, #1]
 800933c:	2b2b      	cmp	r3, #43	; 0x2b
 800933e:	d02c      	beq.n	800939a <__gethex+0x13e>
 8009340:	2b2d      	cmp	r3, #45	; 0x2d
 8009342:	d02e      	beq.n	80093a2 <__gethex+0x146>
 8009344:	1c71      	adds	r1, r6, #1
 8009346:	f04f 0900 	mov.w	r9, #0
 800934a:	7808      	ldrb	r0, [r1, #0]
 800934c:	f7ff ff70 	bl	8009230 <__hexdig_fun>
 8009350:	1e43      	subs	r3, r0, #1
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b18      	cmp	r3, #24
 8009356:	d82c      	bhi.n	80093b2 <__gethex+0x156>
 8009358:	f1a0 0210 	sub.w	r2, r0, #16
 800935c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009360:	f7ff ff66 	bl	8009230 <__hexdig_fun>
 8009364:	1e43      	subs	r3, r0, #1
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b18      	cmp	r3, #24
 800936a:	d91d      	bls.n	80093a8 <__gethex+0x14c>
 800936c:	f1b9 0f00 	cmp.w	r9, #0
 8009370:	d000      	beq.n	8009374 <__gethex+0x118>
 8009372:	4252      	negs	r2, r2
 8009374:	4415      	add	r5, r2
 8009376:	f8cb 1000 	str.w	r1, [fp]
 800937a:	b1e4      	cbz	r4, 80093b6 <__gethex+0x15a>
 800937c:	9b00      	ldr	r3, [sp, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bf14      	ite	ne
 8009382:	2700      	movne	r7, #0
 8009384:	2706      	moveq	r7, #6
 8009386:	4638      	mov	r0, r7
 8009388:	b009      	add	sp, #36	; 0x24
 800938a:	ecbd 8b02 	vpop	{d8}
 800938e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009392:	463e      	mov	r6, r7
 8009394:	4625      	mov	r5, r4
 8009396:	2401      	movs	r4, #1
 8009398:	e7ca      	b.n	8009330 <__gethex+0xd4>
 800939a:	f04f 0900 	mov.w	r9, #0
 800939e:	1cb1      	adds	r1, r6, #2
 80093a0:	e7d3      	b.n	800934a <__gethex+0xee>
 80093a2:	f04f 0901 	mov.w	r9, #1
 80093a6:	e7fa      	b.n	800939e <__gethex+0x142>
 80093a8:	230a      	movs	r3, #10
 80093aa:	fb03 0202 	mla	r2, r3, r2, r0
 80093ae:	3a10      	subs	r2, #16
 80093b0:	e7d4      	b.n	800935c <__gethex+0x100>
 80093b2:	4631      	mov	r1, r6
 80093b4:	e7df      	b.n	8009376 <__gethex+0x11a>
 80093b6:	1bf3      	subs	r3, r6, r7
 80093b8:	3b01      	subs	r3, #1
 80093ba:	4621      	mov	r1, r4
 80093bc:	2b07      	cmp	r3, #7
 80093be:	dc0b      	bgt.n	80093d8 <__gethex+0x17c>
 80093c0:	ee18 0a10 	vmov	r0, s16
 80093c4:	f000 fa7e 	bl	80098c4 <_Balloc>
 80093c8:	4604      	mov	r4, r0
 80093ca:	b940      	cbnz	r0, 80093de <__gethex+0x182>
 80093cc:	4b5d      	ldr	r3, [pc, #372]	; (8009544 <__gethex+0x2e8>)
 80093ce:	4602      	mov	r2, r0
 80093d0:	21de      	movs	r1, #222	; 0xde
 80093d2:	485d      	ldr	r0, [pc, #372]	; (8009548 <__gethex+0x2ec>)
 80093d4:	f001 f9c6 	bl	800a764 <__assert_func>
 80093d8:	3101      	adds	r1, #1
 80093da:	105b      	asrs	r3, r3, #1
 80093dc:	e7ee      	b.n	80093bc <__gethex+0x160>
 80093de:	f100 0914 	add.w	r9, r0, #20
 80093e2:	f04f 0b00 	mov.w	fp, #0
 80093e6:	f1ca 0301 	rsb	r3, sl, #1
 80093ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80093ee:	f8cd b000 	str.w	fp, [sp]
 80093f2:	9306      	str	r3, [sp, #24]
 80093f4:	42b7      	cmp	r7, r6
 80093f6:	d340      	bcc.n	800947a <__gethex+0x21e>
 80093f8:	9802      	ldr	r0, [sp, #8]
 80093fa:	9b00      	ldr	r3, [sp, #0]
 80093fc:	f840 3b04 	str.w	r3, [r0], #4
 8009400:	eba0 0009 	sub.w	r0, r0, r9
 8009404:	1080      	asrs	r0, r0, #2
 8009406:	0146      	lsls	r6, r0, #5
 8009408:	6120      	str	r0, [r4, #16]
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fb4c 	bl	8009aa8 <__hi0bits>
 8009410:	1a30      	subs	r0, r6, r0
 8009412:	f8d8 6000 	ldr.w	r6, [r8]
 8009416:	42b0      	cmp	r0, r6
 8009418:	dd63      	ble.n	80094e2 <__gethex+0x286>
 800941a:	1b87      	subs	r7, r0, r6
 800941c:	4639      	mov	r1, r7
 800941e:	4620      	mov	r0, r4
 8009420:	f000 fef0 	bl	800a204 <__any_on>
 8009424:	4682      	mov	sl, r0
 8009426:	b1a8      	cbz	r0, 8009454 <__gethex+0x1f8>
 8009428:	1e7b      	subs	r3, r7, #1
 800942a:	1159      	asrs	r1, r3, #5
 800942c:	f003 021f 	and.w	r2, r3, #31
 8009430:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009434:	f04f 0a01 	mov.w	sl, #1
 8009438:	fa0a f202 	lsl.w	r2, sl, r2
 800943c:	420a      	tst	r2, r1
 800943e:	d009      	beq.n	8009454 <__gethex+0x1f8>
 8009440:	4553      	cmp	r3, sl
 8009442:	dd05      	ble.n	8009450 <__gethex+0x1f4>
 8009444:	1eb9      	subs	r1, r7, #2
 8009446:	4620      	mov	r0, r4
 8009448:	f000 fedc 	bl	800a204 <__any_on>
 800944c:	2800      	cmp	r0, #0
 800944e:	d145      	bne.n	80094dc <__gethex+0x280>
 8009450:	f04f 0a02 	mov.w	sl, #2
 8009454:	4639      	mov	r1, r7
 8009456:	4620      	mov	r0, r4
 8009458:	f7ff fe98 	bl	800918c <rshift>
 800945c:	443d      	add	r5, r7
 800945e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009462:	42ab      	cmp	r3, r5
 8009464:	da4c      	bge.n	8009500 <__gethex+0x2a4>
 8009466:	ee18 0a10 	vmov	r0, s16
 800946a:	4621      	mov	r1, r4
 800946c:	f000 fa6a 	bl	8009944 <_Bfree>
 8009470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009472:	2300      	movs	r3, #0
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	27a3      	movs	r7, #163	; 0xa3
 8009478:	e785      	b.n	8009386 <__gethex+0x12a>
 800947a:	1e73      	subs	r3, r6, #1
 800947c:	9a05      	ldr	r2, [sp, #20]
 800947e:	9303      	str	r3, [sp, #12]
 8009480:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009484:	4293      	cmp	r3, r2
 8009486:	d019      	beq.n	80094bc <__gethex+0x260>
 8009488:	f1bb 0f20 	cmp.w	fp, #32
 800948c:	d107      	bne.n	800949e <__gethex+0x242>
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	9a00      	ldr	r2, [sp, #0]
 8009492:	f843 2b04 	str.w	r2, [r3], #4
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	2300      	movs	r3, #0
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	469b      	mov	fp, r3
 800949e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80094a2:	f7ff fec5 	bl	8009230 <__hexdig_fun>
 80094a6:	9b00      	ldr	r3, [sp, #0]
 80094a8:	f000 000f 	and.w	r0, r0, #15
 80094ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80094b0:	4303      	orrs	r3, r0
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	f10b 0b04 	add.w	fp, fp, #4
 80094b8:	9b03      	ldr	r3, [sp, #12]
 80094ba:	e00d      	b.n	80094d8 <__gethex+0x27c>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	9a06      	ldr	r2, [sp, #24]
 80094c0:	4413      	add	r3, r2
 80094c2:	42bb      	cmp	r3, r7
 80094c4:	d3e0      	bcc.n	8009488 <__gethex+0x22c>
 80094c6:	4618      	mov	r0, r3
 80094c8:	9901      	ldr	r1, [sp, #4]
 80094ca:	9307      	str	r3, [sp, #28]
 80094cc:	4652      	mov	r2, sl
 80094ce:	f001 f927 	bl	800a720 <strncmp>
 80094d2:	9b07      	ldr	r3, [sp, #28]
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d1d7      	bne.n	8009488 <__gethex+0x22c>
 80094d8:	461e      	mov	r6, r3
 80094da:	e78b      	b.n	80093f4 <__gethex+0x198>
 80094dc:	f04f 0a03 	mov.w	sl, #3
 80094e0:	e7b8      	b.n	8009454 <__gethex+0x1f8>
 80094e2:	da0a      	bge.n	80094fa <__gethex+0x29e>
 80094e4:	1a37      	subs	r7, r6, r0
 80094e6:	4621      	mov	r1, r4
 80094e8:	ee18 0a10 	vmov	r0, s16
 80094ec:	463a      	mov	r2, r7
 80094ee:	f000 fc45 	bl	8009d7c <__lshift>
 80094f2:	1bed      	subs	r5, r5, r7
 80094f4:	4604      	mov	r4, r0
 80094f6:	f100 0914 	add.w	r9, r0, #20
 80094fa:	f04f 0a00 	mov.w	sl, #0
 80094fe:	e7ae      	b.n	800945e <__gethex+0x202>
 8009500:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009504:	42a8      	cmp	r0, r5
 8009506:	dd72      	ble.n	80095ee <__gethex+0x392>
 8009508:	1b45      	subs	r5, r0, r5
 800950a:	42ae      	cmp	r6, r5
 800950c:	dc36      	bgt.n	800957c <__gethex+0x320>
 800950e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d02a      	beq.n	800956c <__gethex+0x310>
 8009516:	2b03      	cmp	r3, #3
 8009518:	d02c      	beq.n	8009574 <__gethex+0x318>
 800951a:	2b01      	cmp	r3, #1
 800951c:	d11c      	bne.n	8009558 <__gethex+0x2fc>
 800951e:	42ae      	cmp	r6, r5
 8009520:	d11a      	bne.n	8009558 <__gethex+0x2fc>
 8009522:	2e01      	cmp	r6, #1
 8009524:	d112      	bne.n	800954c <__gethex+0x2f0>
 8009526:	9a04      	ldr	r2, [sp, #16]
 8009528:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	2301      	movs	r3, #1
 8009530:	6123      	str	r3, [r4, #16]
 8009532:	f8c9 3000 	str.w	r3, [r9]
 8009536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009538:	2762      	movs	r7, #98	; 0x62
 800953a:	601c      	str	r4, [r3, #0]
 800953c:	e723      	b.n	8009386 <__gethex+0x12a>
 800953e:	bf00      	nop
 8009540:	0800b5c8 	.word	0x0800b5c8
 8009544:	0800b550 	.word	0x0800b550
 8009548:	0800b561 	.word	0x0800b561
 800954c:	1e71      	subs	r1, r6, #1
 800954e:	4620      	mov	r0, r4
 8009550:	f000 fe58 	bl	800a204 <__any_on>
 8009554:	2800      	cmp	r0, #0
 8009556:	d1e6      	bne.n	8009526 <__gethex+0x2ca>
 8009558:	ee18 0a10 	vmov	r0, s16
 800955c:	4621      	mov	r1, r4
 800955e:	f000 f9f1 	bl	8009944 <_Bfree>
 8009562:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009564:	2300      	movs	r3, #0
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	2750      	movs	r7, #80	; 0x50
 800956a:	e70c      	b.n	8009386 <__gethex+0x12a>
 800956c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f2      	bne.n	8009558 <__gethex+0x2fc>
 8009572:	e7d8      	b.n	8009526 <__gethex+0x2ca>
 8009574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1d5      	bne.n	8009526 <__gethex+0x2ca>
 800957a:	e7ed      	b.n	8009558 <__gethex+0x2fc>
 800957c:	1e6f      	subs	r7, r5, #1
 800957e:	f1ba 0f00 	cmp.w	sl, #0
 8009582:	d131      	bne.n	80095e8 <__gethex+0x38c>
 8009584:	b127      	cbz	r7, 8009590 <__gethex+0x334>
 8009586:	4639      	mov	r1, r7
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fe3b 	bl	800a204 <__any_on>
 800958e:	4682      	mov	sl, r0
 8009590:	117b      	asrs	r3, r7, #5
 8009592:	2101      	movs	r1, #1
 8009594:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009598:	f007 071f 	and.w	r7, r7, #31
 800959c:	fa01 f707 	lsl.w	r7, r1, r7
 80095a0:	421f      	tst	r7, r3
 80095a2:	4629      	mov	r1, r5
 80095a4:	4620      	mov	r0, r4
 80095a6:	bf18      	it	ne
 80095a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80095ac:	1b76      	subs	r6, r6, r5
 80095ae:	f7ff fded 	bl	800918c <rshift>
 80095b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095b6:	2702      	movs	r7, #2
 80095b8:	f1ba 0f00 	cmp.w	sl, #0
 80095bc:	d048      	beq.n	8009650 <__gethex+0x3f4>
 80095be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d015      	beq.n	80095f2 <__gethex+0x396>
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d017      	beq.n	80095fa <__gethex+0x39e>
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d109      	bne.n	80095e2 <__gethex+0x386>
 80095ce:	f01a 0f02 	tst.w	sl, #2
 80095d2:	d006      	beq.n	80095e2 <__gethex+0x386>
 80095d4:	f8d9 0000 	ldr.w	r0, [r9]
 80095d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80095dc:	f01a 0f01 	tst.w	sl, #1
 80095e0:	d10e      	bne.n	8009600 <__gethex+0x3a4>
 80095e2:	f047 0710 	orr.w	r7, r7, #16
 80095e6:	e033      	b.n	8009650 <__gethex+0x3f4>
 80095e8:	f04f 0a01 	mov.w	sl, #1
 80095ec:	e7d0      	b.n	8009590 <__gethex+0x334>
 80095ee:	2701      	movs	r7, #1
 80095f0:	e7e2      	b.n	80095b8 <__gethex+0x35c>
 80095f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095f4:	f1c3 0301 	rsb	r3, r3, #1
 80095f8:	9315      	str	r3, [sp, #84]	; 0x54
 80095fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0f0      	beq.n	80095e2 <__gethex+0x386>
 8009600:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009604:	f104 0314 	add.w	r3, r4, #20
 8009608:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800960c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009610:	f04f 0c00 	mov.w	ip, #0
 8009614:	4618      	mov	r0, r3
 8009616:	f853 2b04 	ldr.w	r2, [r3], #4
 800961a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800961e:	d01c      	beq.n	800965a <__gethex+0x3fe>
 8009620:	3201      	adds	r2, #1
 8009622:	6002      	str	r2, [r0, #0]
 8009624:	2f02      	cmp	r7, #2
 8009626:	f104 0314 	add.w	r3, r4, #20
 800962a:	d13f      	bne.n	80096ac <__gethex+0x450>
 800962c:	f8d8 2000 	ldr.w	r2, [r8]
 8009630:	3a01      	subs	r2, #1
 8009632:	42b2      	cmp	r2, r6
 8009634:	d10a      	bne.n	800964c <__gethex+0x3f0>
 8009636:	1171      	asrs	r1, r6, #5
 8009638:	2201      	movs	r2, #1
 800963a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800963e:	f006 061f 	and.w	r6, r6, #31
 8009642:	fa02 f606 	lsl.w	r6, r2, r6
 8009646:	421e      	tst	r6, r3
 8009648:	bf18      	it	ne
 800964a:	4617      	movne	r7, r2
 800964c:	f047 0720 	orr.w	r7, r7, #32
 8009650:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009652:	601c      	str	r4, [r3, #0]
 8009654:	9b04      	ldr	r3, [sp, #16]
 8009656:	601d      	str	r5, [r3, #0]
 8009658:	e695      	b.n	8009386 <__gethex+0x12a>
 800965a:	4299      	cmp	r1, r3
 800965c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009660:	d8d8      	bhi.n	8009614 <__gethex+0x3b8>
 8009662:	68a3      	ldr	r3, [r4, #8]
 8009664:	459b      	cmp	fp, r3
 8009666:	db19      	blt.n	800969c <__gethex+0x440>
 8009668:	6861      	ldr	r1, [r4, #4]
 800966a:	ee18 0a10 	vmov	r0, s16
 800966e:	3101      	adds	r1, #1
 8009670:	f000 f928 	bl	80098c4 <_Balloc>
 8009674:	4681      	mov	r9, r0
 8009676:	b918      	cbnz	r0, 8009680 <__gethex+0x424>
 8009678:	4b1a      	ldr	r3, [pc, #104]	; (80096e4 <__gethex+0x488>)
 800967a:	4602      	mov	r2, r0
 800967c:	2184      	movs	r1, #132	; 0x84
 800967e:	e6a8      	b.n	80093d2 <__gethex+0x176>
 8009680:	6922      	ldr	r2, [r4, #16]
 8009682:	3202      	adds	r2, #2
 8009684:	f104 010c 	add.w	r1, r4, #12
 8009688:	0092      	lsls	r2, r2, #2
 800968a:	300c      	adds	r0, #12
 800968c:	f000 f90c 	bl	80098a8 <memcpy>
 8009690:	4621      	mov	r1, r4
 8009692:	ee18 0a10 	vmov	r0, s16
 8009696:	f000 f955 	bl	8009944 <_Bfree>
 800969a:	464c      	mov	r4, r9
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096a4:	6122      	str	r2, [r4, #16]
 80096a6:	2201      	movs	r2, #1
 80096a8:	615a      	str	r2, [r3, #20]
 80096aa:	e7bb      	b.n	8009624 <__gethex+0x3c8>
 80096ac:	6922      	ldr	r2, [r4, #16]
 80096ae:	455a      	cmp	r2, fp
 80096b0:	dd0b      	ble.n	80096ca <__gethex+0x46e>
 80096b2:	2101      	movs	r1, #1
 80096b4:	4620      	mov	r0, r4
 80096b6:	f7ff fd69 	bl	800918c <rshift>
 80096ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096be:	3501      	adds	r5, #1
 80096c0:	42ab      	cmp	r3, r5
 80096c2:	f6ff aed0 	blt.w	8009466 <__gethex+0x20a>
 80096c6:	2701      	movs	r7, #1
 80096c8:	e7c0      	b.n	800964c <__gethex+0x3f0>
 80096ca:	f016 061f 	ands.w	r6, r6, #31
 80096ce:	d0fa      	beq.n	80096c6 <__gethex+0x46a>
 80096d0:	4453      	add	r3, sl
 80096d2:	f1c6 0620 	rsb	r6, r6, #32
 80096d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80096da:	f000 f9e5 	bl	8009aa8 <__hi0bits>
 80096de:	42b0      	cmp	r0, r6
 80096e0:	dbe7      	blt.n	80096b2 <__gethex+0x456>
 80096e2:	e7f0      	b.n	80096c6 <__gethex+0x46a>
 80096e4:	0800b550 	.word	0x0800b550

080096e8 <L_shift>:
 80096e8:	f1c2 0208 	rsb	r2, r2, #8
 80096ec:	0092      	lsls	r2, r2, #2
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	f1c2 0620 	rsb	r6, r2, #32
 80096f4:	6843      	ldr	r3, [r0, #4]
 80096f6:	6804      	ldr	r4, [r0, #0]
 80096f8:	fa03 f506 	lsl.w	r5, r3, r6
 80096fc:	432c      	orrs	r4, r5
 80096fe:	40d3      	lsrs	r3, r2
 8009700:	6004      	str	r4, [r0, #0]
 8009702:	f840 3f04 	str.w	r3, [r0, #4]!
 8009706:	4288      	cmp	r0, r1
 8009708:	d3f4      	bcc.n	80096f4 <L_shift+0xc>
 800970a:	bd70      	pop	{r4, r5, r6, pc}

0800970c <__match>:
 800970c:	b530      	push	{r4, r5, lr}
 800970e:	6803      	ldr	r3, [r0, #0]
 8009710:	3301      	adds	r3, #1
 8009712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009716:	b914      	cbnz	r4, 800971e <__match+0x12>
 8009718:	6003      	str	r3, [r0, #0]
 800971a:	2001      	movs	r0, #1
 800971c:	bd30      	pop	{r4, r5, pc}
 800971e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009722:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009726:	2d19      	cmp	r5, #25
 8009728:	bf98      	it	ls
 800972a:	3220      	addls	r2, #32
 800972c:	42a2      	cmp	r2, r4
 800972e:	d0f0      	beq.n	8009712 <__match+0x6>
 8009730:	2000      	movs	r0, #0
 8009732:	e7f3      	b.n	800971c <__match+0x10>

08009734 <__hexnan>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	680b      	ldr	r3, [r1, #0]
 800973a:	115e      	asrs	r6, r3, #5
 800973c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009740:	f013 031f 	ands.w	r3, r3, #31
 8009744:	b087      	sub	sp, #28
 8009746:	bf18      	it	ne
 8009748:	3604      	addne	r6, #4
 800974a:	2500      	movs	r5, #0
 800974c:	1f37      	subs	r7, r6, #4
 800974e:	4690      	mov	r8, r2
 8009750:	6802      	ldr	r2, [r0, #0]
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	4682      	mov	sl, r0
 8009756:	f846 5c04 	str.w	r5, [r6, #-4]
 800975a:	46b9      	mov	r9, r7
 800975c:	463c      	mov	r4, r7
 800975e:	9502      	str	r5, [sp, #8]
 8009760:	46ab      	mov	fp, r5
 8009762:	7851      	ldrb	r1, [r2, #1]
 8009764:	1c53      	adds	r3, r2, #1
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	b341      	cbz	r1, 80097bc <__hexnan+0x88>
 800976a:	4608      	mov	r0, r1
 800976c:	9205      	str	r2, [sp, #20]
 800976e:	9104      	str	r1, [sp, #16]
 8009770:	f7ff fd5e 	bl	8009230 <__hexdig_fun>
 8009774:	2800      	cmp	r0, #0
 8009776:	d14f      	bne.n	8009818 <__hexnan+0xe4>
 8009778:	9904      	ldr	r1, [sp, #16]
 800977a:	9a05      	ldr	r2, [sp, #20]
 800977c:	2920      	cmp	r1, #32
 800977e:	d818      	bhi.n	80097b2 <__hexnan+0x7e>
 8009780:	9b02      	ldr	r3, [sp, #8]
 8009782:	459b      	cmp	fp, r3
 8009784:	dd13      	ble.n	80097ae <__hexnan+0x7a>
 8009786:	454c      	cmp	r4, r9
 8009788:	d206      	bcs.n	8009798 <__hexnan+0x64>
 800978a:	2d07      	cmp	r5, #7
 800978c:	dc04      	bgt.n	8009798 <__hexnan+0x64>
 800978e:	462a      	mov	r2, r5
 8009790:	4649      	mov	r1, r9
 8009792:	4620      	mov	r0, r4
 8009794:	f7ff ffa8 	bl	80096e8 <L_shift>
 8009798:	4544      	cmp	r4, r8
 800979a:	d950      	bls.n	800983e <__hexnan+0x10a>
 800979c:	2300      	movs	r3, #0
 800979e:	f1a4 0904 	sub.w	r9, r4, #4
 80097a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80097a6:	f8cd b008 	str.w	fp, [sp, #8]
 80097aa:	464c      	mov	r4, r9
 80097ac:	461d      	mov	r5, r3
 80097ae:	9a03      	ldr	r2, [sp, #12]
 80097b0:	e7d7      	b.n	8009762 <__hexnan+0x2e>
 80097b2:	2929      	cmp	r1, #41	; 0x29
 80097b4:	d156      	bne.n	8009864 <__hexnan+0x130>
 80097b6:	3202      	adds	r2, #2
 80097b8:	f8ca 2000 	str.w	r2, [sl]
 80097bc:	f1bb 0f00 	cmp.w	fp, #0
 80097c0:	d050      	beq.n	8009864 <__hexnan+0x130>
 80097c2:	454c      	cmp	r4, r9
 80097c4:	d206      	bcs.n	80097d4 <__hexnan+0xa0>
 80097c6:	2d07      	cmp	r5, #7
 80097c8:	dc04      	bgt.n	80097d4 <__hexnan+0xa0>
 80097ca:	462a      	mov	r2, r5
 80097cc:	4649      	mov	r1, r9
 80097ce:	4620      	mov	r0, r4
 80097d0:	f7ff ff8a 	bl	80096e8 <L_shift>
 80097d4:	4544      	cmp	r4, r8
 80097d6:	d934      	bls.n	8009842 <__hexnan+0x10e>
 80097d8:	f1a8 0204 	sub.w	r2, r8, #4
 80097dc:	4623      	mov	r3, r4
 80097de:	f853 1b04 	ldr.w	r1, [r3], #4
 80097e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80097e6:	429f      	cmp	r7, r3
 80097e8:	d2f9      	bcs.n	80097de <__hexnan+0xaa>
 80097ea:	1b3b      	subs	r3, r7, r4
 80097ec:	f023 0303 	bic.w	r3, r3, #3
 80097f0:	3304      	adds	r3, #4
 80097f2:	3401      	adds	r4, #1
 80097f4:	3e03      	subs	r6, #3
 80097f6:	42b4      	cmp	r4, r6
 80097f8:	bf88      	it	hi
 80097fa:	2304      	movhi	r3, #4
 80097fc:	4443      	add	r3, r8
 80097fe:	2200      	movs	r2, #0
 8009800:	f843 2b04 	str.w	r2, [r3], #4
 8009804:	429f      	cmp	r7, r3
 8009806:	d2fb      	bcs.n	8009800 <__hexnan+0xcc>
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	b91b      	cbnz	r3, 8009814 <__hexnan+0xe0>
 800980c:	4547      	cmp	r7, r8
 800980e:	d127      	bne.n	8009860 <__hexnan+0x12c>
 8009810:	2301      	movs	r3, #1
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	2005      	movs	r0, #5
 8009816:	e026      	b.n	8009866 <__hexnan+0x132>
 8009818:	3501      	adds	r5, #1
 800981a:	2d08      	cmp	r5, #8
 800981c:	f10b 0b01 	add.w	fp, fp, #1
 8009820:	dd06      	ble.n	8009830 <__hexnan+0xfc>
 8009822:	4544      	cmp	r4, r8
 8009824:	d9c3      	bls.n	80097ae <__hexnan+0x7a>
 8009826:	2300      	movs	r3, #0
 8009828:	f844 3c04 	str.w	r3, [r4, #-4]
 800982c:	2501      	movs	r5, #1
 800982e:	3c04      	subs	r4, #4
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	f000 000f 	and.w	r0, r0, #15
 8009836:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800983a:	6022      	str	r2, [r4, #0]
 800983c:	e7b7      	b.n	80097ae <__hexnan+0x7a>
 800983e:	2508      	movs	r5, #8
 8009840:	e7b5      	b.n	80097ae <__hexnan+0x7a>
 8009842:	9b01      	ldr	r3, [sp, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0df      	beq.n	8009808 <__hexnan+0xd4>
 8009848:	f04f 32ff 	mov.w	r2, #4294967295
 800984c:	f1c3 0320 	rsb	r3, r3, #32
 8009850:	fa22 f303 	lsr.w	r3, r2, r3
 8009854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009858:	401a      	ands	r2, r3
 800985a:	f846 2c04 	str.w	r2, [r6, #-4]
 800985e:	e7d3      	b.n	8009808 <__hexnan+0xd4>
 8009860:	3f04      	subs	r7, #4
 8009862:	e7d1      	b.n	8009808 <__hexnan+0xd4>
 8009864:	2004      	movs	r0, #4
 8009866:	b007      	add	sp, #28
 8009868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800986c <_localeconv_r>:
 800986c:	4800      	ldr	r0, [pc, #0]	; (8009870 <_localeconv_r+0x4>)
 800986e:	4770      	bx	lr
 8009870:	20000164 	.word	0x20000164

08009874 <malloc>:
 8009874:	4b02      	ldr	r3, [pc, #8]	; (8009880 <malloc+0xc>)
 8009876:	4601      	mov	r1, r0
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	f000 bd67 	b.w	800a34c <_malloc_r>
 800987e:	bf00      	nop
 8009880:	2000000c 	.word	0x2000000c

08009884 <__ascii_mbtowc>:
 8009884:	b082      	sub	sp, #8
 8009886:	b901      	cbnz	r1, 800988a <__ascii_mbtowc+0x6>
 8009888:	a901      	add	r1, sp, #4
 800988a:	b142      	cbz	r2, 800989e <__ascii_mbtowc+0x1a>
 800988c:	b14b      	cbz	r3, 80098a2 <__ascii_mbtowc+0x1e>
 800988e:	7813      	ldrb	r3, [r2, #0]
 8009890:	600b      	str	r3, [r1, #0]
 8009892:	7812      	ldrb	r2, [r2, #0]
 8009894:	1e10      	subs	r0, r2, #0
 8009896:	bf18      	it	ne
 8009898:	2001      	movne	r0, #1
 800989a:	b002      	add	sp, #8
 800989c:	4770      	bx	lr
 800989e:	4610      	mov	r0, r2
 80098a0:	e7fb      	b.n	800989a <__ascii_mbtowc+0x16>
 80098a2:	f06f 0001 	mvn.w	r0, #1
 80098a6:	e7f8      	b.n	800989a <__ascii_mbtowc+0x16>

080098a8 <memcpy>:
 80098a8:	440a      	add	r2, r1
 80098aa:	4291      	cmp	r1, r2
 80098ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80098b0:	d100      	bne.n	80098b4 <memcpy+0xc>
 80098b2:	4770      	bx	lr
 80098b4:	b510      	push	{r4, lr}
 80098b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098be:	4291      	cmp	r1, r2
 80098c0:	d1f9      	bne.n	80098b6 <memcpy+0xe>
 80098c2:	bd10      	pop	{r4, pc}

080098c4 <_Balloc>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098c8:	4604      	mov	r4, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	b976      	cbnz	r6, 80098ec <_Balloc+0x28>
 80098ce:	2010      	movs	r0, #16
 80098d0:	f7ff ffd0 	bl	8009874 <malloc>
 80098d4:	4602      	mov	r2, r0
 80098d6:	6260      	str	r0, [r4, #36]	; 0x24
 80098d8:	b920      	cbnz	r0, 80098e4 <_Balloc+0x20>
 80098da:	4b18      	ldr	r3, [pc, #96]	; (800993c <_Balloc+0x78>)
 80098dc:	4818      	ldr	r0, [pc, #96]	; (8009940 <_Balloc+0x7c>)
 80098de:	2166      	movs	r1, #102	; 0x66
 80098e0:	f000 ff40 	bl	800a764 <__assert_func>
 80098e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098e8:	6006      	str	r6, [r0, #0]
 80098ea:	60c6      	str	r6, [r0, #12]
 80098ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098ee:	68f3      	ldr	r3, [r6, #12]
 80098f0:	b183      	cbz	r3, 8009914 <_Balloc+0x50>
 80098f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098fa:	b9b8      	cbnz	r0, 800992c <_Balloc+0x68>
 80098fc:	2101      	movs	r1, #1
 80098fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009902:	1d72      	adds	r2, r6, #5
 8009904:	0092      	lsls	r2, r2, #2
 8009906:	4620      	mov	r0, r4
 8009908:	f000 fc9d 	bl	800a246 <_calloc_r>
 800990c:	b160      	cbz	r0, 8009928 <_Balloc+0x64>
 800990e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009912:	e00e      	b.n	8009932 <_Balloc+0x6e>
 8009914:	2221      	movs	r2, #33	; 0x21
 8009916:	2104      	movs	r1, #4
 8009918:	4620      	mov	r0, r4
 800991a:	f000 fc94 	bl	800a246 <_calloc_r>
 800991e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009920:	60f0      	str	r0, [r6, #12]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e4      	bne.n	80098f2 <_Balloc+0x2e>
 8009928:	2000      	movs	r0, #0
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	6802      	ldr	r2, [r0, #0]
 800992e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009932:	2300      	movs	r3, #0
 8009934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009938:	e7f7      	b.n	800992a <_Balloc+0x66>
 800993a:	bf00      	nop
 800993c:	0800b4de 	.word	0x0800b4de
 8009940:	0800b5dc 	.word	0x0800b5dc

08009944 <_Bfree>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009948:	4605      	mov	r5, r0
 800994a:	460c      	mov	r4, r1
 800994c:	b976      	cbnz	r6, 800996c <_Bfree+0x28>
 800994e:	2010      	movs	r0, #16
 8009950:	f7ff ff90 	bl	8009874 <malloc>
 8009954:	4602      	mov	r2, r0
 8009956:	6268      	str	r0, [r5, #36]	; 0x24
 8009958:	b920      	cbnz	r0, 8009964 <_Bfree+0x20>
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <_Bfree+0x3c>)
 800995c:	4809      	ldr	r0, [pc, #36]	; (8009984 <_Bfree+0x40>)
 800995e:	218a      	movs	r1, #138	; 0x8a
 8009960:	f000 ff00 	bl	800a764 <__assert_func>
 8009964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009968:	6006      	str	r6, [r0, #0]
 800996a:	60c6      	str	r6, [r0, #12]
 800996c:	b13c      	cbz	r4, 800997e <_Bfree+0x3a>
 800996e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009970:	6862      	ldr	r2, [r4, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009978:	6021      	str	r1, [r4, #0]
 800997a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800997e:	bd70      	pop	{r4, r5, r6, pc}
 8009980:	0800b4de 	.word	0x0800b4de
 8009984:	0800b5dc 	.word	0x0800b5dc

08009988 <__multadd>:
 8009988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998c:	690d      	ldr	r5, [r1, #16]
 800998e:	4607      	mov	r7, r0
 8009990:	460c      	mov	r4, r1
 8009992:	461e      	mov	r6, r3
 8009994:	f101 0c14 	add.w	ip, r1, #20
 8009998:	2000      	movs	r0, #0
 800999a:	f8dc 3000 	ldr.w	r3, [ip]
 800999e:	b299      	uxth	r1, r3
 80099a0:	fb02 6101 	mla	r1, r2, r1, r6
 80099a4:	0c1e      	lsrs	r6, r3, #16
 80099a6:	0c0b      	lsrs	r3, r1, #16
 80099a8:	fb02 3306 	mla	r3, r2, r6, r3
 80099ac:	b289      	uxth	r1, r1
 80099ae:	3001      	adds	r0, #1
 80099b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099b4:	4285      	cmp	r5, r0
 80099b6:	f84c 1b04 	str.w	r1, [ip], #4
 80099ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099be:	dcec      	bgt.n	800999a <__multadd+0x12>
 80099c0:	b30e      	cbz	r6, 8009a06 <__multadd+0x7e>
 80099c2:	68a3      	ldr	r3, [r4, #8]
 80099c4:	42ab      	cmp	r3, r5
 80099c6:	dc19      	bgt.n	80099fc <__multadd+0x74>
 80099c8:	6861      	ldr	r1, [r4, #4]
 80099ca:	4638      	mov	r0, r7
 80099cc:	3101      	adds	r1, #1
 80099ce:	f7ff ff79 	bl	80098c4 <_Balloc>
 80099d2:	4680      	mov	r8, r0
 80099d4:	b928      	cbnz	r0, 80099e2 <__multadd+0x5a>
 80099d6:	4602      	mov	r2, r0
 80099d8:	4b0c      	ldr	r3, [pc, #48]	; (8009a0c <__multadd+0x84>)
 80099da:	480d      	ldr	r0, [pc, #52]	; (8009a10 <__multadd+0x88>)
 80099dc:	21b5      	movs	r1, #181	; 0xb5
 80099de:	f000 fec1 	bl	800a764 <__assert_func>
 80099e2:	6922      	ldr	r2, [r4, #16]
 80099e4:	3202      	adds	r2, #2
 80099e6:	f104 010c 	add.w	r1, r4, #12
 80099ea:	0092      	lsls	r2, r2, #2
 80099ec:	300c      	adds	r0, #12
 80099ee:	f7ff ff5b 	bl	80098a8 <memcpy>
 80099f2:	4621      	mov	r1, r4
 80099f4:	4638      	mov	r0, r7
 80099f6:	f7ff ffa5 	bl	8009944 <_Bfree>
 80099fa:	4644      	mov	r4, r8
 80099fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a00:	3501      	adds	r5, #1
 8009a02:	615e      	str	r6, [r3, #20]
 8009a04:	6125      	str	r5, [r4, #16]
 8009a06:	4620      	mov	r0, r4
 8009a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0c:	0800b550 	.word	0x0800b550
 8009a10:	0800b5dc 	.word	0x0800b5dc

08009a14 <__s2b>:
 8009a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a18:	460c      	mov	r4, r1
 8009a1a:	4615      	mov	r5, r2
 8009a1c:	461f      	mov	r7, r3
 8009a1e:	2209      	movs	r2, #9
 8009a20:	3308      	adds	r3, #8
 8009a22:	4606      	mov	r6, r0
 8009a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a28:	2100      	movs	r1, #0
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	db09      	blt.n	8009a44 <__s2b+0x30>
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7ff ff47 	bl	80098c4 <_Balloc>
 8009a36:	b940      	cbnz	r0, 8009a4a <__s2b+0x36>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	4b19      	ldr	r3, [pc, #100]	; (8009aa0 <__s2b+0x8c>)
 8009a3c:	4819      	ldr	r0, [pc, #100]	; (8009aa4 <__s2b+0x90>)
 8009a3e:	21ce      	movs	r1, #206	; 0xce
 8009a40:	f000 fe90 	bl	800a764 <__assert_func>
 8009a44:	0052      	lsls	r2, r2, #1
 8009a46:	3101      	adds	r1, #1
 8009a48:	e7f0      	b.n	8009a2c <__s2b+0x18>
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	6143      	str	r3, [r0, #20]
 8009a4e:	2d09      	cmp	r5, #9
 8009a50:	f04f 0301 	mov.w	r3, #1
 8009a54:	6103      	str	r3, [r0, #16]
 8009a56:	dd16      	ble.n	8009a86 <__s2b+0x72>
 8009a58:	f104 0909 	add.w	r9, r4, #9
 8009a5c:	46c8      	mov	r8, r9
 8009a5e:	442c      	add	r4, r5
 8009a60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a64:	4601      	mov	r1, r0
 8009a66:	3b30      	subs	r3, #48	; 0x30
 8009a68:	220a      	movs	r2, #10
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7ff ff8c 	bl	8009988 <__multadd>
 8009a70:	45a0      	cmp	r8, r4
 8009a72:	d1f5      	bne.n	8009a60 <__s2b+0x4c>
 8009a74:	f1a5 0408 	sub.w	r4, r5, #8
 8009a78:	444c      	add	r4, r9
 8009a7a:	1b2d      	subs	r5, r5, r4
 8009a7c:	1963      	adds	r3, r4, r5
 8009a7e:	42bb      	cmp	r3, r7
 8009a80:	db04      	blt.n	8009a8c <__s2b+0x78>
 8009a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a86:	340a      	adds	r4, #10
 8009a88:	2509      	movs	r5, #9
 8009a8a:	e7f6      	b.n	8009a7a <__s2b+0x66>
 8009a8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a90:	4601      	mov	r1, r0
 8009a92:	3b30      	subs	r3, #48	; 0x30
 8009a94:	220a      	movs	r2, #10
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff ff76 	bl	8009988 <__multadd>
 8009a9c:	e7ee      	b.n	8009a7c <__s2b+0x68>
 8009a9e:	bf00      	nop
 8009aa0:	0800b550 	.word	0x0800b550
 8009aa4:	0800b5dc 	.word	0x0800b5dc

08009aa8 <__hi0bits>:
 8009aa8:	0c03      	lsrs	r3, r0, #16
 8009aaa:	041b      	lsls	r3, r3, #16
 8009aac:	b9d3      	cbnz	r3, 8009ae4 <__hi0bits+0x3c>
 8009aae:	0400      	lsls	r0, r0, #16
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ab6:	bf04      	itt	eq
 8009ab8:	0200      	lsleq	r0, r0, #8
 8009aba:	3308      	addeq	r3, #8
 8009abc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ac0:	bf04      	itt	eq
 8009ac2:	0100      	lsleq	r0, r0, #4
 8009ac4:	3304      	addeq	r3, #4
 8009ac6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009aca:	bf04      	itt	eq
 8009acc:	0080      	lsleq	r0, r0, #2
 8009ace:	3302      	addeq	r3, #2
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	db05      	blt.n	8009ae0 <__hi0bits+0x38>
 8009ad4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ad8:	f103 0301 	add.w	r3, r3, #1
 8009adc:	bf08      	it	eq
 8009ade:	2320      	moveq	r3, #32
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	4770      	bx	lr
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e7e4      	b.n	8009ab2 <__hi0bits+0xa>

08009ae8 <__lo0bits>:
 8009ae8:	6803      	ldr	r3, [r0, #0]
 8009aea:	f013 0207 	ands.w	r2, r3, #7
 8009aee:	4601      	mov	r1, r0
 8009af0:	d00b      	beq.n	8009b0a <__lo0bits+0x22>
 8009af2:	07da      	lsls	r2, r3, #31
 8009af4:	d423      	bmi.n	8009b3e <__lo0bits+0x56>
 8009af6:	0798      	lsls	r0, r3, #30
 8009af8:	bf49      	itett	mi
 8009afa:	085b      	lsrmi	r3, r3, #1
 8009afc:	089b      	lsrpl	r3, r3, #2
 8009afe:	2001      	movmi	r0, #1
 8009b00:	600b      	strmi	r3, [r1, #0]
 8009b02:	bf5c      	itt	pl
 8009b04:	600b      	strpl	r3, [r1, #0]
 8009b06:	2002      	movpl	r0, #2
 8009b08:	4770      	bx	lr
 8009b0a:	b298      	uxth	r0, r3
 8009b0c:	b9a8      	cbnz	r0, 8009b3a <__lo0bits+0x52>
 8009b0e:	0c1b      	lsrs	r3, r3, #16
 8009b10:	2010      	movs	r0, #16
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	b90a      	cbnz	r2, 8009b1a <__lo0bits+0x32>
 8009b16:	3008      	adds	r0, #8
 8009b18:	0a1b      	lsrs	r3, r3, #8
 8009b1a:	071a      	lsls	r2, r3, #28
 8009b1c:	bf04      	itt	eq
 8009b1e:	091b      	lsreq	r3, r3, #4
 8009b20:	3004      	addeq	r0, #4
 8009b22:	079a      	lsls	r2, r3, #30
 8009b24:	bf04      	itt	eq
 8009b26:	089b      	lsreq	r3, r3, #2
 8009b28:	3002      	addeq	r0, #2
 8009b2a:	07da      	lsls	r2, r3, #31
 8009b2c:	d403      	bmi.n	8009b36 <__lo0bits+0x4e>
 8009b2e:	085b      	lsrs	r3, r3, #1
 8009b30:	f100 0001 	add.w	r0, r0, #1
 8009b34:	d005      	beq.n	8009b42 <__lo0bits+0x5a>
 8009b36:	600b      	str	r3, [r1, #0]
 8009b38:	4770      	bx	lr
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	e7e9      	b.n	8009b12 <__lo0bits+0x2a>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	4770      	bx	lr
 8009b42:	2020      	movs	r0, #32
 8009b44:	4770      	bx	lr
	...

08009b48 <__i2b>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	f7ff feb9 	bl	80098c4 <_Balloc>
 8009b52:	4602      	mov	r2, r0
 8009b54:	b928      	cbnz	r0, 8009b62 <__i2b+0x1a>
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <__i2b+0x24>)
 8009b58:	4805      	ldr	r0, [pc, #20]	; (8009b70 <__i2b+0x28>)
 8009b5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b5e:	f000 fe01 	bl	800a764 <__assert_func>
 8009b62:	2301      	movs	r3, #1
 8009b64:	6144      	str	r4, [r0, #20]
 8009b66:	6103      	str	r3, [r0, #16]
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0800b550 	.word	0x0800b550
 8009b70:	0800b5dc 	.word	0x0800b5dc

08009b74 <__multiply>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	4691      	mov	r9, r2
 8009b7a:	690a      	ldr	r2, [r1, #16]
 8009b7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	bfb8      	it	lt
 8009b84:	460b      	movlt	r3, r1
 8009b86:	460c      	mov	r4, r1
 8009b88:	bfbc      	itt	lt
 8009b8a:	464c      	movlt	r4, r9
 8009b8c:	4699      	movlt	r9, r3
 8009b8e:	6927      	ldr	r7, [r4, #16]
 8009b90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b94:	68a3      	ldr	r3, [r4, #8]
 8009b96:	6861      	ldr	r1, [r4, #4]
 8009b98:	eb07 060a 	add.w	r6, r7, sl
 8009b9c:	42b3      	cmp	r3, r6
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	bfb8      	it	lt
 8009ba2:	3101      	addlt	r1, #1
 8009ba4:	f7ff fe8e 	bl	80098c4 <_Balloc>
 8009ba8:	b930      	cbnz	r0, 8009bb8 <__multiply+0x44>
 8009baa:	4602      	mov	r2, r0
 8009bac:	4b44      	ldr	r3, [pc, #272]	; (8009cc0 <__multiply+0x14c>)
 8009bae:	4845      	ldr	r0, [pc, #276]	; (8009cc4 <__multiply+0x150>)
 8009bb0:	f240 115d 	movw	r1, #349	; 0x15d
 8009bb4:	f000 fdd6 	bl	800a764 <__assert_func>
 8009bb8:	f100 0514 	add.w	r5, r0, #20
 8009bbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4543      	cmp	r3, r8
 8009bc6:	d321      	bcc.n	8009c0c <__multiply+0x98>
 8009bc8:	f104 0314 	add.w	r3, r4, #20
 8009bcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bd0:	f109 0314 	add.w	r3, r9, #20
 8009bd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bd8:	9202      	str	r2, [sp, #8]
 8009bda:	1b3a      	subs	r2, r7, r4
 8009bdc:	3a15      	subs	r2, #21
 8009bde:	f022 0203 	bic.w	r2, r2, #3
 8009be2:	3204      	adds	r2, #4
 8009be4:	f104 0115 	add.w	r1, r4, #21
 8009be8:	428f      	cmp	r7, r1
 8009bea:	bf38      	it	cc
 8009bec:	2204      	movcc	r2, #4
 8009bee:	9201      	str	r2, [sp, #4]
 8009bf0:	9a02      	ldr	r2, [sp, #8]
 8009bf2:	9303      	str	r3, [sp, #12]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d80c      	bhi.n	8009c12 <__multiply+0x9e>
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	dd03      	ble.n	8009c04 <__multiply+0x90>
 8009bfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d05a      	beq.n	8009cba <__multiply+0x146>
 8009c04:	6106      	str	r6, [r0, #16]
 8009c06:	b005      	add	sp, #20
 8009c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0c:	f843 2b04 	str.w	r2, [r3], #4
 8009c10:	e7d8      	b.n	8009bc4 <__multiply+0x50>
 8009c12:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c16:	f1ba 0f00 	cmp.w	sl, #0
 8009c1a:	d024      	beq.n	8009c66 <__multiply+0xf2>
 8009c1c:	f104 0e14 	add.w	lr, r4, #20
 8009c20:	46a9      	mov	r9, r5
 8009c22:	f04f 0c00 	mov.w	ip, #0
 8009c26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c2a:	f8d9 1000 	ldr.w	r1, [r9]
 8009c2e:	fa1f fb82 	uxth.w	fp, r2
 8009c32:	b289      	uxth	r1, r1
 8009c34:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c40:	4461      	add	r1, ip
 8009c42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c46:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c4e:	b289      	uxth	r1, r1
 8009c50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c54:	4577      	cmp	r7, lr
 8009c56:	f849 1b04 	str.w	r1, [r9], #4
 8009c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c5e:	d8e2      	bhi.n	8009c26 <__multiply+0xb2>
 8009c60:	9a01      	ldr	r2, [sp, #4]
 8009c62:	f845 c002 	str.w	ip, [r5, r2]
 8009c66:	9a03      	ldr	r2, [sp, #12]
 8009c68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	f1b9 0f00 	cmp.w	r9, #0
 8009c72:	d020      	beq.n	8009cb6 <__multiply+0x142>
 8009c74:	6829      	ldr	r1, [r5, #0]
 8009c76:	f104 0c14 	add.w	ip, r4, #20
 8009c7a:	46ae      	mov	lr, r5
 8009c7c:	f04f 0a00 	mov.w	sl, #0
 8009c80:	f8bc b000 	ldrh.w	fp, [ip]
 8009c84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c88:	fb09 220b 	mla	r2, r9, fp, r2
 8009c8c:	4492      	add	sl, r2
 8009c8e:	b289      	uxth	r1, r1
 8009c90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c94:	f84e 1b04 	str.w	r1, [lr], #4
 8009c98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c9c:	f8be 1000 	ldrh.w	r1, [lr]
 8009ca0:	0c12      	lsrs	r2, r2, #16
 8009ca2:	fb09 1102 	mla	r1, r9, r2, r1
 8009ca6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009caa:	4567      	cmp	r7, ip
 8009cac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cb0:	d8e6      	bhi.n	8009c80 <__multiply+0x10c>
 8009cb2:	9a01      	ldr	r2, [sp, #4]
 8009cb4:	50a9      	str	r1, [r5, r2]
 8009cb6:	3504      	adds	r5, #4
 8009cb8:	e79a      	b.n	8009bf0 <__multiply+0x7c>
 8009cba:	3e01      	subs	r6, #1
 8009cbc:	e79c      	b.n	8009bf8 <__multiply+0x84>
 8009cbe:	bf00      	nop
 8009cc0:	0800b550 	.word	0x0800b550
 8009cc4:	0800b5dc 	.word	0x0800b5dc

08009cc8 <__pow5mult>:
 8009cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ccc:	4615      	mov	r5, r2
 8009cce:	f012 0203 	ands.w	r2, r2, #3
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	d007      	beq.n	8009ce8 <__pow5mult+0x20>
 8009cd8:	4c25      	ldr	r4, [pc, #148]	; (8009d70 <__pow5mult+0xa8>)
 8009cda:	3a01      	subs	r2, #1
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ce2:	f7ff fe51 	bl	8009988 <__multadd>
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	10ad      	asrs	r5, r5, #2
 8009cea:	d03d      	beq.n	8009d68 <__pow5mult+0xa0>
 8009cec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cee:	b97c      	cbnz	r4, 8009d10 <__pow5mult+0x48>
 8009cf0:	2010      	movs	r0, #16
 8009cf2:	f7ff fdbf 	bl	8009874 <malloc>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	6270      	str	r0, [r6, #36]	; 0x24
 8009cfa:	b928      	cbnz	r0, 8009d08 <__pow5mult+0x40>
 8009cfc:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <__pow5mult+0xac>)
 8009cfe:	481e      	ldr	r0, [pc, #120]	; (8009d78 <__pow5mult+0xb0>)
 8009d00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d04:	f000 fd2e 	bl	800a764 <__assert_func>
 8009d08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d0c:	6004      	str	r4, [r0, #0]
 8009d0e:	60c4      	str	r4, [r0, #12]
 8009d10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d18:	b94c      	cbnz	r4, 8009d2e <__pow5mult+0x66>
 8009d1a:	f240 2171 	movw	r1, #625	; 0x271
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff ff12 	bl	8009b48 <__i2b>
 8009d24:	2300      	movs	r3, #0
 8009d26:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	6003      	str	r3, [r0, #0]
 8009d2e:	f04f 0900 	mov.w	r9, #0
 8009d32:	07eb      	lsls	r3, r5, #31
 8009d34:	d50a      	bpl.n	8009d4c <__pow5mult+0x84>
 8009d36:	4639      	mov	r1, r7
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7ff ff1a 	bl	8009b74 <__multiply>
 8009d40:	4639      	mov	r1, r7
 8009d42:	4680      	mov	r8, r0
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7ff fdfd 	bl	8009944 <_Bfree>
 8009d4a:	4647      	mov	r7, r8
 8009d4c:	106d      	asrs	r5, r5, #1
 8009d4e:	d00b      	beq.n	8009d68 <__pow5mult+0xa0>
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	b938      	cbnz	r0, 8009d64 <__pow5mult+0x9c>
 8009d54:	4622      	mov	r2, r4
 8009d56:	4621      	mov	r1, r4
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff ff0b 	bl	8009b74 <__multiply>
 8009d5e:	6020      	str	r0, [r4, #0]
 8009d60:	f8c0 9000 	str.w	r9, [r0]
 8009d64:	4604      	mov	r4, r0
 8009d66:	e7e4      	b.n	8009d32 <__pow5mult+0x6a>
 8009d68:	4638      	mov	r0, r7
 8009d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d6e:	bf00      	nop
 8009d70:	0800b728 	.word	0x0800b728
 8009d74:	0800b4de 	.word	0x0800b4de
 8009d78:	0800b5dc 	.word	0x0800b5dc

08009d7c <__lshift>:
 8009d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d80:	460c      	mov	r4, r1
 8009d82:	6849      	ldr	r1, [r1, #4]
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d8a:	68a3      	ldr	r3, [r4, #8]
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	4691      	mov	r9, r2
 8009d90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d94:	f108 0601 	add.w	r6, r8, #1
 8009d98:	42b3      	cmp	r3, r6
 8009d9a:	db0b      	blt.n	8009db4 <__lshift+0x38>
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f7ff fd91 	bl	80098c4 <_Balloc>
 8009da2:	4605      	mov	r5, r0
 8009da4:	b948      	cbnz	r0, 8009dba <__lshift+0x3e>
 8009da6:	4602      	mov	r2, r0
 8009da8:	4b2a      	ldr	r3, [pc, #168]	; (8009e54 <__lshift+0xd8>)
 8009daa:	482b      	ldr	r0, [pc, #172]	; (8009e58 <__lshift+0xdc>)
 8009dac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009db0:	f000 fcd8 	bl	800a764 <__assert_func>
 8009db4:	3101      	adds	r1, #1
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	e7ee      	b.n	8009d98 <__lshift+0x1c>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f100 0114 	add.w	r1, r0, #20
 8009dc0:	f100 0210 	add.w	r2, r0, #16
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	4553      	cmp	r3, sl
 8009dc8:	db37      	blt.n	8009e3a <__lshift+0xbe>
 8009dca:	6920      	ldr	r0, [r4, #16]
 8009dcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dd0:	f104 0314 	add.w	r3, r4, #20
 8009dd4:	f019 091f 	ands.w	r9, r9, #31
 8009dd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ddc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009de0:	d02f      	beq.n	8009e42 <__lshift+0xc6>
 8009de2:	f1c9 0e20 	rsb	lr, r9, #32
 8009de6:	468a      	mov	sl, r1
 8009de8:	f04f 0c00 	mov.w	ip, #0
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	fa02 f209 	lsl.w	r2, r2, r9
 8009df2:	ea42 020c 	orr.w	r2, r2, ip
 8009df6:	f84a 2b04 	str.w	r2, [sl], #4
 8009dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfe:	4298      	cmp	r0, r3
 8009e00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e04:	d8f2      	bhi.n	8009dec <__lshift+0x70>
 8009e06:	1b03      	subs	r3, r0, r4
 8009e08:	3b15      	subs	r3, #21
 8009e0a:	f023 0303 	bic.w	r3, r3, #3
 8009e0e:	3304      	adds	r3, #4
 8009e10:	f104 0215 	add.w	r2, r4, #21
 8009e14:	4290      	cmp	r0, r2
 8009e16:	bf38      	it	cc
 8009e18:	2304      	movcc	r3, #4
 8009e1a:	f841 c003 	str.w	ip, [r1, r3]
 8009e1e:	f1bc 0f00 	cmp.w	ip, #0
 8009e22:	d001      	beq.n	8009e28 <__lshift+0xac>
 8009e24:	f108 0602 	add.w	r6, r8, #2
 8009e28:	3e01      	subs	r6, #1
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	612e      	str	r6, [r5, #16]
 8009e2e:	4621      	mov	r1, r4
 8009e30:	f7ff fd88 	bl	8009944 <_Bfree>
 8009e34:	4628      	mov	r0, r5
 8009e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e3e:	3301      	adds	r3, #1
 8009e40:	e7c1      	b.n	8009dc6 <__lshift+0x4a>
 8009e42:	3904      	subs	r1, #4
 8009e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e48:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e4c:	4298      	cmp	r0, r3
 8009e4e:	d8f9      	bhi.n	8009e44 <__lshift+0xc8>
 8009e50:	e7ea      	b.n	8009e28 <__lshift+0xac>
 8009e52:	bf00      	nop
 8009e54:	0800b550 	.word	0x0800b550
 8009e58:	0800b5dc 	.word	0x0800b5dc

08009e5c <__mcmp>:
 8009e5c:	b530      	push	{r4, r5, lr}
 8009e5e:	6902      	ldr	r2, [r0, #16]
 8009e60:	690c      	ldr	r4, [r1, #16]
 8009e62:	1b12      	subs	r2, r2, r4
 8009e64:	d10e      	bne.n	8009e84 <__mcmp+0x28>
 8009e66:	f100 0314 	add.w	r3, r0, #20
 8009e6a:	3114      	adds	r1, #20
 8009e6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e7c:	42a5      	cmp	r5, r4
 8009e7e:	d003      	beq.n	8009e88 <__mcmp+0x2c>
 8009e80:	d305      	bcc.n	8009e8e <__mcmp+0x32>
 8009e82:	2201      	movs	r2, #1
 8009e84:	4610      	mov	r0, r2
 8009e86:	bd30      	pop	{r4, r5, pc}
 8009e88:	4283      	cmp	r3, r0
 8009e8a:	d3f3      	bcc.n	8009e74 <__mcmp+0x18>
 8009e8c:	e7fa      	b.n	8009e84 <__mcmp+0x28>
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e92:	e7f7      	b.n	8009e84 <__mcmp+0x28>

08009e94 <__mdiff>:
 8009e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e98:	460c      	mov	r4, r1
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4690      	mov	r8, r2
 8009ea2:	f7ff ffdb 	bl	8009e5c <__mcmp>
 8009ea6:	1e05      	subs	r5, r0, #0
 8009ea8:	d110      	bne.n	8009ecc <__mdiff+0x38>
 8009eaa:	4629      	mov	r1, r5
 8009eac:	4630      	mov	r0, r6
 8009eae:	f7ff fd09 	bl	80098c4 <_Balloc>
 8009eb2:	b930      	cbnz	r0, 8009ec2 <__mdiff+0x2e>
 8009eb4:	4b3a      	ldr	r3, [pc, #232]	; (8009fa0 <__mdiff+0x10c>)
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	f240 2132 	movw	r1, #562	; 0x232
 8009ebc:	4839      	ldr	r0, [pc, #228]	; (8009fa4 <__mdiff+0x110>)
 8009ebe:	f000 fc51 	bl	800a764 <__assert_func>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ecc:	bfa4      	itt	ge
 8009ece:	4643      	movge	r3, r8
 8009ed0:	46a0      	movge	r8, r4
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ed8:	bfa6      	itte	ge
 8009eda:	461c      	movge	r4, r3
 8009edc:	2500      	movge	r5, #0
 8009ede:	2501      	movlt	r5, #1
 8009ee0:	f7ff fcf0 	bl	80098c4 <_Balloc>
 8009ee4:	b920      	cbnz	r0, 8009ef0 <__mdiff+0x5c>
 8009ee6:	4b2e      	ldr	r3, [pc, #184]	; (8009fa0 <__mdiff+0x10c>)
 8009ee8:	4602      	mov	r2, r0
 8009eea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009eee:	e7e5      	b.n	8009ebc <__mdiff+0x28>
 8009ef0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ef4:	6926      	ldr	r6, [r4, #16]
 8009ef6:	60c5      	str	r5, [r0, #12]
 8009ef8:	f104 0914 	add.w	r9, r4, #20
 8009efc:	f108 0514 	add.w	r5, r8, #20
 8009f00:	f100 0e14 	add.w	lr, r0, #20
 8009f04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f0c:	f108 0210 	add.w	r2, r8, #16
 8009f10:	46f2      	mov	sl, lr
 8009f12:	2100      	movs	r1, #0
 8009f14:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f1c:	fa1f f883 	uxth.w	r8, r3
 8009f20:	fa11 f18b 	uxtah	r1, r1, fp
 8009f24:	0c1b      	lsrs	r3, r3, #16
 8009f26:	eba1 0808 	sub.w	r8, r1, r8
 8009f2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f32:	fa1f f888 	uxth.w	r8, r8
 8009f36:	1419      	asrs	r1, r3, #16
 8009f38:	454e      	cmp	r6, r9
 8009f3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f3e:	f84a 3b04 	str.w	r3, [sl], #4
 8009f42:	d8e7      	bhi.n	8009f14 <__mdiff+0x80>
 8009f44:	1b33      	subs	r3, r6, r4
 8009f46:	3b15      	subs	r3, #21
 8009f48:	f023 0303 	bic.w	r3, r3, #3
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	3415      	adds	r4, #21
 8009f50:	42a6      	cmp	r6, r4
 8009f52:	bf38      	it	cc
 8009f54:	2304      	movcc	r3, #4
 8009f56:	441d      	add	r5, r3
 8009f58:	4473      	add	r3, lr
 8009f5a:	469e      	mov	lr, r3
 8009f5c:	462e      	mov	r6, r5
 8009f5e:	4566      	cmp	r6, ip
 8009f60:	d30e      	bcc.n	8009f80 <__mdiff+0xec>
 8009f62:	f10c 0203 	add.w	r2, ip, #3
 8009f66:	1b52      	subs	r2, r2, r5
 8009f68:	f022 0203 	bic.w	r2, r2, #3
 8009f6c:	3d03      	subs	r5, #3
 8009f6e:	45ac      	cmp	ip, r5
 8009f70:	bf38      	it	cc
 8009f72:	2200      	movcc	r2, #0
 8009f74:	441a      	add	r2, r3
 8009f76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f7a:	b17b      	cbz	r3, 8009f9c <__mdiff+0x108>
 8009f7c:	6107      	str	r7, [r0, #16]
 8009f7e:	e7a3      	b.n	8009ec8 <__mdiff+0x34>
 8009f80:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f84:	fa11 f288 	uxtah	r2, r1, r8
 8009f88:	1414      	asrs	r4, r2, #16
 8009f8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f8e:	b292      	uxth	r2, r2
 8009f90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f94:	f84e 2b04 	str.w	r2, [lr], #4
 8009f98:	1421      	asrs	r1, r4, #16
 8009f9a:	e7e0      	b.n	8009f5e <__mdiff+0xca>
 8009f9c:	3f01      	subs	r7, #1
 8009f9e:	e7ea      	b.n	8009f76 <__mdiff+0xe2>
 8009fa0:	0800b550 	.word	0x0800b550
 8009fa4:	0800b5dc 	.word	0x0800b5dc

08009fa8 <__ulp>:
 8009fa8:	b082      	sub	sp, #8
 8009faa:	ed8d 0b00 	vstr	d0, [sp]
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	4912      	ldr	r1, [pc, #72]	; (8009ffc <__ulp+0x54>)
 8009fb2:	4019      	ands	r1, r3
 8009fb4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009fb8:	2900      	cmp	r1, #0
 8009fba:	dd05      	ble.n	8009fc8 <__ulp+0x20>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	ec43 2b10 	vmov	d0, r2, r3
 8009fc4:	b002      	add	sp, #8
 8009fc6:	4770      	bx	lr
 8009fc8:	4249      	negs	r1, r1
 8009fca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009fce:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	f04f 0300 	mov.w	r3, #0
 8009fda:	da04      	bge.n	8009fe6 <__ulp+0x3e>
 8009fdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009fe0:	fa41 f300 	asr.w	r3, r1, r0
 8009fe4:	e7ec      	b.n	8009fc0 <__ulp+0x18>
 8009fe6:	f1a0 0114 	sub.w	r1, r0, #20
 8009fea:	291e      	cmp	r1, #30
 8009fec:	bfda      	itte	le
 8009fee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009ff2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009ff6:	2101      	movgt	r1, #1
 8009ff8:	460a      	mov	r2, r1
 8009ffa:	e7e1      	b.n	8009fc0 <__ulp+0x18>
 8009ffc:	7ff00000 	.word	0x7ff00000

0800a000 <__b2d>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	6905      	ldr	r5, [r0, #16]
 800a004:	f100 0714 	add.w	r7, r0, #20
 800a008:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a00c:	1f2e      	subs	r6, r5, #4
 800a00e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a012:	4620      	mov	r0, r4
 800a014:	f7ff fd48 	bl	8009aa8 <__hi0bits>
 800a018:	f1c0 0320 	rsb	r3, r0, #32
 800a01c:	280a      	cmp	r0, #10
 800a01e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a09c <__b2d+0x9c>
 800a022:	600b      	str	r3, [r1, #0]
 800a024:	dc14      	bgt.n	800a050 <__b2d+0x50>
 800a026:	f1c0 0e0b 	rsb	lr, r0, #11
 800a02a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a02e:	42b7      	cmp	r7, r6
 800a030:	ea41 030c 	orr.w	r3, r1, ip
 800a034:	bf34      	ite	cc
 800a036:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a03a:	2100      	movcs	r1, #0
 800a03c:	3015      	adds	r0, #21
 800a03e:	fa04 f000 	lsl.w	r0, r4, r0
 800a042:	fa21 f10e 	lsr.w	r1, r1, lr
 800a046:	ea40 0201 	orr.w	r2, r0, r1
 800a04a:	ec43 2b10 	vmov	d0, r2, r3
 800a04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a050:	42b7      	cmp	r7, r6
 800a052:	bf3a      	itte	cc
 800a054:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a058:	f1a5 0608 	subcc.w	r6, r5, #8
 800a05c:	2100      	movcs	r1, #0
 800a05e:	380b      	subs	r0, #11
 800a060:	d017      	beq.n	800a092 <__b2d+0x92>
 800a062:	f1c0 0c20 	rsb	ip, r0, #32
 800a066:	fa04 f500 	lsl.w	r5, r4, r0
 800a06a:	42be      	cmp	r6, r7
 800a06c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a070:	ea45 0504 	orr.w	r5, r5, r4
 800a074:	bf8c      	ite	hi
 800a076:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a07a:	2400      	movls	r4, #0
 800a07c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a080:	fa01 f000 	lsl.w	r0, r1, r0
 800a084:	fa24 f40c 	lsr.w	r4, r4, ip
 800a088:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a08c:	ea40 0204 	orr.w	r2, r0, r4
 800a090:	e7db      	b.n	800a04a <__b2d+0x4a>
 800a092:	ea44 030c 	orr.w	r3, r4, ip
 800a096:	460a      	mov	r2, r1
 800a098:	e7d7      	b.n	800a04a <__b2d+0x4a>
 800a09a:	bf00      	nop
 800a09c:	3ff00000 	.word	0x3ff00000

0800a0a0 <__d2b>:
 800a0a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	4689      	mov	r9, r1
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	ec57 6b10 	vmov	r6, r7, d0
 800a0ac:	4690      	mov	r8, r2
 800a0ae:	f7ff fc09 	bl	80098c4 <_Balloc>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	b930      	cbnz	r0, 800a0c4 <__d2b+0x24>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	4b25      	ldr	r3, [pc, #148]	; (800a150 <__d2b+0xb0>)
 800a0ba:	4826      	ldr	r0, [pc, #152]	; (800a154 <__d2b+0xb4>)
 800a0bc:	f240 310a 	movw	r1, #778	; 0x30a
 800a0c0:	f000 fb50 	bl	800a764 <__assert_func>
 800a0c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0cc:	bb35      	cbnz	r5, 800a11c <__d2b+0x7c>
 800a0ce:	2e00      	cmp	r6, #0
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	d028      	beq.n	800a126 <__d2b+0x86>
 800a0d4:	4668      	mov	r0, sp
 800a0d6:	9600      	str	r6, [sp, #0]
 800a0d8:	f7ff fd06 	bl	8009ae8 <__lo0bits>
 800a0dc:	9900      	ldr	r1, [sp, #0]
 800a0de:	b300      	cbz	r0, 800a122 <__d2b+0x82>
 800a0e0:	9a01      	ldr	r2, [sp, #4]
 800a0e2:	f1c0 0320 	rsb	r3, r0, #32
 800a0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	40c2      	lsrs	r2, r0
 800a0ee:	6163      	str	r3, [r4, #20]
 800a0f0:	9201      	str	r2, [sp, #4]
 800a0f2:	9b01      	ldr	r3, [sp, #4]
 800a0f4:	61a3      	str	r3, [r4, #24]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	bf14      	ite	ne
 800a0fa:	2202      	movne	r2, #2
 800a0fc:	2201      	moveq	r2, #1
 800a0fe:	6122      	str	r2, [r4, #16]
 800a100:	b1d5      	cbz	r5, 800a138 <__d2b+0x98>
 800a102:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a106:	4405      	add	r5, r0
 800a108:	f8c9 5000 	str.w	r5, [r9]
 800a10c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a110:	f8c8 0000 	str.w	r0, [r8]
 800a114:	4620      	mov	r0, r4
 800a116:	b003      	add	sp, #12
 800a118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a11c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a120:	e7d5      	b.n	800a0ce <__d2b+0x2e>
 800a122:	6161      	str	r1, [r4, #20]
 800a124:	e7e5      	b.n	800a0f2 <__d2b+0x52>
 800a126:	a801      	add	r0, sp, #4
 800a128:	f7ff fcde 	bl	8009ae8 <__lo0bits>
 800a12c:	9b01      	ldr	r3, [sp, #4]
 800a12e:	6163      	str	r3, [r4, #20]
 800a130:	2201      	movs	r2, #1
 800a132:	6122      	str	r2, [r4, #16]
 800a134:	3020      	adds	r0, #32
 800a136:	e7e3      	b.n	800a100 <__d2b+0x60>
 800a138:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a13c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a140:	f8c9 0000 	str.w	r0, [r9]
 800a144:	6918      	ldr	r0, [r3, #16]
 800a146:	f7ff fcaf 	bl	8009aa8 <__hi0bits>
 800a14a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a14e:	e7df      	b.n	800a110 <__d2b+0x70>
 800a150:	0800b550 	.word	0x0800b550
 800a154:	0800b5dc 	.word	0x0800b5dc

0800a158 <__ratio>:
 800a158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	4688      	mov	r8, r1
 800a15e:	4669      	mov	r1, sp
 800a160:	4681      	mov	r9, r0
 800a162:	f7ff ff4d 	bl	800a000 <__b2d>
 800a166:	a901      	add	r1, sp, #4
 800a168:	4640      	mov	r0, r8
 800a16a:	ec55 4b10 	vmov	r4, r5, d0
 800a16e:	f7ff ff47 	bl	800a000 <__b2d>
 800a172:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a176:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a17a:	eba3 0c02 	sub.w	ip, r3, r2
 800a17e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a188:	ec51 0b10 	vmov	r0, r1, d0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	bfd6      	itet	le
 800a190:	460a      	movle	r2, r1
 800a192:	462a      	movgt	r2, r5
 800a194:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a198:	468b      	mov	fp, r1
 800a19a:	462f      	mov	r7, r5
 800a19c:	bfd4      	ite	le
 800a19e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	ee10 2a10 	vmov	r2, s0
 800a1ac:	465b      	mov	r3, fp
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	f7f6 fb4c 	bl	800084c <__aeabi_ddiv>
 800a1b4:	ec41 0b10 	vmov	d0, r0, r1
 800a1b8:	b003      	add	sp, #12
 800a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1be <__copybits>:
 800a1be:	3901      	subs	r1, #1
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	1149      	asrs	r1, r1, #5
 800a1c4:	6914      	ldr	r4, [r2, #16]
 800a1c6:	3101      	adds	r1, #1
 800a1c8:	f102 0314 	add.w	r3, r2, #20
 800a1cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a1d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1d4:	1f05      	subs	r5, r0, #4
 800a1d6:	42a3      	cmp	r3, r4
 800a1d8:	d30c      	bcc.n	800a1f4 <__copybits+0x36>
 800a1da:	1aa3      	subs	r3, r4, r2
 800a1dc:	3b11      	subs	r3, #17
 800a1de:	f023 0303 	bic.w	r3, r3, #3
 800a1e2:	3211      	adds	r2, #17
 800a1e4:	42a2      	cmp	r2, r4
 800a1e6:	bf88      	it	hi
 800a1e8:	2300      	movhi	r3, #0
 800a1ea:	4418      	add	r0, r3
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4288      	cmp	r0, r1
 800a1f0:	d305      	bcc.n	800a1fe <__copybits+0x40>
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1fc:	e7eb      	b.n	800a1d6 <__copybits+0x18>
 800a1fe:	f840 3b04 	str.w	r3, [r0], #4
 800a202:	e7f4      	b.n	800a1ee <__copybits+0x30>

0800a204 <__any_on>:
 800a204:	f100 0214 	add.w	r2, r0, #20
 800a208:	6900      	ldr	r0, [r0, #16]
 800a20a:	114b      	asrs	r3, r1, #5
 800a20c:	4298      	cmp	r0, r3
 800a20e:	b510      	push	{r4, lr}
 800a210:	db11      	blt.n	800a236 <__any_on+0x32>
 800a212:	dd0a      	ble.n	800a22a <__any_on+0x26>
 800a214:	f011 011f 	ands.w	r1, r1, #31
 800a218:	d007      	beq.n	800a22a <__any_on+0x26>
 800a21a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a21e:	fa24 f001 	lsr.w	r0, r4, r1
 800a222:	fa00 f101 	lsl.w	r1, r0, r1
 800a226:	428c      	cmp	r4, r1
 800a228:	d10b      	bne.n	800a242 <__any_on+0x3e>
 800a22a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a22e:	4293      	cmp	r3, r2
 800a230:	d803      	bhi.n	800a23a <__any_on+0x36>
 800a232:	2000      	movs	r0, #0
 800a234:	bd10      	pop	{r4, pc}
 800a236:	4603      	mov	r3, r0
 800a238:	e7f7      	b.n	800a22a <__any_on+0x26>
 800a23a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a23e:	2900      	cmp	r1, #0
 800a240:	d0f5      	beq.n	800a22e <__any_on+0x2a>
 800a242:	2001      	movs	r0, #1
 800a244:	e7f6      	b.n	800a234 <__any_on+0x30>

0800a246 <_calloc_r>:
 800a246:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a248:	fba1 2402 	umull	r2, r4, r1, r2
 800a24c:	b94c      	cbnz	r4, 800a262 <_calloc_r+0x1c>
 800a24e:	4611      	mov	r1, r2
 800a250:	9201      	str	r2, [sp, #4]
 800a252:	f000 f87b 	bl	800a34c <_malloc_r>
 800a256:	9a01      	ldr	r2, [sp, #4]
 800a258:	4605      	mov	r5, r0
 800a25a:	b930      	cbnz	r0, 800a26a <_calloc_r+0x24>
 800a25c:	4628      	mov	r0, r5
 800a25e:	b003      	add	sp, #12
 800a260:	bd30      	pop	{r4, r5, pc}
 800a262:	220c      	movs	r2, #12
 800a264:	6002      	str	r2, [r0, #0]
 800a266:	2500      	movs	r5, #0
 800a268:	e7f8      	b.n	800a25c <_calloc_r+0x16>
 800a26a:	4621      	mov	r1, r4
 800a26c:	f7fc fbc0 	bl	80069f0 <memset>
 800a270:	e7f4      	b.n	800a25c <_calloc_r+0x16>
	...

0800a274 <_free_r>:
 800a274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a276:	2900      	cmp	r1, #0
 800a278:	d044      	beq.n	800a304 <_free_r+0x90>
 800a27a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a27e:	9001      	str	r0, [sp, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	f1a1 0404 	sub.w	r4, r1, #4
 800a286:	bfb8      	it	lt
 800a288:	18e4      	addlt	r4, r4, r3
 800a28a:	f000 fab5 	bl	800a7f8 <__malloc_lock>
 800a28e:	4a1e      	ldr	r2, [pc, #120]	; (800a308 <_free_r+0x94>)
 800a290:	9801      	ldr	r0, [sp, #4]
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	b933      	cbnz	r3, 800a2a4 <_free_r+0x30>
 800a296:	6063      	str	r3, [r4, #4]
 800a298:	6014      	str	r4, [r2, #0]
 800a29a:	b003      	add	sp, #12
 800a29c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2a0:	f000 bab0 	b.w	800a804 <__malloc_unlock>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d908      	bls.n	800a2ba <_free_r+0x46>
 800a2a8:	6825      	ldr	r5, [r4, #0]
 800a2aa:	1961      	adds	r1, r4, r5
 800a2ac:	428b      	cmp	r3, r1
 800a2ae:	bf01      	itttt	eq
 800a2b0:	6819      	ldreq	r1, [r3, #0]
 800a2b2:	685b      	ldreq	r3, [r3, #4]
 800a2b4:	1949      	addeq	r1, r1, r5
 800a2b6:	6021      	streq	r1, [r4, #0]
 800a2b8:	e7ed      	b.n	800a296 <_free_r+0x22>
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b10b      	cbz	r3, 800a2c4 <_free_r+0x50>
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d9fa      	bls.n	800a2ba <_free_r+0x46>
 800a2c4:	6811      	ldr	r1, [r2, #0]
 800a2c6:	1855      	adds	r5, r2, r1
 800a2c8:	42a5      	cmp	r5, r4
 800a2ca:	d10b      	bne.n	800a2e4 <_free_r+0x70>
 800a2cc:	6824      	ldr	r4, [r4, #0]
 800a2ce:	4421      	add	r1, r4
 800a2d0:	1854      	adds	r4, r2, r1
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	6011      	str	r1, [r2, #0]
 800a2d6:	d1e0      	bne.n	800a29a <_free_r+0x26>
 800a2d8:	681c      	ldr	r4, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	6053      	str	r3, [r2, #4]
 800a2de:	4421      	add	r1, r4
 800a2e0:	6011      	str	r1, [r2, #0]
 800a2e2:	e7da      	b.n	800a29a <_free_r+0x26>
 800a2e4:	d902      	bls.n	800a2ec <_free_r+0x78>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	e7d6      	b.n	800a29a <_free_r+0x26>
 800a2ec:	6825      	ldr	r5, [r4, #0]
 800a2ee:	1961      	adds	r1, r4, r5
 800a2f0:	428b      	cmp	r3, r1
 800a2f2:	bf04      	itt	eq
 800a2f4:	6819      	ldreq	r1, [r3, #0]
 800a2f6:	685b      	ldreq	r3, [r3, #4]
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	bf04      	itt	eq
 800a2fc:	1949      	addeq	r1, r1, r5
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	6054      	str	r4, [r2, #4]
 800a302:	e7ca      	b.n	800a29a <_free_r+0x26>
 800a304:	b003      	add	sp, #12
 800a306:	bd30      	pop	{r4, r5, pc}
 800a308:	200004f4 	.word	0x200004f4

0800a30c <sbrk_aligned>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	4e0e      	ldr	r6, [pc, #56]	; (800a348 <sbrk_aligned+0x3c>)
 800a310:	460c      	mov	r4, r1
 800a312:	6831      	ldr	r1, [r6, #0]
 800a314:	4605      	mov	r5, r0
 800a316:	b911      	cbnz	r1, 800a31e <sbrk_aligned+0x12>
 800a318:	f000 f9f2 	bl	800a700 <_sbrk_r>
 800a31c:	6030      	str	r0, [r6, #0]
 800a31e:	4621      	mov	r1, r4
 800a320:	4628      	mov	r0, r5
 800a322:	f000 f9ed 	bl	800a700 <_sbrk_r>
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	d00a      	beq.n	800a340 <sbrk_aligned+0x34>
 800a32a:	1cc4      	adds	r4, r0, #3
 800a32c:	f024 0403 	bic.w	r4, r4, #3
 800a330:	42a0      	cmp	r0, r4
 800a332:	d007      	beq.n	800a344 <sbrk_aligned+0x38>
 800a334:	1a21      	subs	r1, r4, r0
 800a336:	4628      	mov	r0, r5
 800a338:	f000 f9e2 	bl	800a700 <_sbrk_r>
 800a33c:	3001      	adds	r0, #1
 800a33e:	d101      	bne.n	800a344 <sbrk_aligned+0x38>
 800a340:	f04f 34ff 	mov.w	r4, #4294967295
 800a344:	4620      	mov	r0, r4
 800a346:	bd70      	pop	{r4, r5, r6, pc}
 800a348:	200004f8 	.word	0x200004f8

0800a34c <_malloc_r>:
 800a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a350:	1ccd      	adds	r5, r1, #3
 800a352:	f025 0503 	bic.w	r5, r5, #3
 800a356:	3508      	adds	r5, #8
 800a358:	2d0c      	cmp	r5, #12
 800a35a:	bf38      	it	cc
 800a35c:	250c      	movcc	r5, #12
 800a35e:	2d00      	cmp	r5, #0
 800a360:	4607      	mov	r7, r0
 800a362:	db01      	blt.n	800a368 <_malloc_r+0x1c>
 800a364:	42a9      	cmp	r1, r5
 800a366:	d905      	bls.n	800a374 <_malloc_r+0x28>
 800a368:	230c      	movs	r3, #12
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	2600      	movs	r6, #0
 800a36e:	4630      	mov	r0, r6
 800a370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a374:	4e2e      	ldr	r6, [pc, #184]	; (800a430 <_malloc_r+0xe4>)
 800a376:	f000 fa3f 	bl	800a7f8 <__malloc_lock>
 800a37a:	6833      	ldr	r3, [r6, #0]
 800a37c:	461c      	mov	r4, r3
 800a37e:	bb34      	cbnz	r4, 800a3ce <_malloc_r+0x82>
 800a380:	4629      	mov	r1, r5
 800a382:	4638      	mov	r0, r7
 800a384:	f7ff ffc2 	bl	800a30c <sbrk_aligned>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	4604      	mov	r4, r0
 800a38c:	d14d      	bne.n	800a42a <_malloc_r+0xde>
 800a38e:	6834      	ldr	r4, [r6, #0]
 800a390:	4626      	mov	r6, r4
 800a392:	2e00      	cmp	r6, #0
 800a394:	d140      	bne.n	800a418 <_malloc_r+0xcc>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	4631      	mov	r1, r6
 800a39a:	4638      	mov	r0, r7
 800a39c:	eb04 0803 	add.w	r8, r4, r3
 800a3a0:	f000 f9ae 	bl	800a700 <_sbrk_r>
 800a3a4:	4580      	cmp	r8, r0
 800a3a6:	d13a      	bne.n	800a41e <_malloc_r+0xd2>
 800a3a8:	6821      	ldr	r1, [r4, #0]
 800a3aa:	3503      	adds	r5, #3
 800a3ac:	1a6d      	subs	r5, r5, r1
 800a3ae:	f025 0503 	bic.w	r5, r5, #3
 800a3b2:	3508      	adds	r5, #8
 800a3b4:	2d0c      	cmp	r5, #12
 800a3b6:	bf38      	it	cc
 800a3b8:	250c      	movcc	r5, #12
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f7ff ffa5 	bl	800a30c <sbrk_aligned>
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	d02b      	beq.n	800a41e <_malloc_r+0xd2>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	442b      	add	r3, r5
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	e00e      	b.n	800a3ec <_malloc_r+0xa0>
 800a3ce:	6822      	ldr	r2, [r4, #0]
 800a3d0:	1b52      	subs	r2, r2, r5
 800a3d2:	d41e      	bmi.n	800a412 <_malloc_r+0xc6>
 800a3d4:	2a0b      	cmp	r2, #11
 800a3d6:	d916      	bls.n	800a406 <_malloc_r+0xba>
 800a3d8:	1961      	adds	r1, r4, r5
 800a3da:	42a3      	cmp	r3, r4
 800a3dc:	6025      	str	r5, [r4, #0]
 800a3de:	bf18      	it	ne
 800a3e0:	6059      	strne	r1, [r3, #4]
 800a3e2:	6863      	ldr	r3, [r4, #4]
 800a3e4:	bf08      	it	eq
 800a3e6:	6031      	streq	r1, [r6, #0]
 800a3e8:	5162      	str	r2, [r4, r5]
 800a3ea:	604b      	str	r3, [r1, #4]
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f104 060b 	add.w	r6, r4, #11
 800a3f2:	f000 fa07 	bl	800a804 <__malloc_unlock>
 800a3f6:	f026 0607 	bic.w	r6, r6, #7
 800a3fa:	1d23      	adds	r3, r4, #4
 800a3fc:	1af2      	subs	r2, r6, r3
 800a3fe:	d0b6      	beq.n	800a36e <_malloc_r+0x22>
 800a400:	1b9b      	subs	r3, r3, r6
 800a402:	50a3      	str	r3, [r4, r2]
 800a404:	e7b3      	b.n	800a36e <_malloc_r+0x22>
 800a406:	6862      	ldr	r2, [r4, #4]
 800a408:	42a3      	cmp	r3, r4
 800a40a:	bf0c      	ite	eq
 800a40c:	6032      	streq	r2, [r6, #0]
 800a40e:	605a      	strne	r2, [r3, #4]
 800a410:	e7ec      	b.n	800a3ec <_malloc_r+0xa0>
 800a412:	4623      	mov	r3, r4
 800a414:	6864      	ldr	r4, [r4, #4]
 800a416:	e7b2      	b.n	800a37e <_malloc_r+0x32>
 800a418:	4634      	mov	r4, r6
 800a41a:	6876      	ldr	r6, [r6, #4]
 800a41c:	e7b9      	b.n	800a392 <_malloc_r+0x46>
 800a41e:	230c      	movs	r3, #12
 800a420:	603b      	str	r3, [r7, #0]
 800a422:	4638      	mov	r0, r7
 800a424:	f000 f9ee 	bl	800a804 <__malloc_unlock>
 800a428:	e7a1      	b.n	800a36e <_malloc_r+0x22>
 800a42a:	6025      	str	r5, [r4, #0]
 800a42c:	e7de      	b.n	800a3ec <_malloc_r+0xa0>
 800a42e:	bf00      	nop
 800a430:	200004f4 	.word	0x200004f4

0800a434 <__ssputs_r>:
 800a434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a438:	688e      	ldr	r6, [r1, #8]
 800a43a:	429e      	cmp	r6, r3
 800a43c:	4682      	mov	sl, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	4690      	mov	r8, r2
 800a442:	461f      	mov	r7, r3
 800a444:	d838      	bhi.n	800a4b8 <__ssputs_r+0x84>
 800a446:	898a      	ldrh	r2, [r1, #12]
 800a448:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a44c:	d032      	beq.n	800a4b4 <__ssputs_r+0x80>
 800a44e:	6825      	ldr	r5, [r4, #0]
 800a450:	6909      	ldr	r1, [r1, #16]
 800a452:	eba5 0901 	sub.w	r9, r5, r1
 800a456:	6965      	ldr	r5, [r4, #20]
 800a458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a45c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a460:	3301      	adds	r3, #1
 800a462:	444b      	add	r3, r9
 800a464:	106d      	asrs	r5, r5, #1
 800a466:	429d      	cmp	r5, r3
 800a468:	bf38      	it	cc
 800a46a:	461d      	movcc	r5, r3
 800a46c:	0553      	lsls	r3, r2, #21
 800a46e:	d531      	bpl.n	800a4d4 <__ssputs_r+0xa0>
 800a470:	4629      	mov	r1, r5
 800a472:	f7ff ff6b 	bl	800a34c <_malloc_r>
 800a476:	4606      	mov	r6, r0
 800a478:	b950      	cbnz	r0, 800a490 <__ssputs_r+0x5c>
 800a47a:	230c      	movs	r3, #12
 800a47c:	f8ca 3000 	str.w	r3, [sl]
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a490:	6921      	ldr	r1, [r4, #16]
 800a492:	464a      	mov	r2, r9
 800a494:	f7ff fa08 	bl	80098a8 <memcpy>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a49e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	6126      	str	r6, [r4, #16]
 800a4a6:	6165      	str	r5, [r4, #20]
 800a4a8:	444e      	add	r6, r9
 800a4aa:	eba5 0509 	sub.w	r5, r5, r9
 800a4ae:	6026      	str	r6, [r4, #0]
 800a4b0:	60a5      	str	r5, [r4, #8]
 800a4b2:	463e      	mov	r6, r7
 800a4b4:	42be      	cmp	r6, r7
 800a4b6:	d900      	bls.n	800a4ba <__ssputs_r+0x86>
 800a4b8:	463e      	mov	r6, r7
 800a4ba:	6820      	ldr	r0, [r4, #0]
 800a4bc:	4632      	mov	r2, r6
 800a4be:	4641      	mov	r1, r8
 800a4c0:	f000 f980 	bl	800a7c4 <memmove>
 800a4c4:	68a3      	ldr	r3, [r4, #8]
 800a4c6:	1b9b      	subs	r3, r3, r6
 800a4c8:	60a3      	str	r3, [r4, #8]
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	4433      	add	r3, r6
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	e7db      	b.n	800a48c <__ssputs_r+0x58>
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	f000 f99b 	bl	800a810 <_realloc_r>
 800a4da:	4606      	mov	r6, r0
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d1e1      	bne.n	800a4a4 <__ssputs_r+0x70>
 800a4e0:	6921      	ldr	r1, [r4, #16]
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	f7ff fec6 	bl	800a274 <_free_r>
 800a4e8:	e7c7      	b.n	800a47a <__ssputs_r+0x46>
	...

0800a4ec <_svfiprintf_r>:
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	4698      	mov	r8, r3
 800a4f2:	898b      	ldrh	r3, [r1, #12]
 800a4f4:	061b      	lsls	r3, r3, #24
 800a4f6:	b09d      	sub	sp, #116	; 0x74
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	460d      	mov	r5, r1
 800a4fc:	4614      	mov	r4, r2
 800a4fe:	d50e      	bpl.n	800a51e <_svfiprintf_r+0x32>
 800a500:	690b      	ldr	r3, [r1, #16]
 800a502:	b963      	cbnz	r3, 800a51e <_svfiprintf_r+0x32>
 800a504:	2140      	movs	r1, #64	; 0x40
 800a506:	f7ff ff21 	bl	800a34c <_malloc_r>
 800a50a:	6028      	str	r0, [r5, #0]
 800a50c:	6128      	str	r0, [r5, #16]
 800a50e:	b920      	cbnz	r0, 800a51a <_svfiprintf_r+0x2e>
 800a510:	230c      	movs	r3, #12
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	e0d1      	b.n	800a6be <_svfiprintf_r+0x1d2>
 800a51a:	2340      	movs	r3, #64	; 0x40
 800a51c:	616b      	str	r3, [r5, #20]
 800a51e:	2300      	movs	r3, #0
 800a520:	9309      	str	r3, [sp, #36]	; 0x24
 800a522:	2320      	movs	r3, #32
 800a524:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a528:	f8cd 800c 	str.w	r8, [sp, #12]
 800a52c:	2330      	movs	r3, #48	; 0x30
 800a52e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6d8 <_svfiprintf_r+0x1ec>
 800a532:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a536:	f04f 0901 	mov.w	r9, #1
 800a53a:	4623      	mov	r3, r4
 800a53c:	469a      	mov	sl, r3
 800a53e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a542:	b10a      	cbz	r2, 800a548 <_svfiprintf_r+0x5c>
 800a544:	2a25      	cmp	r2, #37	; 0x25
 800a546:	d1f9      	bne.n	800a53c <_svfiprintf_r+0x50>
 800a548:	ebba 0b04 	subs.w	fp, sl, r4
 800a54c:	d00b      	beq.n	800a566 <_svfiprintf_r+0x7a>
 800a54e:	465b      	mov	r3, fp
 800a550:	4622      	mov	r2, r4
 800a552:	4629      	mov	r1, r5
 800a554:	4638      	mov	r0, r7
 800a556:	f7ff ff6d 	bl	800a434 <__ssputs_r>
 800a55a:	3001      	adds	r0, #1
 800a55c:	f000 80aa 	beq.w	800a6b4 <_svfiprintf_r+0x1c8>
 800a560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a562:	445a      	add	r2, fp
 800a564:	9209      	str	r2, [sp, #36]	; 0x24
 800a566:	f89a 3000 	ldrb.w	r3, [sl]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 80a2 	beq.w	800a6b4 <_svfiprintf_r+0x1c8>
 800a570:	2300      	movs	r3, #0
 800a572:	f04f 32ff 	mov.w	r2, #4294967295
 800a576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a57a:	f10a 0a01 	add.w	sl, sl, #1
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	9307      	str	r3, [sp, #28]
 800a582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a586:	931a      	str	r3, [sp, #104]	; 0x68
 800a588:	4654      	mov	r4, sl
 800a58a:	2205      	movs	r2, #5
 800a58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a590:	4851      	ldr	r0, [pc, #324]	; (800a6d8 <_svfiprintf_r+0x1ec>)
 800a592:	f7f5 fe25 	bl	80001e0 <memchr>
 800a596:	9a04      	ldr	r2, [sp, #16]
 800a598:	b9d8      	cbnz	r0, 800a5d2 <_svfiprintf_r+0xe6>
 800a59a:	06d0      	lsls	r0, r2, #27
 800a59c:	bf44      	itt	mi
 800a59e:	2320      	movmi	r3, #32
 800a5a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5a4:	0711      	lsls	r1, r2, #28
 800a5a6:	bf44      	itt	mi
 800a5a8:	232b      	movmi	r3, #43	; 0x2b
 800a5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b4:	d015      	beq.n	800a5e2 <_svfiprintf_r+0xf6>
 800a5b6:	9a07      	ldr	r2, [sp, #28]
 800a5b8:	4654      	mov	r4, sl
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	f04f 0c0a 	mov.w	ip, #10
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5c6:	3b30      	subs	r3, #48	; 0x30
 800a5c8:	2b09      	cmp	r3, #9
 800a5ca:	d94e      	bls.n	800a66a <_svfiprintf_r+0x17e>
 800a5cc:	b1b0      	cbz	r0, 800a5fc <_svfiprintf_r+0x110>
 800a5ce:	9207      	str	r2, [sp, #28]
 800a5d0:	e014      	b.n	800a5fc <_svfiprintf_r+0x110>
 800a5d2:	eba0 0308 	sub.w	r3, r0, r8
 800a5d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	9304      	str	r3, [sp, #16]
 800a5de:	46a2      	mov	sl, r4
 800a5e0:	e7d2      	b.n	800a588 <_svfiprintf_r+0x9c>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	1d19      	adds	r1, r3, #4
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	9103      	str	r1, [sp, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	bfbb      	ittet	lt
 800a5ee:	425b      	neglt	r3, r3
 800a5f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a5f4:	9307      	strge	r3, [sp, #28]
 800a5f6:	9307      	strlt	r3, [sp, #28]
 800a5f8:	bfb8      	it	lt
 800a5fa:	9204      	strlt	r2, [sp, #16]
 800a5fc:	7823      	ldrb	r3, [r4, #0]
 800a5fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a600:	d10c      	bne.n	800a61c <_svfiprintf_r+0x130>
 800a602:	7863      	ldrb	r3, [r4, #1]
 800a604:	2b2a      	cmp	r3, #42	; 0x2a
 800a606:	d135      	bne.n	800a674 <_svfiprintf_r+0x188>
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	1d1a      	adds	r2, r3, #4
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	9203      	str	r2, [sp, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	bfb8      	it	lt
 800a614:	f04f 33ff 	movlt.w	r3, #4294967295
 800a618:	3402      	adds	r4, #2
 800a61a:	9305      	str	r3, [sp, #20]
 800a61c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6e8 <_svfiprintf_r+0x1fc>
 800a620:	7821      	ldrb	r1, [r4, #0]
 800a622:	2203      	movs	r2, #3
 800a624:	4650      	mov	r0, sl
 800a626:	f7f5 fddb 	bl	80001e0 <memchr>
 800a62a:	b140      	cbz	r0, 800a63e <_svfiprintf_r+0x152>
 800a62c:	2340      	movs	r3, #64	; 0x40
 800a62e:	eba0 000a 	sub.w	r0, r0, sl
 800a632:	fa03 f000 	lsl.w	r0, r3, r0
 800a636:	9b04      	ldr	r3, [sp, #16]
 800a638:	4303      	orrs	r3, r0
 800a63a:	3401      	adds	r4, #1
 800a63c:	9304      	str	r3, [sp, #16]
 800a63e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a642:	4826      	ldr	r0, [pc, #152]	; (800a6dc <_svfiprintf_r+0x1f0>)
 800a644:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a648:	2206      	movs	r2, #6
 800a64a:	f7f5 fdc9 	bl	80001e0 <memchr>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d038      	beq.n	800a6c4 <_svfiprintf_r+0x1d8>
 800a652:	4b23      	ldr	r3, [pc, #140]	; (800a6e0 <_svfiprintf_r+0x1f4>)
 800a654:	bb1b      	cbnz	r3, 800a69e <_svfiprintf_r+0x1b2>
 800a656:	9b03      	ldr	r3, [sp, #12]
 800a658:	3307      	adds	r3, #7
 800a65a:	f023 0307 	bic.w	r3, r3, #7
 800a65e:	3308      	adds	r3, #8
 800a660:	9303      	str	r3, [sp, #12]
 800a662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a664:	4433      	add	r3, r6
 800a666:	9309      	str	r3, [sp, #36]	; 0x24
 800a668:	e767      	b.n	800a53a <_svfiprintf_r+0x4e>
 800a66a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a66e:	460c      	mov	r4, r1
 800a670:	2001      	movs	r0, #1
 800a672:	e7a5      	b.n	800a5c0 <_svfiprintf_r+0xd4>
 800a674:	2300      	movs	r3, #0
 800a676:	3401      	adds	r4, #1
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	4619      	mov	r1, r3
 800a67c:	f04f 0c0a 	mov.w	ip, #10
 800a680:	4620      	mov	r0, r4
 800a682:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a686:	3a30      	subs	r2, #48	; 0x30
 800a688:	2a09      	cmp	r2, #9
 800a68a:	d903      	bls.n	800a694 <_svfiprintf_r+0x1a8>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0c5      	beq.n	800a61c <_svfiprintf_r+0x130>
 800a690:	9105      	str	r1, [sp, #20]
 800a692:	e7c3      	b.n	800a61c <_svfiprintf_r+0x130>
 800a694:	fb0c 2101 	mla	r1, ip, r1, r2
 800a698:	4604      	mov	r4, r0
 800a69a:	2301      	movs	r3, #1
 800a69c:	e7f0      	b.n	800a680 <_svfiprintf_r+0x194>
 800a69e:	ab03      	add	r3, sp, #12
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <_svfiprintf_r+0x1f8>)
 800a6a6:	a904      	add	r1, sp, #16
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7fc fa49 	bl	8006b40 <_printf_float>
 800a6ae:	1c42      	adds	r2, r0, #1
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	d1d6      	bne.n	800a662 <_svfiprintf_r+0x176>
 800a6b4:	89ab      	ldrh	r3, [r5, #12]
 800a6b6:	065b      	lsls	r3, r3, #25
 800a6b8:	f53f af2c 	bmi.w	800a514 <_svfiprintf_r+0x28>
 800a6bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6be:	b01d      	add	sp, #116	; 0x74
 800a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c4:	ab03      	add	r3, sp, #12
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	462a      	mov	r2, r5
 800a6ca:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <_svfiprintf_r+0x1f8>)
 800a6cc:	a904      	add	r1, sp, #16
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	f7fc fcda 	bl	8007088 <_printf_i>
 800a6d4:	e7eb      	b.n	800a6ae <_svfiprintf_r+0x1c2>
 800a6d6:	bf00      	nop
 800a6d8:	0800b734 	.word	0x0800b734
 800a6dc:	0800b73e 	.word	0x0800b73e
 800a6e0:	08006b41 	.word	0x08006b41
 800a6e4:	0800a435 	.word	0x0800a435
 800a6e8:	0800b73a 	.word	0x0800b73a
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <nan>:
 800a6f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a6f8 <nan+0x8>
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	00000000 	.word	0x00000000
 800a6fc:	7ff80000 	.word	0x7ff80000

0800a700 <_sbrk_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d06      	ldr	r5, [pc, #24]	; (800a71c <_sbrk_r+0x1c>)
 800a704:	2300      	movs	r3, #0
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f7 fa3e 	bl	8001b8c <_sbrk>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_sbrk_r+0x1a>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_sbrk_r+0x1a>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	200004fc 	.word	0x200004fc

0800a720 <strncmp>:
 800a720:	b510      	push	{r4, lr}
 800a722:	b17a      	cbz	r2, 800a744 <strncmp+0x24>
 800a724:	4603      	mov	r3, r0
 800a726:	3901      	subs	r1, #1
 800a728:	1884      	adds	r4, r0, r2
 800a72a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a72e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a732:	4290      	cmp	r0, r2
 800a734:	d101      	bne.n	800a73a <strncmp+0x1a>
 800a736:	42a3      	cmp	r3, r4
 800a738:	d101      	bne.n	800a73e <strncmp+0x1e>
 800a73a:	1a80      	subs	r0, r0, r2
 800a73c:	bd10      	pop	{r4, pc}
 800a73e:	2800      	cmp	r0, #0
 800a740:	d1f3      	bne.n	800a72a <strncmp+0xa>
 800a742:	e7fa      	b.n	800a73a <strncmp+0x1a>
 800a744:	4610      	mov	r0, r2
 800a746:	e7f9      	b.n	800a73c <strncmp+0x1c>

0800a748 <__ascii_wctomb>:
 800a748:	b149      	cbz	r1, 800a75e <__ascii_wctomb+0x16>
 800a74a:	2aff      	cmp	r2, #255	; 0xff
 800a74c:	bf85      	ittet	hi
 800a74e:	238a      	movhi	r3, #138	; 0x8a
 800a750:	6003      	strhi	r3, [r0, #0]
 800a752:	700a      	strbls	r2, [r1, #0]
 800a754:	f04f 30ff 	movhi.w	r0, #4294967295
 800a758:	bf98      	it	ls
 800a75a:	2001      	movls	r0, #1
 800a75c:	4770      	bx	lr
 800a75e:	4608      	mov	r0, r1
 800a760:	4770      	bx	lr
	...

0800a764 <__assert_func>:
 800a764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a766:	4614      	mov	r4, r2
 800a768:	461a      	mov	r2, r3
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <__assert_func+0x2c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4605      	mov	r5, r0
 800a770:	68d8      	ldr	r0, [r3, #12]
 800a772:	b14c      	cbz	r4, 800a788 <__assert_func+0x24>
 800a774:	4b07      	ldr	r3, [pc, #28]	; (800a794 <__assert_func+0x30>)
 800a776:	9100      	str	r1, [sp, #0]
 800a778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a77c:	4906      	ldr	r1, [pc, #24]	; (800a798 <__assert_func+0x34>)
 800a77e:	462b      	mov	r3, r5
 800a780:	f000 f80e 	bl	800a7a0 <fiprintf>
 800a784:	f000 fa8c 	bl	800aca0 <abort>
 800a788:	4b04      	ldr	r3, [pc, #16]	; (800a79c <__assert_func+0x38>)
 800a78a:	461c      	mov	r4, r3
 800a78c:	e7f3      	b.n	800a776 <__assert_func+0x12>
 800a78e:	bf00      	nop
 800a790:	2000000c 	.word	0x2000000c
 800a794:	0800b745 	.word	0x0800b745
 800a798:	0800b752 	.word	0x0800b752
 800a79c:	0800b780 	.word	0x0800b780

0800a7a0 <fiprintf>:
 800a7a0:	b40e      	push	{r1, r2, r3}
 800a7a2:	b503      	push	{r0, r1, lr}
 800a7a4:	4601      	mov	r1, r0
 800a7a6:	ab03      	add	r3, sp, #12
 800a7a8:	4805      	ldr	r0, [pc, #20]	; (800a7c0 <fiprintf+0x20>)
 800a7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ae:	6800      	ldr	r0, [r0, #0]
 800a7b0:	9301      	str	r3, [sp, #4]
 800a7b2:	f000 f885 	bl	800a8c0 <_vfiprintf_r>
 800a7b6:	b002      	add	sp, #8
 800a7b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7bc:	b003      	add	sp, #12
 800a7be:	4770      	bx	lr
 800a7c0:	2000000c 	.word	0x2000000c

0800a7c4 <memmove>:
 800a7c4:	4288      	cmp	r0, r1
 800a7c6:	b510      	push	{r4, lr}
 800a7c8:	eb01 0402 	add.w	r4, r1, r2
 800a7cc:	d902      	bls.n	800a7d4 <memmove+0x10>
 800a7ce:	4284      	cmp	r4, r0
 800a7d0:	4623      	mov	r3, r4
 800a7d2:	d807      	bhi.n	800a7e4 <memmove+0x20>
 800a7d4:	1e43      	subs	r3, r0, #1
 800a7d6:	42a1      	cmp	r1, r4
 800a7d8:	d008      	beq.n	800a7ec <memmove+0x28>
 800a7da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7e2:	e7f8      	b.n	800a7d6 <memmove+0x12>
 800a7e4:	4402      	add	r2, r0
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	428a      	cmp	r2, r1
 800a7ea:	d100      	bne.n	800a7ee <memmove+0x2a>
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7f6:	e7f7      	b.n	800a7e8 <memmove+0x24>

0800a7f8 <__malloc_lock>:
 800a7f8:	4801      	ldr	r0, [pc, #4]	; (800a800 <__malloc_lock+0x8>)
 800a7fa:	f000 bc11 	b.w	800b020 <__retarget_lock_acquire_recursive>
 800a7fe:	bf00      	nop
 800a800:	20000500 	.word	0x20000500

0800a804 <__malloc_unlock>:
 800a804:	4801      	ldr	r0, [pc, #4]	; (800a80c <__malloc_unlock+0x8>)
 800a806:	f000 bc0c 	b.w	800b022 <__retarget_lock_release_recursive>
 800a80a:	bf00      	nop
 800a80c:	20000500 	.word	0x20000500

0800a810 <_realloc_r>:
 800a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a814:	4680      	mov	r8, r0
 800a816:	4614      	mov	r4, r2
 800a818:	460e      	mov	r6, r1
 800a81a:	b921      	cbnz	r1, 800a826 <_realloc_r+0x16>
 800a81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a820:	4611      	mov	r1, r2
 800a822:	f7ff bd93 	b.w	800a34c <_malloc_r>
 800a826:	b92a      	cbnz	r2, 800a834 <_realloc_r+0x24>
 800a828:	f7ff fd24 	bl	800a274 <_free_r>
 800a82c:	4625      	mov	r5, r4
 800a82e:	4628      	mov	r0, r5
 800a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a834:	f000 fc5c 	bl	800b0f0 <_malloc_usable_size_r>
 800a838:	4284      	cmp	r4, r0
 800a83a:	4607      	mov	r7, r0
 800a83c:	d802      	bhi.n	800a844 <_realloc_r+0x34>
 800a83e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a842:	d812      	bhi.n	800a86a <_realloc_r+0x5a>
 800a844:	4621      	mov	r1, r4
 800a846:	4640      	mov	r0, r8
 800a848:	f7ff fd80 	bl	800a34c <_malloc_r>
 800a84c:	4605      	mov	r5, r0
 800a84e:	2800      	cmp	r0, #0
 800a850:	d0ed      	beq.n	800a82e <_realloc_r+0x1e>
 800a852:	42bc      	cmp	r4, r7
 800a854:	4622      	mov	r2, r4
 800a856:	4631      	mov	r1, r6
 800a858:	bf28      	it	cs
 800a85a:	463a      	movcs	r2, r7
 800a85c:	f7ff f824 	bl	80098a8 <memcpy>
 800a860:	4631      	mov	r1, r6
 800a862:	4640      	mov	r0, r8
 800a864:	f7ff fd06 	bl	800a274 <_free_r>
 800a868:	e7e1      	b.n	800a82e <_realloc_r+0x1e>
 800a86a:	4635      	mov	r5, r6
 800a86c:	e7df      	b.n	800a82e <_realloc_r+0x1e>

0800a86e <__sfputc_r>:
 800a86e:	6893      	ldr	r3, [r2, #8]
 800a870:	3b01      	subs	r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	b410      	push	{r4}
 800a876:	6093      	str	r3, [r2, #8]
 800a878:	da08      	bge.n	800a88c <__sfputc_r+0x1e>
 800a87a:	6994      	ldr	r4, [r2, #24]
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	db01      	blt.n	800a884 <__sfputc_r+0x16>
 800a880:	290a      	cmp	r1, #10
 800a882:	d103      	bne.n	800a88c <__sfputc_r+0x1e>
 800a884:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a888:	f000 b94a 	b.w	800ab20 <__swbuf_r>
 800a88c:	6813      	ldr	r3, [r2, #0]
 800a88e:	1c58      	adds	r0, r3, #1
 800a890:	6010      	str	r0, [r2, #0]
 800a892:	7019      	strb	r1, [r3, #0]
 800a894:	4608      	mov	r0, r1
 800a896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <__sfputs_r>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	4606      	mov	r6, r0
 800a8a0:	460f      	mov	r7, r1
 800a8a2:	4614      	mov	r4, r2
 800a8a4:	18d5      	adds	r5, r2, r3
 800a8a6:	42ac      	cmp	r4, r5
 800a8a8:	d101      	bne.n	800a8ae <__sfputs_r+0x12>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e007      	b.n	800a8be <__sfputs_r+0x22>
 800a8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b2:	463a      	mov	r2, r7
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff ffda 	bl	800a86e <__sfputc_r>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d1f3      	bne.n	800a8a6 <__sfputs_r+0xa>
 800a8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8c0 <_vfiprintf_r>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	b09d      	sub	sp, #116	; 0x74
 800a8c8:	4614      	mov	r4, r2
 800a8ca:	4698      	mov	r8, r3
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	b118      	cbz	r0, 800a8d8 <_vfiprintf_r+0x18>
 800a8d0:	6983      	ldr	r3, [r0, #24]
 800a8d2:	b90b      	cbnz	r3, 800a8d8 <_vfiprintf_r+0x18>
 800a8d4:	f000 fb06 	bl	800aee4 <__sinit>
 800a8d8:	4b89      	ldr	r3, [pc, #548]	; (800ab00 <_vfiprintf_r+0x240>)
 800a8da:	429d      	cmp	r5, r3
 800a8dc:	d11b      	bne.n	800a916 <_vfiprintf_r+0x56>
 800a8de:	6875      	ldr	r5, [r6, #4]
 800a8e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e2:	07d9      	lsls	r1, r3, #31
 800a8e4:	d405      	bmi.n	800a8f2 <_vfiprintf_r+0x32>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	059a      	lsls	r2, r3, #22
 800a8ea:	d402      	bmi.n	800a8f2 <_vfiprintf_r+0x32>
 800a8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ee:	f000 fb97 	bl	800b020 <__retarget_lock_acquire_recursive>
 800a8f2:	89ab      	ldrh	r3, [r5, #12]
 800a8f4:	071b      	lsls	r3, r3, #28
 800a8f6:	d501      	bpl.n	800a8fc <_vfiprintf_r+0x3c>
 800a8f8:	692b      	ldr	r3, [r5, #16]
 800a8fa:	b9eb      	cbnz	r3, 800a938 <_vfiprintf_r+0x78>
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4630      	mov	r0, r6
 800a900:	f000 f960 	bl	800abc4 <__swsetup_r>
 800a904:	b1c0      	cbz	r0, 800a938 <_vfiprintf_r+0x78>
 800a906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a908:	07dc      	lsls	r4, r3, #31
 800a90a:	d50e      	bpl.n	800a92a <_vfiprintf_r+0x6a>
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	b01d      	add	sp, #116	; 0x74
 800a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a916:	4b7b      	ldr	r3, [pc, #492]	; (800ab04 <_vfiprintf_r+0x244>)
 800a918:	429d      	cmp	r5, r3
 800a91a:	d101      	bne.n	800a920 <_vfiprintf_r+0x60>
 800a91c:	68b5      	ldr	r5, [r6, #8]
 800a91e:	e7df      	b.n	800a8e0 <_vfiprintf_r+0x20>
 800a920:	4b79      	ldr	r3, [pc, #484]	; (800ab08 <_vfiprintf_r+0x248>)
 800a922:	429d      	cmp	r5, r3
 800a924:	bf08      	it	eq
 800a926:	68f5      	ldreq	r5, [r6, #12]
 800a928:	e7da      	b.n	800a8e0 <_vfiprintf_r+0x20>
 800a92a:	89ab      	ldrh	r3, [r5, #12]
 800a92c:	0598      	lsls	r0, r3, #22
 800a92e:	d4ed      	bmi.n	800a90c <_vfiprintf_r+0x4c>
 800a930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a932:	f000 fb76 	bl	800b022 <__retarget_lock_release_recursive>
 800a936:	e7e9      	b.n	800a90c <_vfiprintf_r+0x4c>
 800a938:	2300      	movs	r3, #0
 800a93a:	9309      	str	r3, [sp, #36]	; 0x24
 800a93c:	2320      	movs	r3, #32
 800a93e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a942:	f8cd 800c 	str.w	r8, [sp, #12]
 800a946:	2330      	movs	r3, #48	; 0x30
 800a948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab0c <_vfiprintf_r+0x24c>
 800a94c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a950:	f04f 0901 	mov.w	r9, #1
 800a954:	4623      	mov	r3, r4
 800a956:	469a      	mov	sl, r3
 800a958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95c:	b10a      	cbz	r2, 800a962 <_vfiprintf_r+0xa2>
 800a95e:	2a25      	cmp	r2, #37	; 0x25
 800a960:	d1f9      	bne.n	800a956 <_vfiprintf_r+0x96>
 800a962:	ebba 0b04 	subs.w	fp, sl, r4
 800a966:	d00b      	beq.n	800a980 <_vfiprintf_r+0xc0>
 800a968:	465b      	mov	r3, fp
 800a96a:	4622      	mov	r2, r4
 800a96c:	4629      	mov	r1, r5
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ff94 	bl	800a89c <__sfputs_r>
 800a974:	3001      	adds	r0, #1
 800a976:	f000 80aa 	beq.w	800aace <_vfiprintf_r+0x20e>
 800a97a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a97c:	445a      	add	r2, fp
 800a97e:	9209      	str	r2, [sp, #36]	; 0x24
 800a980:	f89a 3000 	ldrb.w	r3, [sl]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80a2 	beq.w	800aace <_vfiprintf_r+0x20e>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a994:	f10a 0a01 	add.w	sl, sl, #1
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	9307      	str	r3, [sp, #28]
 800a99c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a9a2:	4654      	mov	r4, sl
 800a9a4:	2205      	movs	r2, #5
 800a9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9aa:	4858      	ldr	r0, [pc, #352]	; (800ab0c <_vfiprintf_r+0x24c>)
 800a9ac:	f7f5 fc18 	bl	80001e0 <memchr>
 800a9b0:	9a04      	ldr	r2, [sp, #16]
 800a9b2:	b9d8      	cbnz	r0, 800a9ec <_vfiprintf_r+0x12c>
 800a9b4:	06d1      	lsls	r1, r2, #27
 800a9b6:	bf44      	itt	mi
 800a9b8:	2320      	movmi	r3, #32
 800a9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9be:	0713      	lsls	r3, r2, #28
 800a9c0:	bf44      	itt	mi
 800a9c2:	232b      	movmi	r3, #43	; 0x2b
 800a9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ce:	d015      	beq.n	800a9fc <_vfiprintf_r+0x13c>
 800a9d0:	9a07      	ldr	r2, [sp, #28]
 800a9d2:	4654      	mov	r4, sl
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	f04f 0c0a 	mov.w	ip, #10
 800a9da:	4621      	mov	r1, r4
 800a9dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e0:	3b30      	subs	r3, #48	; 0x30
 800a9e2:	2b09      	cmp	r3, #9
 800a9e4:	d94e      	bls.n	800aa84 <_vfiprintf_r+0x1c4>
 800a9e6:	b1b0      	cbz	r0, 800aa16 <_vfiprintf_r+0x156>
 800a9e8:	9207      	str	r2, [sp, #28]
 800a9ea:	e014      	b.n	800aa16 <_vfiprintf_r+0x156>
 800a9ec:	eba0 0308 	sub.w	r3, r0, r8
 800a9f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	9304      	str	r3, [sp, #16]
 800a9f8:	46a2      	mov	sl, r4
 800a9fa:	e7d2      	b.n	800a9a2 <_vfiprintf_r+0xe2>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	1d19      	adds	r1, r3, #4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	9103      	str	r1, [sp, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfbb      	ittet	lt
 800aa08:	425b      	neglt	r3, r3
 800aa0a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa0e:	9307      	strge	r3, [sp, #28]
 800aa10:	9307      	strlt	r3, [sp, #28]
 800aa12:	bfb8      	it	lt
 800aa14:	9204      	strlt	r2, [sp, #16]
 800aa16:	7823      	ldrb	r3, [r4, #0]
 800aa18:	2b2e      	cmp	r3, #46	; 0x2e
 800aa1a:	d10c      	bne.n	800aa36 <_vfiprintf_r+0x176>
 800aa1c:	7863      	ldrb	r3, [r4, #1]
 800aa1e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa20:	d135      	bne.n	800aa8e <_vfiprintf_r+0x1ce>
 800aa22:	9b03      	ldr	r3, [sp, #12]
 800aa24:	1d1a      	adds	r2, r3, #4
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	9203      	str	r2, [sp, #12]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	bfb8      	it	lt
 800aa2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa32:	3402      	adds	r4, #2
 800aa34:	9305      	str	r3, [sp, #20]
 800aa36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab1c <_vfiprintf_r+0x25c>
 800aa3a:	7821      	ldrb	r1, [r4, #0]
 800aa3c:	2203      	movs	r2, #3
 800aa3e:	4650      	mov	r0, sl
 800aa40:	f7f5 fbce 	bl	80001e0 <memchr>
 800aa44:	b140      	cbz	r0, 800aa58 <_vfiprintf_r+0x198>
 800aa46:	2340      	movs	r3, #64	; 0x40
 800aa48:	eba0 000a 	sub.w	r0, r0, sl
 800aa4c:	fa03 f000 	lsl.w	r0, r3, r0
 800aa50:	9b04      	ldr	r3, [sp, #16]
 800aa52:	4303      	orrs	r3, r0
 800aa54:	3401      	adds	r4, #1
 800aa56:	9304      	str	r3, [sp, #16]
 800aa58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5c:	482c      	ldr	r0, [pc, #176]	; (800ab10 <_vfiprintf_r+0x250>)
 800aa5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa62:	2206      	movs	r2, #6
 800aa64:	f7f5 fbbc 	bl	80001e0 <memchr>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d03f      	beq.n	800aaec <_vfiprintf_r+0x22c>
 800aa6c:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <_vfiprintf_r+0x254>)
 800aa6e:	bb1b      	cbnz	r3, 800aab8 <_vfiprintf_r+0x1f8>
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	3307      	adds	r3, #7
 800aa74:	f023 0307 	bic.w	r3, r3, #7
 800aa78:	3308      	adds	r3, #8
 800aa7a:	9303      	str	r3, [sp, #12]
 800aa7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7e:	443b      	add	r3, r7
 800aa80:	9309      	str	r3, [sp, #36]	; 0x24
 800aa82:	e767      	b.n	800a954 <_vfiprintf_r+0x94>
 800aa84:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa88:	460c      	mov	r4, r1
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	e7a5      	b.n	800a9da <_vfiprintf_r+0x11a>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	3401      	adds	r4, #1
 800aa92:	9305      	str	r3, [sp, #20]
 800aa94:	4619      	mov	r1, r3
 800aa96:	f04f 0c0a 	mov.w	ip, #10
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa0:	3a30      	subs	r2, #48	; 0x30
 800aaa2:	2a09      	cmp	r2, #9
 800aaa4:	d903      	bls.n	800aaae <_vfiprintf_r+0x1ee>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d0c5      	beq.n	800aa36 <_vfiprintf_r+0x176>
 800aaaa:	9105      	str	r1, [sp, #20]
 800aaac:	e7c3      	b.n	800aa36 <_vfiprintf_r+0x176>
 800aaae:	fb0c 2101 	mla	r1, ip, r1, r2
 800aab2:	4604      	mov	r4, r0
 800aab4:	2301      	movs	r3, #1
 800aab6:	e7f0      	b.n	800aa9a <_vfiprintf_r+0x1da>
 800aab8:	ab03      	add	r3, sp, #12
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	462a      	mov	r2, r5
 800aabe:	4b16      	ldr	r3, [pc, #88]	; (800ab18 <_vfiprintf_r+0x258>)
 800aac0:	a904      	add	r1, sp, #16
 800aac2:	4630      	mov	r0, r6
 800aac4:	f7fc f83c 	bl	8006b40 <_printf_float>
 800aac8:	4607      	mov	r7, r0
 800aaca:	1c78      	adds	r0, r7, #1
 800aacc:	d1d6      	bne.n	800aa7c <_vfiprintf_r+0x1bc>
 800aace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aad0:	07d9      	lsls	r1, r3, #31
 800aad2:	d405      	bmi.n	800aae0 <_vfiprintf_r+0x220>
 800aad4:	89ab      	ldrh	r3, [r5, #12]
 800aad6:	059a      	lsls	r2, r3, #22
 800aad8:	d402      	bmi.n	800aae0 <_vfiprintf_r+0x220>
 800aada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aadc:	f000 faa1 	bl	800b022 <__retarget_lock_release_recursive>
 800aae0:	89ab      	ldrh	r3, [r5, #12]
 800aae2:	065b      	lsls	r3, r3, #25
 800aae4:	f53f af12 	bmi.w	800a90c <_vfiprintf_r+0x4c>
 800aae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaea:	e711      	b.n	800a910 <_vfiprintf_r+0x50>
 800aaec:	ab03      	add	r3, sp, #12
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4b09      	ldr	r3, [pc, #36]	; (800ab18 <_vfiprintf_r+0x258>)
 800aaf4:	a904      	add	r1, sp, #16
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f7fc fac6 	bl	8007088 <_printf_i>
 800aafc:	e7e4      	b.n	800aac8 <_vfiprintf_r+0x208>
 800aafe:	bf00      	nop
 800ab00:	0800b7a4 	.word	0x0800b7a4
 800ab04:	0800b7c4 	.word	0x0800b7c4
 800ab08:	0800b784 	.word	0x0800b784
 800ab0c:	0800b734 	.word	0x0800b734
 800ab10:	0800b73e 	.word	0x0800b73e
 800ab14:	08006b41 	.word	0x08006b41
 800ab18:	0800a89d 	.word	0x0800a89d
 800ab1c:	0800b73a 	.word	0x0800b73a

0800ab20 <__swbuf_r>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	460e      	mov	r6, r1
 800ab24:	4614      	mov	r4, r2
 800ab26:	4605      	mov	r5, r0
 800ab28:	b118      	cbz	r0, 800ab32 <__swbuf_r+0x12>
 800ab2a:	6983      	ldr	r3, [r0, #24]
 800ab2c:	b90b      	cbnz	r3, 800ab32 <__swbuf_r+0x12>
 800ab2e:	f000 f9d9 	bl	800aee4 <__sinit>
 800ab32:	4b21      	ldr	r3, [pc, #132]	; (800abb8 <__swbuf_r+0x98>)
 800ab34:	429c      	cmp	r4, r3
 800ab36:	d12b      	bne.n	800ab90 <__swbuf_r+0x70>
 800ab38:	686c      	ldr	r4, [r5, #4]
 800ab3a:	69a3      	ldr	r3, [r4, #24]
 800ab3c:	60a3      	str	r3, [r4, #8]
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	071a      	lsls	r2, r3, #28
 800ab42:	d52f      	bpl.n	800aba4 <__swbuf_r+0x84>
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	b36b      	cbz	r3, 800aba4 <__swbuf_r+0x84>
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	6820      	ldr	r0, [r4, #0]
 800ab4c:	1ac0      	subs	r0, r0, r3
 800ab4e:	6963      	ldr	r3, [r4, #20]
 800ab50:	b2f6      	uxtb	r6, r6
 800ab52:	4283      	cmp	r3, r0
 800ab54:	4637      	mov	r7, r6
 800ab56:	dc04      	bgt.n	800ab62 <__swbuf_r+0x42>
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f000 f92e 	bl	800adbc <_fflush_r>
 800ab60:	bb30      	cbnz	r0, 800abb0 <__swbuf_r+0x90>
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	60a3      	str	r3, [r4, #8]
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	6022      	str	r2, [r4, #0]
 800ab6e:	701e      	strb	r6, [r3, #0]
 800ab70:	6963      	ldr	r3, [r4, #20]
 800ab72:	3001      	adds	r0, #1
 800ab74:	4283      	cmp	r3, r0
 800ab76:	d004      	beq.n	800ab82 <__swbuf_r+0x62>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	07db      	lsls	r3, r3, #31
 800ab7c:	d506      	bpl.n	800ab8c <__swbuf_r+0x6c>
 800ab7e:	2e0a      	cmp	r6, #10
 800ab80:	d104      	bne.n	800ab8c <__swbuf_r+0x6c>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 f919 	bl	800adbc <_fflush_r>
 800ab8a:	b988      	cbnz	r0, 800abb0 <__swbuf_r+0x90>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab90:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <__swbuf_r+0x9c>)
 800ab92:	429c      	cmp	r4, r3
 800ab94:	d101      	bne.n	800ab9a <__swbuf_r+0x7a>
 800ab96:	68ac      	ldr	r4, [r5, #8]
 800ab98:	e7cf      	b.n	800ab3a <__swbuf_r+0x1a>
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <__swbuf_r+0xa0>)
 800ab9c:	429c      	cmp	r4, r3
 800ab9e:	bf08      	it	eq
 800aba0:	68ec      	ldreq	r4, [r5, #12]
 800aba2:	e7ca      	b.n	800ab3a <__swbuf_r+0x1a>
 800aba4:	4621      	mov	r1, r4
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 f80c 	bl	800abc4 <__swsetup_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	d0cb      	beq.n	800ab48 <__swbuf_r+0x28>
 800abb0:	f04f 37ff 	mov.w	r7, #4294967295
 800abb4:	e7ea      	b.n	800ab8c <__swbuf_r+0x6c>
 800abb6:	bf00      	nop
 800abb8:	0800b7a4 	.word	0x0800b7a4
 800abbc:	0800b7c4 	.word	0x0800b7c4
 800abc0:	0800b784 	.word	0x0800b784

0800abc4 <__swsetup_r>:
 800abc4:	4b32      	ldr	r3, [pc, #200]	; (800ac90 <__swsetup_r+0xcc>)
 800abc6:	b570      	push	{r4, r5, r6, lr}
 800abc8:	681d      	ldr	r5, [r3, #0]
 800abca:	4606      	mov	r6, r0
 800abcc:	460c      	mov	r4, r1
 800abce:	b125      	cbz	r5, 800abda <__swsetup_r+0x16>
 800abd0:	69ab      	ldr	r3, [r5, #24]
 800abd2:	b913      	cbnz	r3, 800abda <__swsetup_r+0x16>
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 f985 	bl	800aee4 <__sinit>
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <__swsetup_r+0xd0>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	d10f      	bne.n	800ac00 <__swsetup_r+0x3c>
 800abe0:	686c      	ldr	r4, [r5, #4]
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abe8:	0719      	lsls	r1, r3, #28
 800abea:	d42c      	bmi.n	800ac46 <__swsetup_r+0x82>
 800abec:	06dd      	lsls	r5, r3, #27
 800abee:	d411      	bmi.n	800ac14 <__swsetup_r+0x50>
 800abf0:	2309      	movs	r3, #9
 800abf2:	6033      	str	r3, [r6, #0]
 800abf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abf8:	81a3      	strh	r3, [r4, #12]
 800abfa:	f04f 30ff 	mov.w	r0, #4294967295
 800abfe:	e03e      	b.n	800ac7e <__swsetup_r+0xba>
 800ac00:	4b25      	ldr	r3, [pc, #148]	; (800ac98 <__swsetup_r+0xd4>)
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d101      	bne.n	800ac0a <__swsetup_r+0x46>
 800ac06:	68ac      	ldr	r4, [r5, #8]
 800ac08:	e7eb      	b.n	800abe2 <__swsetup_r+0x1e>
 800ac0a:	4b24      	ldr	r3, [pc, #144]	; (800ac9c <__swsetup_r+0xd8>)
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	bf08      	it	eq
 800ac10:	68ec      	ldreq	r4, [r5, #12]
 800ac12:	e7e6      	b.n	800abe2 <__swsetup_r+0x1e>
 800ac14:	0758      	lsls	r0, r3, #29
 800ac16:	d512      	bpl.n	800ac3e <__swsetup_r+0x7a>
 800ac18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac1a:	b141      	cbz	r1, 800ac2e <__swsetup_r+0x6a>
 800ac1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac20:	4299      	cmp	r1, r3
 800ac22:	d002      	beq.n	800ac2a <__swsetup_r+0x66>
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff fb25 	bl	800a274 <_free_r>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	2300      	movs	r3, #0
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	b94b      	cbnz	r3, 800ac5e <__swsetup_r+0x9a>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac54:	d003      	beq.n	800ac5e <__swsetup_r+0x9a>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f000 fa09 	bl	800b070 <__smakebuf_r>
 800ac5e:	89a0      	ldrh	r0, [r4, #12]
 800ac60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac64:	f010 0301 	ands.w	r3, r0, #1
 800ac68:	d00a      	beq.n	800ac80 <__swsetup_r+0xbc>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60a3      	str	r3, [r4, #8]
 800ac6e:	6963      	ldr	r3, [r4, #20]
 800ac70:	425b      	negs	r3, r3
 800ac72:	61a3      	str	r3, [r4, #24]
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	b943      	cbnz	r3, 800ac8a <__swsetup_r+0xc6>
 800ac78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac7c:	d1ba      	bne.n	800abf4 <__swsetup_r+0x30>
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
 800ac80:	0781      	lsls	r1, r0, #30
 800ac82:	bf58      	it	pl
 800ac84:	6963      	ldrpl	r3, [r4, #20]
 800ac86:	60a3      	str	r3, [r4, #8]
 800ac88:	e7f4      	b.n	800ac74 <__swsetup_r+0xb0>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	e7f7      	b.n	800ac7e <__swsetup_r+0xba>
 800ac8e:	bf00      	nop
 800ac90:	2000000c 	.word	0x2000000c
 800ac94:	0800b7a4 	.word	0x0800b7a4
 800ac98:	0800b7c4 	.word	0x0800b7c4
 800ac9c:	0800b784 	.word	0x0800b784

0800aca0 <abort>:
 800aca0:	b508      	push	{r3, lr}
 800aca2:	2006      	movs	r0, #6
 800aca4:	f000 fa54 	bl	800b150 <raise>
 800aca8:	2001      	movs	r0, #1
 800acaa:	f7f6 ff13 	bl	8001ad4 <_exit>
	...

0800acb0 <__sflush_r>:
 800acb0:	898a      	ldrh	r2, [r1, #12]
 800acb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb6:	4605      	mov	r5, r0
 800acb8:	0710      	lsls	r0, r2, #28
 800acba:	460c      	mov	r4, r1
 800acbc:	d458      	bmi.n	800ad70 <__sflush_r+0xc0>
 800acbe:	684b      	ldr	r3, [r1, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dc05      	bgt.n	800acd0 <__sflush_r+0x20>
 800acc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dc02      	bgt.n	800acd0 <__sflush_r+0x20>
 800acca:	2000      	movs	r0, #0
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd2:	2e00      	cmp	r6, #0
 800acd4:	d0f9      	beq.n	800acca <__sflush_r+0x1a>
 800acd6:	2300      	movs	r3, #0
 800acd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acdc:	682f      	ldr	r7, [r5, #0]
 800acde:	602b      	str	r3, [r5, #0]
 800ace0:	d032      	beq.n	800ad48 <__sflush_r+0x98>
 800ace2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	075a      	lsls	r2, r3, #29
 800ace8:	d505      	bpl.n	800acf6 <__sflush_r+0x46>
 800acea:	6863      	ldr	r3, [r4, #4]
 800acec:	1ac0      	subs	r0, r0, r3
 800acee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acf0:	b10b      	cbz	r3, 800acf6 <__sflush_r+0x46>
 800acf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acf4:	1ac0      	subs	r0, r0, r3
 800acf6:	2300      	movs	r3, #0
 800acf8:	4602      	mov	r2, r0
 800acfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acfc:	6a21      	ldr	r1, [r4, #32]
 800acfe:	4628      	mov	r0, r5
 800ad00:	47b0      	blx	r6
 800ad02:	1c43      	adds	r3, r0, #1
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	d106      	bne.n	800ad16 <__sflush_r+0x66>
 800ad08:	6829      	ldr	r1, [r5, #0]
 800ad0a:	291d      	cmp	r1, #29
 800ad0c:	d82c      	bhi.n	800ad68 <__sflush_r+0xb8>
 800ad0e:	4a2a      	ldr	r2, [pc, #168]	; (800adb8 <__sflush_r+0x108>)
 800ad10:	40ca      	lsrs	r2, r1
 800ad12:	07d6      	lsls	r6, r2, #31
 800ad14:	d528      	bpl.n	800ad68 <__sflush_r+0xb8>
 800ad16:	2200      	movs	r2, #0
 800ad18:	6062      	str	r2, [r4, #4]
 800ad1a:	04d9      	lsls	r1, r3, #19
 800ad1c:	6922      	ldr	r2, [r4, #16]
 800ad1e:	6022      	str	r2, [r4, #0]
 800ad20:	d504      	bpl.n	800ad2c <__sflush_r+0x7c>
 800ad22:	1c42      	adds	r2, r0, #1
 800ad24:	d101      	bne.n	800ad2a <__sflush_r+0x7a>
 800ad26:	682b      	ldr	r3, [r5, #0]
 800ad28:	b903      	cbnz	r3, 800ad2c <__sflush_r+0x7c>
 800ad2a:	6560      	str	r0, [r4, #84]	; 0x54
 800ad2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad2e:	602f      	str	r7, [r5, #0]
 800ad30:	2900      	cmp	r1, #0
 800ad32:	d0ca      	beq.n	800acca <__sflush_r+0x1a>
 800ad34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad38:	4299      	cmp	r1, r3
 800ad3a:	d002      	beq.n	800ad42 <__sflush_r+0x92>
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f7ff fa99 	bl	800a274 <_free_r>
 800ad42:	2000      	movs	r0, #0
 800ad44:	6360      	str	r0, [r4, #52]	; 0x34
 800ad46:	e7c1      	b.n	800accc <__sflush_r+0x1c>
 800ad48:	6a21      	ldr	r1, [r4, #32]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b0      	blx	r6
 800ad50:	1c41      	adds	r1, r0, #1
 800ad52:	d1c7      	bne.n	800ace4 <__sflush_r+0x34>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0c4      	beq.n	800ace4 <__sflush_r+0x34>
 800ad5a:	2b1d      	cmp	r3, #29
 800ad5c:	d001      	beq.n	800ad62 <__sflush_r+0xb2>
 800ad5e:	2b16      	cmp	r3, #22
 800ad60:	d101      	bne.n	800ad66 <__sflush_r+0xb6>
 800ad62:	602f      	str	r7, [r5, #0]
 800ad64:	e7b1      	b.n	800acca <__sflush_r+0x1a>
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	e7ad      	b.n	800accc <__sflush_r+0x1c>
 800ad70:	690f      	ldr	r7, [r1, #16]
 800ad72:	2f00      	cmp	r7, #0
 800ad74:	d0a9      	beq.n	800acca <__sflush_r+0x1a>
 800ad76:	0793      	lsls	r3, r2, #30
 800ad78:	680e      	ldr	r6, [r1, #0]
 800ad7a:	bf08      	it	eq
 800ad7c:	694b      	ldreq	r3, [r1, #20]
 800ad7e:	600f      	str	r7, [r1, #0]
 800ad80:	bf18      	it	ne
 800ad82:	2300      	movne	r3, #0
 800ad84:	eba6 0807 	sub.w	r8, r6, r7
 800ad88:	608b      	str	r3, [r1, #8]
 800ad8a:	f1b8 0f00 	cmp.w	r8, #0
 800ad8e:	dd9c      	ble.n	800acca <__sflush_r+0x1a>
 800ad90:	6a21      	ldr	r1, [r4, #32]
 800ad92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad94:	4643      	mov	r3, r8
 800ad96:	463a      	mov	r2, r7
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b0      	blx	r6
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	dc06      	bgt.n	800adae <__sflush_r+0xfe>
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	e78e      	b.n	800accc <__sflush_r+0x1c>
 800adae:	4407      	add	r7, r0
 800adb0:	eba8 0800 	sub.w	r8, r8, r0
 800adb4:	e7e9      	b.n	800ad8a <__sflush_r+0xda>
 800adb6:	bf00      	nop
 800adb8:	20400001 	.word	0x20400001

0800adbc <_fflush_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	690b      	ldr	r3, [r1, #16]
 800adc0:	4605      	mov	r5, r0
 800adc2:	460c      	mov	r4, r1
 800adc4:	b913      	cbnz	r3, 800adcc <_fflush_r+0x10>
 800adc6:	2500      	movs	r5, #0
 800adc8:	4628      	mov	r0, r5
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	b118      	cbz	r0, 800add6 <_fflush_r+0x1a>
 800adce:	6983      	ldr	r3, [r0, #24]
 800add0:	b90b      	cbnz	r3, 800add6 <_fflush_r+0x1a>
 800add2:	f000 f887 	bl	800aee4 <__sinit>
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <_fflush_r+0x6c>)
 800add8:	429c      	cmp	r4, r3
 800adda:	d11b      	bne.n	800ae14 <_fflush_r+0x58>
 800addc:	686c      	ldr	r4, [r5, #4]
 800adde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d0ef      	beq.n	800adc6 <_fflush_r+0xa>
 800ade6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ade8:	07d0      	lsls	r0, r2, #31
 800adea:	d404      	bmi.n	800adf6 <_fflush_r+0x3a>
 800adec:	0599      	lsls	r1, r3, #22
 800adee:	d402      	bmi.n	800adf6 <_fflush_r+0x3a>
 800adf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adf2:	f000 f915 	bl	800b020 <__retarget_lock_acquire_recursive>
 800adf6:	4628      	mov	r0, r5
 800adf8:	4621      	mov	r1, r4
 800adfa:	f7ff ff59 	bl	800acb0 <__sflush_r>
 800adfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae00:	07da      	lsls	r2, r3, #31
 800ae02:	4605      	mov	r5, r0
 800ae04:	d4e0      	bmi.n	800adc8 <_fflush_r+0xc>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	059b      	lsls	r3, r3, #22
 800ae0a:	d4dd      	bmi.n	800adc8 <_fflush_r+0xc>
 800ae0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae0e:	f000 f908 	bl	800b022 <__retarget_lock_release_recursive>
 800ae12:	e7d9      	b.n	800adc8 <_fflush_r+0xc>
 800ae14:	4b05      	ldr	r3, [pc, #20]	; (800ae2c <_fflush_r+0x70>)
 800ae16:	429c      	cmp	r4, r3
 800ae18:	d101      	bne.n	800ae1e <_fflush_r+0x62>
 800ae1a:	68ac      	ldr	r4, [r5, #8]
 800ae1c:	e7df      	b.n	800adde <_fflush_r+0x22>
 800ae1e:	4b04      	ldr	r3, [pc, #16]	; (800ae30 <_fflush_r+0x74>)
 800ae20:	429c      	cmp	r4, r3
 800ae22:	bf08      	it	eq
 800ae24:	68ec      	ldreq	r4, [r5, #12]
 800ae26:	e7da      	b.n	800adde <_fflush_r+0x22>
 800ae28:	0800b7a4 	.word	0x0800b7a4
 800ae2c:	0800b7c4 	.word	0x0800b7c4
 800ae30:	0800b784 	.word	0x0800b784

0800ae34 <std>:
 800ae34:	2300      	movs	r3, #0
 800ae36:	b510      	push	{r4, lr}
 800ae38:	4604      	mov	r4, r0
 800ae3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae42:	6083      	str	r3, [r0, #8]
 800ae44:	8181      	strh	r1, [r0, #12]
 800ae46:	6643      	str	r3, [r0, #100]	; 0x64
 800ae48:	81c2      	strh	r2, [r0, #14]
 800ae4a:	6183      	str	r3, [r0, #24]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	2208      	movs	r2, #8
 800ae50:	305c      	adds	r0, #92	; 0x5c
 800ae52:	f7fb fdcd 	bl	80069f0 <memset>
 800ae56:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <std+0x38>)
 800ae58:	6263      	str	r3, [r4, #36]	; 0x24
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <std+0x3c>)
 800ae5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x40>)
 800ae60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <std+0x44>)
 800ae64:	6224      	str	r4, [r4, #32]
 800ae66:	6323      	str	r3, [r4, #48]	; 0x30
 800ae68:	bd10      	pop	{r4, pc}
 800ae6a:	bf00      	nop
 800ae6c:	0800b189 	.word	0x0800b189
 800ae70:	0800b1ab 	.word	0x0800b1ab
 800ae74:	0800b1e3 	.word	0x0800b1e3
 800ae78:	0800b207 	.word	0x0800b207

0800ae7c <_cleanup_r>:
 800ae7c:	4901      	ldr	r1, [pc, #4]	; (800ae84 <_cleanup_r+0x8>)
 800ae7e:	f000 b8af 	b.w	800afe0 <_fwalk_reent>
 800ae82:	bf00      	nop
 800ae84:	0800adbd 	.word	0x0800adbd

0800ae88 <__sfmoreglue>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	2268      	movs	r2, #104	; 0x68
 800ae8c:	1e4d      	subs	r5, r1, #1
 800ae8e:	4355      	muls	r5, r2
 800ae90:	460e      	mov	r6, r1
 800ae92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae96:	f7ff fa59 	bl	800a34c <_malloc_r>
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	b140      	cbz	r0, 800aeb0 <__sfmoreglue+0x28>
 800ae9e:	2100      	movs	r1, #0
 800aea0:	e9c0 1600 	strd	r1, r6, [r0]
 800aea4:	300c      	adds	r0, #12
 800aea6:	60a0      	str	r0, [r4, #8]
 800aea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aeac:	f7fb fda0 	bl	80069f0 <memset>
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}

0800aeb4 <__sfp_lock_acquire>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	; (800aebc <__sfp_lock_acquire+0x8>)
 800aeb6:	f000 b8b3 	b.w	800b020 <__retarget_lock_acquire_recursive>
 800aeba:	bf00      	nop
 800aebc:	20000501 	.word	0x20000501

0800aec0 <__sfp_lock_release>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__sfp_lock_release+0x8>)
 800aec2:	f000 b8ae 	b.w	800b022 <__retarget_lock_release_recursive>
 800aec6:	bf00      	nop
 800aec8:	20000501 	.word	0x20000501

0800aecc <__sinit_lock_acquire>:
 800aecc:	4801      	ldr	r0, [pc, #4]	; (800aed4 <__sinit_lock_acquire+0x8>)
 800aece:	f000 b8a7 	b.w	800b020 <__retarget_lock_acquire_recursive>
 800aed2:	bf00      	nop
 800aed4:	20000502 	.word	0x20000502

0800aed8 <__sinit_lock_release>:
 800aed8:	4801      	ldr	r0, [pc, #4]	; (800aee0 <__sinit_lock_release+0x8>)
 800aeda:	f000 b8a2 	b.w	800b022 <__retarget_lock_release_recursive>
 800aede:	bf00      	nop
 800aee0:	20000502 	.word	0x20000502

0800aee4 <__sinit>:
 800aee4:	b510      	push	{r4, lr}
 800aee6:	4604      	mov	r4, r0
 800aee8:	f7ff fff0 	bl	800aecc <__sinit_lock_acquire>
 800aeec:	69a3      	ldr	r3, [r4, #24]
 800aeee:	b11b      	cbz	r3, 800aef8 <__sinit+0x14>
 800aef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef4:	f7ff bff0 	b.w	800aed8 <__sinit_lock_release>
 800aef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aefc:	6523      	str	r3, [r4, #80]	; 0x50
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <__sinit+0x68>)
 800af00:	4a13      	ldr	r2, [pc, #76]	; (800af50 <__sinit+0x6c>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	62a2      	str	r2, [r4, #40]	; 0x28
 800af06:	42a3      	cmp	r3, r4
 800af08:	bf04      	itt	eq
 800af0a:	2301      	moveq	r3, #1
 800af0c:	61a3      	streq	r3, [r4, #24]
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 f820 	bl	800af54 <__sfp>
 800af14:	6060      	str	r0, [r4, #4]
 800af16:	4620      	mov	r0, r4
 800af18:	f000 f81c 	bl	800af54 <__sfp>
 800af1c:	60a0      	str	r0, [r4, #8]
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 f818 	bl	800af54 <__sfp>
 800af24:	2200      	movs	r2, #0
 800af26:	60e0      	str	r0, [r4, #12]
 800af28:	2104      	movs	r1, #4
 800af2a:	6860      	ldr	r0, [r4, #4]
 800af2c:	f7ff ff82 	bl	800ae34 <std>
 800af30:	68a0      	ldr	r0, [r4, #8]
 800af32:	2201      	movs	r2, #1
 800af34:	2109      	movs	r1, #9
 800af36:	f7ff ff7d 	bl	800ae34 <std>
 800af3a:	68e0      	ldr	r0, [r4, #12]
 800af3c:	2202      	movs	r2, #2
 800af3e:	2112      	movs	r1, #18
 800af40:	f7ff ff78 	bl	800ae34 <std>
 800af44:	2301      	movs	r3, #1
 800af46:	61a3      	str	r3, [r4, #24]
 800af48:	e7d2      	b.n	800aef0 <__sinit+0xc>
 800af4a:	bf00      	nop
 800af4c:	0800b340 	.word	0x0800b340
 800af50:	0800ae7d 	.word	0x0800ae7d

0800af54 <__sfp>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	4607      	mov	r7, r0
 800af58:	f7ff ffac 	bl	800aeb4 <__sfp_lock_acquire>
 800af5c:	4b1e      	ldr	r3, [pc, #120]	; (800afd8 <__sfp+0x84>)
 800af5e:	681e      	ldr	r6, [r3, #0]
 800af60:	69b3      	ldr	r3, [r6, #24]
 800af62:	b913      	cbnz	r3, 800af6a <__sfp+0x16>
 800af64:	4630      	mov	r0, r6
 800af66:	f7ff ffbd 	bl	800aee4 <__sinit>
 800af6a:	3648      	adds	r6, #72	; 0x48
 800af6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af70:	3b01      	subs	r3, #1
 800af72:	d503      	bpl.n	800af7c <__sfp+0x28>
 800af74:	6833      	ldr	r3, [r6, #0]
 800af76:	b30b      	cbz	r3, 800afbc <__sfp+0x68>
 800af78:	6836      	ldr	r6, [r6, #0]
 800af7a:	e7f7      	b.n	800af6c <__sfp+0x18>
 800af7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af80:	b9d5      	cbnz	r5, 800afb8 <__sfp+0x64>
 800af82:	4b16      	ldr	r3, [pc, #88]	; (800afdc <__sfp+0x88>)
 800af84:	60e3      	str	r3, [r4, #12]
 800af86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af8a:	6665      	str	r5, [r4, #100]	; 0x64
 800af8c:	f000 f847 	bl	800b01e <__retarget_lock_init_recursive>
 800af90:	f7ff ff96 	bl	800aec0 <__sfp_lock_release>
 800af94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af9c:	6025      	str	r5, [r4, #0]
 800af9e:	61a5      	str	r5, [r4, #24]
 800afa0:	2208      	movs	r2, #8
 800afa2:	4629      	mov	r1, r5
 800afa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afa8:	f7fb fd22 	bl	80069f0 <memset>
 800afac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afb4:	4620      	mov	r0, r4
 800afb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb8:	3468      	adds	r4, #104	; 0x68
 800afba:	e7d9      	b.n	800af70 <__sfp+0x1c>
 800afbc:	2104      	movs	r1, #4
 800afbe:	4638      	mov	r0, r7
 800afc0:	f7ff ff62 	bl	800ae88 <__sfmoreglue>
 800afc4:	4604      	mov	r4, r0
 800afc6:	6030      	str	r0, [r6, #0]
 800afc8:	2800      	cmp	r0, #0
 800afca:	d1d5      	bne.n	800af78 <__sfp+0x24>
 800afcc:	f7ff ff78 	bl	800aec0 <__sfp_lock_release>
 800afd0:	230c      	movs	r3, #12
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	e7ee      	b.n	800afb4 <__sfp+0x60>
 800afd6:	bf00      	nop
 800afd8:	0800b340 	.word	0x0800b340
 800afdc:	ffff0001 	.word	0xffff0001

0800afe0 <_fwalk_reent>:
 800afe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe4:	4606      	mov	r6, r0
 800afe6:	4688      	mov	r8, r1
 800afe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afec:	2700      	movs	r7, #0
 800afee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aff2:	f1b9 0901 	subs.w	r9, r9, #1
 800aff6:	d505      	bpl.n	800b004 <_fwalk_reent+0x24>
 800aff8:	6824      	ldr	r4, [r4, #0]
 800affa:	2c00      	cmp	r4, #0
 800affc:	d1f7      	bne.n	800afee <_fwalk_reent+0xe>
 800affe:	4638      	mov	r0, r7
 800b000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b004:	89ab      	ldrh	r3, [r5, #12]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d907      	bls.n	800b01a <_fwalk_reent+0x3a>
 800b00a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b00e:	3301      	adds	r3, #1
 800b010:	d003      	beq.n	800b01a <_fwalk_reent+0x3a>
 800b012:	4629      	mov	r1, r5
 800b014:	4630      	mov	r0, r6
 800b016:	47c0      	blx	r8
 800b018:	4307      	orrs	r7, r0
 800b01a:	3568      	adds	r5, #104	; 0x68
 800b01c:	e7e9      	b.n	800aff2 <_fwalk_reent+0x12>

0800b01e <__retarget_lock_init_recursive>:
 800b01e:	4770      	bx	lr

0800b020 <__retarget_lock_acquire_recursive>:
 800b020:	4770      	bx	lr

0800b022 <__retarget_lock_release_recursive>:
 800b022:	4770      	bx	lr

0800b024 <__swhatbuf_r>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	460e      	mov	r6, r1
 800b028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b02c:	2900      	cmp	r1, #0
 800b02e:	b096      	sub	sp, #88	; 0x58
 800b030:	4614      	mov	r4, r2
 800b032:	461d      	mov	r5, r3
 800b034:	da08      	bge.n	800b048 <__swhatbuf_r+0x24>
 800b036:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	602a      	str	r2, [r5, #0]
 800b03e:	061a      	lsls	r2, r3, #24
 800b040:	d410      	bmi.n	800b064 <__swhatbuf_r+0x40>
 800b042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b046:	e00e      	b.n	800b066 <__swhatbuf_r+0x42>
 800b048:	466a      	mov	r2, sp
 800b04a:	f000 f903 	bl	800b254 <_fstat_r>
 800b04e:	2800      	cmp	r0, #0
 800b050:	dbf1      	blt.n	800b036 <__swhatbuf_r+0x12>
 800b052:	9a01      	ldr	r2, [sp, #4]
 800b054:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b058:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b05c:	425a      	negs	r2, r3
 800b05e:	415a      	adcs	r2, r3
 800b060:	602a      	str	r2, [r5, #0]
 800b062:	e7ee      	b.n	800b042 <__swhatbuf_r+0x1e>
 800b064:	2340      	movs	r3, #64	; 0x40
 800b066:	2000      	movs	r0, #0
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	b016      	add	sp, #88	; 0x58
 800b06c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b070 <__smakebuf_r>:
 800b070:	898b      	ldrh	r3, [r1, #12]
 800b072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b074:	079d      	lsls	r5, r3, #30
 800b076:	4606      	mov	r6, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	d507      	bpl.n	800b08c <__smakebuf_r+0x1c>
 800b07c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	6123      	str	r3, [r4, #16]
 800b084:	2301      	movs	r3, #1
 800b086:	6163      	str	r3, [r4, #20]
 800b088:	b002      	add	sp, #8
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	ab01      	add	r3, sp, #4
 800b08e:	466a      	mov	r2, sp
 800b090:	f7ff ffc8 	bl	800b024 <__swhatbuf_r>
 800b094:	9900      	ldr	r1, [sp, #0]
 800b096:	4605      	mov	r5, r0
 800b098:	4630      	mov	r0, r6
 800b09a:	f7ff f957 	bl	800a34c <_malloc_r>
 800b09e:	b948      	cbnz	r0, 800b0b4 <__smakebuf_r+0x44>
 800b0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a4:	059a      	lsls	r2, r3, #22
 800b0a6:	d4ef      	bmi.n	800b088 <__smakebuf_r+0x18>
 800b0a8:	f023 0303 	bic.w	r3, r3, #3
 800b0ac:	f043 0302 	orr.w	r3, r3, #2
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	e7e3      	b.n	800b07c <__smakebuf_r+0xc>
 800b0b4:	4b0d      	ldr	r3, [pc, #52]	; (800b0ec <__smakebuf_r+0x7c>)
 800b0b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	6020      	str	r0, [r4, #0]
 800b0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	9b00      	ldr	r3, [sp, #0]
 800b0c4:	6163      	str	r3, [r4, #20]
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	6120      	str	r0, [r4, #16]
 800b0ca:	b15b      	cbz	r3, 800b0e4 <__smakebuf_r+0x74>
 800b0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f000 f8d1 	bl	800b278 <_isatty_r>
 800b0d6:	b128      	cbz	r0, 800b0e4 <__smakebuf_r+0x74>
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	f023 0303 	bic.w	r3, r3, #3
 800b0de:	f043 0301 	orr.w	r3, r3, #1
 800b0e2:	81a3      	strh	r3, [r4, #12]
 800b0e4:	89a0      	ldrh	r0, [r4, #12]
 800b0e6:	4305      	orrs	r5, r0
 800b0e8:	81a5      	strh	r5, [r4, #12]
 800b0ea:	e7cd      	b.n	800b088 <__smakebuf_r+0x18>
 800b0ec:	0800ae7d 	.word	0x0800ae7d

0800b0f0 <_malloc_usable_size_r>:
 800b0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0f4:	1f18      	subs	r0, r3, #4
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	bfbc      	itt	lt
 800b0fa:	580b      	ldrlt	r3, [r1, r0]
 800b0fc:	18c0      	addlt	r0, r0, r3
 800b0fe:	4770      	bx	lr

0800b100 <_raise_r>:
 800b100:	291f      	cmp	r1, #31
 800b102:	b538      	push	{r3, r4, r5, lr}
 800b104:	4604      	mov	r4, r0
 800b106:	460d      	mov	r5, r1
 800b108:	d904      	bls.n	800b114 <_raise_r+0x14>
 800b10a:	2316      	movs	r3, #22
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b116:	b112      	cbz	r2, 800b11e <_raise_r+0x1e>
 800b118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b11c:	b94b      	cbnz	r3, 800b132 <_raise_r+0x32>
 800b11e:	4620      	mov	r0, r4
 800b120:	f000 f830 	bl	800b184 <_getpid_r>
 800b124:	462a      	mov	r2, r5
 800b126:	4601      	mov	r1, r0
 800b128:	4620      	mov	r0, r4
 800b12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b12e:	f000 b817 	b.w	800b160 <_kill_r>
 800b132:	2b01      	cmp	r3, #1
 800b134:	d00a      	beq.n	800b14c <_raise_r+0x4c>
 800b136:	1c59      	adds	r1, r3, #1
 800b138:	d103      	bne.n	800b142 <_raise_r+0x42>
 800b13a:	2316      	movs	r3, #22
 800b13c:	6003      	str	r3, [r0, #0]
 800b13e:	2001      	movs	r0, #1
 800b140:	e7e7      	b.n	800b112 <_raise_r+0x12>
 800b142:	2400      	movs	r4, #0
 800b144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b148:	4628      	mov	r0, r5
 800b14a:	4798      	blx	r3
 800b14c:	2000      	movs	r0, #0
 800b14e:	e7e0      	b.n	800b112 <_raise_r+0x12>

0800b150 <raise>:
 800b150:	4b02      	ldr	r3, [pc, #8]	; (800b15c <raise+0xc>)
 800b152:	4601      	mov	r1, r0
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	f7ff bfd3 	b.w	800b100 <_raise_r>
 800b15a:	bf00      	nop
 800b15c:	2000000c 	.word	0x2000000c

0800b160 <_kill_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4d07      	ldr	r5, [pc, #28]	; (800b180 <_kill_r+0x20>)
 800b164:	2300      	movs	r3, #0
 800b166:	4604      	mov	r4, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	4611      	mov	r1, r2
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	f7f6 fca1 	bl	8001ab4 <_kill>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	d102      	bne.n	800b17c <_kill_r+0x1c>
 800b176:	682b      	ldr	r3, [r5, #0]
 800b178:	b103      	cbz	r3, 800b17c <_kill_r+0x1c>
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	bd38      	pop	{r3, r4, r5, pc}
 800b17e:	bf00      	nop
 800b180:	200004fc 	.word	0x200004fc

0800b184 <_getpid_r>:
 800b184:	f7f6 bc8e 	b.w	8001aa4 <_getpid>

0800b188 <__sread>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	460c      	mov	r4, r1
 800b18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b190:	f000 f894 	bl	800b2bc <_read_r>
 800b194:	2800      	cmp	r0, #0
 800b196:	bfab      	itete	ge
 800b198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b19a:	89a3      	ldrhlt	r3, [r4, #12]
 800b19c:	181b      	addge	r3, r3, r0
 800b19e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1a2:	bfac      	ite	ge
 800b1a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1a6:	81a3      	strhlt	r3, [r4, #12]
 800b1a8:	bd10      	pop	{r4, pc}

0800b1aa <__swrite>:
 800b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ae:	461f      	mov	r7, r3
 800b1b0:	898b      	ldrh	r3, [r1, #12]
 800b1b2:	05db      	lsls	r3, r3, #23
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	d505      	bpl.n	800b1c8 <__swrite+0x1e>
 800b1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f000 f868 	bl	800b298 <_lseek_r>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	4628      	mov	r0, r5
 800b1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1de:	f000 b817 	b.w	800b210 <_write_r>

0800b1e2 <__sseek>:
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ea:	f000 f855 	bl	800b298 <_lseek_r>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	bf15      	itete	ne
 800b1f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1fe:	81a3      	strheq	r3, [r4, #12]
 800b200:	bf18      	it	ne
 800b202:	81a3      	strhne	r3, [r4, #12]
 800b204:	bd10      	pop	{r4, pc}

0800b206 <__sclose>:
 800b206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b20a:	f000 b813 	b.w	800b234 <_close_r>
	...

0800b210 <_write_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4d07      	ldr	r5, [pc, #28]	; (800b230 <_write_r+0x20>)
 800b214:	4604      	mov	r4, r0
 800b216:	4608      	mov	r0, r1
 800b218:	4611      	mov	r1, r2
 800b21a:	2200      	movs	r2, #0
 800b21c:	602a      	str	r2, [r5, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	f7f5 feea 	bl	8000ff8 <_write>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_write_r+0x1e>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_write_r+0x1e>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	200004fc 	.word	0x200004fc

0800b234 <_close_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d06      	ldr	r5, [pc, #24]	; (800b250 <_close_r+0x1c>)
 800b238:	2300      	movs	r3, #0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	602b      	str	r3, [r5, #0]
 800b240:	f7f6 fc6f 	bl	8001b22 <_close>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d102      	bne.n	800b24e <_close_r+0x1a>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	b103      	cbz	r3, 800b24e <_close_r+0x1a>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	200004fc 	.word	0x200004fc

0800b254 <_fstat_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d07      	ldr	r5, [pc, #28]	; (800b274 <_fstat_r+0x20>)
 800b258:	2300      	movs	r3, #0
 800b25a:	4604      	mov	r4, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	4611      	mov	r1, r2
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	f7f6 fc6a 	bl	8001b3a <_fstat>
 800b266:	1c43      	adds	r3, r0, #1
 800b268:	d102      	bne.n	800b270 <_fstat_r+0x1c>
 800b26a:	682b      	ldr	r3, [r5, #0]
 800b26c:	b103      	cbz	r3, 800b270 <_fstat_r+0x1c>
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	bd38      	pop	{r3, r4, r5, pc}
 800b272:	bf00      	nop
 800b274:	200004fc 	.word	0x200004fc

0800b278 <_isatty_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d06      	ldr	r5, [pc, #24]	; (800b294 <_isatty_r+0x1c>)
 800b27c:	2300      	movs	r3, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	4608      	mov	r0, r1
 800b282:	602b      	str	r3, [r5, #0]
 800b284:	f7f6 fc69 	bl	8001b5a <_isatty>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_isatty_r+0x1a>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_isatty_r+0x1a>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	200004fc 	.word	0x200004fc

0800b298 <_lseek_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4d07      	ldr	r5, [pc, #28]	; (800b2b8 <_lseek_r+0x20>)
 800b29c:	4604      	mov	r4, r0
 800b29e:	4608      	mov	r0, r1
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	602a      	str	r2, [r5, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f7f6 fc62 	bl	8001b70 <_lseek>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	d102      	bne.n	800b2b6 <_lseek_r+0x1e>
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	b103      	cbz	r3, 800b2b6 <_lseek_r+0x1e>
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	200004fc 	.word	0x200004fc

0800b2bc <_read_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d07      	ldr	r5, [pc, #28]	; (800b2dc <_read_r+0x20>)
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	4608      	mov	r0, r1
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	602a      	str	r2, [r5, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	f7f6 fc0c 	bl	8001ae8 <_read>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_read_r+0x1e>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_read_r+0x1e>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	200004fc 	.word	0x200004fc

0800b2e0 <_init>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	bf00      	nop
 800b2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e6:	bc08      	pop	{r3}
 800b2e8:	469e      	mov	lr, r3
 800b2ea:	4770      	bx	lr

0800b2ec <_fini>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr
