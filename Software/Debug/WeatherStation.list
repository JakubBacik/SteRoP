
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800c010  0800c010  0001c010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3a0  0800c3a0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3a8  0800c3a8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3a8  0800c3a8  0001c3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3ac  0800c3ac  0001c3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c3b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001dc  0800c58c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800c58c  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f5e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c64  00000000  00000000  0003916a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  0003bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e8  00000000  00000000  0003d410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ab0c  00000000  00000000  0003e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011809  00000000  00000000  00069404  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b5fb  00000000  00000000  0007ac0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000728c  00000000  00000000  00186284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bff4 	.word	0x0800bff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800bff4 	.word	0x0800bff4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800103c:	b2db      	uxtb	r3, r3
 800103e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	480b      	ldr	r0, [pc, #44]	; (8001074 <BMP280_Read8+0x4c>)
 8001046:	f003 fb11 	bl	800466c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <BMP280_Read8+0x50>)
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	f107 020c 	add.w	r2, r7, #12
 8001052:	f107 010c 	add.w	r1, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2302      	movs	r3, #2
 800105c:	f004 febf 	bl	8005dde <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2102      	movs	r1, #2
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <BMP280_Read8+0x4c>)
 8001066:	f003 fb01 	bl	800466c <HAL_GPIO_WritePin>
	return tmp[1];
 800106a:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	48000800 	.word	0x48000800
 8001078:	20000228 	.word	0x20000228

0800107c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001090:	b2db      	uxtb	r3, r3
 8001092:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2102      	movs	r1, #2
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <BMP280_Read16+0x5c>)
 800109a:	f003 fae7 	bl	800466c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <BMP280_Read16+0x60>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	f107 010c 	add.w	r1, r7, #12
 80010aa:	230a      	movs	r3, #10
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	f004 fe95 	bl	8005dde <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <BMP280_Read16+0x5c>)
 80010ba:	f003 fad7 	bl	800466c <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29b      	uxth	r3, r3
#endif
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	48000800 	.word	0x48000800
 80010dc:	20000228 	.word	0x20000228

080010e0 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffc5 	bl	800107c <BMP280_Read16>
 80010f2:	4603      	mov	r3, r0
 80010f4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21b      	sxth	r3, r3
 8001108:	b29b      	uxth	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800112e:	b2db      	uxtb	r3, r3
 8001130:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2102      	movs	r1, #2
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <BMP280_Write8+0x54>)
 800113c:	f003 fa96 	bl	800466c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <BMP280_Write8+0x58>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2302      	movs	r3, #2
 8001152:	f004 fe44 	bl	8005dde <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2102      	movs	r1, #2
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <BMP280_Write8+0x54>)
 800115c:	f003 fa86 	bl	800466c <HAL_GPIO_WritePin>
#endif
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	48000800 	.word	0x48000800
 800116c:	20000228 	.word	0x20000228

08001170 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001184:	b2db      	uxtb	r3, r3
 8001186:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2102      	movs	r1, #2
 800118c:	480e      	ldr	r0, [pc, #56]	; (80011c8 <BMP280_Read24+0x58>)
 800118e:	f003 fa6d 	bl	800466c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <BMP280_Read24+0x5c>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f107 020c 	add.w	r2, r7, #12
 800119a:	f107 010c 	add.w	r1, r7, #12
 800119e:	230a      	movs	r3, #10
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2303      	movs	r3, #3
 80011a4:	f004 fe1b 	bl	8005dde <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <BMP280_Read24+0x58>)
 80011ae:	f003 fa5d 	bl	800466c <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	4313      	orrs	r3, r2
#endif
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	48000800 	.word	0x48000800
 80011cc:	20000228 	.word	0x20000228

080011d0 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	4608      	mov	r0, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4603      	mov	r3, r0
 80011e0:	70fb      	strb	r3, [r7, #3]
 80011e2:	460b      	mov	r3, r1
 80011e4:	70bb      	strb	r3, [r7, #2]
 80011e6:	4613      	mov	r3, r2
 80011e8:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 80011ea:	4a4e      	ldr	r2, [pc, #312]	; (8001324 <BMP280_Init+0x154>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	484c      	ldr	r0, [pc, #304]	; (8001328 <BMP280_Init+0x158>)
 80011f6:	f003 fa39 	bl	800466c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80011fa:	2005      	movs	r0, #5
 80011fc:	f001 fb96 	bl	800292c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	4848      	ldr	r0, [pc, #288]	; (8001328 <BMP280_Init+0x158>)
 8001206:	f003 fa31 	bl	800466c <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 800120a:	787b      	ldrb	r3, [r7, #1]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d901      	bls.n	8001214 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8001210:	2303      	movs	r3, #3
 8001212:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001214:	4a45      	ldr	r2, [pc, #276]	; (800132c <BMP280_Init+0x15c>)
 8001216:	787b      	ldrb	r3, [r7, #1]
 8001218:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800121a:	787b      	ldrb	r3, [r7, #1]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8001220:	2300      	movs	r3, #0
 8001222:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d901      	bls.n	800122e <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800122a:	2305      	movs	r3, #5
 800122c:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <BMP280_Init+0x160>)
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	2b05      	cmp	r3, #5
 8001238:	d901      	bls.n	800123e <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800123a:	2305      	movs	r3, #5
 800123c:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 800123e:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <BMP280_Init+0x164>)
 8001240:	78bb      	ldrb	r3, [r7, #2]
 8001242:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001244:	bf00      	nop
 8001246:	20d0      	movs	r0, #208	; 0xd0
 8001248:	f7ff feee 	bl	8001028 <BMP280_Read8>
 800124c:	4603      	mov	r3, r0
 800124e:	2b58      	cmp	r3, #88	; 0x58
 8001250:	d1f9      	bne.n	8001246 <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001252:	2088      	movs	r0, #136	; 0x88
 8001254:	f7ff ff44 	bl	80010e0 <BMP280_Read16LE>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <BMP280_Init+0x168>)
 800125e:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001260:	208a      	movs	r0, #138	; 0x8a
 8001262:	f7ff ff3d 	bl	80010e0 <BMP280_Read16LE>
 8001266:	4603      	mov	r3, r0
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b34      	ldr	r3, [pc, #208]	; (800133c <BMP280_Init+0x16c>)
 800126c:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800126e:	208c      	movs	r0, #140	; 0x8c
 8001270:	f7ff ff36 	bl	80010e0 <BMP280_Read16LE>
 8001274:	4603      	mov	r3, r0
 8001276:	b21a      	sxth	r2, r3
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <BMP280_Init+0x170>)
 800127a:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800127c:	208e      	movs	r0, #142	; 0x8e
 800127e:	f7ff ff2f 	bl	80010e0 <BMP280_Read16LE>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <BMP280_Init+0x174>)
 8001288:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800128a:	2090      	movs	r0, #144	; 0x90
 800128c:	f7ff ff28 	bl	80010e0 <BMP280_Read16LE>
 8001290:	4603      	mov	r3, r0
 8001292:	b21a      	sxth	r2, r3
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <BMP280_Init+0x178>)
 8001296:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001298:	2092      	movs	r0, #146	; 0x92
 800129a:	f7ff ff21 	bl	80010e0 <BMP280_Read16LE>
 800129e:	4603      	mov	r3, r0
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <BMP280_Init+0x17c>)
 80012a4:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80012a6:	2094      	movs	r0, #148	; 0x94
 80012a8:	f7ff ff1a 	bl	80010e0 <BMP280_Read16LE>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <BMP280_Init+0x180>)
 80012b2:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80012b4:	2096      	movs	r0, #150	; 0x96
 80012b6:	f7ff ff13 	bl	80010e0 <BMP280_Read16LE>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b21a      	sxth	r2, r3
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <BMP280_Init+0x184>)
 80012c0:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80012c2:	2098      	movs	r0, #152	; 0x98
 80012c4:	f7ff ff0c 	bl	80010e0 <BMP280_Read16LE>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <BMP280_Init+0x188>)
 80012ce:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80012d0:	209a      	movs	r0, #154	; 0x9a
 80012d2:	f7ff ff05 	bl	80010e0 <BMP280_Read16LE>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <BMP280_Init+0x18c>)
 80012dc:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80012de:	209c      	movs	r0, #156	; 0x9c
 80012e0:	f7ff fefe 	bl	80010e0 <BMP280_Read16LE>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <BMP280_Init+0x190>)
 80012ea:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80012ec:	209e      	movs	r0, #158	; 0x9e
 80012ee:	f7ff fef7 	bl	80010e0 <BMP280_Read16LE>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <BMP280_Init+0x194>)
 80012f8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	015b      	lsls	r3, r3, #5
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	78bb      	ldrb	r3, [r7, #2]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	b25b      	sxtb	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b25a      	sxtb	r2, r3
 800130a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800130e:	4313      	orrs	r3, r2
 8001310:	b25b      	sxtb	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4619      	mov	r1, r3
 8001316:	20f4      	movs	r0, #244	; 0xf4
 8001318:	f7ff fefc 	bl	8001114 <BMP280_Write8>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000228 	.word	0x20000228
 8001328:	48000800 	.word	0x48000800
 800132c:	2000022f 	.word	0x2000022f
 8001330:	2000022e 	.word	0x2000022e
 8001334:	2000021a 	.word	0x2000021a
 8001338:	2000022c 	.word	0x2000022c
 800133c:	2000021c 	.word	0x2000021c
 8001340:	20000214 	.word	0x20000214
 8001344:	20000220 	.word	0x20000220
 8001348:	20000216 	.word	0x20000216
 800134c:	20000230 	.word	0x20000230
 8001350:	20000234 	.word	0x20000234
 8001354:	2000021e 	.word	0x2000021e
 8001358:	20000224 	.word	0x20000224
 800135c:	20000218 	.word	0x20000218
 8001360:	20000222 	.word	0x20000222
 8001364:	20000232 	.word	0x20000232

08001368 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <BMP280_ReadTemperature+0xfc>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d16d      	bne.n	8001452 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001376:	20f4      	movs	r0, #244	; 0xf4
 8001378:	f7ff fe56 	bl	8001028 <BMP280_Read8>
 800137c:	4603      	mov	r3, r0
 800137e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	f023 0303 	bic.w	r3, r3, #3
 8001386:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	4619      	mov	r1, r3
 8001394:	20f4      	movs	r0, #244	; 0xf4
 8001396:	f7ff febd 	bl	8001114 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800139a:	20f4      	movs	r0, #244	; 0xf4
 800139c:	f7ff fe44 	bl	8001028 <BMP280_Read8>
 80013a0:	4603      	mov	r3, r0
 80013a2:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80013ac:	7dbb      	ldrb	r3, [r7, #22]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d14f      	bne.n	8001452 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013b2:	20f4      	movs	r0, #244	; 0xf4
 80013b4:	f7ff fe38 	bl	8001028 <BMP280_Read8>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80013bc:	7dbb      	ldrb	r3, [r7, #22]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80013c4:	7dbb      	ldrb	r3, [r7, #22]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d000      	beq.n	80013cc <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013ca:	e7f2      	b.n	80013b2 <BMP280_ReadTemperature+0x4a>
				  break;
 80013cc:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80013ce:	20fa      	movs	r0, #250	; 0xfa
 80013d0:	f7ff fece 	bl	8001170 <BMP280_Read24>
 80013d4:	4603      	mov	r3, r0
 80013d6:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	111b      	asrs	r3, r3, #4
 80013dc:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	10da      	asrs	r2, r3, #3
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <BMP280_ReadTemperature+0x100>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80013ea:	4a20      	ldr	r2, [pc, #128]	; (800146c <BMP280_ReadTemperature+0x104>)
 80013ec:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	12db      	asrs	r3, r3, #11
 80013f6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	111b      	asrs	r3, r3, #4
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <BMP280_ReadTemperature+0x100>)
 80013fe:	8812      	ldrh	r2, [r2, #0]
 8001400:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	1112      	asrs	r2, r2, #4
 8001406:	4918      	ldr	r1, [pc, #96]	; (8001468 <BMP280_ReadTemperature+0x100>)
 8001408:	8809      	ldrh	r1, [r1, #0]
 800140a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800140c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001410:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <BMP280_ReadTemperature+0x108>)
 8001414:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001418:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800141c:	139b      	asrs	r3, r3, #14
 800141e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4413      	add	r3, r2
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <BMP280_ReadTemperature+0x10c>)
 8001428:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <BMP280_ReadTemperature+0x10c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3380      	adds	r3, #128	; 0x80
 8001436:	121b      	asrs	r3, r3, #8
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001444:	edd7 7a01 	vldr	s15, [r7, #4]
 8001448:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001478 <BMP280_ReadTemperature+0x110>
 800144c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001450:	e001      	b.n	8001456 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -1;
 8001452:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001456:	eef0 7a47 	vmov.f32	s15, s14
}
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000022f 	.word	0x2000022f
 8001468:	2000022c 	.word	0x2000022c
 800146c:	2000021c 	.word	0x2000021c
 8001470:	20000214 	.word	0x20000214
 8001474:	20000238 	.word	0x20000238
 8001478:	42c80000 	.word	0x42c80000

0800147c <BMP280_ReadPressure>:
	  return p;
}
#endif
#ifdef BMP280
int32_t BMP280_ReadPressure(void)
{
 800147c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001480:	b088      	sub	sp, #32
 8001482:	af00      	add	r7, sp, #0
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  BMP280_ReadTemperature();
 8001484:	f7ff ff70 	bl	8001368 <BMP280_ReadTemperature>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001488:	20f7      	movs	r0, #247	; 0xf7
 800148a:	f7ff fe71 	bl	8001170 <BMP280_Read24>
 800148e:	4603      	mov	r3, r0
 8001490:	61fb      	str	r3, [r7, #28]
	  adc_P >>= 4;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	111b      	asrs	r3, r3, #4
 8001496:	61fb      	str	r3, [r7, #28]

	  var1 = ((int64_t)t_fine) - 128000;
 8001498:	4b64      	ldr	r3, [pc, #400]	; (800162c <BMP280_ReadPressure+0x1b0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014a2:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80014a6:	f142 34ff 	adc.w	r4, r2, #4294967295
 80014aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var1 * var1 * (int64_t)p6;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	fb02 f203 	mul.w	r2, r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	6939      	ldr	r1, [r7, #16]
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	441a      	add	r2, r3
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fba1 3403 	umull	r3, r4, r1, r3
 80014c8:	4422      	add	r2, r4
 80014ca:	4614      	mov	r4, r2
 80014cc:	4a58      	ldr	r2, [pc, #352]	; (8001630 <BMP280_ReadPressure+0x1b4>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	b211      	sxth	r1, r2
 80014d4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014d8:	fb01 f504 	mul.w	r5, r1, r4
 80014dc:	fb03 f002 	mul.w	r0, r3, r2
 80014e0:	4428      	add	r0, r5
 80014e2:	fba3 3401 	umull	r3, r4, r3, r1
 80014e6:	1902      	adds	r2, r0, r4
 80014e8:	4614      	mov	r4, r2
 80014ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80014ee:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <BMP280_ReadPressure+0x1b8>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	fb04 f102 	mul.w	r1, r4, r2
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	fb03 f202 	mul.w	r2, r3, r2
 800150a:	1888      	adds	r0, r1, r2
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	fba2 1203 	umull	r1, r2, r2, r3
 8001512:	1883      	adds	r3, r0, r2
 8001514:	461a      	mov	r2, r3
 8001516:	f04f 0500 	mov.w	r5, #0
 800151a:	f04f 0600 	mov.w	r6, #0
 800151e:	0456      	lsls	r6, r2, #17
 8001520:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001524:	044d      	lsls	r5, r1, #17
 8001526:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800152a:	186b      	adds	r3, r5, r1
 800152c:	eb46 0402 	adc.w	r4, r6, r2
 8001530:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var2 = var2 + (((int64_t)p4)<<35);
 8001534:	4b40      	ldr	r3, [pc, #256]	; (8001638 <BMP280_ReadPressure+0x1bc>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	b219      	sxth	r1, r3
 800153c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001540:	f04f 0500 	mov.w	r5, #0
 8001544:	f04f 0600 	mov.w	r6, #0
 8001548:	00ce      	lsls	r6, r1, #3
 800154a:	2500      	movs	r5, #0
 800154c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001550:	186b      	adds	r3, r5, r1
 8001552:	eb46 0402 	adc.w	r4, r6, r2
 8001556:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	fb02 f203 	mul.w	r2, r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	6939      	ldr	r1, [r7, #16]
 8001566:	fb01 f303 	mul.w	r3, r1, r3
 800156a:	441a      	add	r2, r3
 800156c:	6939      	ldr	r1, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	fba1 3403 	umull	r3, r4, r1, r3
 8001574:	4422      	add	r2, r4
 8001576:	4614      	mov	r4, r2
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <BMP280_ReadPressure+0x1c0>)
 800157a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800157e:	b211      	sxth	r1, r2
 8001580:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001584:	fb01 f504 	mul.w	r5, r1, r4
 8001588:	fb03 f002 	mul.w	r0, r3, r2
 800158c:	4428      	add	r0, r5
 800158e:	fba3 3401 	umull	r3, r4, r3, r1
 8001592:	1902      	adds	r2, r0, r4
 8001594:	4614      	mov	r4, r2
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	0a19      	lsrs	r1, r3, #8
 80015a0:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80015a4:	1222      	asrs	r2, r4, #8
	    ((var1 * (int64_t)p2)<<12);
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <BMP280_ReadPressure+0x1c4>)
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015b2:	6938      	ldr	r0, [r7, #16]
 80015b4:	fb04 f500 	mul.w	r5, r4, r0
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	fb03 f000 	mul.w	r0, r3, r0
 80015be:	4428      	add	r0, r5
 80015c0:	693d      	ldr	r5, [r7, #16]
 80015c2:	fba5 5603 	umull	r5, r6, r5, r3
 80015c6:	1983      	adds	r3, r0, r6
 80015c8:	461e      	mov	r6, r3
 80015ca:	f04f 0b00 	mov.w	fp, #0
 80015ce:	f04f 0c00 	mov.w	ip, #0
 80015d2:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80015d6:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80015da:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80015de:	eb1b 0301 	adds.w	r3, fp, r1
 80015e2:	eb4c 0402 	adc.w	r4, ip, r2
 80015e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80015ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015ee:	1c19      	adds	r1, r3, #0
 80015f0:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <BMP280_ReadPressure+0x1c8>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f04f 0400 	mov.w	r4, #0
 80015fe:	fb03 f502 	mul.w	r5, r3, r2
 8001602:	fb01 f004 	mul.w	r0, r1, r4
 8001606:	4428      	add	r0, r5
 8001608:	fba1 3403 	umull	r3, r4, r1, r3
 800160c:	1902      	adds	r2, r0, r4
 800160e:	4614      	mov	r4, r2
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	1061      	asrs	r1, r4, #1
 800161a:	17e2      	asrs	r2, r4, #31
 800161c:	e9c7 1204 	strd	r1, r2, [r7, #16]

	  if (var1 == 0) {
 8001620:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001624:	4323      	orrs	r3, r4
 8001626:	d10f      	bne.n	8001648 <BMP280_ReadPressure+0x1cc>
	    return 0;  // avoid exception caused by division by zero
 8001628:	2300      	movs	r3, #0
 800162a:	e0e6      	b.n	80017fa <BMP280_ReadPressure+0x37e>
 800162c:	20000238 	.word	0x20000238
 8001630:	20000224 	.word	0x20000224
 8001634:	2000021e 	.word	0x2000021e
 8001638:	20000234 	.word	0x20000234
 800163c:	20000230 	.word	0x20000230
 8001640:	20000216 	.word	0x20000216
 8001644:	20000220 	.word	0x20000220
	  }
	  p = 1048576 - adc_P;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800164e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001652:	e9c7 3400 	strd	r3, r4, [r7]
	  p = (((p<<31) - var2)*3125) / var1;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	ea4f 0963 	mov.w	r9, r3, asr #1
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001662:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001666:	4645      	mov	r5, r8
 8001668:	464e      	mov	r6, r9
 800166a:	1aed      	subs	r5, r5, r3
 800166c:	eb66 0604 	sbc.w	r6, r6, r4
 8001670:	46a8      	mov	r8, r5
 8001672:	46b1      	mov	r9, r6
 8001674:	eb18 0308 	adds.w	r3, r8, r8
 8001678:	eb49 0409 	adc.w	r4, r9, r9
 800167c:	4698      	mov	r8, r3
 800167e:	46a1      	mov	r9, r4
 8001680:	eb18 0805 	adds.w	r8, r8, r5
 8001684:	eb49 0906 	adc.w	r9, r9, r6
 8001688:	f04f 0100 	mov.w	r1, #0
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001694:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001698:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800169c:	eb18 0801 	adds.w	r8, r8, r1
 80016a0:	eb49 0902 	adc.w	r9, r9, r2
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016b0:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016b4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016b8:	4688      	mov	r8, r1
 80016ba:	4691      	mov	r9, r2
 80016bc:	eb18 0805 	adds.w	r8, r8, r5
 80016c0:	eb49 0906 	adc.w	r9, r9, r6
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016d0:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016d4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016d8:	4688      	mov	r8, r1
 80016da:	4691      	mov	r9, r2
 80016dc:	eb18 0005 	adds.w	r0, r8, r5
 80016e0:	eb49 0106 	adc.w	r1, r9, r6
 80016e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016e8:	f7ff face 	bl	8000c88 <__aeabi_ldivmod>
 80016ec:	4603      	mov	r3, r0
 80016ee:	460c      	mov	r4, r1
 80016f0:	e9c7 3400 	strd	r3, r4, [r7]
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <BMP280_ReadPressure+0x388>)
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	b219      	sxth	r1, r3
 80016fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001700:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f04f 0400 	mov.w	r4, #0
 800170c:	0b6b      	lsrs	r3, r5, #13
 800170e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001712:	1374      	asrs	r4, r6, #13
 8001714:	fb03 f502 	mul.w	r5, r3, r2
 8001718:	fb01 f004 	mul.w	r0, r1, r4
 800171c:	4428      	add	r0, r5
 800171e:	fba1 1203 	umull	r1, r2, r1, r3
 8001722:	1883      	adds	r3, r0, r2
 8001724:	461a      	mov	r2, r3
 8001726:	e9d7 5600 	ldrd	r5, r6, [r7]
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	f04f 0400 	mov.w	r4, #0
 8001732:	0b6b      	lsrs	r3, r5, #13
 8001734:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001738:	1374      	asrs	r4, r6, #13
 800173a:	fb03 f502 	mul.w	r5, r3, r2
 800173e:	fb01 f004 	mul.w	r0, r1, r4
 8001742:	4428      	add	r0, r5
 8001744:	fba1 1203 	umull	r1, r2, r1, r3
 8001748:	1883      	adds	r3, r0, r2
 800174a:	461a      	mov	r2, r3
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	0e4b      	lsrs	r3, r1, #25
 8001756:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800175a:	1654      	asrs	r4, r2, #25
 800175c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = (((int64_t)p8) * p) >> 19;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <BMP280_ReadPressure+0x38c>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b21b      	sxth	r3, r3
 8001768:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	fb04 f102 	mul.w	r1, r4, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	fb03 f202 	mul.w	r2, r3, r2
 8001778:	1888      	adds	r0, r1, r2
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	fba2 1203 	umull	r1, r2, r2, r3
 8001780:	1883      	adds	r3, r0, r2
 8001782:	461a      	mov	r2, r3
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	f04f 0400 	mov.w	r4, #0
 800178c:	0ccb      	lsrs	r3, r1, #19
 800178e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001792:	14d4      	asrs	r4, r2, #19
 8001794:	e9c7 3402 	strd	r3, r4, [r7, #8]

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001798:	e9d7 1200 	ldrd	r1, r2, [r7]
 800179c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80017a0:	eb11 0803 	adds.w	r8, r1, r3
 80017a4:	eb42 0904 	adc.w	r9, r2, r4
 80017a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017ac:	eb13 0508 	adds.w	r5, r3, r8
 80017b0:	eb44 0609 	adc.w	r6, r4, r9
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	0a29      	lsrs	r1, r5, #8
 80017be:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80017c2:	1232      	asrs	r2, r6, #8
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <BMP280_ReadPressure+0x390>)
 80017c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ca:	b21d      	sxth	r5, r3
 80017cc:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80017d0:	f04f 0800 	mov.w	r8, #0
 80017d4:	f04f 0900 	mov.w	r9, #0
 80017d8:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80017dc:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80017e0:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80017e4:	eb18 0301 	adds.w	r3, r8, r1
 80017e8:	eb49 0402 	adc.w	r4, r9, r2
 80017ec:	e9c7 3400 	strd	r3, r4, [r7]
	  return (int32_t)p/256;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da00      	bge.n	80017f8 <BMP280_ReadPressure+0x37c>
 80017f6:	33ff      	adds	r3, #255	; 0xff
 80017f8:	121b      	asrs	r3, r3, #8
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8001804:	20000232 	.word	0x20000232
 8001808:	20000222 	.word	0x20000222
 800180c:	20000218 	.word	0x20000218

08001810 <_write>:

/*Funkcja printf wywołuje funckje _write która jest funkcją
 *z atrybutem weak w bibliotece stdio.h, co powoduje że można
 *ją zastąpić własną implementacją, która służy do komunikacji
 *za pomocą UART.*/
int _write ( int file , char *ptr , int len ) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart1 , (uint8_t*)ptr , len , 50) ;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	b29a      	uxth	r2, r3
 8001820:	2332      	movs	r3, #50	; 0x32
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <_write+0x24>)
 8001826:	f005 fba1 	bl	8006f6c <HAL_UART_Transmit>
	return len;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200003f0 	.word	0x200003f0

08001838 <delay_us>:
/*Funkcja odpowiedzialna za generowanie opóżnień które
 * służa w komunikacji z czujnikiem DHT11. Ustawia timer
 * na wartosć 0 po czym sprawdza czy wartość timera
 * jest większa niż oczekiwane opóżnienie*/
void delay_us (uint16_t us)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <delay_us+0x2c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 800184a:	bf00      	nop
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <delay_us+0x2c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	429a      	cmp	r2, r3
 8001856:	d3f9      	bcc.n	800184c <delay_us+0x14>
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	200002f0 	.word	0x200002f0

08001868 <Set_Pin_Output>:

/* Funkcja odpowiedzialna za ustawienie danego pinu
* jako wyjście. */
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f002 fd28 	bl	80042ec <HAL_GPIO_Init>
}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <Set_Pin_Input>:

/*
 * Funkcja odpowiedzialna za ustawienie pinu jako wejście*/
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4619      	mov	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f002 fd0a 	bl	80042ec <HAL_GPIO_Init>
}
 80018d8:	bf00      	nop
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DHT11_Start>:
 * DHT11 jako wyjście i ustawienie stanu niskiego
 * który będzie trwał 18 ms, następnie pin
 * konfigurowany jest jako wejście, aby odczytać
 * odpowiedź czujnika.*/
void DHT11_Start (void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT_PORT, DHT_PIN);
 80018e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <DHT11_Start+0x30>)
 80018ea:	f7ff ffbd 	bl	8001868 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <DHT11_Start+0x30>)
 80018f6:	f002 feb9 	bl	800466c <HAL_GPIO_WritePin>
	 delay_us(18000);
 80018fa:	f244 6050 	movw	r0, #18000	; 0x4650
 80018fe:	f7ff ff9b 	bl	8001838 <delay_us>
	Set_Pin_Input(DHT_PORT, DHT_PIN);
 8001902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001906:	4802      	ldr	r0, [pc, #8]	; (8001910 <DHT11_Start+0x30>)
 8001908:	f7ff ffcc 	bl	80018a4 <Set_Pin_Input>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	48000800 	.word	0x48000800

08001914 <Check_Response>:
 * po 80 ms sprawdza się czy stan jest wysoki.
 * Oczekiwanie na stan niski co powoduje
 * początek wysłania danych.
 * */
uint8_t Check_Response (void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	71fb      	strb	r3, [r7, #7]
	 delay_us(40);
 800191e:	2028      	movs	r0, #40	; 0x28
 8001920:	f7ff ff8a 	bl	8001838 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001928:	4811      	ldr	r0, [pc, #68]	; (8001970 <Check_Response+0x5c>)
 800192a:	f002 fe87 	bl	800463c <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10f      	bne.n	8001954 <Check_Response+0x40>
	{
		 delay_us(80);
 8001934:	2050      	movs	r0, #80	; 0x50
 8001936:	f7ff ff7f 	bl	8001838 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 800193a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <Check_Response+0x5c>)
 8001940:	f002 fe7c 	bl	800463c <HAL_GPIO_ReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <Check_Response+0x3c>
 800194a:	2301      	movs	r3, #1
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	e001      	b.n	8001954 <Check_Response+0x40>
		else Response = -1;
 8001950:	23ff      	movs	r3, #255	; 0xff
 8001952:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));
 8001954:	bf00      	nop
 8001956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <Check_Response+0x5c>)
 800195c:	f002 fe6e 	bl	800463c <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f7      	bne.n	8001956 <Check_Response+0x42>

	return Response;
 8001966:	79fb      	ldrb	r3, [r7, #7]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	48000800 	.word	0x48000800

08001974 <DHT11_Read>:
 * Jeśli czas trwania stanu wysokiego wynosi 26-28 us
 * oznacza logiczne zero, natomiast jeżeli 40 s oznacza
 * logiczną jednykę.
 * */
uint8_t DHT11_Read (void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800197a:	2300      	movs	r3, #0
 800197c:	71bb      	strb	r3, [r7, #6]
 800197e:	e03a      	b.n	80019f6 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));
 8001980:	bf00      	nop
 8001982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001986:	4820      	ldr	r0, [pc, #128]	; (8001a08 <DHT11_Read+0x94>)
 8001988:	f002 fe58 	bl	800463c <HAL_GPIO_ReadPin>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f7      	beq.n	8001982 <DHT11_Read+0xe>
		delay_us(40);
 8001992:	2028      	movs	r0, #40	; 0x28
 8001994:	f7ff ff50 	bl	8001838 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800199c:	481a      	ldr	r0, [pc, #104]	; (8001a08 <DHT11_Read+0x94>)
 800199e:	f002 fe4d 	bl	800463c <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10e      	bne.n	80019c6 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));
 80019a8:	79bb      	ldrb	r3, [r7, #6]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2201      	movs	r2, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	4013      	ands	r3, r2
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	e00b      	b.n	80019de <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	f1c3 0307 	rsb	r3, r3, #7
 80019cc:	2201      	movs	r2, #1
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	b25a      	sxtb	r2, r3
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4313      	orrs	r3, r2
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));
 80019de:	bf00      	nop
 80019e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <DHT11_Read+0x94>)
 80019e6:	f002 fe29 	bl	800463c <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f7      	bne.n	80019e0 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	3301      	adds	r3, #1
 80019f4:	71bb      	strb	r3, [r7, #6]
 80019f6:	79bb      	ldrb	r3, [r7, #6]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d9c1      	bls.n	8001980 <DHT11_Read+0xc>
	}
	return i;
 80019fc:	79fb      	ldrb	r3, [r7, #7]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	48000800 	.word	0x48000800

08001a0c <HAL_TIM_PeriodElapsedCallback>:

/*Wywolanie przerwania, spawdzane jest czy przerwanie wywołał
 * timer2.*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d102      	bne.n	8001a24 <HAL_TIM_PeriodElapsedCallback+0x18>
		FlagInterruption = 1;
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
	}
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000204 	.word	0x20000204

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a3a:	f000 fefb 	bl	8002834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3e:	f000 f8e7 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a42:	f000 fb49 	bl	80020d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a46:	f000 faf1 	bl	800202c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a4a:	f000 f96b 	bl	8001d24 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001a4e:	f000 f9e1 	bl	8001e14 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001a52:	f000 fabb 	bl	8001fcc <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001a56:	f000 fb19 	bl	800208c <MX_DMA_Init>
  MX_TIM3_Init();
 8001a5a:	f000 fa69 	bl	8001f30 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a5e:	f000 fa17 	bl	8001e90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001a62:	217f      	movs	r1, #127	; 0x7f
 8001a64:	4853      	ldr	r0, [pc, #332]	; (8001bb4 <main+0x180>)
 8001a66:	f002 f87a 	bl	8003b5e <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001a6a:	4852      	ldr	r0, [pc, #328]	; (8001bb4 <main+0x180>)
 8001a6c:	f001 fabc 	bl	8002fe8 <HAL_ADC_Start>

  HAL_TIM_Base_Start(&htim3);
 8001a70:	4851      	ldr	r0, [pc, #324]	; (8001bb8 <main+0x184>)
 8001a72:	f004 fd7b 	bl	800656c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a76:	4851      	ldr	r0, [pc, #324]	; (8001bbc <main+0x188>)
 8001a78:	f004 fde0 	bl	800663c <HAL_TIM_Base_Start_IT>

  BMP280_Init(&hspi2, BMP280_TEMPERATURE_16BIT, BMP280_ULTRAHIGHRES, BMP280_NORMALMODE);
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	2205      	movs	r2, #5
 8001a80:	2101      	movs	r1, #1
 8001a82:	484f      	ldr	r0, [pc, #316]	; (8001bc0 <main+0x18c>)
 8001a84:	f7ff fba4 	bl	80011d0 <BMP280_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(FlagInterruption == 1){
 8001a88:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <main+0x190>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d1fb      	bne.n	8001a88 <main+0x54>
		  //Odczyt temperatury
		  uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001a90:	4848      	ldr	r0, [pc, #288]	; (8001bb4 <main+0x180>)
 8001a92:	f001 fb63 	bl	800315c <HAL_ADC_GetValue>
 8001a96:	6078      	str	r0, [r7, #4]
		  float temp = adc_value * 330.0f / 4096.0f;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001bc8 <main+0x194>
 8001aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aaa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001bcc <main+0x198>
 8001aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab2:	edc7 7a00 	vstr	s15, [r7]

		  //Odczyt wilgotnosci
		  DHT11_Start();
 8001ab6:	f7ff ff13 	bl	80018e0 <DHT11_Start>
		  Presence=Check_Response();
 8001aba:	f7ff ff2b 	bl	8001914 <Check_Response>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <main+0x19c>)
 8001ac4:	701a      	strb	r2, [r3, #0]
		  RH_byte1=DHT11_Read();
 8001ac6:	f7ff ff55 	bl	8001974 <DHT11_Read>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <main+0x1a0>)
 8001ad0:	701a      	strb	r2, [r3, #0]
		  RH_byte2=DHT11_Read();
 8001ad2:	f7ff ff4f 	bl	8001974 <DHT11_Read>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <main+0x1a4>)
 8001adc:	701a      	strb	r2, [r3, #0]
		  Temp_byte1=DHT11_Read();
 8001ade:	f7ff ff49 	bl	8001974 <DHT11_Read>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <main+0x1a8>)
 8001ae8:	701a      	strb	r2, [r3, #0]
		  Temp_byte2=DHT11_Read();
 8001aea:	f7ff ff43 	bl	8001974 <DHT11_Read>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <main+0x1ac>)
 8001af4:	701a      	strb	r2, [r3, #0]
		  SUM=DHT11_Read();
 8001af6:	f7ff ff3d 	bl	8001974 <DHT11_Read>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <main+0x1b0>)
 8001b00:	801a      	strh	r2, [r3, #0]

		  Te=Temp_byte1;
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <main+0x1a8>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <main+0x1b4>)
 8001b0a:	801a      	strh	r2, [r3, #0]
		  RH=RH_byte1;
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <main+0x1a0>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b36      	ldr	r3, [pc, #216]	; (8001bec <main+0x1b8>)
 8001b14:	801a      	strh	r2, [r3, #0]
		  Temperature = (float) Te;
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <main+0x1b4>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <main+0x1bc>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
		  Humidity =(float) RH;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <main+0x1b8>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <main+0x1c0>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]


		  //Odczyt cisnienia
		  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	482e      	ldr	r0, [pc, #184]	; (8001bf8 <main+0x1c4>)
 8001b40:	f002 fd94 	bl	800466c <HAL_GPIO_WritePin>
		  pressure = BMP280_ReadPressure();
 8001b44:	f7ff fc9a 	bl	800147c <BMP280_ReadPressure>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <main+0x1c8>)
 8001b4c:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2102      	movs	r1, #2
 8001b52:	4829      	ldr	r0, [pc, #164]	; (8001bf8 <main+0x1c4>)
 8001b54:	f002 fd8a 	bl	800466c <HAL_GPIO_WritePin>

		  //Zmania stanu pinu odpowidzalnego za wywolanie przerwania w ESP32
		  HAL_GPIO_WritePin(USART_InterruptPin_GPIO_Port, USART_InterruptPin_Pin, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	4828      	ldr	r0, [pc, #160]	; (8001c00 <main+0x1cc>)
 8001b5e:	f002 fd85 	bl	800466c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(USART_InterruptPin_GPIO_Port, USART_InterruptPin_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2120      	movs	r1, #32
 8001b66:	4826      	ldr	r0, [pc, #152]	; (8001c00 <main+0x1cc>)
 8001b68:	f002 fd80 	bl	800466c <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8001b6c:	200a      	movs	r0, #10
 8001b6e:	f000 fedd 	bl	800292c <HAL_Delay>

		  //Wyslanie ramki informacji
		  printf("X %.1f %.0f %d \r\n", adc_value, temp, Humidity,  pressure);
 8001b72:	6838      	ldr	r0, [r7, #0]
 8001b74:	f7fe fce8 	bl	8000548 <__aeabi_f2d>
 8001b78:	4605      	mov	r5, r0
 8001b7a:	460e      	mov	r6, r1
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <main+0x1c0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fce1 	bl	8000548 <__aeabi_f2d>
 8001b86:	4603      	mov	r3, r0
 8001b88:	460c      	mov	r4, r1
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <main+0x1c8>)
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	9202      	str	r2, [sp, #8]
 8001b90:	e9cd 3400 	strd	r3, r4, [sp]
 8001b94:	462a      	mov	r2, r5
 8001b96:	4633      	mov	r3, r6
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	481a      	ldr	r0, [pc, #104]	; (8001c04 <main+0x1d0>)
 8001b9c:	f006 fe8c 	bl	80088b8 <iprintf>
		  //Informacja o wyslaniu ramki dla uzytkownika
		  HAL_UART_Transmit(&huart2 , "Wyslanie danych \r \n" , 22, 50) ;
 8001ba0:	2332      	movs	r3, #50	; 0x32
 8001ba2:	2216      	movs	r2, #22
 8001ba4:	4918      	ldr	r1, [pc, #96]	; (8001c08 <main+0x1d4>)
 8001ba6:	4819      	ldr	r0, [pc, #100]	; (8001c0c <main+0x1d8>)
 8001ba8:	f005 f9e0 	bl	8006f6c <HAL_UART_Transmit>

	  	FlagInterruption = 0;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <main+0x190>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
	  if(FlagInterruption == 1){
 8001bb2:	e769      	b.n	8001a88 <main+0x54>
 8001bb4:	20000340 	.word	0x20000340
 8001bb8:	200002f0 	.word	0x200002f0
 8001bbc:	20000474 	.word	0x20000474
 8001bc0:	20000284 	.word	0x20000284
 8001bc4:	20000204 	.word	0x20000204
 8001bc8:	43a50000 	.word	0x43a50000
 8001bcc:	45800000 	.word	0x45800000
 8001bd0:	20000200 	.word	0x20000200
 8001bd4:	20000540 	.word	0x20000540
 8001bd8:	20000545 	.word	0x20000545
 8001bdc:	20000470 	.word	0x20000470
 8001be0:	20000544 	.word	0x20000544
 8001be4:	20000542 	.word	0x20000542
 8001be8:	20000472 	.word	0x20000472
 8001bec:	200002e8 	.word	0x200002e8
 8001bf0:	200001f8 	.word	0x200001f8
 8001bf4:	200001fc 	.word	0x200001fc
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	2000033c 	.word	0x2000033c
 8001c00:	48000400 	.word	0x48000400
 8001c04:	0800c010 	.word	0x0800c010
 8001c08:	0800c024 	.word	0x0800c024
 8001c0c:	200004c0 	.word	0x200004c0

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0b8      	sub	sp, #224	; 0xe0
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c1a:	2244      	movs	r2, #68	; 0x44
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f006 f804 	bl	8007c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c34:	463b      	mov	r3, r7
 8001c36:	2288      	movs	r2, #136	; 0x88
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f005 fff6 	bl	8007c2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c4e:	2310      	movs	r3, #16
 8001c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c54:	2302      	movs	r3, #2
 8001c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c66:	230a      	movs	r3, #10
 8001c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c6c:	2307      	movs	r3, #7
 8001c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fd6e 	bl	8004764 <HAL_RCC_OscConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c8e:	f000 fab5 	bl	80021fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	230f      	movs	r3, #15
 8001c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 f93a 	bl	8004f30 <HAL_RCC_ClockConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001cc2:	f000 fa9b 	bl	80021fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001cc6:	f244 0303 	movw	r3, #16387	; 0x4003
 8001cca:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001cd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cd8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fb1c 	bl	8005338 <HAL_RCCEx_PeriphCLKConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001d06:	f000 fa79 	bl	80021fc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d0e:	f002 fcd3 	bl	80046b8 <HAL_PWREx_ControlVoltageScaling>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001d18:	f000 fa70 	bl	80021fc <Error_Handler>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	37e0      	adds	r7, #224	; 0xe0
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
 8001d44:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d48:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <MX_ADC1_Init+0xe8>)
 8001d4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d52:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001d9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da8:	4817      	ldr	r0, [pc, #92]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001daa:	f000 ffc9 	bl	8002d40 <HAL_ADC_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001db4:	f000 fa22 	bl	80021fc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4811      	ldr	r0, [pc, #68]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001dc4:	f001 ff2c 	bl	8003c20 <HAL_ADCEx_MultiModeConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001dce:	f000 fa15 	bl	80021fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_ADC1_Init+0xec>)
 8001dd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dde:	237f      	movs	r3, #127	; 0x7f
 8001de0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001de2:	2304      	movs	r3, #4
 8001de4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4806      	ldr	r0, [pc, #24]	; (8001e08 <MX_ADC1_Init+0xe4>)
 8001df0:	f001 f9c2 	bl	8003178 <HAL_ADC_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001dfa:	f000 f9ff 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000340 	.word	0x20000340
 8001e0c:	50040000 	.word	0x50040000
 8001e10:	04300002 	.word	0x04300002

08001e14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <MX_SPI2_Init+0x78>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e32:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e46:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e4a:	2218      	movs	r2, #24
 8001e4c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e62:	2207      	movs	r2, #7
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e6e:	2208      	movs	r2, #8
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e74:	f003 ff10 	bl	8005c98 <HAL_SPI_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e7e:	f000 f9bd 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000284 	.word	0x20000284
 8001e8c:	40003800 	.word	0x40003800

08001e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001eb8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <MX_TIM2_Init+0x9c>)
 8001ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ed6:	4814      	ldr	r0, [pc, #80]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ed8:	f004 faf0 	bl	80064bc <HAL_TIM_Base_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ee2:	f000 f98b 	bl	80021fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ef4:	f004 fd31 	bl	800695a <HAL_TIM_ConfigClockSource>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001efe:	f000 f97d 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001f10:	f004 ff38 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f1a:	f000 f96f 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000474 	.word	0x20000474
 8001f2c:	0001869f 	.word	0x0001869f

08001f30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <MX_TIM3_Init+0x98>)
 8001f52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001f56:	224f      	movs	r2, #79	; 0x4f
 8001f58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f74:	4813      	ldr	r0, [pc, #76]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001f76:	f004 faa1 	bl	80064bc <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f80:	f000 f93c 	bl	80021fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001f92:	f004 fce2 	bl	800695a <HAL_TIM_ConfigClockSource>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f9c:	f000 f92e 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_TIM3_Init+0x94>)
 8001fae:	f004 fee9 	bl	8006d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001fb8:	f000 f920 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200002f0 	.word	0x200002f0
 8001fc8:	40000400 	.word	0x40000400

08001fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8001fd2:	4a15      	ldr	r2, [pc, #84]	; (8002028 <MX_USART1_UART_Init+0x5c>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8001fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_USART1_UART_Init+0x58>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_USART1_UART_Init+0x58>)
 8002010:	f004 ff5e 	bl	8006ed0 <HAL_UART_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800201a:	f000 f8ef 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200003f0 	.word	0x200003f0
 8002028:	40013800 	.word	0x40013800

0800202c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <MX_USART2_UART_Init+0x5c>)
 8002034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800203c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002052:	220c      	movs	r2, #12
 8002054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_USART2_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_USART2_UART_Init+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_USART2_UART_Init+0x58>)
 8002070:	f004 ff2e 	bl	8006ed0 <HAL_UART_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800207a:	f000 f8bf 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200004c0 	.word	0x200004c0
 8002088:	40004400 	.word	0x40004400

0800208c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <MX_DMA_Init+0x48>)
 8002094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <MX_DMA_Init+0x48>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6493      	str	r3, [r2, #72]	; 0x48
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <MX_DMA_Init+0x48>)
 80020a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2010      	movs	r0, #16
 80020b0:	f001 ff3d 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80020b4:	2010      	movs	r0, #16
 80020b6:	f001 ff56 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2011      	movs	r0, #17
 80020c0:	f001 ff35 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80020c4:	2011      	movs	r0, #17
 80020c6:	f001 ff4e 	bl	8003f66 <HAL_NVIC_EnableIRQ>

}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000

080020d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ee:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <MX_GPIO_Init+0x114>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	4a3e      	ldr	r2, [pc, #248]	; (80021ec <MX_GPIO_Init+0x114>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fa:	4b3c      	ldr	r3, [pc, #240]	; (80021ec <MX_GPIO_Init+0x114>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	4b39      	ldr	r3, [pc, #228]	; (80021ec <MX_GPIO_Init+0x114>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a38      	ldr	r2, [pc, #224]	; (80021ec <MX_GPIO_Init+0x114>)
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002112:	4b36      	ldr	r3, [pc, #216]	; (80021ec <MX_GPIO_Init+0x114>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <MX_GPIO_Init+0x114>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	4a32      	ldr	r2, [pc, #200]	; (80021ec <MX_GPIO_Init+0x114>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <MX_GPIO_Init+0x114>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <MX_GPIO_Init+0x114>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <MX_GPIO_Init+0x114>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <MX_GPIO_Init+0x114>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CSB_Pin|DHT11_DATA_Pin, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f240 2102 	movw	r1, #514	; 0x202
 8002154:	4826      	ldr	r0, [pc, #152]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002156:	f002 fa89 	bl	800466c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	2120      	movs	r1, #32
 800215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002162:	f002 fa83 	bl	800466c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART_InterruptPin_GPIO_Port, USART_InterruptPin_Pin, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2120      	movs	r1, #32
 800216a:	4822      	ldr	r0, [pc, #136]	; (80021f4 <MX_GPIO_Init+0x11c>)
 800216c:	f002 fa7e 	bl	800466c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <MX_GPIO_Init+0x120>)
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002186:	f002 f8b1 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CSB_Pin DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = SPI2_CSB_Pin|DHT11_DATA_Pin;
 800218a:	f240 2302 	movw	r3, #514	; 0x202
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_GPIO_Init+0x118>)
 80021a4:	f002 f8a2 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021a8:	2320      	movs	r3, #32
 80021aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c2:	f002 f893 	bl	80042ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_InterruptPin_Pin */
  GPIO_InitStruct.Pin = USART_InterruptPin_Pin;
 80021c6:	2320      	movs	r3, #32
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USART_InterruptPin_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_GPIO_Init+0x11c>)
 80021de:	f002 f885 	bl	80042ec <HAL_GPIO_Init>

}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	48000800 	.word	0x48000800
 80021f4:	48000400 	.word	0x48000400
 80021f8:	10210000 	.word	0x10210000

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_MspInit+0x44>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_MspInit+0x44>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6613      	str	r3, [r2, #96]	; 0x60
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_MspInit+0x44>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_MspInit+0x44>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_MspInit+0x44>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_MspInit+0x44>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <HAL_ADC_MspInit+0x74>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d123      	bne.n	80022be <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_ADC_MspInit+0x78>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_ADC_MspInit+0x78>)
 800227c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_ADC_MspInit+0x78>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_ADC_MspInit+0x78>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_ADC_MspInit+0x78>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_ADC_MspInit+0x78>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022a6:	2301      	movs	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022aa:	230b      	movs	r3, #11
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <HAL_ADC_MspInit+0x7c>)
 80022ba:	f002 f817 	bl	80042ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022be:	bf00      	nop
 80022c0:	3728      	adds	r7, #40	; 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	50040000 	.word	0x50040000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	48000800 	.word	0x48000800

080022d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a25      	ldr	r2, [pc, #148]	; (8002388 <HAL_SPI_MspInit+0xb4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d144      	bne.n	8002380 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_SPI_MspInit+0xb8>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	4a24      	ldr	r2, [pc, #144]	; (800238c <HAL_SPI_MspInit+0xb8>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002300:	6593      	str	r3, [r2, #88]	; 0x58
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <HAL_SPI_MspInit+0xb8>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_SPI_MspInit+0xb8>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_SPI_MspInit+0xb8>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_SPI_MspInit+0xb8>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_SPI_MspInit+0xb8>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a18      	ldr	r2, [pc, #96]	; (800238c <HAL_SPI_MspInit+0xb8>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_SPI_MspInit+0xb8>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800233e:	230c      	movs	r3, #12
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800234e:	2305      	movs	r3, #5
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <HAL_SPI_MspInit+0xbc>)
 800235a:	f001 ffc7 	bl	80042ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800235e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002370:	2305      	movs	r3, #5
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <HAL_SPI_MspInit+0xc0>)
 800237c:	f001 ffb6 	bl	80042ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40003800 	.word	0x40003800
 800238c:	40021000 	.word	0x40021000
 8002390:	48000800 	.word	0x48000800
 8002394:	48000400 	.word	0x48000400

08002398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d114      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_TIM_Base_MspInit+0x68>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_TIM_Base_MspInit+0x68>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6593      	str	r3, [r2, #88]	; 0x58
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_TIM_Base_MspInit+0x68>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	201c      	movs	r0, #28
 80023c8:	f001 fdb1 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023cc:	201c      	movs	r0, #28
 80023ce:	f001 fdca 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023d2:	e010      	b.n	80023f6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_TIM_Base_MspInit+0x6c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10b      	bne.n	80023f6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_TIM_Base_MspInit+0x68>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_TIM_Base_MspInit+0x68>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_TIM_Base_MspInit+0x68>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40000400 	.word	0x40000400

08002408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5d      	ldr	r2, [pc, #372]	; (800259c <HAL_UART_MspInit+0x194>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12a      	bne.n	8002480 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800242a:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_UART_MspInit+0x198>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	4a5c      	ldr	r2, [pc, #368]	; (80025a0 <HAL_UART_MspInit+0x198>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6613      	str	r3, [r2, #96]	; 0x60
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_UART_MspInit+0x198>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_UART_MspInit+0x198>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	4a56      	ldr	r2, [pc, #344]	; (80025a0 <HAL_UART_MspInit+0x198>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244e:	4b54      	ldr	r3, [pc, #336]	; (80025a0 <HAL_UART_MspInit+0x198>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800245a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246c:	2307      	movs	r3, #7
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247a:	f001 ff37 	bl	80042ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800247e:	e088      	b.n	8002592 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a47      	ldr	r2, [pc, #284]	; (80025a4 <HAL_UART_MspInit+0x19c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	f040 8083 	bne.w	8002592 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_UART_MspInit+0x198>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <HAL_UART_MspInit+0x198>)
 8002492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002496:	6593      	str	r3, [r2, #88]	; 0x58
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_UART_MspInit+0x198>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_UART_MspInit+0x198>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	4a3d      	ldr	r2, [pc, #244]	; (80025a0 <HAL_UART_MspInit+0x198>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_UART_MspInit+0x198>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024bc:	230c      	movs	r3, #12
 80024be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024cc:	2307      	movs	r3, #7
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	4619      	mov	r1, r3
 80024d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024da:	f001 ff07 	bl	80042ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80024de:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 80024e0:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_UART_MspInit+0x1a4>)
 80024e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 80024e6:	2202      	movs	r2, #2
 80024e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 80024f8:	2280      	movs	r2, #128	; 0x80
 80024fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 800250a:	2220      	movs	r2, #32
 800250c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002514:	4824      	ldr	r0, [pc, #144]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 8002516:	f001 fd41 	bl	8003f9c <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8002520:	f7ff fe6c 	bl	80021fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 8002528:	66da      	str	r2, [r3, #108]	; 0x6c
 800252a:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_UART_MspInit+0x1a0>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 8002532:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_UART_MspInit+0x1ac>)
 8002534:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 8002538:	2202      	movs	r2, #2
 800253a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 800253e:	2210      	movs	r2, #16
 8002540:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 800255c:	2220      	movs	r2, #32
 800255e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002566:	4812      	ldr	r0, [pc, #72]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 8002568:	f001 fd18 	bl	8003f9c <HAL_DMA_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002572:	f7ff fe43 	bl	80021fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 800257a:	669a      	str	r2, [r3, #104]	; 0x68
 800257c:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_UART_MspInit+0x1a8>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	2026      	movs	r0, #38	; 0x26
 8002588:	f001 fcd1 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800258c:	2026      	movs	r0, #38	; 0x26
 800258e:	f001 fcea 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3730      	adds	r7, #48	; 0x30
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40013800 	.word	0x40013800
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40004400 	.word	0x40004400
 80025a8:	2000023c 	.word	0x2000023c
 80025ac:	4002006c 	.word	0x4002006c
 80025b0:	200003a4 	.word	0x200003a4
 80025b4:	40020080 	.word	0x40020080

080025b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <HardFault_Handler+0x4>

080025cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <MemManage_Handler+0x4>

080025d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <UsageFault_Handler+0x4>

080025de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260c:	f000 f96e 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <DMA1_Channel6_IRQHandler+0x10>)
 800261a:	f001 fdb8 	bl	800418e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000023c 	.word	0x2000023c

08002628 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <DMA1_Channel7_IRQHandler+0x10>)
 800262e:	f001 fdae 	bl	800418e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200003a4 	.word	0x200003a4

0800263c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <TIM2_IRQHandler+0x10>)
 8002642:	f004 f86b 	bl	800671c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000474 	.word	0x20000474

08002650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <USART2_IRQHandler+0x10>)
 8002656:	f004 fd1d 	bl	8007094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200004c0 	.word	0x200004c0

08002664 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e00a      	b.n	800268c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002676:	f3af 8000 	nop.w
 800267a:	4601      	mov	r1, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	60ba      	str	r2, [r7, #8]
 8002682:	b2ca      	uxtb	r2, r1
 8002684:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	dbf0      	blt.n	8002676 <_read+0x12>
	}

return len;
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_close>:
	}
	return len;
}

int _close(int file)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
	return -1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c6:	605a      	str	r2, [r3, #4]
	return 0;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <_isatty>:

int _isatty(int file)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
	return 1;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
	return 0;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <_sbrk+0x5c>)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <_sbrk+0x60>)
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <_sbrk+0x64>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <_sbrk+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d207      	bcs.n	8002748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002738:	f005 fa4e 	bl	8007bd8 <__errno>
 800273c:	4602      	mov	r2, r0
 800273e:	230c      	movs	r3, #12
 8002740:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e009      	b.n	800275c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <_sbrk+0x64>)
 8002758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20018000 	.word	0x20018000
 8002768:	00000400 	.word	0x00000400
 800276c:	20000208 	.word	0x20000208
 8002770:	20000558 	.word	0x20000558

08002774 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <SystemInit+0x64>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <SystemInit+0x64>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <SystemInit+0x68>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a13      	ldr	r2, [pc, #76]	; (80027dc <SystemInit+0x68>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <SystemInit+0x68>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <SystemInit+0x68>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <SystemInit+0x68>)
 80027a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80027a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80027a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <SystemInit+0x68>)
 80027ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <SystemInit+0x68>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <SystemInit+0x68>)
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <SystemInit+0x68>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SystemInit+0x64>)
 80027c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ca:	609a      	str	r2, [r3, #8]
#endif
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000ed00 	.word	0xe000ed00
 80027dc:	40021000 	.word	0x40021000

080027e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002818 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027e4:	f7ff ffc6 	bl	8002774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027ea:	e003      	b.n	80027f4 <LoopCopyDataInit>

080027ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027f2:	3104      	adds	r1, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027f4:	480a      	ldr	r0, [pc, #40]	; (8002820 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027fc:	d3f6      	bcc.n	80027ec <CopyDataInit>
	ldr	r2, =_sbss
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002800:	e002      	b.n	8002808 <LoopFillZerobss>

08002802 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002802:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002804:	f842 3b04 	str.w	r3, [r2], #4

08002808 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <LoopForever+0x16>)
	cmp	r2, r3
 800280a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800280c:	d3f9      	bcc.n	8002802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800280e:	f005 f9e9 	bl	8007be4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002812:	f7ff f90f 	bl	8001a34 <main>

08002816 <LoopForever>:

LoopForever:
    b LoopForever
 8002816:	e7fe      	b.n	8002816 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002818:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800281c:	0800c3b0 	.word	0x0800c3b0
	ldr	r0, =_sdata
 8002820:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002824:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002828:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 800282c:	20000554 	.word	0x20000554

08002830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC1_2_IRQHandler>
	...

08002834 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_Init+0x3c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <HAL_Init+0x3c>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800284a:	2003      	movs	r0, #3
 800284c:	f001 fb64 	bl	8003f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002850:	2000      	movs	r0, #0
 8002852:	f000 f80f 	bl	8002874 <HAL_InitTick>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	71fb      	strb	r3, [r7, #7]
 8002860:	e001      	b.n	8002866 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002862:	f7ff fcd3 	bl	800220c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002866:	79fb      	ldrb	r3, [r7, #7]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40022000 	.word	0x40022000

08002874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <HAL_InitTick+0x6c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d023      	beq.n	80028d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_InitTick+0x70>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_InitTick+0x6c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002896:	fbb3 f3f1 	udiv	r3, r3, r1
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fb6f 	bl	8003f82 <HAL_SYSTICK_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d809      	bhi.n	80028c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b0:	2200      	movs	r2, #0
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f001 fb39 	bl	8003f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_InitTick+0x74>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e007      	b.n	80028d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	e004      	b.n	80028d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e001      	b.n	80028d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000008 	.word	0x20000008
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_IncTick+0x20>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_IncTick+0x24>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_IncTick+0x24>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000008 	.word	0x20000008
 8002910:	2000054c 	.word	0x2000054c

08002914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_GetTick+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	2000054c 	.word	0x2000054c

0800292c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff ffee 	bl	8002914 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d005      	beq.n	8002952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_Delay+0x40>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002952:	bf00      	nop
 8002954:	f7ff ffde 	bl	8002914 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d8f7      	bhi.n	8002954 <HAL_Delay+0x28>
  {
  }
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000008 	.word	0x20000008

08002970 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3360      	adds	r3, #96	; 0x60
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <LL_ADC_SetOffset+0x44>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	03fff000 	.word	0x03fff000

08002a20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3360      	adds	r3, #96	; 0x60
 8002a2e:	461a      	mov	r2, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b087      	sub	sp, #28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3330      	adds	r3, #48	; 0x30
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	211f      	movs	r1, #31
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	f003 011f 	and.w	r1, r3, #31
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b087      	sub	sp, #28
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3314      	adds	r3, #20
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0e5b      	lsrs	r3, r3, #25
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	0d1b      	lsrs	r3, r3, #20
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	2107      	movs	r1, #7
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	401a      	ands	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0d1b      	lsrs	r3, r3, #20
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0318 	and.w	r3, r3, #24
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b54:	40d9      	lsrs	r1, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	400b      	ands	r3, r1
 8002b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	0007ffff 	.word	0x0007ffff

08002b78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 031f 	and.w	r3, r3, #31
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ba4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6093      	str	r3, [r2, #8]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bcc:	d101      	bne.n	8002bd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c1c:	d101      	bne.n	8002c22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c6c:	f043 0202 	orr.w	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <LL_ADC_IsEnabled+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_ADC_IsEnabled+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d101      	bne.n	8002cbe <LL_ADC_IsDisableOngoing+0x18>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <LL_ADC_IsDisableOngoing+0x1a>
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ce0:	f043 0204 	orr.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d101      	bne.n	8002d0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d101      	bne.n	8002d32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e134      	b.n	8002fc4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fa73 	bl	8002254 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff19 	bl	8002bb8 <LL_ADC_IsDeepPowerDownEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff feff 	bl	8002b94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff34 	bl	8002c08 <LL_ADC_IsInternalRegulatorEnabled>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d113      	bne.n	8002dce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff18 	bl	8002be0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002db0:	4b86      	ldr	r3, [pc, #536]	; (8002fcc <HAL_ADC_Init+0x28c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	4a86      	ldr	r2, [pc, #536]	; (8002fd0 <HAL_ADC_Init+0x290>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dc0:	e002      	b.n	8002dc8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f9      	bne.n	8002dc2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff18 	bl	8002c08 <LL_ADC_IsInternalRegulatorEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff78 	bl	8002cf4 <LL_ADC_REG_IsConversionOngoing>
 8002e04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 80cf 	bne.w	8002fb2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 80cb 	bne.w	8002fb2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e24:	f043 0202 	orr.w	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff25 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d115      	bne.n	8002e68 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e3c:	4865      	ldr	r0, [pc, #404]	; (8002fd4 <HAL_ADC_Init+0x294>)
 8002e3e:	f7ff ff1f 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e42:	4604      	mov	r4, r0
 8002e44:	4864      	ldr	r0, [pc, #400]	; (8002fd8 <HAL_ADC_Init+0x298>)
 8002e46:	f7ff ff1b 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	431c      	orrs	r4, r3
 8002e4e:	4863      	ldr	r0, [pc, #396]	; (8002fdc <HAL_ADC_Init+0x29c>)
 8002e50:	f7ff ff16 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4323      	orrs	r3, r4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4619      	mov	r1, r3
 8002e62:	485f      	ldr	r0, [pc, #380]	; (8002fe0 <HAL_ADC_Init+0x2a0>)
 8002e64:	f7ff fd84 	bl	8002970 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7e5b      	ldrb	r3, [r3, #25]
 8002e6c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e72:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e78:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e7e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e86:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d106      	bne.n	8002ea4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	045b      	lsls	r3, r3, #17
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_ADC_Init+0x2a4>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	69b9      	ldr	r1, [r7, #24]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff0b 	bl	8002cf4 <LL_ADC_REG_IsConversionOngoing>
 8002ede:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff18 	bl	8002d1a <LL_ADC_INJ_IsConversionOngoing>
 8002eea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d13d      	bne.n	8002f6e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d13a      	bne.n	8002f6e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002efc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f04:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f14:	f023 0302 	bic.w	r3, r3, #2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	69b9      	ldr	r1, [r7, #24]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d118      	bne.n	8002f5e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f36:	f023 0304 	bic.w	r3, r3, #4
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	611a      	str	r2, [r3, #16]
 8002f5c:	e007      	b.n	8002f6e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10c      	bne.n	8002f90 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f023 010f 	bic.w	r1, r3, #15
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f8e:	e007      	b.n	8002fa0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 020f 	bic.w	r2, r2, #15
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f023 0303 	bic.w	r3, r3, #3
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
 8002fb0:	e007      	b.n	8002fc2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	f043 0210 	orr.w	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3724      	adds	r7, #36	; 0x24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd90      	pop	{r4, r7, pc}
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	053e2d63 	.word	0x053e2d63
 8002fd4:	50040000 	.word	0x50040000
 8002fd8:	50040100 	.word	0x50040100
 8002fdc:	50040200 	.word	0x50040200
 8002fe0:	50040300 	.word	0x50040300
 8002fe4:	fff0c007 	.word	0xfff0c007

08002fe8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff0:	4857      	ldr	r0, [pc, #348]	; (8003150 <HAL_ADC_Start+0x168>)
 8002ff2:	f7ff fdc1 	bl	8002b78 <LL_ADC_GetMultimode>
 8002ff6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fe79 	bl	8002cf4 <LL_ADC_REG_IsConversionOngoing>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	f040 809c 	bne.w	8003142 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_ADC_Start+0x30>
 8003014:	2302      	movs	r3, #2
 8003016:	e097      	b.n	8003148 <HAL_ADC_Start+0x160>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fc97 	bl	8003954 <ADC_Enable>
 8003026:	4603      	mov	r3, r0
 8003028:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 8083 	bne.w	8003138 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <HAL_ADC_Start+0x16c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d002      	beq.n	8003056 <HAL_ADC_Start+0x6e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	e000      	b.n	8003058 <HAL_ADC_Start+0x70>
 8003056:	4b40      	ldr	r3, [pc, #256]	; (8003158 <HAL_ADC_Start+0x170>)
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4293      	cmp	r3, r2
 800305e:	d002      	beq.n	8003066 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	d106      	bne.n	800308e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	f023 0206 	bic.w	r2, r3, #6
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	659a      	str	r2, [r3, #88]	; 0x58
 800308c:	e002      	b.n	8003094 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	221c      	movs	r2, #28
 800309a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2a      	ldr	r2, [pc, #168]	; (8003154 <HAL_ADC_Start+0x16c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d002      	beq.n	80030b4 <HAL_ADC_Start+0xcc>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	e000      	b.n	80030b6 <HAL_ADC_Start+0xce>
 80030b4:	4b28      	ldr	r3, [pc, #160]	; (8003158 <HAL_ADC_Start+0x170>)
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d008      	beq.n	80030d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d002      	beq.n	80030d0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d114      	bne.n	80030fa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fdea 	bl	8002ccc <LL_ADC_REG_StartConversion>
 80030f8:	e025      	b.n	8003146 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <HAL_ADC_Start+0x16c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d002      	beq.n	8003116 <HAL_ADC_Start+0x12e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	e000      	b.n	8003118 <HAL_ADC_Start+0x130>
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_ADC_Start+0x170>)
 8003118:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00f      	beq.n	8003146 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800312e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
 8003136:	e006      	b.n	8003146 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003140:	e001      	b.n	8003146 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	50040300 	.word	0x50040300
 8003154:	50040100 	.word	0x50040100
 8003158:	50040000 	.word	0x50040000

0800315c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b0b6      	sub	sp, #216	; 0xd8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x22>
 8003196:	2302      	movs	r3, #2
 8003198:	e3c6      	b.n	8003928 <HAL_ADC_ConfigChannel+0x7b0>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fda4 	bl	8002cf4 <LL_ADC_REG_IsConversionOngoing>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 83a7 	bne.w	8003902 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d824      	bhi.n	8003206 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	3b02      	subs	r3, #2
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d81b      	bhi.n	80031fe <HAL_ADC_ConfigChannel+0x86>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_ADC_ConfigChannel+0x54>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	080031dd 	.word	0x080031dd
 80031d0:	080031e5 	.word	0x080031e5
 80031d4:	080031ed 	.word	0x080031ed
 80031d8:	080031f5 	.word	0x080031f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	220c      	movs	r2, #12
 80031e0:	605a      	str	r2, [r3, #4]
          break;
 80031e2:	e011      	b.n	8003208 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2212      	movs	r2, #18
 80031e8:	605a      	str	r2, [r3, #4]
          break;
 80031ea:	e00d      	b.n	8003208 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2218      	movs	r2, #24
 80031f0:	605a      	str	r2, [r3, #4]
          break;
 80031f2:	e009      	b.n	8003208 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031fa:	605a      	str	r2, [r3, #4]
          break;
 80031fc:	e004      	b.n	8003208 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2206      	movs	r2, #6
 8003202:	605a      	str	r2, [r3, #4]
          break;
 8003204:	e000      	b.n	8003208 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003206:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	f7ff fc34 	bl	8002a82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fd68 	bl	8002cf4 <LL_ADC_REG_IsConversionOngoing>
 8003224:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fd74 	bl	8002d1a <LL_ADC_INJ_IsConversionOngoing>
 8003232:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003236:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 81a6 	bne.w	800358c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 81a1 	bne.w	800358c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	461a      	mov	r2, r3
 8003258:	f7ff fc3f 	bl	8002ada <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	08db      	lsrs	r3, r3, #3
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d00a      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6919      	ldr	r1, [r3, #16]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800328e:	f7ff fba3 	bl	80029d8 <LL_ADC_SetOffset>
 8003292:	e17b      	b.n	800358c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fbc0 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x148>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fbb5 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 80032b6:	4603      	mov	r3, r0
 80032b8:	0e9b      	lsrs	r3, r3, #26
 80032ba:	f003 021f 	and.w	r2, r3, #31
 80032be:	e01e      	b.n	80032fe <HAL_ADC_ConfigChannel+0x186>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fbaa 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e004      	b.n	80032fc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80032f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x19e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	e018      	b.n	8003348 <HAL_ADC_ConfigChannel+0x1d0>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800332a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800332e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e004      	b.n	8003348 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800333e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003348:	429a      	cmp	r2, r3
 800334a:	d106      	bne.n	800335a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2200      	movs	r2, #0
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fb79 	bl	8002a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2101      	movs	r1, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fb5d 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x20e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fb52 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 800337c:	4603      	mov	r3, r0
 800337e:	0e9b      	lsrs	r3, r3, #26
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	e01e      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x24c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fb47 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003392:	4603      	mov	r3, r0
 8003394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80033b4:	2320      	movs	r3, #32
 80033b6:	e004      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80033b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x264>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	e018      	b.n	800340e <HAL_ADC_ConfigChannel+0x296>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e004      	b.n	800340e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800340e:	429a      	cmp	r2, r3
 8003410:	d106      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fb16 	bl	8002a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2102      	movs	r1, #2
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fafa 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_ADC_ConfigChannel+0x2d4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2102      	movs	r1, #2
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff faef 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003442:	4603      	mov	r3, r0
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	f003 021f 	and.w	r2, r3, #31
 800344a:	e01e      	b.n	800348a <HAL_ADC_ConfigChannel+0x312>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fae4 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003458:	4603      	mov	r3, r0
 800345a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800346a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800346e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800347a:	2320      	movs	r3, #32
 800347c:	e004      	b.n	8003488 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800347e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x32a>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	e016      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x358>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80034c2:	2320      	movs	r3, #32
 80034c4:	e004      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80034c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d106      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	2102      	movs	r1, #2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fab5 	bl	8002a4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2103      	movs	r1, #3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fa99 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_ADC_ConfigChannel+0x396>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2103      	movs	r1, #3
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fa8e 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 8003504:	4603      	mov	r3, r0
 8003506:	0e9b      	lsrs	r3, r3, #26
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	e017      	b.n	800353e <HAL_ADC_ConfigChannel+0x3c6>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2103      	movs	r1, #3
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fa83 	bl	8002a20 <LL_ADC_GetOffsetChannel>
 800351a:	4603      	mov	r3, r0
 800351c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003528:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800352a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003530:	2320      	movs	r3, #32
 8003532:	e003      	b.n	800353c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x3de>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	e011      	b.n	800357a <HAL_ADC_ConfigChannel+0x402>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003566:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800356e:	2320      	movs	r3, #32
 8003570:	e003      	b.n	800357a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800357a:	429a      	cmp	r2, r3
 800357c:	d106      	bne.n	800358c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	2103      	movs	r1, #3
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fa60 	bl	8002a4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fb75 	bl	8002c80 <LL_ADC_IsEnabled>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 813f 	bne.w	800381c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7ff fac0 	bl	8002b30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a8e      	ldr	r2, [pc, #568]	; (80037f0 <HAL_ADC_ConfigChannel+0x678>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f040 8130 	bne.w	800381c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x46c>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	3301      	adds	r3, #1
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2b09      	cmp	r3, #9
 80035da:	bf94      	ite	ls
 80035dc:	2301      	movls	r3, #1
 80035de:	2300      	movhi	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e019      	b.n	8003618 <HAL_ADC_ConfigChannel+0x4a0>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	e003      	b.n	8003608 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2b09      	cmp	r3, #9
 8003610:	bf94      	ite	ls
 8003612:	2301      	movls	r3, #1
 8003614:	2300      	movhi	r3, #0
 8003616:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003618:	2b00      	cmp	r3, #0
 800361a:	d079      	beq.n	8003710 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x4c0>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	3301      	adds	r3, #1
 8003630:	069b      	lsls	r3, r3, #26
 8003632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003636:	e015      	b.n	8003664 <HAL_ADC_ConfigChannel+0x4ec>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003648:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003650:	2320      	movs	r3, #32
 8003652:	e003      	b.n	800365c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3301      	adds	r3, #1
 800365e:	069b      	lsls	r3, r3, #26
 8003660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x50c>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0e9b      	lsrs	r3, r3, #26
 8003676:	3301      	adds	r3, #1
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2101      	movs	r1, #1
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	e017      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x53c>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003694:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e003      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80036a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	ea42 0103 	orr.w	r1, r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <HAL_ADC_ConfigChannel+0x562>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	3301      	adds	r3, #1
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	051b      	lsls	r3, r3, #20
 80036d8:	e018      	b.n	800370c <HAL_ADC_ConfigChannel+0x594>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80036f2:	2320      	movs	r3, #32
 80036f4:	e003      	b.n	80036fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80036f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	f003 021f 	and.w	r2, r3, #31
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800370c:	430b      	orrs	r3, r1
 800370e:	e080      	b.n	8003812 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d107      	bne.n	800372c <HAL_ADC_ConfigChannel+0x5b4>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	3301      	adds	r3, #1
 8003724:	069b      	lsls	r3, r3, #26
 8003726:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800372a:	e015      	b.n	8003758 <HAL_ADC_ConfigChannel+0x5e0>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e003      	b.n	8003750 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	069b      	lsls	r3, r3, #26
 8003754:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x600>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0e9b      	lsrs	r3, r3, #26
 800376a:	3301      	adds	r3, #1
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	e017      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x630>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	61fb      	str	r3, [r7, #28]
  return result;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e003      	b.n	800379c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	ea42 0103 	orr.w	r1, r2, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x65c>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0e9b      	lsrs	r3, r3, #26
 80037be:	3301      	adds	r3, #1
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	3b1e      	subs	r3, #30
 80037cc:	051b      	lsls	r3, r3, #20
 80037ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d2:	e01d      	b.n	8003810 <HAL_ADC_ConfigChannel+0x698>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	613b      	str	r3, [r7, #16]
  return result;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e005      	b.n	80037fc <HAL_ADC_ConfigChannel+0x684>
 80037f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 021f 	and.w	r2, r3, #31
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	3b1e      	subs	r3, #30
 800380a:	051b      	lsls	r3, r3, #20
 800380c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003810:	430b      	orrs	r3, r1
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	4619      	mov	r1, r3
 8003818:	f7ff f95f 	bl	8002ada <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b43      	ldr	r3, [pc, #268]	; (8003930 <HAL_ADC_ConfigChannel+0x7b8>)
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d079      	beq.n	800391c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003828:	4842      	ldr	r0, [pc, #264]	; (8003934 <HAL_ADC_ConfigChannel+0x7bc>)
 800382a:	f7ff f8c7 	bl	80029bc <LL_ADC_GetCommonPathInternalCh>
 800382e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a40      	ldr	r2, [pc, #256]	; (8003938 <HAL_ADC_ConfigChannel+0x7c0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d12b      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800383c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d125      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3b      	ldr	r2, [pc, #236]	; (800393c <HAL_ADC_ConfigChannel+0x7c4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <HAL_ADC_ConfigChannel+0x6e4>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3a      	ldr	r2, [pc, #232]	; (8003940 <HAL_ADC_ConfigChannel+0x7c8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d15c      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800385c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003864:	4619      	mov	r1, r3
 8003866:	4833      	ldr	r0, [pc, #204]	; (8003934 <HAL_ADC_ConfigChannel+0x7bc>)
 8003868:	f7ff f895 	bl	8002996 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800386c:	4b35      	ldr	r3, [pc, #212]	; (8003944 <HAL_ADC_ConfigChannel+0x7cc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	4a35      	ldr	r2, [pc, #212]	; (8003948 <HAL_ADC_ConfigChannel+0x7d0>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	099a      	lsrs	r2, r3, #6
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003884:	e002      	b.n	800388c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3b01      	subs	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f9      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003892:	e040      	b.n	8003916 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2c      	ldr	r2, [pc, #176]	; (800394c <HAL_ADC_ConfigChannel+0x7d4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d118      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x758>
 800389e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d112      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a23      	ldr	r2, [pc, #140]	; (800393c <HAL_ADC_ConfigChannel+0x7c4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_ADC_ConfigChannel+0x746>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a21      	ldr	r2, [pc, #132]	; (8003940 <HAL_ADC_ConfigChannel+0x7c8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d12d      	bne.n	800391a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c6:	4619      	mov	r1, r3
 80038c8:	481a      	ldr	r0, [pc, #104]	; (8003934 <HAL_ADC_ConfigChannel+0x7bc>)
 80038ca:	f7ff f864 	bl	8002996 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ce:	e024      	b.n	800391a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <HAL_ADC_ConfigChannel+0x7d8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d120      	bne.n	800391c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11a      	bne.n	800391c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a14      	ldr	r2, [pc, #80]	; (800393c <HAL_ADC_ConfigChannel+0x7c4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d115      	bne.n	800391c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f8:	4619      	mov	r1, r3
 80038fa:	480e      	ldr	r0, [pc, #56]	; (8003934 <HAL_ADC_ConfigChannel+0x7bc>)
 80038fc:	f7ff f84b 	bl	8002996 <LL_ADC_SetCommonPathInternalCh>
 8003900:	e00c      	b.n	800391c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f043 0220 	orr.w	r2, r3, #32
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003914:	e002      	b.n	800391c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003916:	bf00      	nop
 8003918:	e000      	b.n	800391c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800391a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003924:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003928:	4618      	mov	r0, r3
 800392a:	37d8      	adds	r7, #216	; 0xd8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	80080000 	.word	0x80080000
 8003934:	50040300 	.word	0x50040300
 8003938:	c7520000 	.word	0xc7520000
 800393c:	50040000 	.word	0x50040000
 8003940:	50040200 	.word	0x50040200
 8003944:	20000000 	.word	0x20000000
 8003948:	053e2d63 	.word	0x053e2d63
 800394c:	cb840000 	.word	0xcb840000
 8003950:	80000001 	.word	0x80000001

08003954 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff f98d 	bl	8002c80 <LL_ADC_IsEnabled>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d146      	bne.n	80039fa <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <ADC_Enable+0xb0>)
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00d      	beq.n	8003996 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f043 0210 	orr.w	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e032      	b.n	80039fc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff f948 	bl	8002c30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039a0:	f7fe ffb8 	bl	8002914 <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039a6:	e021      	b.n	80039ec <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff f967 	bl	8002c80 <LL_ADC_IsEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff f937 	bl	8002c30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039c2:	f7fe ffa7 	bl	8002914 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d90d      	bls.n	80039ec <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e007      	b.n	80039fc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d1d6      	bne.n	80039a8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	8000003f 	.word	0x8000003f

08003a08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff f946 	bl	8002ca6 <LL_ADC_IsDisableOngoing>
 8003a1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff f92d 	bl	8002c80 <LL_ADC_IsEnabled>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d040      	beq.n	8003aae <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d13d      	bne.n	8003aae <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 030d 	and.w	r3, r3, #13
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10c      	bne.n	8003a5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f907 	bl	8002c58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2203      	movs	r2, #3
 8003a50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a52:	f7fe ff5f 	bl	8002914 <HAL_GetTick>
 8003a56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a58:	e022      	b.n	8003aa0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f043 0210 	orr.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e01c      	b.n	8003ab0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a76:	f7fe ff4d 	bl	8002914 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d90d      	bls.n	8003aa0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f043 0210 	orr.w	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f043 0201 	orr.w	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e007      	b.n	8003ab0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e3      	bne.n	8003a76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <LL_ADC_IsEnabled>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <LL_ADC_IsEnabled+0x18>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <LL_ADC_IsEnabled+0x1a>
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_ADC_StartCalibration>:
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b24:	d101      	bne.n	8003b2a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d101      	bne.n	8003b50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_ADCEx_Calibration_Start+0x1c>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e04d      	b.n	8003c16 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ff40 	bl	8003a08 <ADC_Disable>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d136      	bne.n	8003c00 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b9a:	f023 0302 	bic.w	r3, r3, #2
 8003b9e:	f043 0202 	orr.w	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6839      	ldr	r1, [r7, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff96 	bl	8003ade <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bb2:	e014      	b.n	8003bde <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003bc0:	d30d      	bcc.n	8003bde <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f023 0312 	bic.w	r3, r3, #18
 8003bca:	f043 0210 	orr.w	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e01b      	b.n	8003c16 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff94 	bl	8003b10 <LL_ADC_IsCalibrationOnGoing>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e2      	bne.n	8003bb4 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8003bfe:	e005      	b.n	8003c0c <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	f043 0210 	orr.w	r2, r3, #16
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b09f      	sub	sp, #124	; 0x7c
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e08f      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a47      	ldr	r2, [pc, #284]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d102      	bne.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003c50:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	e001      	b.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e072      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff ff5c 	bl	8003b38 <LL_ADC_REG_IsConversionOngoing>
 8003c80:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ff56 	bl	8003b38 <LL_ADC_REG_IsConversionOngoing>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d154      	bne.n	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d151      	bne.n	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c9a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02c      	beq.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cb6:	035b      	lsls	r3, r3, #13
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cc0:	4829      	ldr	r0, [pc, #164]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003cc2:	f7ff fef9 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	4828      	ldr	r0, [pc, #160]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003cca:	f7ff fef5 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	431c      	orrs	r4, r3
 8003cd2:	4828      	ldr	r0, [pc, #160]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cd4:	f7ff fef0 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4323      	orrs	r3, r4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d137      	bne.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ce8:	f023 030f 	bic.w	r3, r3, #15
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	6811      	ldr	r1, [r2, #0]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cfc:	e028      	b.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d08:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d0a:	4817      	ldr	r0, [pc, #92]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003d0c:	f7ff fed4 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003d10:	4604      	mov	r4, r0
 8003d12:	4816      	ldr	r0, [pc, #88]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003d14:	f7ff fed0 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	431c      	orrs	r4, r3
 8003d1c:	4815      	ldr	r0, [pc, #84]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d1e:	f7ff fecb 	bl	8003ab8 <LL_ADC_IsEnabled>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4323      	orrs	r3, r4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d112      	bne.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d32:	f023 030f 	bic.w	r3, r3, #15
 8003d36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d38:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d3a:	e009      	b.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003d4e:	e000      	b.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	377c      	adds	r7, #124	; 0x7c
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}
 8003d66:	bf00      	nop
 8003d68:	50040000 	.word	0x50040000
 8003d6c:	50040100 	.word	0x50040100
 8003d70:	50040300 	.word	0x50040300
 8003d74:	50040200 	.word	0x50040200

08003d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d94:	4013      	ands	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003daa:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	60d3      	str	r3, [r2, #12]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	f003 0307 	and.w	r3, r3, #7
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	db0b      	blt.n	8003e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	4907      	ldr	r1, [pc, #28]	; (8003e14 <__NVIC_EnableIRQ+0x38>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	e000e100 	.word	0xe000e100

08003e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	6039      	str	r1, [r7, #0]
 8003e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	db0a      	blt.n	8003e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	490c      	ldr	r1, [pc, #48]	; (8003e64 <__NVIC_SetPriority+0x4c>)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	0112      	lsls	r2, r2, #4
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e40:	e00a      	b.n	8003e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4908      	ldr	r1, [pc, #32]	; (8003e68 <__NVIC_SetPriority+0x50>)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	3b04      	subs	r3, #4
 8003e50:	0112      	lsls	r2, r2, #4
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	440b      	add	r3, r1
 8003e56:	761a      	strb	r2, [r3, #24]
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000e100 	.word	0xe000e100
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f1c3 0307 	rsb	r3, r3, #7
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	bf28      	it	cs
 8003e8a:	2304      	movcs	r3, #4
 8003e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3304      	adds	r3, #4
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d902      	bls.n	8003e9c <NVIC_EncodePriority+0x30>
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3b03      	subs	r3, #3
 8003e9a:	e000      	b.n	8003e9e <NVIC_EncodePriority+0x32>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	401a      	ands	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebe:	43d9      	mvns	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec4:	4313      	orrs	r3, r2
         );
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3724      	adds	r7, #36	; 0x24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee4:	d301      	bcc.n	8003eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e00f      	b.n	8003f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <SysTick_Config+0x40>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef2:	210f      	movs	r1, #15
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	f7ff ff8e 	bl	8003e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <SysTick_Config+0x40>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <SysTick_Config+0x40>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	e000e010 	.word	0xe000e010

08003f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff29 	bl	8003d78 <__NVIC_SetPriorityGrouping>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f40:	f7ff ff3e 	bl	8003dc0 <__NVIC_GetPriorityGrouping>
 8003f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff ff8e 	bl	8003e6c <NVIC_EncodePriority>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff5d 	bl	8003e18 <__NVIC_SetPriority>
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff31 	bl	8003ddc <__NVIC_EnableIRQ>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ffa2 	bl	8003ed4 <SysTick_Config>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e098      	b.n	80040e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <HAL_DMA_Init+0x150>)
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d80f      	bhi.n	8003fda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b4b      	ldr	r3, [pc, #300]	; (80040f0 <HAL_DMA_Init+0x154>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a4b      	ldr	r2, [pc, #300]	; (80040f4 <HAL_DMA_Init+0x158>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	009a      	lsls	r2, r3, #2
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a48      	ldr	r2, [pc, #288]	; (80040f8 <HAL_DMA_Init+0x15c>)
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8003fd8:	e00e      	b.n	8003ff8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b46      	ldr	r3, [pc, #280]	; (80040fc <HAL_DMA_Init+0x160>)
 8003fe2:	4413      	add	r3, r2
 8003fe4:	4a43      	ldr	r2, [pc, #268]	; (80040f4 <HAL_DMA_Init+0x158>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	009a      	lsls	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a42      	ldr	r2, [pc, #264]	; (8004100 <HAL_DMA_Init+0x164>)
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800401c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004052:	d039      	beq.n	80040c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <HAL_DMA_Init+0x15c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d11a      	bne.n	8004094 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800405e:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_DMA_Init+0x168>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	f003 031c 	and.w	r3, r3, #28
 800406a:	210f      	movs	r1, #15
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	4924      	ldr	r1, [pc, #144]	; (8004104 <HAL_DMA_Init+0x168>)
 8004074:	4013      	ands	r3, r2
 8004076:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_DMA_Init+0x168>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f003 031c 	and.w	r3, r3, #28
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	491d      	ldr	r1, [pc, #116]	; (8004104 <HAL_DMA_Init+0x168>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
 8004092:	e019      	b.n	80040c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004094:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <HAL_DMA_Init+0x16c>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	f003 031c 	and.w	r3, r3, #28
 80040a0:	210f      	movs	r1, #15
 80040a2:	fa01 f303 	lsl.w	r3, r1, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	4917      	ldr	r1, [pc, #92]	; (8004108 <HAL_DMA_Init+0x16c>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040ae:	4b16      	ldr	r3, [pc, #88]	; (8004108 <HAL_DMA_Init+0x16c>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f003 031c 	and.w	r3, r3, #28
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	4911      	ldr	r1, [pc, #68]	; (8004108 <HAL_DMA_Init+0x16c>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40020407 	.word	0x40020407
 80040f0:	bffdfff8 	.word	0xbffdfff8
 80040f4:	cccccccd 	.word	0xcccccccd
 80040f8:	40020000 	.word	0x40020000
 80040fc:	bffdfbf8 	.word	0xbffdfbf8
 8004100:	40020400 	.word	0x40020400
 8004104:	400200a8 	.word	0x400200a8
 8004108:	400204a8 	.word	0x400204a8

0800410c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d005      	beq.n	8004130 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2204      	movs	r2, #4
 8004128:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	e029      	b.n	8004184 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 020e 	bic.w	r2, r2, #14
 800413e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	f003 021c 	and.w	r2, r3, #28
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	2101      	movs	r1, #1
 800415e:	fa01 f202 	lsl.w	r2, r1, r2
 8004162:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
    }
  }
  return status;
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	f003 031c 	and.w	r3, r3, #28
 80041ae:	2204      	movs	r2, #4
 80041b0:	409a      	lsls	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d026      	beq.n	8004208 <HAL_DMA_IRQHandler+0x7a>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d021      	beq.n	8004208 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0204 	bic.w	r2, r2, #4
 80041e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	f003 021c 	and.w	r2, r3, #28
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2104      	movs	r1, #4
 80041f0:	fa01 f202 	lsl.w	r2, r1, r2
 80041f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d071      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004206:	e06c      	b.n	80042e2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	f003 031c 	and.w	r3, r3, #28
 8004210:	2202      	movs	r2, #2
 8004212:	409a      	lsls	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d02e      	beq.n	800427a <HAL_DMA_IRQHandler+0xec>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d029      	beq.n	800427a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 020a 	bic.w	r2, r2, #10
 8004242:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004250:	f003 021c 	and.w	r2, r3, #28
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2102      	movs	r1, #2
 800425a:	fa01 f202 	lsl.w	r2, r1, r2
 800425e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d038      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004278:	e033      	b.n	80042e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f003 031c 	and.w	r3, r3, #28
 8004282:	2208      	movs	r2, #8
 8004284:	409a      	lsls	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02a      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x156>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d025      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 020e 	bic.w	r2, r2, #14
 80042a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	f003 021c 	and.w	r2, r3, #28
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	2101      	movs	r1, #1
 80042b6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
}
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042fa:	e17f      	b.n	80045fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	2101      	movs	r1, #1
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8171 	beq.w	80045f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d00b      	beq.n	8004334 <HAL_GPIO_Init+0x48>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d007      	beq.n	8004334 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004328:	2b11      	cmp	r3, #17
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b12      	cmp	r3, #18
 8004332:	d130      	bne.n	8004396 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800436a:	2201      	movs	r2, #1
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 0201 	and.w	r2, r3, #1
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d118      	bne.n	80043d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043a8:	2201      	movs	r2, #1
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	08db      	lsrs	r3, r3, #3
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	2203      	movs	r2, #3
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x128>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b12      	cmp	r3, #18
 8004412:	d123      	bne.n	800445c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	220f      	movs	r2, #15
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	08da      	lsrs	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3208      	adds	r2, #8
 8004456:	6939      	ldr	r1, [r7, #16]
 8004458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80ac 	beq.w	80045f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	4b5e      	ldr	r3, [pc, #376]	; (8004618 <HAL_GPIO_Init+0x32c>)
 80044a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a2:	4a5d      	ldr	r2, [pc, #372]	; (8004618 <HAL_GPIO_Init+0x32c>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6613      	str	r3, [r2, #96]	; 0x60
 80044aa:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <HAL_GPIO_Init+0x32c>)
 80044ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044b6:	4a59      	ldr	r2, [pc, #356]	; (800461c <HAL_GPIO_Init+0x330>)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	3302      	adds	r3, #2
 80044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044e0:	d025      	beq.n	800452e <HAL_GPIO_Init+0x242>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a4e      	ldr	r2, [pc, #312]	; (8004620 <HAL_GPIO_Init+0x334>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d01f      	beq.n	800452a <HAL_GPIO_Init+0x23e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4d      	ldr	r2, [pc, #308]	; (8004624 <HAL_GPIO_Init+0x338>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d019      	beq.n	8004526 <HAL_GPIO_Init+0x23a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a4c      	ldr	r2, [pc, #304]	; (8004628 <HAL_GPIO_Init+0x33c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_GPIO_Init+0x236>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a4b      	ldr	r2, [pc, #300]	; (800462c <HAL_GPIO_Init+0x340>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00d      	beq.n	800451e <HAL_GPIO_Init+0x232>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4a      	ldr	r2, [pc, #296]	; (8004630 <HAL_GPIO_Init+0x344>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <HAL_GPIO_Init+0x22e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a49      	ldr	r2, [pc, #292]	; (8004634 <HAL_GPIO_Init+0x348>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d101      	bne.n	8004516 <HAL_GPIO_Init+0x22a>
 8004512:	2306      	movs	r3, #6
 8004514:	e00c      	b.n	8004530 <HAL_GPIO_Init+0x244>
 8004516:	2307      	movs	r3, #7
 8004518:	e00a      	b.n	8004530 <HAL_GPIO_Init+0x244>
 800451a:	2305      	movs	r3, #5
 800451c:	e008      	b.n	8004530 <HAL_GPIO_Init+0x244>
 800451e:	2304      	movs	r3, #4
 8004520:	e006      	b.n	8004530 <HAL_GPIO_Init+0x244>
 8004522:	2303      	movs	r3, #3
 8004524:	e004      	b.n	8004530 <HAL_GPIO_Init+0x244>
 8004526:	2302      	movs	r3, #2
 8004528:	e002      	b.n	8004530 <HAL_GPIO_Init+0x244>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_GPIO_Init+0x244>
 800452e:	2300      	movs	r3, #0
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	f002 0203 	and.w	r2, r2, #3
 8004536:	0092      	lsls	r2, r2, #2
 8004538:	4093      	lsls	r3, r2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004540:	4936      	ldr	r1, [pc, #216]	; (800461c <HAL_GPIO_Init+0x330>)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	3302      	adds	r3, #2
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800454e:	4b3a      	ldr	r3, [pc, #232]	; (8004638 <HAL_GPIO_Init+0x34c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004572:	4a31      	ldr	r2, [pc, #196]	; (8004638 <HAL_GPIO_Init+0x34c>)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004578:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <HAL_GPIO_Init+0x34c>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	43db      	mvns	r3, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800459c:	4a26      	ldr	r2, [pc, #152]	; (8004638 <HAL_GPIO_Init+0x34c>)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045a2:	4b25      	ldr	r3, [pc, #148]	; (8004638 <HAL_GPIO_Init+0x34c>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045c6:	4a1c      	ldr	r2, [pc, #112]	; (8004638 <HAL_GPIO_Init+0x34c>)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045cc:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <HAL_GPIO_Init+0x34c>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045f0:	4a11      	ldr	r2, [pc, #68]	; (8004638 <HAL_GPIO_Init+0x34c>)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3301      	adds	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	f47f ae78 	bne.w	80042fc <HAL_GPIO_Init+0x10>
  }
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40021000 	.word	0x40021000
 800461c:	40010000 	.word	0x40010000
 8004620:	48000400 	.word	0x48000400
 8004624:	48000800 	.word	0x48000800
 8004628:	48000c00 	.word	0x48000c00
 800462c:	48001000 	.word	0x48001000
 8004630:	48001400 	.word	0x48001400
 8004634:	48001800 	.word	0x48001800
 8004638:	40010400 	.word	0x40010400

0800463c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	e001      	b.n	800465e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
 8004678:	4613      	mov	r3, r2
 800467a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800467c:	787b      	ldrb	r3, [r7, #1]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004688:	e002      	b.n	8004690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40007000 	.word	0x40007000

080046b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c6:	d130      	bne.n	800472a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c8:	4b23      	ldr	r3, [pc, #140]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d4:	d038      	beq.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046d6:	4b20      	ldr	r3, [pc, #128]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046de:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046e6:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2232      	movs	r2, #50	; 0x32
 80046ec:	fb02 f303 	mul.w	r3, r2, r3
 80046f0:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	0c9b      	lsrs	r3, r3, #18
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046fc:	e002      	b.n	8004704 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3b01      	subs	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004710:	d102      	bne.n	8004718 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f2      	bne.n	80046fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d110      	bne.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e00f      	b.n	800474a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004736:	d007      	beq.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004740:	4a05      	ldr	r2, [pc, #20]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004746:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40007000 	.word	0x40007000
 800475c:	20000000 	.word	0x20000000
 8004760:	431bde83 	.word	0x431bde83

08004764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e3d4      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004776:	4ba1      	ldr	r3, [pc, #644]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004780:	4b9e      	ldr	r3, [pc, #632]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80e4 	beq.w	8004960 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_RCC_OscConfig+0x4a>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	f040 808b 	bne.w	80048bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	f040 8087 	bne.w	80048bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047ae:	4b93      	ldr	r3, [pc, #588]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_RCC_OscConfig+0x62>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e3ac      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	4b8c      	ldr	r3, [pc, #560]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_RCC_OscConfig+0x7c>
 80047d6:	4b89      	ldr	r3, [pc, #548]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047de:	e005      	b.n	80047ec <HAL_RCC_OscConfig+0x88>
 80047e0:	4b86      	ldr	r3, [pc, #536]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80047e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d223      	bcs.n	8004838 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fd3f 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e38d      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004804:	4b7d      	ldr	r3, [pc, #500]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7c      	ldr	r2, [pc, #496]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 800480a:	f043 0308 	orr.w	r3, r3, #8
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	4b7a      	ldr	r3, [pc, #488]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	4977      	ldr	r1, [pc, #476]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004822:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	4972      	ldr	r1, [pc, #456]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]
 8004836:	e025      	b.n	8004884 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004838:	4b70      	ldr	r3, [pc, #448]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a6f      	ldr	r2, [pc, #444]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 800483e:	f043 0308 	orr.w	r3, r3, #8
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	496a      	ldr	r1, [pc, #424]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004856:	4b69      	ldr	r3, [pc, #420]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	4965      	ldr	r1, [pc, #404]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004866:	4313      	orrs	r3, r2
 8004868:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fcff 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e34d      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004884:	f000 fc36 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 8004888:	4601      	mov	r1, r0
 800488a:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	4a5a      	ldr	r2, [pc, #360]	; (8004a00 <HAL_RCC_OscConfig+0x29c>)
 8004896:	5cd3      	ldrb	r3, [r2, r3]
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	fa21 f303 	lsr.w	r3, r1, r3
 80048a0:	4a58      	ldr	r2, [pc, #352]	; (8004a04 <HAL_RCC_OscConfig+0x2a0>)
 80048a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048a4:	4b58      	ldr	r3, [pc, #352]	; (8004a08 <HAL_RCC_OscConfig+0x2a4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd ffe3 	bl	8002874 <HAL_InitTick>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d052      	beq.n	800495e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	e331      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d032      	beq.n	800492a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048c4:	4b4d      	ldr	r3, [pc, #308]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a4c      	ldr	r2, [pc, #304]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048d0:	f7fe f820 	bl	8002914 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d8:	f7fe f81c 	bl	8002914 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e31a      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ea:	4b44      	ldr	r3, [pc, #272]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048f6:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a40      	ldr	r2, [pc, #256]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80048fc:	f043 0308 	orr.w	r3, r3, #8
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	493b      	ldr	r1, [pc, #236]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	4936      	ldr	r1, [pc, #216]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
 8004928:	e01a      	b.n	8004960 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800492a:	4b34      	ldr	r3, [pc, #208]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a33      	ldr	r2, [pc, #204]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004936:	f7fd ffed 	bl	8002914 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800493e:	f7fd ffe9 	bl	8002914 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e2e7      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004950:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <HAL_RCC_OscConfig+0x1da>
 800495c:	e000      	b.n	8004960 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800495e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d074      	beq.n	8004a56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b08      	cmp	r3, #8
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x21a>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d10e      	bne.n	8004996 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d10b      	bne.n	8004996 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497e:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d064      	beq.n	8004a54 <HAL_RCC_OscConfig+0x2f0>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d160      	bne.n	8004a54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e2c4      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x24a>
 80049a0:	4b16      	ldr	r3, [pc, #88]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a15      	ldr	r2, [pc, #84]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e01d      	b.n	80049ea <HAL_RCC_OscConfig+0x286>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCC_OscConfig+0x26e>
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0f      	ldr	r2, [pc, #60]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e00b      	b.n	80049ea <HAL_RCC_OscConfig+0x286>
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a06      	ldr	r2, [pc, #24]	; (80049fc <HAL_RCC_OscConfig+0x298>)
 80049e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fd ff8f 	bl	8002914 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f8:	e011      	b.n	8004a1e <HAL_RCC_OscConfig+0x2ba>
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000
 8004a00:	0800c038 	.word	0x0800c038
 8004a04:	20000000 	.word	0x20000000
 8004a08:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fd ff82 	bl	8002914 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e280      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1e:	4baf      	ldr	r3, [pc, #700]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x2a8>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fd ff72 	bl	8002914 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fd ff6e 	bl	8002914 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e26c      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a46:	4ba5      	ldr	r3, [pc, #660]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x2d0>
 8004a52:	e000      	b.n	8004a56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d060      	beq.n	8004b24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_OscConfig+0x310>
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d119      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d116      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a74:	4b99      	ldr	r3, [pc, #612]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x328>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e249      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8c:	4b93      	ldr	r3, [pc, #588]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	061b      	lsls	r3, r3, #24
 8004a9a:	4990      	ldr	r1, [pc, #576]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa0:	e040      	b.n	8004b24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d023      	beq.n	8004af2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aaa:	4b8c      	ldr	r3, [pc, #560]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a8b      	ldr	r2, [pc, #556]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fd ff2d 	bl	8002914 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004abe:	f7fd ff29 	bl	8002914 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e227      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad0:	4b82      	ldr	r3, [pc, #520]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004adc:	4b7f      	ldr	r3, [pc, #508]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	497c      	ldr	r1, [pc, #496]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]
 8004af0:	e018      	b.n	8004b24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af2:	4b7a      	ldr	r3, [pc, #488]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a79      	ldr	r2, [pc, #484]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fd ff09 	bl	8002914 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fd ff05 	bl	8002914 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e203      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b18:	4b70      	ldr	r3, [pc, #448]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d03c      	beq.n	8004baa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01c      	beq.n	8004b72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b38:	4b68      	ldr	r3, [pc, #416]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3e:	4a67      	ldr	r2, [pc, #412]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fd fee4 	bl	8002914 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b50:	f7fd fee0 	bl	8002914 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1de      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b62:	4b5e      	ldr	r3, [pc, #376]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ef      	beq.n	8004b50 <HAL_RCC_OscConfig+0x3ec>
 8004b70:	e01b      	b.n	8004baa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b72:	4b5a      	ldr	r3, [pc, #360]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b78:	4a58      	ldr	r2, [pc, #352]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b82:	f7fd fec7 	bl	8002914 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8a:	f7fd fec3 	bl	8002914 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e1c1      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b9c:	4b4f      	ldr	r3, [pc, #316]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1ef      	bne.n	8004b8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80a6 	beq.w	8004d04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bbc:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10d      	bne.n	8004be4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc8:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	4a43      	ldr	r2, [pc, #268]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd4:	4b41      	ldr	r3, [pc, #260]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be0:	2301      	movs	r3, #1
 8004be2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be4:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <HAL_RCC_OscConfig+0x57c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d118      	bne.n	8004c22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <HAL_RCC_OscConfig+0x57c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a3a      	ldr	r2, [pc, #232]	; (8004ce0 <HAL_RCC_OscConfig+0x57c>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfc:	f7fd fe8a 	bl	8002914 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c04:	f7fd fe86 	bl	8002914 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e184      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c16:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <HAL_RCC_OscConfig+0x57c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d108      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4d8>
 8004c2a:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c3a:	e024      	b.n	8004c86 <HAL_RCC_OscConfig+0x522>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b05      	cmp	r3, #5
 8004c42:	d110      	bne.n	8004c66 <HAL_RCC_OscConfig+0x502>
 8004c44:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	4a24      	ldr	r2, [pc, #144]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c4c:	f043 0304 	orr.w	r3, r3, #4
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c54:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c64:	e00f      	b.n	8004c86 <HAL_RCC_OscConfig+0x522>
 8004c66:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	4a1b      	ldr	r2, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c76:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004c7e:	f023 0304 	bic.w	r3, r3, #4
 8004c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fe41 	bl	8002914 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fd fe3d 	bl	8002914 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e139      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCC_OscConfig+0x578>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0ed      	beq.n	8004c96 <HAL_RCC_OscConfig+0x532>
 8004cba:	e01a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fd fe2a 	bl	8002914 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc2:	e00f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc4:	f7fd fe26 	bl	8002914 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d906      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e122      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce4:	4b90      	ldr	r3, [pc, #576]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e8      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf2:	7ffb      	ldrb	r3, [r7, #31]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf8:	4b8b      	ldr	r3, [pc, #556]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfc:	4a8a      	ldr	r2, [pc, #552]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8108 	beq.w	8004f1e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	f040 80d0 	bne.w	8004eb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d18:	4b83      	ldr	r3, [pc, #524]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f003 0203 	and.w	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d130      	bne.n	8004d8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	3b01      	subs	r3, #1
 8004d38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d127      	bne.n	8004d8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d11f      	bne.n	8004d8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d58:	2a07      	cmp	r2, #7
 8004d5a:	bf14      	ite	ne
 8004d5c:	2201      	movne	r2, #1
 8004d5e:	2200      	moveq	r2, #0
 8004d60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d113      	bne.n	8004d8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	3b01      	subs	r3, #1
 8004d74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d06e      	beq.n	8004e6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d069      	beq.n	8004e68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d94:	4b64      	ldr	r3, [pc, #400]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004da0:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0b7      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004db0:	4b5d      	ldr	r3, [pc, #372]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5c      	ldr	r2, [pc, #368]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dbc:	f7fd fdaa 	bl	8002914 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc4:	f7fd fda6 	bl	8002914 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0a4      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd6:	4b54      	ldr	r3, [pc, #336]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de2:	4b51      	ldr	r3, [pc, #324]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	4b51      	ldr	r3, [pc, #324]	; (8004f2c <HAL_RCC_OscConfig+0x7c8>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004df2:	3a01      	subs	r2, #1
 8004df4:	0112      	lsls	r2, r2, #4
 8004df6:	4311      	orrs	r1, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfc:	0212      	lsls	r2, r2, #8
 8004dfe:	4311      	orrs	r1, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e04:	0852      	lsrs	r2, r2, #1
 8004e06:	3a01      	subs	r2, #1
 8004e08:	0552      	lsls	r2, r2, #21
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e10:	0852      	lsrs	r2, r2, #1
 8004e12:	3a01      	subs	r2, #1
 8004e14:	0652      	lsls	r2, r2, #25
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e1c:	0912      	lsrs	r2, r2, #4
 8004e1e:	0452      	lsls	r2, r2, #17
 8004e20:	430a      	orrs	r2, r1
 8004e22:	4941      	ldr	r1, [pc, #260]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e28:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a3e      	ldr	r2, [pc, #248]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e34:	4b3c      	ldr	r3, [pc, #240]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a3b      	ldr	r2, [pc, #236]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e40:	f7fd fd68 	bl	8002914 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e48:	f7fd fd64 	bl	8002914 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e062      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5a:	4b33      	ldr	r3, [pc, #204]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e66:	e05a      	b.n	8004f1e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e059      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d152      	bne.n	8004f1e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e78:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e84:	4b28      	ldr	r3, [pc, #160]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e90:	f7fd fd40 	bl	8002914 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fd fd3c 	bl	8002914 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e03a      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x734>
 8004eb6:	e032      	b.n	8004f1e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d02d      	beq.n	8004f1a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebe:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004eca:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d105      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ed6:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004edc:	f023 0303 	bic.w	r3, r3, #3
 8004ee0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ee2:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004ee8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef2:	f7fd fd0f 	bl	8002914 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efa:	f7fd fd0b 	bl	8002914 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e009      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <HAL_RCC_OscConfig+0x7c4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f0      	bne.n	8004efa <HAL_RCC_OscConfig+0x796>
 8004f18:	e001      	b.n	8004f1e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	f99d808c 	.word	0xf99d808c

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0c8      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b66      	ldr	r3, [pc, #408]	; (80050e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d910      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b63      	ldr	r3, [pc, #396]	; (80050e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 0207 	bic.w	r2, r3, #7
 8004f5a:	4961      	ldr	r1, [pc, #388]	; (80050e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b5f      	ldr	r3, [pc, #380]	; (80050e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0b0      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d04c      	beq.n	800501a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d107      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f88:	4b56      	ldr	r3, [pc, #344]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d121      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e09e      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d115      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e092      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d107      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fb8:	4b4a      	ldr	r3, [pc, #296]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e086      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc8:	4b46      	ldr	r3, [pc, #280]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e07e      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fd8:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f023 0203 	bic.w	r2, r3, #3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	493f      	ldr	r1, [pc, #252]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fea:	f7fd fc93 	bl	8002914 <HAL_GetTick>
 8004fee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff2:	f7fd fc8f 	bl	8002914 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e066      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005008:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 020c 	and.w	r2, r3, #12
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	429a      	cmp	r2, r3
 8005018:	d1eb      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005026:	4b2f      	ldr	r3, [pc, #188]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	492c      	ldr	r1, [pc, #176]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005038:	4b29      	ldr	r3, [pc, #164]	; (80050e0 <HAL_RCC_ClockConfig+0x1b0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d210      	bcs.n	8005068 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 0207 	bic.w	r2, r3, #7
 800504e:	4924      	ldr	r1, [pc, #144]	; (80050e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e036      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005074:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4918      	ldr	r1, [pc, #96]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4910      	ldr	r1, [pc, #64]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050a6:	f000 f825 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80050aa:	4601      	mov	r1, r0
 80050ac:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <HAL_RCC_ClockConfig+0x1b4>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	4a0c      	ldr	r2, [pc, #48]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 80050b8:	5cd3      	ldrb	r3, [r2, r3]
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	fa21 f303 	lsr.w	r3, r1, r3
 80050c2:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fbd2 	bl	8002874 <HAL_InitTick>
 80050d0:	4603      	mov	r3, r0
 80050d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80050d4:	7afb      	ldrb	r3, [r7, #11]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40022000 	.word	0x40022000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	0800c038 	.word	0x0800c038
 80050ec:	20000000 	.word	0x20000000
 80050f0:	20000004 	.word	0x20000004

080050f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	; 0x24
 80050f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005102:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800510c:	4b3a      	ldr	r3, [pc, #232]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x34>
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d121      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d11e      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005128:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005134:	4b30      	ldr	r3, [pc, #192]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e005      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005150:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005158:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10d      	bne.n	800517c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005164:	e00a      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d102      	bne.n	8005172 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800516c:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_RCC_GetSysClockFreq+0x10c>)
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	e004      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d101      	bne.n	800517c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005178:	4b22      	ldr	r3, [pc, #136]	; (8005204 <HAL_RCC_GetSysClockFreq+0x110>)
 800517a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b0c      	cmp	r3, #12
 8005180:	d133      	bne.n	80051ea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d002      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0xa4>
 8005192:	2b03      	cmp	r3, #3
 8005194:	d003      	beq.n	800519e <HAL_RCC_GetSysClockFreq+0xaa>
 8005196:	e005      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005198:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_RCC_GetSysClockFreq+0x10c>)
 800519a:	617b      	str	r3, [r7, #20]
      break;
 800519c:	e005      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800519e:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_RCC_GetSysClockFreq+0x110>)
 80051a0:	617b      	str	r3, [r7, #20]
      break;
 80051a2:	e002      	b.n	80051aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	617b      	str	r3, [r7, #20]
      break;
 80051a8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051aa:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	3301      	adds	r3, #1
 80051b6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051b8:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	fb02 f203 	mul.w	r2, r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	0e5b      	lsrs	r3, r3, #25
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	3301      	adds	r3, #1
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051ea:	69bb      	ldr	r3, [r7, #24]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3724      	adds	r7, #36	; 0x24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40021000 	.word	0x40021000
 80051fc:	0800c050 	.word	0x0800c050
 8005200:	00f42400 	.word	0x00f42400
 8005204:	007a1200 	.word	0x007a1200

08005208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <HAL_RCC_GetHCLKFreq+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000000 	.word	0x20000000

08005220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005224:	f7ff fff0 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005228:	4601      	mov	r1, r0
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	0a1b      	lsrs	r3, r3, #8
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4a04      	ldr	r2, [pc, #16]	; (8005248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005236:	5cd3      	ldrb	r3, [r2, r3]
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40021000 	.word	0x40021000
 8005248:	0800c048 	.word	0x0800c048

0800524c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005250:	f7ff ffda 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005254:	4601      	mov	r1, r0
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	0adb      	lsrs	r3, r3, #11
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	4a04      	ldr	r2, [pc, #16]	; (8005274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005262:	5cd3      	ldrb	r3, [r2, r3]
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	fa21 f303 	lsr.w	r3, r1, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40021000 	.word	0x40021000
 8005274:	0800c048 	.word	0x0800c048

08005278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005284:	4b2a      	ldr	r3, [pc, #168]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005290:	f7ff fa04 	bl	800469c <HAL_PWREx_GetVoltageRange>
 8005294:	6178      	str	r0, [r7, #20]
 8005296:	e014      	b.n	80052c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	4a24      	ldr	r2, [pc, #144]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6593      	str	r3, [r2, #88]	; 0x58
 80052a4:	4b22      	ldr	r3, [pc, #136]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052b0:	f7ff f9f4 	bl	800469c <HAL_PWREx_GetVoltageRange>
 80052b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052b6:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c8:	d10b      	bne.n	80052e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d919      	bls.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2ba0      	cmp	r3, #160	; 0xa0
 80052d4:	d902      	bls.n	80052dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052d6:	2302      	movs	r3, #2
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e013      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052dc:	2301      	movs	r3, #1
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	e010      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d902      	bls.n	80052ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052e8:	2303      	movs	r3, #3
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	e00a      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d102      	bne.n	80052fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052f4:	2302      	movs	r3, #2
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	e004      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b70      	cmp	r3, #112	; 0x70
 80052fe:	d101      	bne.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005300:	2301      	movs	r3, #1
 8005302:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f023 0207 	bic.w	r2, r3, #7
 800530c:	4909      	ldr	r1, [pc, #36]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	429a      	cmp	r2, r3
 8005320:	d001      	beq.n	8005326 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40021000 	.word	0x40021000
 8005334:	40022000 	.word	0x40022000

08005338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005340:	2300      	movs	r3, #0
 8005342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005344:	2300      	movs	r3, #0
 8005346:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005350:	2b00      	cmp	r3, #0
 8005352:	d03f      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800535c:	d01c      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800535e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005362:	d802      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005368:	e01f      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 800536a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800536e:	d003      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005370:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005374:	d01c      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005376:	e018      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005378:	4b85      	ldr	r3, [pc, #532]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a84      	ldr	r2, [pc, #528]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800537e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005382:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005384:	e015      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fab9 	bl	8005904 <RCCEx_PLLSAI1_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005396:	e00c      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3320      	adds	r3, #32
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fba0 	bl	8005ae4 <RCCEx_PLLSAI2_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053a8:	e003      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	74fb      	strb	r3, [r7, #19]
      break;
 80053ae:	e000      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80053b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053b8:	4b75      	ldr	r3, [pc, #468]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c6:	4972      	ldr	r1, [pc, #456]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053ce:	e001      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d03f      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053e8:	d01c      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80053ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053ee:	d802      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80053f4:	e01f      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80053f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053fa:	d003      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80053fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005400:	d01c      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005402:	e018      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005404:	4b62      	ldr	r3, [pc, #392]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4a61      	ldr	r2, [pc, #388]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800540a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005410:	e015      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fa73 	bl	8005904 <RCCEx_PLLSAI1_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005422:	e00c      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3320      	adds	r3, #32
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fb5a 	bl	8005ae4 <RCCEx_PLLSAI2_Config>
 8005430:	4603      	mov	r3, r0
 8005432:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005434:	e003      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	74fb      	strb	r3, [r7, #19]
      break;
 800543a:	e000      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800543c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005444:	4b52      	ldr	r3, [pc, #328]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005452:	494f      	ldr	r1, [pc, #316]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800545a:	e001      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80a0 	beq.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005472:	4b47      	ldr	r3, [pc, #284]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005488:	4b41      	ldr	r3, [pc, #260]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	4a40      	ldr	r2, [pc, #256]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6593      	str	r3, [r2, #88]	; 0x58
 8005494:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a0:	2301      	movs	r3, #1
 80054a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054a4:	4b3b      	ldr	r3, [pc, #236]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a3a      	ldr	r2, [pc, #232]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b0:	f7fd fa30 	bl	8002914 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054b6:	e009      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b8:	f7fd fa2c 	bl	8002914 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d902      	bls.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	74fb      	strb	r3, [r7, #19]
        break;
 80054ca:	e005      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054cc:	4b31      	ldr	r3, [pc, #196]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0ef      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d15c      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054de:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01f      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d019      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054fc:	4b24      	ldr	r3, [pc, #144]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005508:	4b21      	ldr	r3, [pc, #132]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	4a20      	ldr	r2, [pc, #128]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d016      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7fd f9eb 	bl	8002914 <HAL_GetTick>
 800553e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005540:	e00b      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005542:	f7fd f9e7 	bl	8002914 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005550:	4293      	cmp	r3, r2
 8005552:	d902      	bls.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	74fb      	strb	r3, [r7, #19]
            break;
 8005558:	e006      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555a:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0ec      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10c      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557e:	4904      	ldr	r1, [pc, #16]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005586:	e009      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	74bb      	strb	r3, [r7, #18]
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
 8005594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800559c:	7c7b      	ldrb	r3, [r7, #17]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d105      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a2:	4b9e      	ldr	r3, [pc, #632]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	4a9d      	ldr	r2, [pc, #628]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ba:	4b98      	ldr	r3, [pc, #608]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f023 0203 	bic.w	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	4994      	ldr	r1, [pc, #592]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055dc:	4b8f      	ldr	r3, [pc, #572]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f023 020c 	bic.w	r2, r3, #12
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	498c      	ldr	r1, [pc, #560]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055fe:	4b87      	ldr	r3, [pc, #540]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005604:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	4983      	ldr	r1, [pc, #524]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005620:	4b7e      	ldr	r3, [pc, #504]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	497b      	ldr	r1, [pc, #492]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005642:	4b76      	ldr	r3, [pc, #472]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005650:	4972      	ldr	r1, [pc, #456]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005664:	4b6d      	ldr	r3, [pc, #436]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	496a      	ldr	r1, [pc, #424]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005686:	4b65      	ldr	r3, [pc, #404]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	4961      	ldr	r1, [pc, #388]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056a8:	4b5c      	ldr	r3, [pc, #368]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b6:	4959      	ldr	r1, [pc, #356]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ca:	4b54      	ldr	r3, [pc, #336]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d8:	4950      	ldr	r1, [pc, #320]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056ec:	4b4b      	ldr	r3, [pc, #300]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	4948      	ldr	r1, [pc, #288]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800570e:	4b43      	ldr	r3, [pc, #268]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	493f      	ldr	r1, [pc, #252]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d028      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005730:	4b3a      	ldr	r3, [pc, #232]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800573e:	4937      	ldr	r1, [pc, #220]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574e:	d106      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005750:	4b32      	ldr	r3, [pc, #200]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a31      	ldr	r2, [pc, #196]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575a:	60d3      	str	r3, [r2, #12]
 800575c:	e011      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005766:	d10c      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f8c8 	bl	8005904 <RCCEx_PLLSAI1_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d028      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800578e:	4b23      	ldr	r3, [pc, #140]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005794:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	491f      	ldr	r1, [pc, #124]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ac:	d106      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ae:	4b1b      	ldr	r3, [pc, #108]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	4a1a      	ldr	r2, [pc, #104]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057b8:	60d3      	str	r3, [r2, #12]
 80057ba:	e011      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3304      	adds	r3, #4
 80057ca:	2101      	movs	r1, #1
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 f899 	bl	8005904 <RCCEx_PLLSAI1_Config>
 80057d2:	4603      	mov	r3, r0
 80057d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d02b      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fa:	4908      	ldr	r1, [pc, #32]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800580a:	d109      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4a02      	ldr	r2, [pc, #8]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005816:	60d3      	str	r3, [r2, #12]
 8005818:	e014      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2101      	movs	r1, #1
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f867 	bl	8005904 <RCCEx_PLLSAI1_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005840:	7cfb      	ldrb	r3, [r7, #19]
 8005842:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02f      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800585e:	4928      	ldr	r1, [pc, #160]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800586a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800586e:	d10d      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	2102      	movs	r1, #2
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f844 	bl	8005904 <RCCEx_PLLSAI1_Config>
 800587c:	4603      	mov	r3, r0
 800587e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d014      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005886:	7cfb      	ldrb	r3, [r7, #19]
 8005888:	74bb      	strb	r3, [r7, #18]
 800588a:	e011      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005894:	d10c      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3320      	adds	r3, #32
 800589a:	2102      	movs	r1, #2
 800589c:	4618      	mov	r0, r3
 800589e:	f000 f921 	bl	8005ae4 <RCCEx_PLLSAI2_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80058ac:	7cfb      	ldrb	r3, [r7, #19]
 80058ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058bc:	4b10      	ldr	r3, [pc, #64]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ca:	490d      	ldr	r1, [pc, #52]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058de:	4b08      	ldr	r3, [pc, #32]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ee:	4904      	ldr	r1, [pc, #16]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000

08005904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005912:	4b73      	ldr	r3, [pc, #460]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d018      	beq.n	8005950 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800591e:	4b70      	ldr	r3, [pc, #448]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0203 	and.w	r2, r3, #3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d10d      	bne.n	800594a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
       ||
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005936:	4b6a      	ldr	r3, [pc, #424]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	091b      	lsrs	r3, r3, #4
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
       ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d044      	beq.n	80059d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
 800594e:	e041      	b.n	80059d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d00c      	beq.n	8005972 <RCCEx_PLLSAI1_Config+0x6e>
 8005958:	2b03      	cmp	r3, #3
 800595a:	d013      	beq.n	8005984 <RCCEx_PLLSAI1_Config+0x80>
 800595c:	2b01      	cmp	r3, #1
 800595e:	d120      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005960:	4b5f      	ldr	r3, [pc, #380]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11d      	bne.n	80059a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005970:	e01a      	b.n	80059a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005972:	4b5b      	ldr	r3, [pc, #364]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597a:	2b00      	cmp	r3, #0
 800597c:	d116      	bne.n	80059ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005982:	e013      	b.n	80059ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005984:	4b56      	ldr	r3, [pc, #344]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10f      	bne.n	80059b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005990:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059a0:	e006      	b.n	80059b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
      break;
 80059a6:	e004      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059a8:	bf00      	nop
 80059aa:	e002      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059b8:	4b49      	ldr	r3, [pc, #292]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	430b      	orrs	r3, r1
 80059ce:	4944      	ldr	r1, [pc, #272]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d17d      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059da:	4b41      	ldr	r3, [pc, #260]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a40      	ldr	r2, [pc, #256]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e6:	f7fc ff95 	bl	8002914 <HAL_GetTick>
 80059ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059ec:	e009      	b.n	8005a02 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ee:	f7fc ff91 	bl	8002914 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d902      	bls.n	8005a02 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	73fb      	strb	r3, [r7, #15]
        break;
 8005a00:	e005      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a02:	4b37      	ldr	r3, [pc, #220]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ef      	bne.n	80059ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d160      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d111      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6892      	ldr	r2, [r2, #8]
 8005a2a:	0211      	lsls	r1, r2, #8
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68d2      	ldr	r2, [r2, #12]
 8005a30:	0912      	lsrs	r2, r2, #4
 8005a32:	0452      	lsls	r2, r2, #17
 8005a34:	430a      	orrs	r2, r1
 8005a36:	492a      	ldr	r1, [pc, #168]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	610b      	str	r3, [r1, #16]
 8005a3c:	e027      	b.n	8005a8e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d112      	bne.n	8005a6a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a44:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6892      	ldr	r2, [r2, #8]
 8005a54:	0211      	lsls	r1, r2, #8
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6912      	ldr	r2, [r2, #16]
 8005a5a:	0852      	lsrs	r2, r2, #1
 8005a5c:	3a01      	subs	r2, #1
 8005a5e:	0552      	lsls	r2, r2, #21
 8005a60:	430a      	orrs	r2, r1
 8005a62:	491f      	ldr	r1, [pc, #124]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	610b      	str	r3, [r1, #16]
 8005a68:	e011      	b.n	8005a8e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6892      	ldr	r2, [r2, #8]
 8005a7a:	0211      	lsls	r1, r2, #8
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6952      	ldr	r2, [r2, #20]
 8005a80:	0852      	lsrs	r2, r2, #1
 8005a82:	3a01      	subs	r2, #1
 8005a84:	0652      	lsls	r2, r2, #25
 8005a86:	430a      	orrs	r2, r1
 8005a88:	4915      	ldr	r1, [pc, #84]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9a:	f7fc ff3b 	bl	8002914 <HAL_GetTick>
 8005a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aa0:	e009      	b.n	8005ab6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aa2:	f7fc ff37 	bl	8002914 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d902      	bls.n	8005ab6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ab4:	e005      	b.n	8005ac2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ef      	beq.n	8005aa2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	4903      	ldr	r1, [pc, #12]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40021000 	.word	0x40021000

08005ae4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005af2:	4b68      	ldr	r3, [pc, #416]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d018      	beq.n	8005b30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005afe:	4b65      	ldr	r3, [pc, #404]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0203 	and.w	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d10d      	bne.n	8005b2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
       ||
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b16:	4b5f      	ldr	r3, [pc, #380]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
       ||
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d044      	beq.n	8005bb4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
 8005b2e:	e041      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d00c      	beq.n	8005b52 <RCCEx_PLLSAI2_Config+0x6e>
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d013      	beq.n	8005b64 <RCCEx_PLLSAI2_Config+0x80>
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d120      	bne.n	8005b82 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b40:	4b54      	ldr	r3, [pc, #336]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d11d      	bne.n	8005b88 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b50:	e01a      	b.n	8005b88 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b52:	4b50      	ldr	r3, [pc, #320]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d116      	bne.n	8005b8c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b62:	e013      	b.n	8005b8c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b64:	4b4b      	ldr	r3, [pc, #300]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10f      	bne.n	8005b90 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b70:	4b48      	ldr	r3, [pc, #288]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b80:	e006      	b.n	8005b90 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	73fb      	strb	r3, [r7, #15]
      break;
 8005b86:	e004      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b88:	bf00      	nop
 8005b8a:	e002      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b8c:	bf00      	nop
 8005b8e:	e000      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b90:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10d      	bne.n	8005bb4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b98:	4b3e      	ldr	r3, [pc, #248]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6819      	ldr	r1, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	430b      	orrs	r3, r1
 8005bae:	4939      	ldr	r1, [pc, #228]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d167      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bba:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a35      	ldr	r2, [pc, #212]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc6:	f7fc fea5 	bl	8002914 <HAL_GetTick>
 8005bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bcc:	e009      	b.n	8005be2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bce:	f7fc fea1 	bl	8002914 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d902      	bls.n	8005be2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	73fb      	strb	r3, [r7, #15]
        break;
 8005be0:	e005      	b.n	8005bee <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005be2:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ef      	bne.n	8005bce <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d14a      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d111      	bne.n	8005c1e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bfa:	4b26      	ldr	r3, [pc, #152]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6892      	ldr	r2, [r2, #8]
 8005c0a:	0211      	lsls	r1, r2, #8
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	68d2      	ldr	r2, [r2, #12]
 8005c10:	0912      	lsrs	r2, r2, #4
 8005c12:	0452      	lsls	r2, r2, #17
 8005c14:	430a      	orrs	r2, r1
 8005c16:	491f      	ldr	r1, [pc, #124]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	614b      	str	r3, [r1, #20]
 8005c1c:	e011      	b.n	8005c42 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6892      	ldr	r2, [r2, #8]
 8005c2e:	0211      	lsls	r1, r2, #8
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6912      	ldr	r2, [r2, #16]
 8005c34:	0852      	lsrs	r2, r2, #1
 8005c36:	3a01      	subs	r2, #1
 8005c38:	0652      	lsls	r2, r2, #25
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	4915      	ldr	r1, [pc, #84]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4e:	f7fc fe61 	bl	8002914 <HAL_GetTick>
 8005c52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c54:	e009      	b.n	8005c6a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c56:	f7fc fe5d 	bl	8002914 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d902      	bls.n	8005c6a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	73fb      	strb	r3, [r7, #15]
          break;
 8005c68:	e005      	b.n	8005c76 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0ef      	beq.n	8005c56 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	4903      	ldr	r1, [pc, #12]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40021000 	.word	0x40021000

08005c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e095      	b.n	8005dd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d108      	bne.n	8005cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cba:	d009      	beq.n	8005cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	61da      	str	r2, [r3, #28]
 8005cc2:	e005      	b.n	8005cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fc faf2 	bl	80022d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d10:	d902      	bls.n	8005d18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e002      	b.n	8005d1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d26:	d007      	beq.n	8005d38 <HAL_SPI_Init+0xa0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d30:	d002      	beq.n	8005d38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	ea42 0103 	orr.w	r1, r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	0c1b      	lsrs	r3, r3, #16
 8005d94:	f003 0204 	and.w	r2, r3, #4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005db4:	ea42 0103 	orr.w	r1, r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b08a      	sub	sp, #40	; 0x28
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
 8005dea:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dec:	2301      	movs	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x26>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e1fb      	b.n	80061fc <HAL_SPI_TransmitReceive+0x41e>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e0c:	f7fc fd82 	bl	8002914 <HAL_GetTick>
 8005e10:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e18:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e20:	887b      	ldrh	r3, [r7, #2]
 8005e22:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e24:	887b      	ldrh	r3, [r7, #2]
 8005e26:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e28:	7efb      	ldrb	r3, [r7, #27]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d00e      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x6e>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e34:	d106      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <HAL_SPI_TransmitReceive+0x66>
 8005e3e:	7efb      	ldrb	r3, [r7, #27]
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d003      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e4a:	e1cd      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x80>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x80>
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e64:	e1c0      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d003      	beq.n	8005e7a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2205      	movs	r2, #5
 8005e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	887a      	ldrh	r2, [r7, #2]
 8005e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	887a      	ldrh	r2, [r7, #2]
 8005e92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	887a      	ldrh	r2, [r7, #2]
 8005ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	887a      	ldrh	r2, [r7, #2]
 8005ea6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ebc:	d802      	bhi.n	8005ec4 <HAL_SPI_TransmitReceive+0xe6>
 8005ebe:	8a3b      	ldrh	r3, [r7, #16]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d908      	bls.n	8005ed6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ed2:	605a      	str	r2, [r3, #4]
 8005ed4:	e007      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d007      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f0c:	d97c      	bls.n	8006008 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_SPI_TransmitReceive+0x13e>
 8005f16:	8a7b      	ldrh	r3, [r7, #18]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d169      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	1c9a      	adds	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f40:	e056      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d11b      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x1aa>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x1aa>
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d113      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d11c      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x1f2>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	b292      	uxth	r2, r2
 8005fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	1c9a      	adds	r2, r3, #2
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fd0:	f7fc fca0 	bl	8002914 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d807      	bhi.n	8005ff0 <HAL_SPI_TransmitReceive+0x212>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	d003      	beq.n	8005ff0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005fee:	e0fb      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1a3      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x164>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d19d      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x164>
 8006006:	e0df      	b.n	80061c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x23a>
 8006010:	8a7b      	ldrh	r3, [r7, #18]
 8006012:	2b01      	cmp	r3, #1
 8006014:	f040 80cb 	bne.w	80061ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	d912      	bls.n	8006048 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	881a      	ldrh	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b02      	subs	r3, #2
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006046:	e0b2      	b.n	80061ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800606e:	e09e      	b.n	80061ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d134      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x30a>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d02f      	beq.n	80060e8 <HAL_SPI_TransmitReceive+0x30a>
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	2b01      	cmp	r3, #1
 800608c:	d12c      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d912      	bls.n	80060be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	881a      	ldrh	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	1c9a      	adds	r2, r3, #2
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b02      	subs	r3, #2
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060bc:	e012      	b.n	80060e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	7812      	ldrb	r2, [r2, #0]
 80060ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d148      	bne.n	8006188 <HAL_SPI_TransmitReceive+0x3aa>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d042      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b01      	cmp	r3, #1
 800610c:	d923      	bls.n	8006156 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	b292      	uxth	r2, r2
 800611a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b02      	subs	r3, #2
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d81f      	bhi.n	8006184 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006152:	605a      	str	r2, [r3, #4]
 8006154:	e016      	b.n	8006184 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f103 020c 	add.w	r2, r3, #12
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006184:	2301      	movs	r3, #1
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006188:	f7fc fbc4 	bl	8002914 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006194:	429a      	cmp	r2, r3
 8006196:	d803      	bhi.n	80061a0 <HAL_SPI_TransmitReceive+0x3c2>
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d102      	bne.n	80061a6 <HAL_SPI_TransmitReceive+0x3c8>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061ac:	e01c      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f47f af5b 	bne.w	8006070 <HAL_SPI_TransmitReceive+0x292>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f47f af54 	bne.w	8006070 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f92f 	bl	8006430 <SPI_EndRxTxTransaction>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d006      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	661a      	str	r2, [r3, #96]	; 0x60
 80061e4:	e000      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80061e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3728      	adds	r7, #40	; 0x28
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006214:	f7fc fb7e 	bl	8002914 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	4413      	add	r3, r2
 8006222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006224:	f7fc fb76 	bl	8002914 <HAL_GetTick>
 8006228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800622a:	4b39      	ldr	r3, [pc, #228]	; (8006310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	015b      	lsls	r3, r3, #5
 8006230:	0d1b      	lsrs	r3, r3, #20
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	fb02 f303 	mul.w	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800623a:	e054      	b.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d050      	beq.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006244:	f7fc fb66 	bl	8002914 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	429a      	cmp	r2, r3
 8006252:	d902      	bls.n	800625a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d13d      	bne.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006272:	d111      	bne.n	8006298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627c:	d004      	beq.n	8006288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006286:	d107      	bne.n	8006298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a0:	d10f      	bne.n	80062c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e017      	b.n	8006306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4013      	ands	r3, r2
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	bf0c      	ite	eq
 80062f6:	2301      	moveq	r3, #1
 80062f8:	2300      	movne	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	429a      	cmp	r2, r3
 8006302:	d19b      	bne.n	800623c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000000 	.word	0x20000000

08006314 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006322:	f7fc faf7 	bl	8002914 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	4413      	add	r3, r2
 8006330:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006332:	f7fc faef 	bl	8002914 <HAL_GetTick>
 8006336:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006338:	4b3c      	ldr	r3, [pc, #240]	; (800642c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	00da      	lsls	r2, r3, #3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	0d1b      	lsrs	r3, r3, #20
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	fb02 f303 	mul.w	r3, r2, r3
 800634e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006350:	e05f      	b.n	8006412 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006358:	d106      	bne.n	8006368 <SPI_WaitFifoStateUntilTimeout+0x54>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636e:	d050      	beq.n	8006412 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006370:	f7fc fad0 	bl	8002914 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	429a      	cmp	r2, r3
 800637e:	d902      	bls.n	8006386 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d13d      	bne.n	8006402 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006394:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800639e:	d111      	bne.n	80063c4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a8:	d004      	beq.n	80063b4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b2:	d107      	bne.n	80063c4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063cc:	d10f      	bne.n	80063ee <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e010      	b.n	8006424 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	3b01      	subs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4013      	ands	r3, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	d197      	bne.n	8006352 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000000 	.word	0x20000000

08006430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af02      	add	r7, sp, #8
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f7ff ff63 	bl	8006314 <SPI_WaitFifoStateUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e027      	b.n	80064b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2200      	movs	r2, #0
 800646c:	2180      	movs	r1, #128	; 0x80
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff fec8 	bl	8006204 <SPI_WaitFlagStateUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647e:	f043 0220 	orr.w	r2, r3, #32
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e014      	b.n	80064b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff ff3c 	bl	8006314 <SPI_WaitFifoStateUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a6:	f043 0220 	orr.w	r2, r3, #32
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e000      	b.n	80064b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e049      	b.n	8006562 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fb ff58 	bl	8002398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 fb0e 	bl	8006b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d001      	beq.n	8006584 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e047      	b.n	8006614 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a23      	ldr	r2, [pc, #140]	; (8006620 <HAL_TIM_Base_Start+0xb4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01d      	beq.n	80065d2 <HAL_TIM_Base_Start+0x66>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659e:	d018      	beq.n	80065d2 <HAL_TIM_Base_Start+0x66>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <HAL_TIM_Base_Start+0xb8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <HAL_TIM_Base_Start+0x66>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_TIM_Base_Start+0xbc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_TIM_Base_Start+0x66>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <HAL_TIM_Base_Start+0xc0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_TIM_Base_Start+0x66>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_TIM_Base_Start+0xc4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_TIM_Base_Start+0x66>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <HAL_TIM_Base_Start+0xc8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d115      	bne.n	80065fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	4b17      	ldr	r3, [pc, #92]	; (8006638 <HAL_TIM_Base_Start+0xcc>)
 80065da:	4013      	ands	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b06      	cmp	r3, #6
 80065e2:	d015      	beq.n	8006610 <HAL_TIM_Base_Start+0xa4>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ea:	d011      	beq.n	8006610 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fc:	e008      	b.n	8006610 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e000      	b.n	8006612 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40013400 	.word	0x40013400
 8006634:	40014000 	.word	0x40014000
 8006638:	00010007 	.word	0x00010007

0800663c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	d001      	beq.n	8006654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e04f      	b.n	80066f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a23      	ldr	r2, [pc, #140]	; (8006700 <HAL_TIM_Base_Start_IT+0xc4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01d      	beq.n	80066b2 <HAL_TIM_Base_Start_IT+0x76>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667e:	d018      	beq.n	80066b2 <HAL_TIM_Base_Start_IT+0x76>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1f      	ldr	r2, [pc, #124]	; (8006704 <HAL_TIM_Base_Start_IT+0xc8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_TIM_Base_Start_IT+0x76>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <HAL_TIM_Base_Start_IT+0xcc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_TIM_Base_Start_IT+0x76>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1c      	ldr	r2, [pc, #112]	; (800670c <HAL_TIM_Base_Start_IT+0xd0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_TIM_Base_Start_IT+0x76>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a1b      	ldr	r2, [pc, #108]	; (8006710 <HAL_TIM_Base_Start_IT+0xd4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_TIM_Base_Start_IT+0x76>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <HAL_TIM_Base_Start_IT+0xd8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d115      	bne.n	80066de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	4b17      	ldr	r3, [pc, #92]	; (8006718 <HAL_TIM_Base_Start_IT+0xdc>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b06      	cmp	r3, #6
 80066c2:	d015      	beq.n	80066f0 <HAL_TIM_Base_Start_IT+0xb4>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ca:	d011      	beq.n	80066f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066dc:	e008      	b.n	80066f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e000      	b.n	80066f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40000c00 	.word	0x40000c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40014000 	.word	0x40014000
 8006718:	00010007 	.word	0x00010007

0800671c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b02      	cmp	r3, #2
 8006730:	d122      	bne.n	8006778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b02      	cmp	r3, #2
 800673e:	d11b      	bne.n	8006778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0202 	mvn.w	r2, #2
 8006748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9be 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9b0 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f9c1 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b04      	cmp	r3, #4
 8006784:	d122      	bne.n	80067cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b04      	cmp	r3, #4
 8006792:	d11b      	bne.n	80067cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0204 	mvn.w	r2, #4
 800679c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2202      	movs	r2, #2
 80067a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f994 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 80067b8:	e005      	b.n	80067c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f986 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f997 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d122      	bne.n	8006820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d11b      	bne.n	8006820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0208 	mvn.w	r2, #8
 80067f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2204      	movs	r2, #4
 80067f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f96a 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 800680c:	e005      	b.n	800681a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f95c 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f96d 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b10      	cmp	r3, #16
 800682c:	d122      	bne.n	8006874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0310 	and.w	r3, r3, #16
 8006838:	2b10      	cmp	r3, #16
 800683a:	d11b      	bne.n	8006874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0210 	mvn.w	r2, #16
 8006844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2208      	movs	r2, #8
 800684a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f940 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 8006860:	e005      	b.n	800686e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f932 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f943 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10e      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b01      	cmp	r3, #1
 800688e:	d107      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0201 	mvn.w	r2, #1
 8006898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fb f8b6 	bl	8001a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068aa:	2b80      	cmp	r3, #128	; 0x80
 80068ac:	d10e      	bne.n	80068cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b80      	cmp	r3, #128	; 0x80
 80068ba:	d107      	bne.n	80068cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 faee 	bl	8006ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068da:	d10e      	bne.n	80068fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e6:	2b80      	cmp	r3, #128	; 0x80
 80068e8:	d107      	bne.n	80068fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fae1 	bl	8006ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d10e      	bne.n	8006926 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006912:	2b40      	cmp	r3, #64	; 0x40
 8006914:	d107      	bne.n	8006926 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800691e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8f1 	bl	8006b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b20      	cmp	r3, #32
 8006932:	d10e      	bne.n	8006952 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b20      	cmp	r3, #32
 8006940:	d107      	bne.n	8006952 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f06f 0220 	mvn.w	r2, #32
 800694a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 faa1 	bl	8006e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_TIM_ConfigClockSource+0x18>
 800696e:	2302      	movs	r3, #2
 8006970:	e0a8      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006990:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006994:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	d067      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x124>
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d80b      	bhi.n	80069ca <HAL_TIM_ConfigClockSource+0x70>
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d073      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x144>
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d802      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x66>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d06f      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80069be:	e078      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d06c      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x144>
 80069c4:	2b30      	cmp	r3, #48	; 0x30
 80069c6:	d06a      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x144>
      break;
 80069c8:	e073      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80069ca:	2b70      	cmp	r3, #112	; 0x70
 80069cc:	d00d      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x90>
 80069ce:	2b70      	cmp	r3, #112	; 0x70
 80069d0:	d804      	bhi.n	80069dc <HAL_TIM_ConfigClockSource+0x82>
 80069d2:	2b50      	cmp	r3, #80	; 0x50
 80069d4:	d033      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0xe4>
 80069d6:	2b60      	cmp	r3, #96	; 0x60
 80069d8:	d041      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80069da:	e06a      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80069dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e0:	d066      	beq.n	8006ab0 <HAL_TIM_ConfigClockSource+0x156>
 80069e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e6:	d017      	beq.n	8006a18 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80069e8:	e063      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6899      	ldr	r1, [r3, #8]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f000 f9a3 	bl	8006d44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	609a      	str	r2, [r3, #8]
      break;
 8006a16:	e04c      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6899      	ldr	r1, [r3, #8]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f000 f98c 	bl	8006d44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a3a:	609a      	str	r2, [r3, #8]
      break;
 8006a3c:	e039      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6859      	ldr	r1, [r3, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f000 f900 	bl	8006c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2150      	movs	r1, #80	; 0x50
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f959 	bl	8006d0e <TIM_ITRx_SetConfig>
      break;
 8006a5c:	e029      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	6859      	ldr	r1, [r3, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f000 f91f 	bl	8006cae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2160      	movs	r1, #96	; 0x60
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 f949 	bl	8006d0e <TIM_ITRx_SetConfig>
      break;
 8006a7c:	e019      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6859      	ldr	r1, [r3, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f000 f8e0 	bl	8006c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2140      	movs	r1, #64	; 0x40
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 f939 	bl	8006d0e <TIM_ITRx_SetConfig>
      break;
 8006a9c:	e009      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f000 f930 	bl	8006d0e <TIM_ITRx_SetConfig>
        break;
 8006aae:	e000      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006ab0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a40      	ldr	r2, [pc, #256]	; (8006c30 <TIM_Base_SetConfig+0x114>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <TIM_Base_SetConfig+0x40>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3a:	d00f      	beq.n	8006b5c <TIM_Base_SetConfig+0x40>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a3d      	ldr	r2, [pc, #244]	; (8006c34 <TIM_Base_SetConfig+0x118>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00b      	beq.n	8006b5c <TIM_Base_SetConfig+0x40>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a3c      	ldr	r2, [pc, #240]	; (8006c38 <TIM_Base_SetConfig+0x11c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d007      	beq.n	8006b5c <TIM_Base_SetConfig+0x40>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a3b      	ldr	r2, [pc, #236]	; (8006c3c <TIM_Base_SetConfig+0x120>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d003      	beq.n	8006b5c <TIM_Base_SetConfig+0x40>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a3a      	ldr	r2, [pc, #232]	; (8006c40 <TIM_Base_SetConfig+0x124>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d108      	bne.n	8006b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a2f      	ldr	r2, [pc, #188]	; (8006c30 <TIM_Base_SetConfig+0x114>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d01f      	beq.n	8006bb6 <TIM_Base_SetConfig+0x9a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7c:	d01b      	beq.n	8006bb6 <TIM_Base_SetConfig+0x9a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a2c      	ldr	r2, [pc, #176]	; (8006c34 <TIM_Base_SetConfig+0x118>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d017      	beq.n	8006bb6 <TIM_Base_SetConfig+0x9a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2b      	ldr	r2, [pc, #172]	; (8006c38 <TIM_Base_SetConfig+0x11c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <TIM_Base_SetConfig+0x9a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <TIM_Base_SetConfig+0x120>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00f      	beq.n	8006bb6 <TIM_Base_SetConfig+0x9a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a29      	ldr	r2, [pc, #164]	; (8006c40 <TIM_Base_SetConfig+0x124>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00b      	beq.n	8006bb6 <TIM_Base_SetConfig+0x9a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a28      	ldr	r2, [pc, #160]	; (8006c44 <TIM_Base_SetConfig+0x128>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d007      	beq.n	8006bb6 <TIM_Base_SetConfig+0x9a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a27      	ldr	r2, [pc, #156]	; (8006c48 <TIM_Base_SetConfig+0x12c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d003      	beq.n	8006bb6 <TIM_Base_SetConfig+0x9a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a26      	ldr	r2, [pc, #152]	; (8006c4c <TIM_Base_SetConfig+0x130>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d108      	bne.n	8006bc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <TIM_Base_SetConfig+0x114>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00f      	beq.n	8006c14 <TIM_Base_SetConfig+0xf8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a12      	ldr	r2, [pc, #72]	; (8006c40 <TIM_Base_SetConfig+0x124>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00b      	beq.n	8006c14 <TIM_Base_SetConfig+0xf8>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a11      	ldr	r2, [pc, #68]	; (8006c44 <TIM_Base_SetConfig+0x128>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d007      	beq.n	8006c14 <TIM_Base_SetConfig+0xf8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a10      	ldr	r2, [pc, #64]	; (8006c48 <TIM_Base_SetConfig+0x12c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d003      	beq.n	8006c14 <TIM_Base_SetConfig+0xf8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a0f      	ldr	r2, [pc, #60]	; (8006c4c <TIM_Base_SetConfig+0x130>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d103      	bne.n	8006c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	615a      	str	r2, [r3, #20]
}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40000c00 	.word	0x40000c00
 8006c40:	40013400 	.word	0x40013400
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40014400 	.word	0x40014400
 8006c4c:	40014800 	.word	0x40014800

08006c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f023 0201 	bic.w	r2, r3, #1
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f023 030a 	bic.w	r3, r3, #10
 8006c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b087      	sub	sp, #28
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f023 0210 	bic.w	r2, r3, #16
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	031b      	lsls	r3, r3, #12
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f043 0307 	orr.w	r3, r3, #7
 8006d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	609a      	str	r2, [r3, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	021a      	lsls	r2, r3, #8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	609a      	str	r2, [r3, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e068      	b.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a2e      	ldr	r2, [pc, #184]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a2d      	ldr	r2, [pc, #180]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d108      	bne.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d01d      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0e:	d018      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d013      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1a      	ldr	r2, [pc, #104]	; (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00e      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d004      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a14      	ldr	r2, [pc, #80]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d10c      	bne.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40013400 	.word	0x40013400
 8006e84:	40000400 	.word	0x40000400
 8006e88:	40000800 	.word	0x40000800
 8006e8c:	40000c00 	.word	0x40000c00
 8006e90:	40014000 	.word	0x40014000

08006e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e040      	b.n	8006f64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fb fa88 	bl	8002408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2224      	movs	r2, #36	; 0x24
 8006efc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa1c 	bl	800734c <UART_SetConfig>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d101      	bne.n	8006f1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e022      	b.n	8006f64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fc9a 	bl	8007860 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fd21 	bl	80079a4 <UART_CheckIdleState>
 8006f62:	4603      	mov	r3, r0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	f040 8081 	bne.w	8007088 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_UART_Transmit+0x26>
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e079      	b.n	800708a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_UART_Transmit+0x38>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e072      	b.n	800708a <HAL_UART_Transmit+0x11e>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2221      	movs	r2, #33	; 0x21
 8006fb6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006fb8:	f7fb fcac 	bl	8002914 <HAL_GetTick>
 8006fbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	88fa      	ldrh	r2, [r7, #6]
 8006fc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	88fa      	ldrh	r2, [r7, #6]
 8006fca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd6:	d108      	bne.n	8006fea <HAL_UART_Transmit+0x7e>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e003      	b.n	8006ff2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006ffa:	e02d      	b.n	8007058 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2200      	movs	r2, #0
 8007004:	2180      	movs	r1, #128	; 0x80
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fd11 	bl	8007a2e <UART_WaitOnFlagUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e039      	b.n	800708a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	881a      	ldrh	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007028:	b292      	uxth	r2, r2
 800702a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	3302      	adds	r3, #2
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	e008      	b.n	8007046 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	781a      	ldrb	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	b292      	uxth	r2, r2
 800703e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	3301      	adds	r3, #1
 8007044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1cb      	bne.n	8006ffc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2200      	movs	r2, #0
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fcdd 	bl	8007a2e <UART_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e005      	b.n	800708a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	e000      	b.n	800708a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007088:	2302      	movs	r3, #2
  }
}
 800708a:	4618      	mov	r0, r3
 800708c:	3720      	adds	r7, #32
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80070ba:	4013      	ands	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d113      	bne.n	80070ec <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00e      	beq.n	80070ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d009      	beq.n	80070ec <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8114 	beq.w	800730a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
      }
      return;
 80070ea:	e10e      	b.n	800730a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80d6 	beq.w	80072a0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d105      	bne.n	800710a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	4b86      	ldr	r3, [pc, #536]	; (800731c <HAL_UART_IRQHandler+0x288>)
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80cb 	beq.w	80072a0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00e      	beq.n	8007132 <HAL_UART_IRQHandler+0x9e>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2201      	movs	r2, #1
 8007124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712a:	f043 0201 	orr.w	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00e      	beq.n	800715a <HAL_UART_IRQHandler+0xc6>
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2202      	movs	r2, #2
 800714c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007152:	f043 0204 	orr.w	r2, r3, #4
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00e      	beq.n	8007182 <HAL_UART_IRQHandler+0xee>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2204      	movs	r2, #4
 8007174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717a:	f043 0202 	orr.w	r2, r3, #2
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b00      	cmp	r3, #0
 800718a:	d013      	beq.n	80071b4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2208      	movs	r2, #8
 80071a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ac:	f043 0208 	orr.w	r2, r3, #8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00f      	beq.n	80071de <HAL_UART_IRQHandler+0x14a>
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d6:	f043 0220 	orr.w	r2, r3, #32
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8093 	beq.w	800730e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00c      	beq.n	800720c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f003 0320 	and.w	r3, r3, #32
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007210:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d004      	beq.n	800722a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007226:	2b00      	cmp	r3, #0
 8007228:	d031      	beq.n	800728e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fc7a 	bl	8007b24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	d123      	bne.n	8007286 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800724c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d013      	beq.n	800727e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800725a:	4a31      	ldr	r2, [pc, #196]	; (8007320 <HAL_UART_IRQHandler+0x28c>)
 800725c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc ff52 	bl	800410c <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e00e      	b.n	800729c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f85a 	bl	8007338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e00a      	b.n	800729c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f856 	bl	8007338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e006      	b.n	800729c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f852 	bl	8007338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800729a:	e038      	b.n	800730e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	bf00      	nop
    return;
 800729e:	e036      	b.n	800730e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <HAL_UART_IRQHandler+0x232>
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fc7f 	bl	8007bc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072c4:	e026      	b.n	8007314 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00d      	beq.n	80072ec <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d017      	beq.n	8007312 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3
    }
    return;
 80072ea:	e012      	b.n	8007312 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00e      	beq.n	8007314 <HAL_UART_IRQHandler+0x280>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc45 	bl	8007b90 <UART_EndTransmit_IT>
    return;
 8007306:	bf00      	nop
 8007308:	e004      	b.n	8007314 <HAL_UART_IRQHandler+0x280>
      return;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <HAL_UART_IRQHandler+0x280>
    return;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <HAL_UART_IRQHandler+0x280>
    return;
 8007312:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	04000120 	.word	0x04000120
 8007320:	08007b65 	.word	0x08007b65

08007324 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800734c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007350:	b088      	sub	sp, #32
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	4313      	orrs	r3, r2
 8007370:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4bac      	ldr	r3, [pc, #688]	; (800762c <UART_SetConfig+0x2e0>)
 800737a:	4013      	ands	r3, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	69f9      	ldr	r1, [r7, #28]
 8007382:	430b      	orrs	r3, r1
 8007384:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4aa2      	ldr	r2, [pc, #648]	; (8007630 <UART_SetConfig+0x2e4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d004      	beq.n	80073b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a99      	ldr	r2, [pc, #612]	; (8007634 <UART_SetConfig+0x2e8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d121      	bne.n	8007418 <UART_SetConfig+0xcc>
 80073d4:	4b98      	ldr	r3, [pc, #608]	; (8007638 <UART_SetConfig+0x2ec>)
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d816      	bhi.n	8007410 <UART_SetConfig+0xc4>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0x9c>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	08007405 	.word	0x08007405
 80073f0:	080073ff 	.word	0x080073ff
 80073f4:	0800740b 	.word	0x0800740b
 80073f8:	2301      	movs	r3, #1
 80073fa:	76fb      	strb	r3, [r7, #27]
 80073fc:	e0e8      	b.n	80075d0 <UART_SetConfig+0x284>
 80073fe:	2302      	movs	r3, #2
 8007400:	76fb      	strb	r3, [r7, #27]
 8007402:	e0e5      	b.n	80075d0 <UART_SetConfig+0x284>
 8007404:	2304      	movs	r3, #4
 8007406:	76fb      	strb	r3, [r7, #27]
 8007408:	e0e2      	b.n	80075d0 <UART_SetConfig+0x284>
 800740a:	2308      	movs	r3, #8
 800740c:	76fb      	strb	r3, [r7, #27]
 800740e:	e0df      	b.n	80075d0 <UART_SetConfig+0x284>
 8007410:	2310      	movs	r3, #16
 8007412:	76fb      	strb	r3, [r7, #27]
 8007414:	bf00      	nop
 8007416:	e0db      	b.n	80075d0 <UART_SetConfig+0x284>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a87      	ldr	r2, [pc, #540]	; (800763c <UART_SetConfig+0x2f0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d134      	bne.n	800748c <UART_SetConfig+0x140>
 8007422:	4b85      	ldr	r3, [pc, #532]	; (8007638 <UART_SetConfig+0x2ec>)
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007428:	f003 030c 	and.w	r3, r3, #12
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d829      	bhi.n	8007484 <UART_SetConfig+0x138>
 8007430:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <UART_SetConfig+0xec>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800746d 	.word	0x0800746d
 800743c:	08007485 	.word	0x08007485
 8007440:	08007485 	.word	0x08007485
 8007444:	08007485 	.word	0x08007485
 8007448:	08007479 	.word	0x08007479
 800744c:	08007485 	.word	0x08007485
 8007450:	08007485 	.word	0x08007485
 8007454:	08007485 	.word	0x08007485
 8007458:	08007473 	.word	0x08007473
 800745c:	08007485 	.word	0x08007485
 8007460:	08007485 	.word	0x08007485
 8007464:	08007485 	.word	0x08007485
 8007468:	0800747f 	.word	0x0800747f
 800746c:	2300      	movs	r3, #0
 800746e:	76fb      	strb	r3, [r7, #27]
 8007470:	e0ae      	b.n	80075d0 <UART_SetConfig+0x284>
 8007472:	2302      	movs	r3, #2
 8007474:	76fb      	strb	r3, [r7, #27]
 8007476:	e0ab      	b.n	80075d0 <UART_SetConfig+0x284>
 8007478:	2304      	movs	r3, #4
 800747a:	76fb      	strb	r3, [r7, #27]
 800747c:	e0a8      	b.n	80075d0 <UART_SetConfig+0x284>
 800747e:	2308      	movs	r3, #8
 8007480:	76fb      	strb	r3, [r7, #27]
 8007482:	e0a5      	b.n	80075d0 <UART_SetConfig+0x284>
 8007484:	2310      	movs	r3, #16
 8007486:	76fb      	strb	r3, [r7, #27]
 8007488:	bf00      	nop
 800748a:	e0a1      	b.n	80075d0 <UART_SetConfig+0x284>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6b      	ldr	r2, [pc, #428]	; (8007640 <UART_SetConfig+0x2f4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d120      	bne.n	80074d8 <UART_SetConfig+0x18c>
 8007496:	4b68      	ldr	r3, [pc, #416]	; (8007638 <UART_SetConfig+0x2ec>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d00f      	beq.n	80074c4 <UART_SetConfig+0x178>
 80074a4:	2b10      	cmp	r3, #16
 80074a6:	d802      	bhi.n	80074ae <UART_SetConfig+0x162>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <UART_SetConfig+0x16c>
 80074ac:	e010      	b.n	80074d0 <UART_SetConfig+0x184>
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d005      	beq.n	80074be <UART_SetConfig+0x172>
 80074b2:	2b30      	cmp	r3, #48	; 0x30
 80074b4:	d009      	beq.n	80074ca <UART_SetConfig+0x17e>
 80074b6:	e00b      	b.n	80074d0 <UART_SetConfig+0x184>
 80074b8:	2300      	movs	r3, #0
 80074ba:	76fb      	strb	r3, [r7, #27]
 80074bc:	e088      	b.n	80075d0 <UART_SetConfig+0x284>
 80074be:	2302      	movs	r3, #2
 80074c0:	76fb      	strb	r3, [r7, #27]
 80074c2:	e085      	b.n	80075d0 <UART_SetConfig+0x284>
 80074c4:	2304      	movs	r3, #4
 80074c6:	76fb      	strb	r3, [r7, #27]
 80074c8:	e082      	b.n	80075d0 <UART_SetConfig+0x284>
 80074ca:	2308      	movs	r3, #8
 80074cc:	76fb      	strb	r3, [r7, #27]
 80074ce:	e07f      	b.n	80075d0 <UART_SetConfig+0x284>
 80074d0:	2310      	movs	r3, #16
 80074d2:	76fb      	strb	r3, [r7, #27]
 80074d4:	bf00      	nop
 80074d6:	e07b      	b.n	80075d0 <UART_SetConfig+0x284>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a59      	ldr	r2, [pc, #356]	; (8007644 <UART_SetConfig+0x2f8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d120      	bne.n	8007524 <UART_SetConfig+0x1d8>
 80074e2:	4b55      	ldr	r3, [pc, #340]	; (8007638 <UART_SetConfig+0x2ec>)
 80074e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074ec:	2b40      	cmp	r3, #64	; 0x40
 80074ee:	d00f      	beq.n	8007510 <UART_SetConfig+0x1c4>
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d802      	bhi.n	80074fa <UART_SetConfig+0x1ae>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <UART_SetConfig+0x1b8>
 80074f8:	e010      	b.n	800751c <UART_SetConfig+0x1d0>
 80074fa:	2b80      	cmp	r3, #128	; 0x80
 80074fc:	d005      	beq.n	800750a <UART_SetConfig+0x1be>
 80074fe:	2bc0      	cmp	r3, #192	; 0xc0
 8007500:	d009      	beq.n	8007516 <UART_SetConfig+0x1ca>
 8007502:	e00b      	b.n	800751c <UART_SetConfig+0x1d0>
 8007504:	2300      	movs	r3, #0
 8007506:	76fb      	strb	r3, [r7, #27]
 8007508:	e062      	b.n	80075d0 <UART_SetConfig+0x284>
 800750a:	2302      	movs	r3, #2
 800750c:	76fb      	strb	r3, [r7, #27]
 800750e:	e05f      	b.n	80075d0 <UART_SetConfig+0x284>
 8007510:	2304      	movs	r3, #4
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	e05c      	b.n	80075d0 <UART_SetConfig+0x284>
 8007516:	2308      	movs	r3, #8
 8007518:	76fb      	strb	r3, [r7, #27]
 800751a:	e059      	b.n	80075d0 <UART_SetConfig+0x284>
 800751c:	2310      	movs	r3, #16
 800751e:	76fb      	strb	r3, [r7, #27]
 8007520:	bf00      	nop
 8007522:	e055      	b.n	80075d0 <UART_SetConfig+0x284>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a47      	ldr	r2, [pc, #284]	; (8007648 <UART_SetConfig+0x2fc>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d124      	bne.n	8007578 <UART_SetConfig+0x22c>
 800752e:	4b42      	ldr	r3, [pc, #264]	; (8007638 <UART_SetConfig+0x2ec>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753c:	d012      	beq.n	8007564 <UART_SetConfig+0x218>
 800753e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007542:	d802      	bhi.n	800754a <UART_SetConfig+0x1fe>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <UART_SetConfig+0x20c>
 8007548:	e012      	b.n	8007570 <UART_SetConfig+0x224>
 800754a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754e:	d006      	beq.n	800755e <UART_SetConfig+0x212>
 8007550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007554:	d009      	beq.n	800756a <UART_SetConfig+0x21e>
 8007556:	e00b      	b.n	8007570 <UART_SetConfig+0x224>
 8007558:	2300      	movs	r3, #0
 800755a:	76fb      	strb	r3, [r7, #27]
 800755c:	e038      	b.n	80075d0 <UART_SetConfig+0x284>
 800755e:	2302      	movs	r3, #2
 8007560:	76fb      	strb	r3, [r7, #27]
 8007562:	e035      	b.n	80075d0 <UART_SetConfig+0x284>
 8007564:	2304      	movs	r3, #4
 8007566:	76fb      	strb	r3, [r7, #27]
 8007568:	e032      	b.n	80075d0 <UART_SetConfig+0x284>
 800756a:	2308      	movs	r3, #8
 800756c:	76fb      	strb	r3, [r7, #27]
 800756e:	e02f      	b.n	80075d0 <UART_SetConfig+0x284>
 8007570:	2310      	movs	r3, #16
 8007572:	76fb      	strb	r3, [r7, #27]
 8007574:	bf00      	nop
 8007576:	e02b      	b.n	80075d0 <UART_SetConfig+0x284>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2c      	ldr	r2, [pc, #176]	; (8007630 <UART_SetConfig+0x2e4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d124      	bne.n	80075cc <UART_SetConfig+0x280>
 8007582:	4b2d      	ldr	r3, [pc, #180]	; (8007638 <UART_SetConfig+0x2ec>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800758c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007590:	d012      	beq.n	80075b8 <UART_SetConfig+0x26c>
 8007592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007596:	d802      	bhi.n	800759e <UART_SetConfig+0x252>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <UART_SetConfig+0x260>
 800759c:	e012      	b.n	80075c4 <UART_SetConfig+0x278>
 800759e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a2:	d006      	beq.n	80075b2 <UART_SetConfig+0x266>
 80075a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075a8:	d009      	beq.n	80075be <UART_SetConfig+0x272>
 80075aa:	e00b      	b.n	80075c4 <UART_SetConfig+0x278>
 80075ac:	2300      	movs	r3, #0
 80075ae:	76fb      	strb	r3, [r7, #27]
 80075b0:	e00e      	b.n	80075d0 <UART_SetConfig+0x284>
 80075b2:	2302      	movs	r3, #2
 80075b4:	76fb      	strb	r3, [r7, #27]
 80075b6:	e00b      	b.n	80075d0 <UART_SetConfig+0x284>
 80075b8:	2304      	movs	r3, #4
 80075ba:	76fb      	strb	r3, [r7, #27]
 80075bc:	e008      	b.n	80075d0 <UART_SetConfig+0x284>
 80075be:	2308      	movs	r3, #8
 80075c0:	76fb      	strb	r3, [r7, #27]
 80075c2:	e005      	b.n	80075d0 <UART_SetConfig+0x284>
 80075c4:	2310      	movs	r3, #16
 80075c6:	76fb      	strb	r3, [r7, #27]
 80075c8:	bf00      	nop
 80075ca:	e001      	b.n	80075d0 <UART_SetConfig+0x284>
 80075cc:	2310      	movs	r3, #16
 80075ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a16      	ldr	r2, [pc, #88]	; (8007630 <UART_SetConfig+0x2e4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	f040 8087 	bne.w	80076ea <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075dc:	7efb      	ldrb	r3, [r7, #27]
 80075de:	2b08      	cmp	r3, #8
 80075e0:	d836      	bhi.n	8007650 <UART_SetConfig+0x304>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <UART_SetConfig+0x29c>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007651 	.word	0x08007651
 80075f0:	08007615 	.word	0x08007615
 80075f4:	08007651 	.word	0x08007651
 80075f8:	0800761b 	.word	0x0800761b
 80075fc:	08007651 	.word	0x08007651
 8007600:	08007651 	.word	0x08007651
 8007604:	08007651 	.word	0x08007651
 8007608:	08007623 	.word	0x08007623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800760c:	f7fd fe08 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 8007610:	6178      	str	r0, [r7, #20]
        break;
 8007612:	e022      	b.n	800765a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007614:	4b0d      	ldr	r3, [pc, #52]	; (800764c <UART_SetConfig+0x300>)
 8007616:	617b      	str	r3, [r7, #20]
        break;
 8007618:	e01f      	b.n	800765a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800761a:	f7fd fd6b 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 800761e:	6178      	str	r0, [r7, #20]
        break;
 8007620:	e01b      	b.n	800765a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007626:	617b      	str	r3, [r7, #20]
        break;
 8007628:	e017      	b.n	800765a <UART_SetConfig+0x30e>
 800762a:	bf00      	nop
 800762c:	efff69f3 	.word	0xefff69f3
 8007630:	40008000 	.word	0x40008000
 8007634:	40013800 	.word	0x40013800
 8007638:	40021000 	.word	0x40021000
 800763c:	40004400 	.word	0x40004400
 8007640:	40004800 	.word	0x40004800
 8007644:	40004c00 	.word	0x40004c00
 8007648:	40005000 	.word	0x40005000
 800764c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	76bb      	strb	r3, [r7, #26]
        break;
 8007658:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80f1 	beq.w	8007844 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	4413      	add	r3, r2
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	429a      	cmp	r2, r3
 8007670:	d305      	bcc.n	800767e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	429a      	cmp	r2, r3
 800767c:	d902      	bls.n	8007684 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	76bb      	strb	r3, [r7, #26]
 8007682:	e0df      	b.n	8007844 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	4619      	mov	r1, r3
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	f04f 0400 	mov.w	r4, #0
 8007694:	0214      	lsls	r4, r2, #8
 8007696:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800769a:	020b      	lsls	r3, r1, #8
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6852      	ldr	r2, [r2, #4]
 80076a0:	0852      	lsrs	r2, r2, #1
 80076a2:	4611      	mov	r1, r2
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	eb13 0b01 	adds.w	fp, r3, r1
 80076ac:	eb44 0c02 	adc.w	ip, r4, r2
 80076b0:	4658      	mov	r0, fp
 80076b2:	4661      	mov	r1, ip
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f04f 0400 	mov.w	r4, #0
 80076bc:	461a      	mov	r2, r3
 80076be:	4623      	mov	r3, r4
 80076c0:	f7f9 fb32 	bl	8000d28 <__aeabi_uldivmod>
 80076c4:	4603      	mov	r3, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076d0:	d308      	bcc.n	80076e4 <UART_SetConfig+0x398>
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d8:	d204      	bcs.n	80076e4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	60da      	str	r2, [r3, #12]
 80076e2:	e0af      	b.n	8007844 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	76bb      	strb	r3, [r7, #26]
 80076e8:	e0ac      	b.n	8007844 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f2:	d15b      	bne.n	80077ac <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80076f4:	7efb      	ldrb	r3, [r7, #27]
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d827      	bhi.n	800774a <UART_SetConfig+0x3fe>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <UART_SetConfig+0x3b4>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007725 	.word	0x08007725
 8007704:	0800772d 	.word	0x0800772d
 8007708:	08007735 	.word	0x08007735
 800770c:	0800774b 	.word	0x0800774b
 8007710:	0800773b 	.word	0x0800773b
 8007714:	0800774b 	.word	0x0800774b
 8007718:	0800774b 	.word	0x0800774b
 800771c:	0800774b 	.word	0x0800774b
 8007720:	08007743 	.word	0x08007743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007724:	f7fd fd7c 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 8007728:	6178      	str	r0, [r7, #20]
        break;
 800772a:	e013      	b.n	8007754 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800772c:	f7fd fd8e 	bl	800524c <HAL_RCC_GetPCLK2Freq>
 8007730:	6178      	str	r0, [r7, #20]
        break;
 8007732:	e00f      	b.n	8007754 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007734:	4b49      	ldr	r3, [pc, #292]	; (800785c <UART_SetConfig+0x510>)
 8007736:	617b      	str	r3, [r7, #20]
        break;
 8007738:	e00c      	b.n	8007754 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800773a:	f7fd fcdb 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 800773e:	6178      	str	r0, [r7, #20]
        break;
 8007740:	e008      	b.n	8007754 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007746:	617b      	str	r3, [r7, #20]
        break;
 8007748:	e004      	b.n	8007754 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	76bb      	strb	r3, [r7, #26]
        break;
 8007752:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d074      	beq.n	8007844 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	005a      	lsls	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	441a      	add	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	fbb2 f3f3 	udiv	r3, r2, r3
 800776e:	b29b      	uxth	r3, r3
 8007770:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b0f      	cmp	r3, #15
 8007776:	d916      	bls.n	80077a6 <UART_SetConfig+0x45a>
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777e:	d212      	bcs.n	80077a6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f023 030f 	bic.w	r3, r3, #15
 8007788:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	085b      	lsrs	r3, r3, #1
 800778e:	b29b      	uxth	r3, r3
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	b29a      	uxth	r2, r3
 8007796:	89fb      	ldrh	r3, [r7, #14]
 8007798:	4313      	orrs	r3, r2
 800779a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	89fa      	ldrh	r2, [r7, #14]
 80077a2:	60da      	str	r2, [r3, #12]
 80077a4:	e04e      	b.n	8007844 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	76bb      	strb	r3, [r7, #26]
 80077aa:	e04b      	b.n	8007844 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ac:	7efb      	ldrb	r3, [r7, #27]
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d827      	bhi.n	8007802 <UART_SetConfig+0x4b6>
 80077b2:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <UART_SetConfig+0x46c>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	08007803 	.word	0x08007803
 80077c8:	080077f3 	.word	0x080077f3
 80077cc:	08007803 	.word	0x08007803
 80077d0:	08007803 	.word	0x08007803
 80077d4:	08007803 	.word	0x08007803
 80077d8:	080077fb 	.word	0x080077fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077dc:	f7fd fd20 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 80077e0:	6178      	str	r0, [r7, #20]
        break;
 80077e2:	e013      	b.n	800780c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077e4:	f7fd fd32 	bl	800524c <HAL_RCC_GetPCLK2Freq>
 80077e8:	6178      	str	r0, [r7, #20]
        break;
 80077ea:	e00f      	b.n	800780c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ec:	4b1b      	ldr	r3, [pc, #108]	; (800785c <UART_SetConfig+0x510>)
 80077ee:	617b      	str	r3, [r7, #20]
        break;
 80077f0:	e00c      	b.n	800780c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fd fc7f 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80077f6:	6178      	str	r0, [r7, #20]
        break;
 80077f8:	e008      	b.n	800780c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fe:	617b      	str	r3, [r7, #20]
        break;
 8007800:	e004      	b.n	800780c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	76bb      	strb	r3, [r7, #26]
        break;
 800780a:	bf00      	nop
    }

    if (pclk != 0U)
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d018      	beq.n	8007844 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	085a      	lsrs	r2, r3, #1
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	441a      	add	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	b29b      	uxth	r3, r3
 8007826:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	2b0f      	cmp	r3, #15
 800782c:	d908      	bls.n	8007840 <UART_SetConfig+0x4f4>
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007834:	d204      	bcs.n	8007840 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	e001      	b.n	8007844 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007850:	7ebb      	ldrb	r3, [r7, #26]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800785c:	00f42400 	.word	0x00f42400

08007860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01a      	beq.n	8007976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800795e:	d10a      	bne.n	8007976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	605a      	str	r2, [r3, #4]
  }
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af02      	add	r7, sp, #8
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80079b2:	f7fa ffaf 	bl	8002914 <HAL_GetTick>
 80079b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d10e      	bne.n	80079e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f82a 	bl	8007a2e <UART_WaitOnFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e020      	b.n	8007a26 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d10e      	bne.n	8007a10 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f814 	bl	8007a2e <UART_WaitOnFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e00a      	b.n	8007a26 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	603b      	str	r3, [r7, #0]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a3e:	e05d      	b.n	8007afc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d059      	beq.n	8007afc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a48:	f7fa ff64 	bl	8002914 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d302      	bcc.n	8007a5e <UART_WaitOnFlagUntilTimeout+0x30>
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d11b      	bne.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a6c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0201 	bic.w	r2, r2, #1
 8007a7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e042      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02b      	beq.n	8007afc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab2:	d123      	bne.n	8007afc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007abc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007acc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e00f      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69da      	ldr	r2, [r3, #28]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d092      	beq.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff fbd8 	bl	8007338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fbb5 	bl	8007324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <__errno>:
 8007bd8:	4b01      	ldr	r3, [pc, #4]	; (8007be0 <__errno+0x8>)
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	2000000c 	.word	0x2000000c

08007be4 <__libc_init_array>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	4e0d      	ldr	r6, [pc, #52]	; (8007c1c <__libc_init_array+0x38>)
 8007be8:	4c0d      	ldr	r4, [pc, #52]	; (8007c20 <__libc_init_array+0x3c>)
 8007bea:	1ba4      	subs	r4, r4, r6
 8007bec:	10a4      	asrs	r4, r4, #2
 8007bee:	2500      	movs	r5, #0
 8007bf0:	42a5      	cmp	r5, r4
 8007bf2:	d109      	bne.n	8007c08 <__libc_init_array+0x24>
 8007bf4:	4e0b      	ldr	r6, [pc, #44]	; (8007c24 <__libc_init_array+0x40>)
 8007bf6:	4c0c      	ldr	r4, [pc, #48]	; (8007c28 <__libc_init_array+0x44>)
 8007bf8:	f004 f9fc 	bl	800bff4 <_init>
 8007bfc:	1ba4      	subs	r4, r4, r6
 8007bfe:	10a4      	asrs	r4, r4, #2
 8007c00:	2500      	movs	r5, #0
 8007c02:	42a5      	cmp	r5, r4
 8007c04:	d105      	bne.n	8007c12 <__libc_init_array+0x2e>
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c0c:	4798      	blx	r3
 8007c0e:	3501      	adds	r5, #1
 8007c10:	e7ee      	b.n	8007bf0 <__libc_init_array+0xc>
 8007c12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c16:	4798      	blx	r3
 8007c18:	3501      	adds	r5, #1
 8007c1a:	e7f2      	b.n	8007c02 <__libc_init_array+0x1e>
 8007c1c:	0800c3a8 	.word	0x0800c3a8
 8007c20:	0800c3a8 	.word	0x0800c3a8
 8007c24:	0800c3a8 	.word	0x0800c3a8
 8007c28:	0800c3ac 	.word	0x0800c3ac

08007c2c <memset>:
 8007c2c:	4402      	add	r2, r0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d100      	bne.n	8007c36 <memset+0xa>
 8007c34:	4770      	bx	lr
 8007c36:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3a:	e7f9      	b.n	8007c30 <memset+0x4>

08007c3c <__cvt>:
 8007c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	ec55 4b10 	vmov	r4, r5, d0
 8007c44:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007c46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c4a:	2d00      	cmp	r5, #0
 8007c4c:	460e      	mov	r6, r1
 8007c4e:	4691      	mov	r9, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	bfb8      	it	lt
 8007c54:	4622      	movlt	r2, r4
 8007c56:	462b      	mov	r3, r5
 8007c58:	f027 0720 	bic.w	r7, r7, #32
 8007c5c:	bfbb      	ittet	lt
 8007c5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c62:	461d      	movlt	r5, r3
 8007c64:	2300      	movge	r3, #0
 8007c66:	232d      	movlt	r3, #45	; 0x2d
 8007c68:	bfb8      	it	lt
 8007c6a:	4614      	movlt	r4, r2
 8007c6c:	2f46      	cmp	r7, #70	; 0x46
 8007c6e:	700b      	strb	r3, [r1, #0]
 8007c70:	d004      	beq.n	8007c7c <__cvt+0x40>
 8007c72:	2f45      	cmp	r7, #69	; 0x45
 8007c74:	d100      	bne.n	8007c78 <__cvt+0x3c>
 8007c76:	3601      	adds	r6, #1
 8007c78:	2102      	movs	r1, #2
 8007c7a:	e000      	b.n	8007c7e <__cvt+0x42>
 8007c7c:	2103      	movs	r1, #3
 8007c7e:	ab03      	add	r3, sp, #12
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	ab02      	add	r3, sp, #8
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	4632      	mov	r2, r6
 8007c88:	4653      	mov	r3, sl
 8007c8a:	ec45 4b10 	vmov	d0, r4, r5
 8007c8e:	f001 fd8f 	bl	80097b0 <_dtoa_r>
 8007c92:	2f47      	cmp	r7, #71	; 0x47
 8007c94:	4680      	mov	r8, r0
 8007c96:	d102      	bne.n	8007c9e <__cvt+0x62>
 8007c98:	f019 0f01 	tst.w	r9, #1
 8007c9c:	d026      	beq.n	8007cec <__cvt+0xb0>
 8007c9e:	2f46      	cmp	r7, #70	; 0x46
 8007ca0:	eb08 0906 	add.w	r9, r8, r6
 8007ca4:	d111      	bne.n	8007cca <__cvt+0x8e>
 8007ca6:	f898 3000 	ldrb.w	r3, [r8]
 8007caa:	2b30      	cmp	r3, #48	; 0x30
 8007cac:	d10a      	bne.n	8007cc4 <__cvt+0x88>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	f7f8 ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cba:	b918      	cbnz	r0, 8007cc4 <__cvt+0x88>
 8007cbc:	f1c6 0601 	rsb	r6, r6, #1
 8007cc0:	f8ca 6000 	str.w	r6, [sl]
 8007cc4:	f8da 3000 	ldr.w	r3, [sl]
 8007cc8:	4499      	add	r9, r3
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd6:	b938      	cbnz	r0, 8007ce8 <__cvt+0xac>
 8007cd8:	2230      	movs	r2, #48	; 0x30
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	454b      	cmp	r3, r9
 8007cde:	d205      	bcs.n	8007cec <__cvt+0xb0>
 8007ce0:	1c59      	adds	r1, r3, #1
 8007ce2:	9103      	str	r1, [sp, #12]
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e7f8      	b.n	8007cda <__cvt+0x9e>
 8007ce8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cf0:	eba3 0308 	sub.w	r3, r3, r8
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	b004      	add	sp, #16
 8007cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007cfe <__exponent>:
 8007cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d00:	2900      	cmp	r1, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	bfba      	itte	lt
 8007d06:	4249      	neglt	r1, r1
 8007d08:	232d      	movlt	r3, #45	; 0x2d
 8007d0a:	232b      	movge	r3, #43	; 0x2b
 8007d0c:	2909      	cmp	r1, #9
 8007d0e:	f804 2b02 	strb.w	r2, [r4], #2
 8007d12:	7043      	strb	r3, [r0, #1]
 8007d14:	dd20      	ble.n	8007d58 <__exponent+0x5a>
 8007d16:	f10d 0307 	add.w	r3, sp, #7
 8007d1a:	461f      	mov	r7, r3
 8007d1c:	260a      	movs	r6, #10
 8007d1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d22:	fb06 1115 	mls	r1, r6, r5, r1
 8007d26:	3130      	adds	r1, #48	; 0x30
 8007d28:	2d09      	cmp	r5, #9
 8007d2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d2e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007d32:	4629      	mov	r1, r5
 8007d34:	dc09      	bgt.n	8007d4a <__exponent+0x4c>
 8007d36:	3130      	adds	r1, #48	; 0x30
 8007d38:	3b02      	subs	r3, #2
 8007d3a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d3e:	42bb      	cmp	r3, r7
 8007d40:	4622      	mov	r2, r4
 8007d42:	d304      	bcc.n	8007d4e <__exponent+0x50>
 8007d44:	1a10      	subs	r0, r2, r0
 8007d46:	b003      	add	sp, #12
 8007d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	e7e7      	b.n	8007d1e <__exponent+0x20>
 8007d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d52:	f804 2b01 	strb.w	r2, [r4], #1
 8007d56:	e7f2      	b.n	8007d3e <__exponent+0x40>
 8007d58:	2330      	movs	r3, #48	; 0x30
 8007d5a:	4419      	add	r1, r3
 8007d5c:	7083      	strb	r3, [r0, #2]
 8007d5e:	1d02      	adds	r2, r0, #4
 8007d60:	70c1      	strb	r1, [r0, #3]
 8007d62:	e7ef      	b.n	8007d44 <__exponent+0x46>

08007d64 <_printf_float>:
 8007d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d68:	b08d      	sub	sp, #52	; 0x34
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007d70:	4616      	mov	r6, r2
 8007d72:	461f      	mov	r7, r3
 8007d74:	4605      	mov	r5, r0
 8007d76:	f002 fec9 	bl	800ab0c <_localeconv_r>
 8007d7a:	6803      	ldr	r3, [r0, #0]
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f8 fa26 	bl	80001d0 <strlen>
 8007d84:	2300      	movs	r3, #0
 8007d86:	930a      	str	r3, [sp, #40]	; 0x28
 8007d88:	f8d8 3000 	ldr.w	r3, [r8]
 8007d8c:	9005      	str	r0, [sp, #20]
 8007d8e:	3307      	adds	r3, #7
 8007d90:	f023 0307 	bic.w	r3, r3, #7
 8007d94:	f103 0208 	add.w	r2, r3, #8
 8007d98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d9c:	f8d4 b000 	ldr.w	fp, [r4]
 8007da0:	f8c8 2000 	str.w	r2, [r8]
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007dac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007db0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007db4:	9307      	str	r3, [sp, #28]
 8007db6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dba:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbe:	4ba7      	ldr	r3, [pc, #668]	; (800805c <_printf_float+0x2f8>)
 8007dc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dc4:	f7f8 feb2 	bl	8000b2c <__aeabi_dcmpun>
 8007dc8:	bb70      	cbnz	r0, 8007e28 <_printf_float+0xc4>
 8007dca:	f04f 32ff 	mov.w	r2, #4294967295
 8007dce:	4ba3      	ldr	r3, [pc, #652]	; (800805c <_printf_float+0x2f8>)
 8007dd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dd4:	f7f8 fe8c 	bl	8000af0 <__aeabi_dcmple>
 8007dd8:	bb30      	cbnz	r0, 8007e28 <_printf_float+0xc4>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8007de6:	b110      	cbz	r0, 8007dee <_printf_float+0x8a>
 8007de8:	232d      	movs	r3, #45	; 0x2d
 8007dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dee:	4a9c      	ldr	r2, [pc, #624]	; (8008060 <_printf_float+0x2fc>)
 8007df0:	4b9c      	ldr	r3, [pc, #624]	; (8008064 <_printf_float+0x300>)
 8007df2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007df6:	bf8c      	ite	hi
 8007df8:	4690      	movhi	r8, r2
 8007dfa:	4698      	movls	r8, r3
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	f02b 0204 	bic.w	r2, fp, #4
 8007e02:	6123      	str	r3, [r4, #16]
 8007e04:	6022      	str	r2, [r4, #0]
 8007e06:	f04f 0900 	mov.w	r9, #0
 8007e0a:	9700      	str	r7, [sp, #0]
 8007e0c:	4633      	mov	r3, r6
 8007e0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f9e6 	bl	80081e4 <_printf_common>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f040 808d 	bne.w	8007f38 <_printf_float+0x1d4>
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e22:	b00d      	add	sp, #52	; 0x34
 8007e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fe7c 	bl	8000b2c <__aeabi_dcmpun>
 8007e34:	b110      	cbz	r0, 8007e3c <_printf_float+0xd8>
 8007e36:	4a8c      	ldr	r2, [pc, #560]	; (8008068 <_printf_float+0x304>)
 8007e38:	4b8c      	ldr	r3, [pc, #560]	; (800806c <_printf_float+0x308>)
 8007e3a:	e7da      	b.n	8007df2 <_printf_float+0x8e>
 8007e3c:	6861      	ldr	r1, [r4, #4]
 8007e3e:	1c4b      	adds	r3, r1, #1
 8007e40:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007e44:	a80a      	add	r0, sp, #40	; 0x28
 8007e46:	d13e      	bne.n	8007ec6 <_printf_float+0x162>
 8007e48:	2306      	movs	r3, #6
 8007e4a:	6063      	str	r3, [r4, #4]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007e52:	ab09      	add	r3, sp, #36	; 0x24
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	ec49 8b10 	vmov	d0, r8, r9
 8007e5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	f8cd a004 	str.w	sl, [sp, #4]
 8007e64:	6861      	ldr	r1, [r4, #4]
 8007e66:	4628      	mov	r0, r5
 8007e68:	f7ff fee8 	bl	8007c3c <__cvt>
 8007e6c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007e70:	2b47      	cmp	r3, #71	; 0x47
 8007e72:	4680      	mov	r8, r0
 8007e74:	d109      	bne.n	8007e8a <_printf_float+0x126>
 8007e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e78:	1cd8      	adds	r0, r3, #3
 8007e7a:	db02      	blt.n	8007e82 <_printf_float+0x11e>
 8007e7c:	6862      	ldr	r2, [r4, #4]
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	dd47      	ble.n	8007f12 <_printf_float+0x1ae>
 8007e82:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e86:	fa5f fa8a 	uxtb.w	sl, sl
 8007e8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e90:	d824      	bhi.n	8007edc <_printf_float+0x178>
 8007e92:	3901      	subs	r1, #1
 8007e94:	4652      	mov	r2, sl
 8007e96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e9a:	9109      	str	r1, [sp, #36]	; 0x24
 8007e9c:	f7ff ff2f 	bl	8007cfe <__exponent>
 8007ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ea2:	1813      	adds	r3, r2, r0
 8007ea4:	2a01      	cmp	r2, #1
 8007ea6:	4681      	mov	r9, r0
 8007ea8:	6123      	str	r3, [r4, #16]
 8007eaa:	dc02      	bgt.n	8007eb2 <_printf_float+0x14e>
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	07d1      	lsls	r1, r2, #31
 8007eb0:	d501      	bpl.n	8007eb6 <_printf_float+0x152>
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0a5      	beq.n	8007e0a <_printf_float+0xa6>
 8007ebe:	232d      	movs	r3, #45	; 0x2d
 8007ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec4:	e7a1      	b.n	8007e0a <_printf_float+0xa6>
 8007ec6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007eca:	f000 8177 	beq.w	80081bc <_printf_float+0x458>
 8007ece:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007ed2:	d1bb      	bne.n	8007e4c <_printf_float+0xe8>
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	d1b9      	bne.n	8007e4c <_printf_float+0xe8>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e7b6      	b.n	8007e4a <_printf_float+0xe6>
 8007edc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007ee0:	d119      	bne.n	8007f16 <_printf_float+0x1b2>
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	dd0c      	ble.n	8007f02 <_printf_float+0x19e>
 8007ee8:	6121      	str	r1, [r4, #16]
 8007eea:	b913      	cbnz	r3, 8007ef2 <_printf_float+0x18e>
 8007eec:	6822      	ldr	r2, [r4, #0]
 8007eee:	07d2      	lsls	r2, r2, #31
 8007ef0:	d502      	bpl.n	8007ef8 <_printf_float+0x194>
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	440b      	add	r3, r1
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efa:	65a3      	str	r3, [r4, #88]	; 0x58
 8007efc:	f04f 0900 	mov.w	r9, #0
 8007f00:	e7d9      	b.n	8007eb6 <_printf_float+0x152>
 8007f02:	b913      	cbnz	r3, 8007f0a <_printf_float+0x1a6>
 8007f04:	6822      	ldr	r2, [r4, #0]
 8007f06:	07d0      	lsls	r0, r2, #31
 8007f08:	d501      	bpl.n	8007f0e <_printf_float+0x1aa>
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	e7f3      	b.n	8007ef6 <_printf_float+0x192>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e7f1      	b.n	8007ef6 <_printf_float+0x192>
 8007f12:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007f16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	db05      	blt.n	8007f2a <_printf_float+0x1c6>
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	07d1      	lsls	r1, r2, #31
 8007f24:	d5e8      	bpl.n	8007ef8 <_printf_float+0x194>
 8007f26:	3301      	adds	r3, #1
 8007f28:	e7e5      	b.n	8007ef6 <_printf_float+0x192>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bfd4      	ite	le
 8007f2e:	f1c3 0302 	rsble	r3, r3, #2
 8007f32:	2301      	movgt	r3, #1
 8007f34:	4413      	add	r3, r2
 8007f36:	e7de      	b.n	8007ef6 <_printf_float+0x192>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	055a      	lsls	r2, r3, #21
 8007f3c:	d407      	bmi.n	8007f4e <_printf_float+0x1ea>
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	4642      	mov	r2, r8
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d12b      	bne.n	8007fa4 <_printf_float+0x240>
 8007f4c:	e767      	b.n	8007e1e <_printf_float+0xba>
 8007f4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f52:	f240 80dc 	bls.w	800810e <_printf_float+0x3aa>
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f5e:	f7f8 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d033      	beq.n	8007fce <_printf_float+0x26a>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4a41      	ldr	r2, [pc, #260]	; (8008070 <_printf_float+0x30c>)
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	f43f af54 	beq.w	8007e1e <_printf_float+0xba>
 8007f76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	db02      	blt.n	8007f84 <_printf_float+0x220>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	07d8      	lsls	r0, r3, #31
 8007f82:	d50f      	bpl.n	8007fa4 <_printf_float+0x240>
 8007f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af45 	beq.w	8007e1e <_printf_float+0xba>
 8007f94:	f04f 0800 	mov.w	r8, #0
 8007f98:	f104 091a 	add.w	r9, r4, #26
 8007f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	4543      	cmp	r3, r8
 8007fa2:	dc09      	bgt.n	8007fb8 <_printf_float+0x254>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	079b      	lsls	r3, r3, #30
 8007fa8:	f100 8103 	bmi.w	80081b2 <_printf_float+0x44e>
 8007fac:	68e0      	ldr	r0, [r4, #12]
 8007fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb0:	4298      	cmp	r0, r3
 8007fb2:	bfb8      	it	lt
 8007fb4:	4618      	movlt	r0, r3
 8007fb6:	e734      	b.n	8007e22 <_printf_float+0xbe>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	464a      	mov	r2, r9
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f43f af2b 	beq.w	8007e1e <_printf_float+0xba>
 8007fc8:	f108 0801 	add.w	r8, r8, #1
 8007fcc:	e7e6      	b.n	8007f9c <_printf_float+0x238>
 8007fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dc2b      	bgt.n	800802c <_printf_float+0x2c8>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4a26      	ldr	r2, [pc, #152]	; (8008070 <_printf_float+0x30c>)
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f af1d 	beq.w	8007e1e <_printf_float+0xba>
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	b923      	cbnz	r3, 8007ff2 <_printf_float+0x28e>
 8007fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fea:	b913      	cbnz	r3, 8007ff2 <_printf_float+0x28e>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	07d9      	lsls	r1, r3, #31
 8007ff0:	d5d8      	bpl.n	8007fa4 <_printf_float+0x240>
 8007ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b8      	blx	r7
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	f43f af0e 	beq.w	8007e1e <_printf_float+0xba>
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	f104 0a1a 	add.w	sl, r4, #26
 800800a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800c:	425b      	negs	r3, r3
 800800e:	454b      	cmp	r3, r9
 8008010:	dc01      	bgt.n	8008016 <_printf_float+0x2b2>
 8008012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008014:	e794      	b.n	8007f40 <_printf_float+0x1dc>
 8008016:	2301      	movs	r3, #1
 8008018:	4652      	mov	r2, sl
 800801a:	4631      	mov	r1, r6
 800801c:	4628      	mov	r0, r5
 800801e:	47b8      	blx	r7
 8008020:	3001      	adds	r0, #1
 8008022:	f43f aefc 	beq.w	8007e1e <_printf_float+0xba>
 8008026:	f109 0901 	add.w	r9, r9, #1
 800802a:	e7ee      	b.n	800800a <_printf_float+0x2a6>
 800802c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800802e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008030:	429a      	cmp	r2, r3
 8008032:	bfa8      	it	ge
 8008034:	461a      	movge	r2, r3
 8008036:	2a00      	cmp	r2, #0
 8008038:	4691      	mov	r9, r2
 800803a:	dd07      	ble.n	800804c <_printf_float+0x2e8>
 800803c:	4613      	mov	r3, r2
 800803e:	4631      	mov	r1, r6
 8008040:	4642      	mov	r2, r8
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f aee9 	beq.w	8007e1e <_printf_float+0xba>
 800804c:	f104 031a 	add.w	r3, r4, #26
 8008050:	f04f 0b00 	mov.w	fp, #0
 8008054:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008058:	9306      	str	r3, [sp, #24]
 800805a:	e015      	b.n	8008088 <_printf_float+0x324>
 800805c:	7fefffff 	.word	0x7fefffff
 8008060:	0800c088 	.word	0x0800c088
 8008064:	0800c084 	.word	0x0800c084
 8008068:	0800c090 	.word	0x0800c090
 800806c:	0800c08c 	.word	0x0800c08c
 8008070:	0800c094 	.word	0x0800c094
 8008074:	2301      	movs	r3, #1
 8008076:	9a06      	ldr	r2, [sp, #24]
 8008078:	4631      	mov	r1, r6
 800807a:	4628      	mov	r0, r5
 800807c:	47b8      	blx	r7
 800807e:	3001      	adds	r0, #1
 8008080:	f43f aecd 	beq.w	8007e1e <_printf_float+0xba>
 8008084:	f10b 0b01 	add.w	fp, fp, #1
 8008088:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800808c:	ebaa 0309 	sub.w	r3, sl, r9
 8008090:	455b      	cmp	r3, fp
 8008092:	dcef      	bgt.n	8008074 <_printf_float+0x310>
 8008094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008098:	429a      	cmp	r2, r3
 800809a:	44d0      	add	r8, sl
 800809c:	db15      	blt.n	80080ca <_printf_float+0x366>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	07da      	lsls	r2, r3, #31
 80080a2:	d412      	bmi.n	80080ca <_printf_float+0x366>
 80080a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080a8:	eba3 020a 	sub.w	r2, r3, sl
 80080ac:	eba3 0a01 	sub.w	sl, r3, r1
 80080b0:	4592      	cmp	sl, r2
 80080b2:	bfa8      	it	ge
 80080b4:	4692      	movge	sl, r2
 80080b6:	f1ba 0f00 	cmp.w	sl, #0
 80080ba:	dc0e      	bgt.n	80080da <_printf_float+0x376>
 80080bc:	f04f 0800 	mov.w	r8, #0
 80080c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080c4:	f104 091a 	add.w	r9, r4, #26
 80080c8:	e019      	b.n	80080fe <_printf_float+0x39a>
 80080ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	d1e5      	bne.n	80080a4 <_printf_float+0x340>
 80080d8:	e6a1      	b.n	8007e1e <_printf_float+0xba>
 80080da:	4653      	mov	r3, sl
 80080dc:	4642      	mov	r2, r8
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	d1e9      	bne.n	80080bc <_printf_float+0x358>
 80080e8:	e699      	b.n	8007e1e <_printf_float+0xba>
 80080ea:	2301      	movs	r3, #1
 80080ec:	464a      	mov	r2, r9
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae92 	beq.w	8007e1e <_printf_float+0xba>
 80080fa:	f108 0801 	add.w	r8, r8, #1
 80080fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	eba3 030a 	sub.w	r3, r3, sl
 8008108:	4543      	cmp	r3, r8
 800810a:	dcee      	bgt.n	80080ea <_printf_float+0x386>
 800810c:	e74a      	b.n	8007fa4 <_printf_float+0x240>
 800810e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008110:	2a01      	cmp	r2, #1
 8008112:	dc01      	bgt.n	8008118 <_printf_float+0x3b4>
 8008114:	07db      	lsls	r3, r3, #31
 8008116:	d53a      	bpl.n	800818e <_printf_float+0x42a>
 8008118:	2301      	movs	r3, #1
 800811a:	4642      	mov	r2, r8
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f ae7b 	beq.w	8007e1e <_printf_float+0xba>
 8008128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f108 0801 	add.w	r8, r8, #1
 8008138:	f43f ae71 	beq.w	8007e1e <_printf_float+0xba>
 800813c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813e:	2200      	movs	r2, #0
 8008140:	f103 3aff 	add.w	sl, r3, #4294967295
 8008144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008148:	2300      	movs	r3, #0
 800814a:	f7f8 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800814e:	b9c8      	cbnz	r0, 8008184 <_printf_float+0x420>
 8008150:	4653      	mov	r3, sl
 8008152:	4642      	mov	r2, r8
 8008154:	4631      	mov	r1, r6
 8008156:	4628      	mov	r0, r5
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	d10e      	bne.n	800817c <_printf_float+0x418>
 800815e:	e65e      	b.n	8007e1e <_printf_float+0xba>
 8008160:	2301      	movs	r3, #1
 8008162:	4652      	mov	r2, sl
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f ae57 	beq.w	8007e1e <_printf_float+0xba>
 8008170:	f108 0801 	add.w	r8, r8, #1
 8008174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008176:	3b01      	subs	r3, #1
 8008178:	4543      	cmp	r3, r8
 800817a:	dcf1      	bgt.n	8008160 <_printf_float+0x3fc>
 800817c:	464b      	mov	r3, r9
 800817e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008182:	e6de      	b.n	8007f42 <_printf_float+0x1de>
 8008184:	f04f 0800 	mov.w	r8, #0
 8008188:	f104 0a1a 	add.w	sl, r4, #26
 800818c:	e7f2      	b.n	8008174 <_printf_float+0x410>
 800818e:	2301      	movs	r3, #1
 8008190:	e7df      	b.n	8008152 <_printf_float+0x3ee>
 8008192:	2301      	movs	r3, #1
 8008194:	464a      	mov	r2, r9
 8008196:	4631      	mov	r1, r6
 8008198:	4628      	mov	r0, r5
 800819a:	47b8      	blx	r7
 800819c:	3001      	adds	r0, #1
 800819e:	f43f ae3e 	beq.w	8007e1e <_printf_float+0xba>
 80081a2:	f108 0801 	add.w	r8, r8, #1
 80081a6:	68e3      	ldr	r3, [r4, #12]
 80081a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081aa:	1a9b      	subs	r3, r3, r2
 80081ac:	4543      	cmp	r3, r8
 80081ae:	dcf0      	bgt.n	8008192 <_printf_float+0x42e>
 80081b0:	e6fc      	b.n	8007fac <_printf_float+0x248>
 80081b2:	f04f 0800 	mov.w	r8, #0
 80081b6:	f104 0919 	add.w	r9, r4, #25
 80081ba:	e7f4      	b.n	80081a6 <_printf_float+0x442>
 80081bc:	2900      	cmp	r1, #0
 80081be:	f43f ae8b 	beq.w	8007ed8 <_printf_float+0x174>
 80081c2:	2300      	movs	r3, #0
 80081c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80081c8:	ab09      	add	r3, sp, #36	; 0x24
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	ec49 8b10 	vmov	d0, r8, r9
 80081d0:	6022      	str	r2, [r4, #0]
 80081d2:	f8cd a004 	str.w	sl, [sp, #4]
 80081d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081da:	4628      	mov	r0, r5
 80081dc:	f7ff fd2e 	bl	8007c3c <__cvt>
 80081e0:	4680      	mov	r8, r0
 80081e2:	e648      	b.n	8007e76 <_printf_float+0x112>

080081e4 <_printf_common>:
 80081e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	4691      	mov	r9, r2
 80081ea:	461f      	mov	r7, r3
 80081ec:	688a      	ldr	r2, [r1, #8]
 80081ee:	690b      	ldr	r3, [r1, #16]
 80081f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081f4:	4293      	cmp	r3, r2
 80081f6:	bfb8      	it	lt
 80081f8:	4613      	movlt	r3, r2
 80081fa:	f8c9 3000 	str.w	r3, [r9]
 80081fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008202:	4606      	mov	r6, r0
 8008204:	460c      	mov	r4, r1
 8008206:	b112      	cbz	r2, 800820e <_printf_common+0x2a>
 8008208:	3301      	adds	r3, #1
 800820a:	f8c9 3000 	str.w	r3, [r9]
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	0699      	lsls	r1, r3, #26
 8008212:	bf42      	ittt	mi
 8008214:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008218:	3302      	addmi	r3, #2
 800821a:	f8c9 3000 	strmi.w	r3, [r9]
 800821e:	6825      	ldr	r5, [r4, #0]
 8008220:	f015 0506 	ands.w	r5, r5, #6
 8008224:	d107      	bne.n	8008236 <_printf_common+0x52>
 8008226:	f104 0a19 	add.w	sl, r4, #25
 800822a:	68e3      	ldr	r3, [r4, #12]
 800822c:	f8d9 2000 	ldr.w	r2, [r9]
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	42ab      	cmp	r3, r5
 8008234:	dc28      	bgt.n	8008288 <_printf_common+0xa4>
 8008236:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	3300      	adds	r3, #0
 800823e:	bf18      	it	ne
 8008240:	2301      	movne	r3, #1
 8008242:	0692      	lsls	r2, r2, #26
 8008244:	d42d      	bmi.n	80082a2 <_printf_common+0xbe>
 8008246:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800824a:	4639      	mov	r1, r7
 800824c:	4630      	mov	r0, r6
 800824e:	47c0      	blx	r8
 8008250:	3001      	adds	r0, #1
 8008252:	d020      	beq.n	8008296 <_printf_common+0xb2>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	68e5      	ldr	r5, [r4, #12]
 8008258:	f8d9 2000 	ldr.w	r2, [r9]
 800825c:	f003 0306 	and.w	r3, r3, #6
 8008260:	2b04      	cmp	r3, #4
 8008262:	bf08      	it	eq
 8008264:	1aad      	subeq	r5, r5, r2
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	6922      	ldr	r2, [r4, #16]
 800826a:	bf0c      	ite	eq
 800826c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008270:	2500      	movne	r5, #0
 8008272:	4293      	cmp	r3, r2
 8008274:	bfc4      	itt	gt
 8008276:	1a9b      	subgt	r3, r3, r2
 8008278:	18ed      	addgt	r5, r5, r3
 800827a:	f04f 0900 	mov.w	r9, #0
 800827e:	341a      	adds	r4, #26
 8008280:	454d      	cmp	r5, r9
 8008282:	d11a      	bne.n	80082ba <_printf_common+0xd6>
 8008284:	2000      	movs	r0, #0
 8008286:	e008      	b.n	800829a <_printf_common+0xb6>
 8008288:	2301      	movs	r3, #1
 800828a:	4652      	mov	r2, sl
 800828c:	4639      	mov	r1, r7
 800828e:	4630      	mov	r0, r6
 8008290:	47c0      	blx	r8
 8008292:	3001      	adds	r0, #1
 8008294:	d103      	bne.n	800829e <_printf_common+0xba>
 8008296:	f04f 30ff 	mov.w	r0, #4294967295
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	3501      	adds	r5, #1
 80082a0:	e7c3      	b.n	800822a <_printf_common+0x46>
 80082a2:	18e1      	adds	r1, r4, r3
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	2030      	movs	r0, #48	; 0x30
 80082a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082ac:	4422      	add	r2, r4
 80082ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082b6:	3302      	adds	r3, #2
 80082b8:	e7c5      	b.n	8008246 <_printf_common+0x62>
 80082ba:	2301      	movs	r3, #1
 80082bc:	4622      	mov	r2, r4
 80082be:	4639      	mov	r1, r7
 80082c0:	4630      	mov	r0, r6
 80082c2:	47c0      	blx	r8
 80082c4:	3001      	adds	r0, #1
 80082c6:	d0e6      	beq.n	8008296 <_printf_common+0xb2>
 80082c8:	f109 0901 	add.w	r9, r9, #1
 80082cc:	e7d8      	b.n	8008280 <_printf_common+0x9c>
	...

080082d0 <_printf_i>:
 80082d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082d8:	460c      	mov	r4, r1
 80082da:	7e09      	ldrb	r1, [r1, #24]
 80082dc:	b085      	sub	sp, #20
 80082de:	296e      	cmp	r1, #110	; 0x6e
 80082e0:	4617      	mov	r7, r2
 80082e2:	4606      	mov	r6, r0
 80082e4:	4698      	mov	r8, r3
 80082e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e8:	f000 80b3 	beq.w	8008452 <_printf_i+0x182>
 80082ec:	d822      	bhi.n	8008334 <_printf_i+0x64>
 80082ee:	2963      	cmp	r1, #99	; 0x63
 80082f0:	d036      	beq.n	8008360 <_printf_i+0x90>
 80082f2:	d80a      	bhi.n	800830a <_printf_i+0x3a>
 80082f4:	2900      	cmp	r1, #0
 80082f6:	f000 80b9 	beq.w	800846c <_printf_i+0x19c>
 80082fa:	2958      	cmp	r1, #88	; 0x58
 80082fc:	f000 8083 	beq.w	8008406 <_printf_i+0x136>
 8008300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008304:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008308:	e032      	b.n	8008370 <_printf_i+0xa0>
 800830a:	2964      	cmp	r1, #100	; 0x64
 800830c:	d001      	beq.n	8008312 <_printf_i+0x42>
 800830e:	2969      	cmp	r1, #105	; 0x69
 8008310:	d1f6      	bne.n	8008300 <_printf_i+0x30>
 8008312:	6820      	ldr	r0, [r4, #0]
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	0605      	lsls	r5, r0, #24
 8008318:	f103 0104 	add.w	r1, r3, #4
 800831c:	d52a      	bpl.n	8008374 <_printf_i+0xa4>
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6011      	str	r1, [r2, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	da03      	bge.n	800832e <_printf_i+0x5e>
 8008326:	222d      	movs	r2, #45	; 0x2d
 8008328:	425b      	negs	r3, r3
 800832a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800832e:	486f      	ldr	r0, [pc, #444]	; (80084ec <_printf_i+0x21c>)
 8008330:	220a      	movs	r2, #10
 8008332:	e039      	b.n	80083a8 <_printf_i+0xd8>
 8008334:	2973      	cmp	r1, #115	; 0x73
 8008336:	f000 809d 	beq.w	8008474 <_printf_i+0x1a4>
 800833a:	d808      	bhi.n	800834e <_printf_i+0x7e>
 800833c:	296f      	cmp	r1, #111	; 0x6f
 800833e:	d020      	beq.n	8008382 <_printf_i+0xb2>
 8008340:	2970      	cmp	r1, #112	; 0x70
 8008342:	d1dd      	bne.n	8008300 <_printf_i+0x30>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	f043 0320 	orr.w	r3, r3, #32
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	e003      	b.n	8008356 <_printf_i+0x86>
 800834e:	2975      	cmp	r1, #117	; 0x75
 8008350:	d017      	beq.n	8008382 <_printf_i+0xb2>
 8008352:	2978      	cmp	r1, #120	; 0x78
 8008354:	d1d4      	bne.n	8008300 <_printf_i+0x30>
 8008356:	2378      	movs	r3, #120	; 0x78
 8008358:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800835c:	4864      	ldr	r0, [pc, #400]	; (80084f0 <_printf_i+0x220>)
 800835e:	e055      	b.n	800840c <_printf_i+0x13c>
 8008360:	6813      	ldr	r3, [r2, #0]
 8008362:	1d19      	adds	r1, r3, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6011      	str	r1, [r2, #0]
 8008368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800836c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008370:	2301      	movs	r3, #1
 8008372:	e08c      	b.n	800848e <_printf_i+0x1be>
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6011      	str	r1, [r2, #0]
 8008378:	f010 0f40 	tst.w	r0, #64	; 0x40
 800837c:	bf18      	it	ne
 800837e:	b21b      	sxthne	r3, r3
 8008380:	e7cf      	b.n	8008322 <_printf_i+0x52>
 8008382:	6813      	ldr	r3, [r2, #0]
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	1d18      	adds	r0, r3, #4
 8008388:	6010      	str	r0, [r2, #0]
 800838a:	0628      	lsls	r0, r5, #24
 800838c:	d501      	bpl.n	8008392 <_printf_i+0xc2>
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	e002      	b.n	8008398 <_printf_i+0xc8>
 8008392:	0668      	lsls	r0, r5, #25
 8008394:	d5fb      	bpl.n	800838e <_printf_i+0xbe>
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	4854      	ldr	r0, [pc, #336]	; (80084ec <_printf_i+0x21c>)
 800839a:	296f      	cmp	r1, #111	; 0x6f
 800839c:	bf14      	ite	ne
 800839e:	220a      	movne	r2, #10
 80083a0:	2208      	moveq	r2, #8
 80083a2:	2100      	movs	r1, #0
 80083a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083a8:	6865      	ldr	r5, [r4, #4]
 80083aa:	60a5      	str	r5, [r4, #8]
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	f2c0 8095 	blt.w	80084dc <_printf_i+0x20c>
 80083b2:	6821      	ldr	r1, [r4, #0]
 80083b4:	f021 0104 	bic.w	r1, r1, #4
 80083b8:	6021      	str	r1, [r4, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d13d      	bne.n	800843a <_printf_i+0x16a>
 80083be:	2d00      	cmp	r5, #0
 80083c0:	f040 808e 	bne.w	80084e0 <_printf_i+0x210>
 80083c4:	4665      	mov	r5, ip
 80083c6:	2a08      	cmp	r2, #8
 80083c8:	d10b      	bne.n	80083e2 <_printf_i+0x112>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	07db      	lsls	r3, r3, #31
 80083ce:	d508      	bpl.n	80083e2 <_printf_i+0x112>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	6862      	ldr	r2, [r4, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	bfde      	ittt	le
 80083d8:	2330      	movle	r3, #48	; 0x30
 80083da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083e2:	ebac 0305 	sub.w	r3, ip, r5
 80083e6:	6123      	str	r3, [r4, #16]
 80083e8:	f8cd 8000 	str.w	r8, [sp]
 80083ec:	463b      	mov	r3, r7
 80083ee:	aa03      	add	r2, sp, #12
 80083f0:	4621      	mov	r1, r4
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff fef6 	bl	80081e4 <_printf_common>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d14d      	bne.n	8008498 <_printf_i+0x1c8>
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008400:	b005      	add	sp, #20
 8008402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008406:	4839      	ldr	r0, [pc, #228]	; (80084ec <_printf_i+0x21c>)
 8008408:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800840c:	6813      	ldr	r3, [r2, #0]
 800840e:	6821      	ldr	r1, [r4, #0]
 8008410:	1d1d      	adds	r5, r3, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6015      	str	r5, [r2, #0]
 8008416:	060a      	lsls	r2, r1, #24
 8008418:	d50b      	bpl.n	8008432 <_printf_i+0x162>
 800841a:	07ca      	lsls	r2, r1, #31
 800841c:	bf44      	itt	mi
 800841e:	f041 0120 	orrmi.w	r1, r1, #32
 8008422:	6021      	strmi	r1, [r4, #0]
 8008424:	b91b      	cbnz	r3, 800842e <_printf_i+0x15e>
 8008426:	6822      	ldr	r2, [r4, #0]
 8008428:	f022 0220 	bic.w	r2, r2, #32
 800842c:	6022      	str	r2, [r4, #0]
 800842e:	2210      	movs	r2, #16
 8008430:	e7b7      	b.n	80083a2 <_printf_i+0xd2>
 8008432:	064d      	lsls	r5, r1, #25
 8008434:	bf48      	it	mi
 8008436:	b29b      	uxthmi	r3, r3
 8008438:	e7ef      	b.n	800841a <_printf_i+0x14a>
 800843a:	4665      	mov	r5, ip
 800843c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008440:	fb02 3311 	mls	r3, r2, r1, r3
 8008444:	5cc3      	ldrb	r3, [r0, r3]
 8008446:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800844a:	460b      	mov	r3, r1
 800844c:	2900      	cmp	r1, #0
 800844e:	d1f5      	bne.n	800843c <_printf_i+0x16c>
 8008450:	e7b9      	b.n	80083c6 <_printf_i+0xf6>
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	6825      	ldr	r5, [r4, #0]
 8008456:	6961      	ldr	r1, [r4, #20]
 8008458:	1d18      	adds	r0, r3, #4
 800845a:	6010      	str	r0, [r2, #0]
 800845c:	0628      	lsls	r0, r5, #24
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	d501      	bpl.n	8008466 <_printf_i+0x196>
 8008462:	6019      	str	r1, [r3, #0]
 8008464:	e002      	b.n	800846c <_printf_i+0x19c>
 8008466:	066a      	lsls	r2, r5, #25
 8008468:	d5fb      	bpl.n	8008462 <_printf_i+0x192>
 800846a:	8019      	strh	r1, [r3, #0]
 800846c:	2300      	movs	r3, #0
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	4665      	mov	r5, ip
 8008472:	e7b9      	b.n	80083e8 <_printf_i+0x118>
 8008474:	6813      	ldr	r3, [r2, #0]
 8008476:	1d19      	adds	r1, r3, #4
 8008478:	6011      	str	r1, [r2, #0]
 800847a:	681d      	ldr	r5, [r3, #0]
 800847c:	6862      	ldr	r2, [r4, #4]
 800847e:	2100      	movs	r1, #0
 8008480:	4628      	mov	r0, r5
 8008482:	f7f7 fead 	bl	80001e0 <memchr>
 8008486:	b108      	cbz	r0, 800848c <_printf_i+0x1bc>
 8008488:	1b40      	subs	r0, r0, r5
 800848a:	6060      	str	r0, [r4, #4]
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	6123      	str	r3, [r4, #16]
 8008490:	2300      	movs	r3, #0
 8008492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008496:	e7a7      	b.n	80083e8 <_printf_i+0x118>
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	462a      	mov	r2, r5
 800849c:	4639      	mov	r1, r7
 800849e:	4630      	mov	r0, r6
 80084a0:	47c0      	blx	r8
 80084a2:	3001      	adds	r0, #1
 80084a4:	d0aa      	beq.n	80083fc <_printf_i+0x12c>
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	079b      	lsls	r3, r3, #30
 80084aa:	d413      	bmi.n	80084d4 <_printf_i+0x204>
 80084ac:	68e0      	ldr	r0, [r4, #12]
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	4298      	cmp	r0, r3
 80084b2:	bfb8      	it	lt
 80084b4:	4618      	movlt	r0, r3
 80084b6:	e7a3      	b.n	8008400 <_printf_i+0x130>
 80084b8:	2301      	movs	r3, #1
 80084ba:	464a      	mov	r2, r9
 80084bc:	4639      	mov	r1, r7
 80084be:	4630      	mov	r0, r6
 80084c0:	47c0      	blx	r8
 80084c2:	3001      	adds	r0, #1
 80084c4:	d09a      	beq.n	80083fc <_printf_i+0x12c>
 80084c6:	3501      	adds	r5, #1
 80084c8:	68e3      	ldr	r3, [r4, #12]
 80084ca:	9a03      	ldr	r2, [sp, #12]
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	42ab      	cmp	r3, r5
 80084d0:	dcf2      	bgt.n	80084b8 <_printf_i+0x1e8>
 80084d2:	e7eb      	b.n	80084ac <_printf_i+0x1dc>
 80084d4:	2500      	movs	r5, #0
 80084d6:	f104 0919 	add.w	r9, r4, #25
 80084da:	e7f5      	b.n	80084c8 <_printf_i+0x1f8>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1ac      	bne.n	800843a <_printf_i+0x16a>
 80084e0:	7803      	ldrb	r3, [r0, #0]
 80084e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084ea:	e76c      	b.n	80083c6 <_printf_i+0xf6>
 80084ec:	0800c096 	.word	0x0800c096
 80084f0:	0800c0a7 	.word	0x0800c0a7

080084f4 <_scanf_float>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	469a      	mov	sl, r3
 80084fa:	688b      	ldr	r3, [r1, #8]
 80084fc:	4616      	mov	r6, r2
 80084fe:	1e5a      	subs	r2, r3, #1
 8008500:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008504:	b087      	sub	sp, #28
 8008506:	bf83      	ittte	hi
 8008508:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800850c:	189b      	addhi	r3, r3, r2
 800850e:	9301      	strhi	r3, [sp, #4]
 8008510:	2300      	movls	r3, #0
 8008512:	bf86      	itte	hi
 8008514:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008518:	608b      	strhi	r3, [r1, #8]
 800851a:	9301      	strls	r3, [sp, #4]
 800851c:	680b      	ldr	r3, [r1, #0]
 800851e:	4688      	mov	r8, r1
 8008520:	f04f 0b00 	mov.w	fp, #0
 8008524:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008528:	f848 3b1c 	str.w	r3, [r8], #28
 800852c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008530:	4607      	mov	r7, r0
 8008532:	460c      	mov	r4, r1
 8008534:	4645      	mov	r5, r8
 8008536:	465a      	mov	r2, fp
 8008538:	46d9      	mov	r9, fp
 800853a:	f8cd b008 	str.w	fp, [sp, #8]
 800853e:	68a1      	ldr	r1, [r4, #8]
 8008540:	b181      	cbz	r1, 8008564 <_scanf_float+0x70>
 8008542:	6833      	ldr	r3, [r6, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	2b49      	cmp	r3, #73	; 0x49
 8008548:	d071      	beq.n	800862e <_scanf_float+0x13a>
 800854a:	d84d      	bhi.n	80085e8 <_scanf_float+0xf4>
 800854c:	2b39      	cmp	r3, #57	; 0x39
 800854e:	d840      	bhi.n	80085d2 <_scanf_float+0xde>
 8008550:	2b31      	cmp	r3, #49	; 0x31
 8008552:	f080 8088 	bcs.w	8008666 <_scanf_float+0x172>
 8008556:	2b2d      	cmp	r3, #45	; 0x2d
 8008558:	f000 8090 	beq.w	800867c <_scanf_float+0x188>
 800855c:	d815      	bhi.n	800858a <_scanf_float+0x96>
 800855e:	2b2b      	cmp	r3, #43	; 0x2b
 8008560:	f000 808c 	beq.w	800867c <_scanf_float+0x188>
 8008564:	f1b9 0f00 	cmp.w	r9, #0
 8008568:	d003      	beq.n	8008572 <_scanf_float+0x7e>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	3a01      	subs	r2, #1
 8008574:	2a01      	cmp	r2, #1
 8008576:	f200 80ea 	bhi.w	800874e <_scanf_float+0x25a>
 800857a:	4545      	cmp	r5, r8
 800857c:	f200 80dc 	bhi.w	8008738 <_scanf_float+0x244>
 8008580:	2601      	movs	r6, #1
 8008582:	4630      	mov	r0, r6
 8008584:	b007      	add	sp, #28
 8008586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858a:	2b2e      	cmp	r3, #46	; 0x2e
 800858c:	f000 809f 	beq.w	80086ce <_scanf_float+0x1da>
 8008590:	2b30      	cmp	r3, #48	; 0x30
 8008592:	d1e7      	bne.n	8008564 <_scanf_float+0x70>
 8008594:	6820      	ldr	r0, [r4, #0]
 8008596:	f410 7f80 	tst.w	r0, #256	; 0x100
 800859a:	d064      	beq.n	8008666 <_scanf_float+0x172>
 800859c:	9b01      	ldr	r3, [sp, #4]
 800859e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80085a2:	6020      	str	r0, [r4, #0]
 80085a4:	f109 0901 	add.w	r9, r9, #1
 80085a8:	b11b      	cbz	r3, 80085b2 <_scanf_float+0xbe>
 80085aa:	3b01      	subs	r3, #1
 80085ac:	3101      	adds	r1, #1
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	60a1      	str	r1, [r4, #8]
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	3301      	adds	r3, #1
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	6873      	ldr	r3, [r6, #4]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	6073      	str	r3, [r6, #4]
 80085c6:	f340 80ac 	ble.w	8008722 <_scanf_float+0x22e>
 80085ca:	6833      	ldr	r3, [r6, #0]
 80085cc:	3301      	adds	r3, #1
 80085ce:	6033      	str	r3, [r6, #0]
 80085d0:	e7b5      	b.n	800853e <_scanf_float+0x4a>
 80085d2:	2b45      	cmp	r3, #69	; 0x45
 80085d4:	f000 8085 	beq.w	80086e2 <_scanf_float+0x1ee>
 80085d8:	2b46      	cmp	r3, #70	; 0x46
 80085da:	d06a      	beq.n	80086b2 <_scanf_float+0x1be>
 80085dc:	2b41      	cmp	r3, #65	; 0x41
 80085de:	d1c1      	bne.n	8008564 <_scanf_float+0x70>
 80085e0:	2a01      	cmp	r2, #1
 80085e2:	d1bf      	bne.n	8008564 <_scanf_float+0x70>
 80085e4:	2202      	movs	r2, #2
 80085e6:	e046      	b.n	8008676 <_scanf_float+0x182>
 80085e8:	2b65      	cmp	r3, #101	; 0x65
 80085ea:	d07a      	beq.n	80086e2 <_scanf_float+0x1ee>
 80085ec:	d818      	bhi.n	8008620 <_scanf_float+0x12c>
 80085ee:	2b54      	cmp	r3, #84	; 0x54
 80085f0:	d066      	beq.n	80086c0 <_scanf_float+0x1cc>
 80085f2:	d811      	bhi.n	8008618 <_scanf_float+0x124>
 80085f4:	2b4e      	cmp	r3, #78	; 0x4e
 80085f6:	d1b5      	bne.n	8008564 <_scanf_float+0x70>
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	d146      	bne.n	800868a <_scanf_float+0x196>
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	d145      	bne.n	800868e <_scanf_float+0x19a>
 8008602:	6821      	ldr	r1, [r4, #0]
 8008604:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008608:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800860c:	d13f      	bne.n	800868e <_scanf_float+0x19a>
 800860e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008612:	6021      	str	r1, [r4, #0]
 8008614:	2201      	movs	r2, #1
 8008616:	e02e      	b.n	8008676 <_scanf_float+0x182>
 8008618:	2b59      	cmp	r3, #89	; 0x59
 800861a:	d01e      	beq.n	800865a <_scanf_float+0x166>
 800861c:	2b61      	cmp	r3, #97	; 0x61
 800861e:	e7de      	b.n	80085de <_scanf_float+0xea>
 8008620:	2b6e      	cmp	r3, #110	; 0x6e
 8008622:	d0e9      	beq.n	80085f8 <_scanf_float+0x104>
 8008624:	d815      	bhi.n	8008652 <_scanf_float+0x15e>
 8008626:	2b66      	cmp	r3, #102	; 0x66
 8008628:	d043      	beq.n	80086b2 <_scanf_float+0x1be>
 800862a:	2b69      	cmp	r3, #105	; 0x69
 800862c:	d19a      	bne.n	8008564 <_scanf_float+0x70>
 800862e:	f1bb 0f00 	cmp.w	fp, #0
 8008632:	d138      	bne.n	80086a6 <_scanf_float+0x1b2>
 8008634:	f1b9 0f00 	cmp.w	r9, #0
 8008638:	d197      	bne.n	800856a <_scanf_float+0x76>
 800863a:	6821      	ldr	r1, [r4, #0]
 800863c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008640:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008644:	d195      	bne.n	8008572 <_scanf_float+0x7e>
 8008646:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800864a:	6021      	str	r1, [r4, #0]
 800864c:	f04f 0b01 	mov.w	fp, #1
 8008650:	e011      	b.n	8008676 <_scanf_float+0x182>
 8008652:	2b74      	cmp	r3, #116	; 0x74
 8008654:	d034      	beq.n	80086c0 <_scanf_float+0x1cc>
 8008656:	2b79      	cmp	r3, #121	; 0x79
 8008658:	d184      	bne.n	8008564 <_scanf_float+0x70>
 800865a:	f1bb 0f07 	cmp.w	fp, #7
 800865e:	d181      	bne.n	8008564 <_scanf_float+0x70>
 8008660:	f04f 0b08 	mov.w	fp, #8
 8008664:	e007      	b.n	8008676 <_scanf_float+0x182>
 8008666:	eb12 0f0b 	cmn.w	r2, fp
 800866a:	f47f af7b 	bne.w	8008564 <_scanf_float+0x70>
 800866e:	6821      	ldr	r1, [r4, #0]
 8008670:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008674:	6021      	str	r1, [r4, #0]
 8008676:	702b      	strb	r3, [r5, #0]
 8008678:	3501      	adds	r5, #1
 800867a:	e79a      	b.n	80085b2 <_scanf_float+0xbe>
 800867c:	6821      	ldr	r1, [r4, #0]
 800867e:	0608      	lsls	r0, r1, #24
 8008680:	f57f af70 	bpl.w	8008564 <_scanf_float+0x70>
 8008684:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008688:	e7f4      	b.n	8008674 <_scanf_float+0x180>
 800868a:	2a02      	cmp	r2, #2
 800868c:	d047      	beq.n	800871e <_scanf_float+0x22a>
 800868e:	f1bb 0f01 	cmp.w	fp, #1
 8008692:	d003      	beq.n	800869c <_scanf_float+0x1a8>
 8008694:	f1bb 0f04 	cmp.w	fp, #4
 8008698:	f47f af64 	bne.w	8008564 <_scanf_float+0x70>
 800869c:	f10b 0b01 	add.w	fp, fp, #1
 80086a0:	fa5f fb8b 	uxtb.w	fp, fp
 80086a4:	e7e7      	b.n	8008676 <_scanf_float+0x182>
 80086a6:	f1bb 0f03 	cmp.w	fp, #3
 80086aa:	d0f7      	beq.n	800869c <_scanf_float+0x1a8>
 80086ac:	f1bb 0f05 	cmp.w	fp, #5
 80086b0:	e7f2      	b.n	8008698 <_scanf_float+0x1a4>
 80086b2:	f1bb 0f02 	cmp.w	fp, #2
 80086b6:	f47f af55 	bne.w	8008564 <_scanf_float+0x70>
 80086ba:	f04f 0b03 	mov.w	fp, #3
 80086be:	e7da      	b.n	8008676 <_scanf_float+0x182>
 80086c0:	f1bb 0f06 	cmp.w	fp, #6
 80086c4:	f47f af4e 	bne.w	8008564 <_scanf_float+0x70>
 80086c8:	f04f 0b07 	mov.w	fp, #7
 80086cc:	e7d3      	b.n	8008676 <_scanf_float+0x182>
 80086ce:	6821      	ldr	r1, [r4, #0]
 80086d0:	0588      	lsls	r0, r1, #22
 80086d2:	f57f af47 	bpl.w	8008564 <_scanf_float+0x70>
 80086d6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80086da:	6021      	str	r1, [r4, #0]
 80086dc:	f8cd 9008 	str.w	r9, [sp, #8]
 80086e0:	e7c9      	b.n	8008676 <_scanf_float+0x182>
 80086e2:	6821      	ldr	r1, [r4, #0]
 80086e4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80086e8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80086ec:	d006      	beq.n	80086fc <_scanf_float+0x208>
 80086ee:	0548      	lsls	r0, r1, #21
 80086f0:	f57f af38 	bpl.w	8008564 <_scanf_float+0x70>
 80086f4:	f1b9 0f00 	cmp.w	r9, #0
 80086f8:	f43f af3b 	beq.w	8008572 <_scanf_float+0x7e>
 80086fc:	0588      	lsls	r0, r1, #22
 80086fe:	bf58      	it	pl
 8008700:	9802      	ldrpl	r0, [sp, #8]
 8008702:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008706:	bf58      	it	pl
 8008708:	eba9 0000 	subpl.w	r0, r9, r0
 800870c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008710:	bf58      	it	pl
 8008712:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008716:	6021      	str	r1, [r4, #0]
 8008718:	f04f 0900 	mov.w	r9, #0
 800871c:	e7ab      	b.n	8008676 <_scanf_float+0x182>
 800871e:	2203      	movs	r2, #3
 8008720:	e7a9      	b.n	8008676 <_scanf_float+0x182>
 8008722:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008726:	9205      	str	r2, [sp, #20]
 8008728:	4631      	mov	r1, r6
 800872a:	4638      	mov	r0, r7
 800872c:	4798      	blx	r3
 800872e:	9a05      	ldr	r2, [sp, #20]
 8008730:	2800      	cmp	r0, #0
 8008732:	f43f af04 	beq.w	800853e <_scanf_float+0x4a>
 8008736:	e715      	b.n	8008564 <_scanf_float+0x70>
 8008738:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800873c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008740:	4632      	mov	r2, r6
 8008742:	4638      	mov	r0, r7
 8008744:	4798      	blx	r3
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	3b01      	subs	r3, #1
 800874a:	6123      	str	r3, [r4, #16]
 800874c:	e715      	b.n	800857a <_scanf_float+0x86>
 800874e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008752:	2b06      	cmp	r3, #6
 8008754:	d80a      	bhi.n	800876c <_scanf_float+0x278>
 8008756:	f1bb 0f02 	cmp.w	fp, #2
 800875a:	d968      	bls.n	800882e <_scanf_float+0x33a>
 800875c:	f1ab 0b03 	sub.w	fp, fp, #3
 8008760:	fa5f fb8b 	uxtb.w	fp, fp
 8008764:	eba5 0b0b 	sub.w	fp, r5, fp
 8008768:	455d      	cmp	r5, fp
 800876a:	d14b      	bne.n	8008804 <_scanf_float+0x310>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	05da      	lsls	r2, r3, #23
 8008770:	d51f      	bpl.n	80087b2 <_scanf_float+0x2be>
 8008772:	055b      	lsls	r3, r3, #21
 8008774:	d468      	bmi.n	8008848 <_scanf_float+0x354>
 8008776:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	2965      	cmp	r1, #101	; 0x65
 800877e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008782:	f105 3bff 	add.w	fp, r5, #4294967295
 8008786:	6123      	str	r3, [r4, #16]
 8008788:	d00d      	beq.n	80087a6 <_scanf_float+0x2b2>
 800878a:	2945      	cmp	r1, #69	; 0x45
 800878c:	d00b      	beq.n	80087a6 <_scanf_float+0x2b2>
 800878e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008792:	4632      	mov	r2, r6
 8008794:	4638      	mov	r0, r7
 8008796:	4798      	blx	r3
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800879e:	3b01      	subs	r3, #1
 80087a0:	f1a5 0b02 	sub.w	fp, r5, #2
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087aa:	4632      	mov	r2, r6
 80087ac:	4638      	mov	r0, r7
 80087ae:	4798      	blx	r3
 80087b0:	465d      	mov	r5, fp
 80087b2:	6826      	ldr	r6, [r4, #0]
 80087b4:	f016 0610 	ands.w	r6, r6, #16
 80087b8:	d17a      	bne.n	80088b0 <_scanf_float+0x3bc>
 80087ba:	702e      	strb	r6, [r5, #0]
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c6:	d142      	bne.n	800884e <_scanf_float+0x35a>
 80087c8:	9b02      	ldr	r3, [sp, #8]
 80087ca:	eba9 0303 	sub.w	r3, r9, r3
 80087ce:	425a      	negs	r2, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d149      	bne.n	8008868 <_scanf_float+0x374>
 80087d4:	2200      	movs	r2, #0
 80087d6:	4641      	mov	r1, r8
 80087d8:	4638      	mov	r0, r7
 80087da:	f000 febd 	bl	8009558 <_strtod_r>
 80087de:	6825      	ldr	r5, [r4, #0]
 80087e0:	f8da 3000 	ldr.w	r3, [sl]
 80087e4:	f015 0f02 	tst.w	r5, #2
 80087e8:	f103 0204 	add.w	r2, r3, #4
 80087ec:	ec59 8b10 	vmov	r8, r9, d0
 80087f0:	f8ca 2000 	str.w	r2, [sl]
 80087f4:	d043      	beq.n	800887e <_scanf_float+0x38a>
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	e9c3 8900 	strd	r8, r9, [r3]
 80087fc:	68e3      	ldr	r3, [r4, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	60e3      	str	r3, [r4, #12]
 8008802:	e6be      	b.n	8008582 <_scanf_float+0x8e>
 8008804:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008808:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800880c:	4632      	mov	r2, r6
 800880e:	4638      	mov	r0, r7
 8008810:	4798      	blx	r3
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	3b01      	subs	r3, #1
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	e7a6      	b.n	8008768 <_scanf_float+0x274>
 800881a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800881e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008822:	4632      	mov	r2, r6
 8008824:	4638      	mov	r0, r7
 8008826:	4798      	blx	r3
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	3b01      	subs	r3, #1
 800882c:	6123      	str	r3, [r4, #16]
 800882e:	4545      	cmp	r5, r8
 8008830:	d8f3      	bhi.n	800881a <_scanf_float+0x326>
 8008832:	e6a5      	b.n	8008580 <_scanf_float+0x8c>
 8008834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008838:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800883c:	4632      	mov	r2, r6
 800883e:	4638      	mov	r0, r7
 8008840:	4798      	blx	r3
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	3b01      	subs	r3, #1
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	4545      	cmp	r5, r8
 800884a:	d8f3      	bhi.n	8008834 <_scanf_float+0x340>
 800884c:	e698      	b.n	8008580 <_scanf_float+0x8c>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0bf      	beq.n	80087d4 <_scanf_float+0x2e0>
 8008854:	9904      	ldr	r1, [sp, #16]
 8008856:	230a      	movs	r3, #10
 8008858:	4632      	mov	r2, r6
 800885a:	3101      	adds	r1, #1
 800885c:	4638      	mov	r0, r7
 800885e:	f000 ff07 	bl	8009670 <_strtol_r>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	9d04      	ldr	r5, [sp, #16]
 8008866:	1ac2      	subs	r2, r0, r3
 8008868:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800886c:	429d      	cmp	r5, r3
 800886e:	bf28      	it	cs
 8008870:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008874:	490f      	ldr	r1, [pc, #60]	; (80088b4 <_scanf_float+0x3c0>)
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f83c 	bl	80088f4 <siprintf>
 800887c:	e7aa      	b.n	80087d4 <_scanf_float+0x2e0>
 800887e:	f015 0504 	ands.w	r5, r5, #4
 8008882:	d1b8      	bne.n	80087f6 <_scanf_float+0x302>
 8008884:	681f      	ldr	r7, [r3, #0]
 8008886:	ee10 2a10 	vmov	r2, s0
 800888a:	464b      	mov	r3, r9
 800888c:	ee10 0a10 	vmov	r0, s0
 8008890:	4649      	mov	r1, r9
 8008892:	f7f8 f94b 	bl	8000b2c <__aeabi_dcmpun>
 8008896:	b128      	cbz	r0, 80088a4 <_scanf_float+0x3b0>
 8008898:	4628      	mov	r0, r5
 800889a:	f000 f825 	bl	80088e8 <nanf>
 800889e:	ed87 0a00 	vstr	s0, [r7]
 80088a2:	e7ab      	b.n	80087fc <_scanf_float+0x308>
 80088a4:	4640      	mov	r0, r8
 80088a6:	4649      	mov	r1, r9
 80088a8:	f7f8 f99e 	bl	8000be8 <__aeabi_d2f>
 80088ac:	6038      	str	r0, [r7, #0]
 80088ae:	e7a5      	b.n	80087fc <_scanf_float+0x308>
 80088b0:	2600      	movs	r6, #0
 80088b2:	e666      	b.n	8008582 <_scanf_float+0x8e>
 80088b4:	0800c0b8 	.word	0x0800c0b8

080088b8 <iprintf>:
 80088b8:	b40f      	push	{r0, r1, r2, r3}
 80088ba:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <iprintf+0x2c>)
 80088bc:	b513      	push	{r0, r1, r4, lr}
 80088be:	681c      	ldr	r4, [r3, #0]
 80088c0:	b124      	cbz	r4, 80088cc <iprintf+0x14>
 80088c2:	69a3      	ldr	r3, [r4, #24]
 80088c4:	b913      	cbnz	r3, 80088cc <iprintf+0x14>
 80088c6:	4620      	mov	r0, r4
 80088c8:	f001 fd6a 	bl	800a3a0 <__sinit>
 80088cc:	ab05      	add	r3, sp, #20
 80088ce:	9a04      	ldr	r2, [sp, #16]
 80088d0:	68a1      	ldr	r1, [r4, #8]
 80088d2:	9301      	str	r3, [sp, #4]
 80088d4:	4620      	mov	r0, r4
 80088d6:	f002 ff7d 	bl	800b7d4 <_vfiprintf_r>
 80088da:	b002      	add	sp, #8
 80088dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e0:	b004      	add	sp, #16
 80088e2:	4770      	bx	lr
 80088e4:	2000000c 	.word	0x2000000c

080088e8 <nanf>:
 80088e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088f0 <nanf+0x8>
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	7fc00000 	.word	0x7fc00000

080088f4 <siprintf>:
 80088f4:	b40e      	push	{r1, r2, r3}
 80088f6:	b500      	push	{lr}
 80088f8:	b09c      	sub	sp, #112	; 0x70
 80088fa:	ab1d      	add	r3, sp, #116	; 0x74
 80088fc:	9002      	str	r0, [sp, #8]
 80088fe:	9006      	str	r0, [sp, #24]
 8008900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008904:	4809      	ldr	r0, [pc, #36]	; (800892c <siprintf+0x38>)
 8008906:	9107      	str	r1, [sp, #28]
 8008908:	9104      	str	r1, [sp, #16]
 800890a:	4909      	ldr	r1, [pc, #36]	; (8008930 <siprintf+0x3c>)
 800890c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008910:	9105      	str	r1, [sp, #20]
 8008912:	6800      	ldr	r0, [r0, #0]
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	a902      	add	r1, sp, #8
 8008918:	f002 fe3a 	bl	800b590 <_svfiprintf_r>
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	b01c      	add	sp, #112	; 0x70
 8008924:	f85d eb04 	ldr.w	lr, [sp], #4
 8008928:	b003      	add	sp, #12
 800892a:	4770      	bx	lr
 800892c:	2000000c 	.word	0x2000000c
 8008930:	ffff0208 	.word	0xffff0208

08008934 <sulp>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	460d      	mov	r5, r1
 800893a:	ec45 4b10 	vmov	d0, r4, r5
 800893e:	4616      	mov	r6, r2
 8008940:	f002 fbe2 	bl	800b108 <__ulp>
 8008944:	ec51 0b10 	vmov	r0, r1, d0
 8008948:	b17e      	cbz	r6, 800896a <sulp+0x36>
 800894a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800894e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008952:	2b00      	cmp	r3, #0
 8008954:	dd09      	ble.n	800896a <sulp+0x36>
 8008956:	051b      	lsls	r3, r3, #20
 8008958:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800895c:	2400      	movs	r4, #0
 800895e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	f7f7 fe47 	bl	80005f8 <__aeabi_dmul>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	0000      	movs	r0, r0
	...

08008970 <_strtod_l>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	461f      	mov	r7, r3
 8008976:	b0a1      	sub	sp, #132	; 0x84
 8008978:	2300      	movs	r3, #0
 800897a:	4681      	mov	r9, r0
 800897c:	4638      	mov	r0, r7
 800897e:	460e      	mov	r6, r1
 8008980:	9217      	str	r2, [sp, #92]	; 0x5c
 8008982:	931c      	str	r3, [sp, #112]	; 0x70
 8008984:	f002 f8bf 	bl	800ab06 <__localeconv_l>
 8008988:	4680      	mov	r8, r0
 800898a:	6800      	ldr	r0, [r0, #0]
 800898c:	f7f7 fc20 	bl	80001d0 <strlen>
 8008990:	f04f 0a00 	mov.w	sl, #0
 8008994:	4604      	mov	r4, r0
 8008996:	f04f 0b00 	mov.w	fp, #0
 800899a:	961b      	str	r6, [sp, #108]	; 0x6c
 800899c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	2a0d      	cmp	r2, #13
 80089a2:	d832      	bhi.n	8008a0a <_strtod_l+0x9a>
 80089a4:	2a09      	cmp	r2, #9
 80089a6:	d236      	bcs.n	8008a16 <_strtod_l+0xa6>
 80089a8:	2a00      	cmp	r2, #0
 80089aa:	d03e      	beq.n	8008a2a <_strtod_l+0xba>
 80089ac:	2300      	movs	r3, #0
 80089ae:	930d      	str	r3, [sp, #52]	; 0x34
 80089b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80089b2:	782b      	ldrb	r3, [r5, #0]
 80089b4:	2b30      	cmp	r3, #48	; 0x30
 80089b6:	f040 80ac 	bne.w	8008b12 <_strtod_l+0x1a2>
 80089ba:	786b      	ldrb	r3, [r5, #1]
 80089bc:	2b58      	cmp	r3, #88	; 0x58
 80089be:	d001      	beq.n	80089c4 <_strtod_l+0x54>
 80089c0:	2b78      	cmp	r3, #120	; 0x78
 80089c2:	d167      	bne.n	8008a94 <_strtod_l+0x124>
 80089c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	ab1c      	add	r3, sp, #112	; 0x70
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	9702      	str	r7, [sp, #8]
 80089ce:	ab1d      	add	r3, sp, #116	; 0x74
 80089d0:	4a88      	ldr	r2, [pc, #544]	; (8008bf4 <_strtod_l+0x284>)
 80089d2:	a91b      	add	r1, sp, #108	; 0x6c
 80089d4:	4648      	mov	r0, r9
 80089d6:	f001 fdbc 	bl	800a552 <__gethex>
 80089da:	f010 0407 	ands.w	r4, r0, #7
 80089de:	4606      	mov	r6, r0
 80089e0:	d005      	beq.n	80089ee <_strtod_l+0x7e>
 80089e2:	2c06      	cmp	r4, #6
 80089e4:	d12b      	bne.n	8008a3e <_strtod_l+0xce>
 80089e6:	3501      	adds	r5, #1
 80089e8:	2300      	movs	r3, #0
 80089ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80089ec:	930d      	str	r3, [sp, #52]	; 0x34
 80089ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f040 859a 	bne.w	800952a <_strtod_l+0xbba>
 80089f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089f8:	b1e3      	cbz	r3, 8008a34 <_strtod_l+0xc4>
 80089fa:	4652      	mov	r2, sl
 80089fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a00:	ec43 2b10 	vmov	d0, r2, r3
 8008a04:	b021      	add	sp, #132	; 0x84
 8008a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0a:	2a2b      	cmp	r2, #43	; 0x2b
 8008a0c:	d015      	beq.n	8008a3a <_strtod_l+0xca>
 8008a0e:	2a2d      	cmp	r2, #45	; 0x2d
 8008a10:	d004      	beq.n	8008a1c <_strtod_l+0xac>
 8008a12:	2a20      	cmp	r2, #32
 8008a14:	d1ca      	bne.n	80089ac <_strtod_l+0x3c>
 8008a16:	3301      	adds	r3, #1
 8008a18:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a1a:	e7bf      	b.n	800899c <_strtod_l+0x2c>
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	920d      	str	r2, [sp, #52]	; 0x34
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1c2      	bne.n	80089b0 <_strtod_l+0x40>
 8008a2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f040 8579 	bne.w	8009526 <_strtod_l+0xbb6>
 8008a34:	4652      	mov	r2, sl
 8008a36:	465b      	mov	r3, fp
 8008a38:	e7e2      	b.n	8008a00 <_strtod_l+0x90>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	e7ef      	b.n	8008a1e <_strtod_l+0xae>
 8008a3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a40:	b13a      	cbz	r2, 8008a52 <_strtod_l+0xe2>
 8008a42:	2135      	movs	r1, #53	; 0x35
 8008a44:	a81e      	add	r0, sp, #120	; 0x78
 8008a46:	f002 fc57 	bl	800b2f8 <__copybits>
 8008a4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a4c:	4648      	mov	r0, r9
 8008a4e:	f002 f8c4 	bl	800abda <_Bfree>
 8008a52:	3c01      	subs	r4, #1
 8008a54:	2c04      	cmp	r4, #4
 8008a56:	d806      	bhi.n	8008a66 <_strtod_l+0xf6>
 8008a58:	e8df f004 	tbb	[pc, r4]
 8008a5c:	1714030a 	.word	0x1714030a
 8008a60:	0a          	.byte	0x0a
 8008a61:	00          	.byte	0x00
 8008a62:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008a66:	0730      	lsls	r0, r6, #28
 8008a68:	d5c1      	bpl.n	80089ee <_strtod_l+0x7e>
 8008a6a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a6e:	e7be      	b.n	80089ee <_strtod_l+0x7e>
 8008a70:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008a74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a82:	e7f0      	b.n	8008a66 <_strtod_l+0xf6>
 8008a84:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008bf8 <_strtod_l+0x288>
 8008a88:	e7ed      	b.n	8008a66 <_strtod_l+0xf6>
 8008a8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a8e:	f04f 3aff 	mov.w	sl, #4294967295
 8008a92:	e7e8      	b.n	8008a66 <_strtod_l+0xf6>
 8008a94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a9a:	785b      	ldrb	r3, [r3, #1]
 8008a9c:	2b30      	cmp	r3, #48	; 0x30
 8008a9e:	d0f9      	beq.n	8008a94 <_strtod_l+0x124>
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0a4      	beq.n	80089ee <_strtod_l+0x7e>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	2500      	movs	r5, #0
 8008aa8:	9306      	str	r3, [sp, #24]
 8008aaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aac:	9308      	str	r3, [sp, #32]
 8008aae:	9507      	str	r5, [sp, #28]
 8008ab0:	9505      	str	r5, [sp, #20]
 8008ab2:	220a      	movs	r2, #10
 8008ab4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008ab6:	7807      	ldrb	r7, [r0, #0]
 8008ab8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008abc:	b2d9      	uxtb	r1, r3
 8008abe:	2909      	cmp	r1, #9
 8008ac0:	d929      	bls.n	8008b16 <_strtod_l+0x1a6>
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	f8d8 1000 	ldr.w	r1, [r8]
 8008ac8:	f002 ffed 	bl	800baa6 <strncmp>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d031      	beq.n	8008b34 <_strtod_l+0x1c4>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	9c05      	ldr	r4, [sp, #20]
 8008ad4:	9004      	str	r0, [sp, #16]
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	4602      	mov	r2, r0
 8008ada:	2b65      	cmp	r3, #101	; 0x65
 8008adc:	d001      	beq.n	8008ae2 <_strtod_l+0x172>
 8008ade:	2b45      	cmp	r3, #69	; 0x45
 8008ae0:	d114      	bne.n	8008b0c <_strtod_l+0x19c>
 8008ae2:	b924      	cbnz	r4, 8008aee <_strtod_l+0x17e>
 8008ae4:	b910      	cbnz	r0, 8008aec <_strtod_l+0x17c>
 8008ae6:	9b06      	ldr	r3, [sp, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d09e      	beq.n	8008a2a <_strtod_l+0xba>
 8008aec:	2400      	movs	r4, #0
 8008aee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008af0:	1c73      	adds	r3, r6, #1
 8008af2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008af4:	7873      	ldrb	r3, [r6, #1]
 8008af6:	2b2b      	cmp	r3, #43	; 0x2b
 8008af8:	d078      	beq.n	8008bec <_strtod_l+0x27c>
 8008afa:	2b2d      	cmp	r3, #45	; 0x2d
 8008afc:	d070      	beq.n	8008be0 <_strtod_l+0x270>
 8008afe:	f04f 0c00 	mov.w	ip, #0
 8008b02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008b06:	2f09      	cmp	r7, #9
 8008b08:	d97c      	bls.n	8008c04 <_strtod_l+0x294>
 8008b0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8008b0c:	f04f 0e00 	mov.w	lr, #0
 8008b10:	e09a      	b.n	8008c48 <_strtod_l+0x2d8>
 8008b12:	2300      	movs	r3, #0
 8008b14:	e7c7      	b.n	8008aa6 <_strtod_l+0x136>
 8008b16:	9905      	ldr	r1, [sp, #20]
 8008b18:	2908      	cmp	r1, #8
 8008b1a:	bfdd      	ittte	le
 8008b1c:	9907      	ldrle	r1, [sp, #28]
 8008b1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b22:	9307      	strle	r3, [sp, #28]
 8008b24:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008b28:	9b05      	ldr	r3, [sp, #20]
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	9305      	str	r3, [sp, #20]
 8008b30:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b32:	e7bf      	b.n	8008ab4 <_strtod_l+0x144>
 8008b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b36:	191a      	adds	r2, r3, r4
 8008b38:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b3a:	9a05      	ldr	r2, [sp, #20]
 8008b3c:	5d1b      	ldrb	r3, [r3, r4]
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	d037      	beq.n	8008bb2 <_strtod_l+0x242>
 8008b42:	9c05      	ldr	r4, [sp, #20]
 8008b44:	4602      	mov	r2, r0
 8008b46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008b4a:	2909      	cmp	r1, #9
 8008b4c:	d913      	bls.n	8008b76 <_strtod_l+0x206>
 8008b4e:	2101      	movs	r1, #1
 8008b50:	9104      	str	r1, [sp, #16]
 8008b52:	e7c2      	b.n	8008ada <_strtod_l+0x16a>
 8008b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	2b30      	cmp	r3, #48	; 0x30
 8008b60:	d0f8      	beq.n	8008b54 <_strtod_l+0x1e4>
 8008b62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008b66:	2a08      	cmp	r2, #8
 8008b68:	f200 84e4 	bhi.w	8009534 <_strtod_l+0xbc4>
 8008b6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b6e:	9208      	str	r2, [sp, #32]
 8008b70:	4602      	mov	r2, r0
 8008b72:	2000      	movs	r0, #0
 8008b74:	4604      	mov	r4, r0
 8008b76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008b7a:	f100 0101 	add.w	r1, r0, #1
 8008b7e:	d012      	beq.n	8008ba6 <_strtod_l+0x236>
 8008b80:	440a      	add	r2, r1
 8008b82:	eb00 0c04 	add.w	ip, r0, r4
 8008b86:	4621      	mov	r1, r4
 8008b88:	270a      	movs	r7, #10
 8008b8a:	458c      	cmp	ip, r1
 8008b8c:	d113      	bne.n	8008bb6 <_strtod_l+0x246>
 8008b8e:	1821      	adds	r1, r4, r0
 8008b90:	2908      	cmp	r1, #8
 8008b92:	f104 0401 	add.w	r4, r4, #1
 8008b96:	4404      	add	r4, r0
 8008b98:	dc19      	bgt.n	8008bce <_strtod_l+0x25e>
 8008b9a:	9b07      	ldr	r3, [sp, #28]
 8008b9c:	210a      	movs	r1, #10
 8008b9e:	fb01 e303 	mla	r3, r1, r3, lr
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ba8:	1c58      	adds	r0, r3, #1
 8008baa:	901b      	str	r0, [sp, #108]	; 0x6c
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	4608      	mov	r0, r1
 8008bb0:	e7c9      	b.n	8008b46 <_strtod_l+0x1d6>
 8008bb2:	9805      	ldr	r0, [sp, #20]
 8008bb4:	e7d3      	b.n	8008b5e <_strtod_l+0x1ee>
 8008bb6:	2908      	cmp	r1, #8
 8008bb8:	f101 0101 	add.w	r1, r1, #1
 8008bbc:	dc03      	bgt.n	8008bc6 <_strtod_l+0x256>
 8008bbe:	9b07      	ldr	r3, [sp, #28]
 8008bc0:	437b      	muls	r3, r7
 8008bc2:	9307      	str	r3, [sp, #28]
 8008bc4:	e7e1      	b.n	8008b8a <_strtod_l+0x21a>
 8008bc6:	2910      	cmp	r1, #16
 8008bc8:	bfd8      	it	le
 8008bca:	437d      	mulle	r5, r7
 8008bcc:	e7dd      	b.n	8008b8a <_strtod_l+0x21a>
 8008bce:	2c10      	cmp	r4, #16
 8008bd0:	bfdc      	itt	le
 8008bd2:	210a      	movle	r1, #10
 8008bd4:	fb01 e505 	mlale	r5, r1, r5, lr
 8008bd8:	e7e4      	b.n	8008ba4 <_strtod_l+0x234>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	9304      	str	r3, [sp, #16]
 8008bde:	e781      	b.n	8008ae4 <_strtod_l+0x174>
 8008be0:	f04f 0c01 	mov.w	ip, #1
 8008be4:	1cb3      	adds	r3, r6, #2
 8008be6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008be8:	78b3      	ldrb	r3, [r6, #2]
 8008bea:	e78a      	b.n	8008b02 <_strtod_l+0x192>
 8008bec:	f04f 0c00 	mov.w	ip, #0
 8008bf0:	e7f8      	b.n	8008be4 <_strtod_l+0x274>
 8008bf2:	bf00      	nop
 8008bf4:	0800c0c0 	.word	0x0800c0c0
 8008bf8:	7ff00000 	.word	0x7ff00000
 8008bfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bfe:	1c5f      	adds	r7, r3, #1
 8008c00:	971b      	str	r7, [sp, #108]	; 0x6c
 8008c02:	785b      	ldrb	r3, [r3, #1]
 8008c04:	2b30      	cmp	r3, #48	; 0x30
 8008c06:	d0f9      	beq.n	8008bfc <_strtod_l+0x28c>
 8008c08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008c0c:	2f08      	cmp	r7, #8
 8008c0e:	f63f af7d 	bhi.w	8008b0c <_strtod_l+0x19c>
 8008c12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008c16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c18:	930a      	str	r3, [sp, #40]	; 0x28
 8008c1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c1c:	1c5f      	adds	r7, r3, #1
 8008c1e:	971b      	str	r7, [sp, #108]	; 0x6c
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008c26:	f1b8 0f09 	cmp.w	r8, #9
 8008c2a:	d937      	bls.n	8008c9c <_strtod_l+0x32c>
 8008c2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c2e:	1a7f      	subs	r7, r7, r1
 8008c30:	2f08      	cmp	r7, #8
 8008c32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c36:	dc37      	bgt.n	8008ca8 <_strtod_l+0x338>
 8008c38:	45be      	cmp	lr, r7
 8008c3a:	bfa8      	it	ge
 8008c3c:	46be      	movge	lr, r7
 8008c3e:	f1bc 0f00 	cmp.w	ip, #0
 8008c42:	d001      	beq.n	8008c48 <_strtod_l+0x2d8>
 8008c44:	f1ce 0e00 	rsb	lr, lr, #0
 8008c48:	2c00      	cmp	r4, #0
 8008c4a:	d151      	bne.n	8008cf0 <_strtod_l+0x380>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f47f aece 	bne.w	80089ee <_strtod_l+0x7e>
 8008c52:	9a06      	ldr	r2, [sp, #24]
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	f47f aeca 	bne.w	80089ee <_strtod_l+0x7e>
 8008c5a:	9a04      	ldr	r2, [sp, #16]
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	f47f aee4 	bne.w	8008a2a <_strtod_l+0xba>
 8008c62:	2b4e      	cmp	r3, #78	; 0x4e
 8008c64:	d027      	beq.n	8008cb6 <_strtod_l+0x346>
 8008c66:	dc21      	bgt.n	8008cac <_strtod_l+0x33c>
 8008c68:	2b49      	cmp	r3, #73	; 0x49
 8008c6a:	f47f aede 	bne.w	8008a2a <_strtod_l+0xba>
 8008c6e:	49a0      	ldr	r1, [pc, #640]	; (8008ef0 <_strtod_l+0x580>)
 8008c70:	a81b      	add	r0, sp, #108	; 0x6c
 8008c72:	f001 fea1 	bl	800a9b8 <__match>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f43f aed7 	beq.w	8008a2a <_strtod_l+0xba>
 8008c7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c7e:	499d      	ldr	r1, [pc, #628]	; (8008ef4 <_strtod_l+0x584>)
 8008c80:	3b01      	subs	r3, #1
 8008c82:	a81b      	add	r0, sp, #108	; 0x6c
 8008c84:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c86:	f001 fe97 	bl	800a9b8 <__match>
 8008c8a:	b910      	cbnz	r0, 8008c92 <_strtod_l+0x322>
 8008c8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c8e:	3301      	adds	r3, #1
 8008c90:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c92:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008f08 <_strtod_l+0x598>
 8008c96:	f04f 0a00 	mov.w	sl, #0
 8008c9a:	e6a8      	b.n	80089ee <_strtod_l+0x7e>
 8008c9c:	210a      	movs	r1, #10
 8008c9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008ca2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008ca6:	e7b8      	b.n	8008c1a <_strtod_l+0x2aa>
 8008ca8:	46be      	mov	lr, r7
 8008caa:	e7c8      	b.n	8008c3e <_strtod_l+0x2ce>
 8008cac:	2b69      	cmp	r3, #105	; 0x69
 8008cae:	d0de      	beq.n	8008c6e <_strtod_l+0x2fe>
 8008cb0:	2b6e      	cmp	r3, #110	; 0x6e
 8008cb2:	f47f aeba 	bne.w	8008a2a <_strtod_l+0xba>
 8008cb6:	4990      	ldr	r1, [pc, #576]	; (8008ef8 <_strtod_l+0x588>)
 8008cb8:	a81b      	add	r0, sp, #108	; 0x6c
 8008cba:	f001 fe7d 	bl	800a9b8 <__match>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f43f aeb3 	beq.w	8008a2a <_strtod_l+0xba>
 8008cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b28      	cmp	r3, #40	; 0x28
 8008cca:	d10e      	bne.n	8008cea <_strtod_l+0x37a>
 8008ccc:	aa1e      	add	r2, sp, #120	; 0x78
 8008cce:	498b      	ldr	r1, [pc, #556]	; (8008efc <_strtod_l+0x58c>)
 8008cd0:	a81b      	add	r0, sp, #108	; 0x6c
 8008cd2:	f001 fe85 	bl	800a9e0 <__hexnan>
 8008cd6:	2805      	cmp	r0, #5
 8008cd8:	d107      	bne.n	8008cea <_strtod_l+0x37a>
 8008cda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cdc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008ce0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008ce4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008ce8:	e681      	b.n	80089ee <_strtod_l+0x7e>
 8008cea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008f10 <_strtod_l+0x5a0>
 8008cee:	e7d2      	b.n	8008c96 <_strtod_l+0x326>
 8008cf0:	ebae 0302 	sub.w	r3, lr, r2
 8008cf4:	9306      	str	r3, [sp, #24]
 8008cf6:	9b05      	ldr	r3, [sp, #20]
 8008cf8:	9807      	ldr	r0, [sp, #28]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bf08      	it	eq
 8008cfe:	4623      	moveq	r3, r4
 8008d00:	2c10      	cmp	r4, #16
 8008d02:	9305      	str	r3, [sp, #20]
 8008d04:	46a0      	mov	r8, r4
 8008d06:	bfa8      	it	ge
 8008d08:	f04f 0810 	movge.w	r8, #16
 8008d0c:	f7f7 fbfa 	bl	8000504 <__aeabi_ui2d>
 8008d10:	2c09      	cmp	r4, #9
 8008d12:	4682      	mov	sl, r0
 8008d14:	468b      	mov	fp, r1
 8008d16:	dc13      	bgt.n	8008d40 <_strtod_l+0x3d0>
 8008d18:	9b06      	ldr	r3, [sp, #24]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f43f ae67 	beq.w	80089ee <_strtod_l+0x7e>
 8008d20:	9b06      	ldr	r3, [sp, #24]
 8008d22:	dd7a      	ble.n	8008e1a <_strtod_l+0x4aa>
 8008d24:	2b16      	cmp	r3, #22
 8008d26:	dc61      	bgt.n	8008dec <_strtod_l+0x47c>
 8008d28:	4a75      	ldr	r2, [pc, #468]	; (8008f00 <_strtod_l+0x590>)
 8008d2a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008d2e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008d32:	4652      	mov	r2, sl
 8008d34:	465b      	mov	r3, fp
 8008d36:	f7f7 fc5f 	bl	80005f8 <__aeabi_dmul>
 8008d3a:	4682      	mov	sl, r0
 8008d3c:	468b      	mov	fp, r1
 8008d3e:	e656      	b.n	80089ee <_strtod_l+0x7e>
 8008d40:	4b6f      	ldr	r3, [pc, #444]	; (8008f00 <_strtod_l+0x590>)
 8008d42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d4a:	f7f7 fc55 	bl	80005f8 <__aeabi_dmul>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	4628      	mov	r0, r5
 8008d52:	460f      	mov	r7, r1
 8008d54:	f7f7 fbd6 	bl	8000504 <__aeabi_ui2d>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	4639      	mov	r1, r7
 8008d60:	f7f7 fa94 	bl	800028c <__adddf3>
 8008d64:	2c0f      	cmp	r4, #15
 8008d66:	4682      	mov	sl, r0
 8008d68:	468b      	mov	fp, r1
 8008d6a:	ddd5      	ble.n	8008d18 <_strtod_l+0x3a8>
 8008d6c:	9b06      	ldr	r3, [sp, #24]
 8008d6e:	eba4 0808 	sub.w	r8, r4, r8
 8008d72:	4498      	add	r8, r3
 8008d74:	f1b8 0f00 	cmp.w	r8, #0
 8008d78:	f340 8096 	ble.w	8008ea8 <_strtod_l+0x538>
 8008d7c:	f018 030f 	ands.w	r3, r8, #15
 8008d80:	d00a      	beq.n	8008d98 <_strtod_l+0x428>
 8008d82:	495f      	ldr	r1, [pc, #380]	; (8008f00 <_strtod_l+0x590>)
 8008d84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d88:	4652      	mov	r2, sl
 8008d8a:	465b      	mov	r3, fp
 8008d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d90:	f7f7 fc32 	bl	80005f8 <__aeabi_dmul>
 8008d94:	4682      	mov	sl, r0
 8008d96:	468b      	mov	fp, r1
 8008d98:	f038 080f 	bics.w	r8, r8, #15
 8008d9c:	d073      	beq.n	8008e86 <_strtod_l+0x516>
 8008d9e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008da2:	dd47      	ble.n	8008e34 <_strtod_l+0x4c4>
 8008da4:	2400      	movs	r4, #0
 8008da6:	46a0      	mov	r8, r4
 8008da8:	9407      	str	r4, [sp, #28]
 8008daa:	9405      	str	r4, [sp, #20]
 8008dac:	2322      	movs	r3, #34	; 0x22
 8008dae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008f08 <_strtod_l+0x598>
 8008db2:	f8c9 3000 	str.w	r3, [r9]
 8008db6:	f04f 0a00 	mov.w	sl, #0
 8008dba:	9b07      	ldr	r3, [sp, #28]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f43f ae16 	beq.w	80089ee <_strtod_l+0x7e>
 8008dc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008dc4:	4648      	mov	r0, r9
 8008dc6:	f001 ff08 	bl	800abda <_Bfree>
 8008dca:	9905      	ldr	r1, [sp, #20]
 8008dcc:	4648      	mov	r0, r9
 8008dce:	f001 ff04 	bl	800abda <_Bfree>
 8008dd2:	4641      	mov	r1, r8
 8008dd4:	4648      	mov	r0, r9
 8008dd6:	f001 ff00 	bl	800abda <_Bfree>
 8008dda:	9907      	ldr	r1, [sp, #28]
 8008ddc:	4648      	mov	r0, r9
 8008dde:	f001 fefc 	bl	800abda <_Bfree>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4648      	mov	r0, r9
 8008de6:	f001 fef8 	bl	800abda <_Bfree>
 8008dea:	e600      	b.n	80089ee <_strtod_l+0x7e>
 8008dec:	9a06      	ldr	r2, [sp, #24]
 8008dee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008df2:	4293      	cmp	r3, r2
 8008df4:	dbba      	blt.n	8008d6c <_strtod_l+0x3fc>
 8008df6:	4d42      	ldr	r5, [pc, #264]	; (8008f00 <_strtod_l+0x590>)
 8008df8:	f1c4 040f 	rsb	r4, r4, #15
 8008dfc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008e00:	4652      	mov	r2, sl
 8008e02:	465b      	mov	r3, fp
 8008e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e08:	f7f7 fbf6 	bl	80005f8 <__aeabi_dmul>
 8008e0c:	9b06      	ldr	r3, [sp, #24]
 8008e0e:	1b1c      	subs	r4, r3, r4
 8008e10:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008e14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e18:	e78d      	b.n	8008d36 <_strtod_l+0x3c6>
 8008e1a:	f113 0f16 	cmn.w	r3, #22
 8008e1e:	dba5      	blt.n	8008d6c <_strtod_l+0x3fc>
 8008e20:	4a37      	ldr	r2, [pc, #220]	; (8008f00 <_strtod_l+0x590>)
 8008e22:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008e26:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	f7f7 fd0d 	bl	800084c <__aeabi_ddiv>
 8008e32:	e782      	b.n	8008d3a <_strtod_l+0x3ca>
 8008e34:	2300      	movs	r3, #0
 8008e36:	4e33      	ldr	r6, [pc, #204]	; (8008f04 <_strtod_l+0x594>)
 8008e38:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	4659      	mov	r1, fp
 8008e40:	461d      	mov	r5, r3
 8008e42:	f1b8 0f01 	cmp.w	r8, #1
 8008e46:	dc21      	bgt.n	8008e8c <_strtod_l+0x51c>
 8008e48:	b10b      	cbz	r3, 8008e4e <_strtod_l+0x4de>
 8008e4a:	4682      	mov	sl, r0
 8008e4c:	468b      	mov	fp, r1
 8008e4e:	4b2d      	ldr	r3, [pc, #180]	; (8008f04 <_strtod_l+0x594>)
 8008e50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008e58:	4652      	mov	r2, sl
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e60:	f7f7 fbca 	bl	80005f8 <__aeabi_dmul>
 8008e64:	4b28      	ldr	r3, [pc, #160]	; (8008f08 <_strtod_l+0x598>)
 8008e66:	460a      	mov	r2, r1
 8008e68:	400b      	ands	r3, r1
 8008e6a:	4928      	ldr	r1, [pc, #160]	; (8008f0c <_strtod_l+0x59c>)
 8008e6c:	428b      	cmp	r3, r1
 8008e6e:	4682      	mov	sl, r0
 8008e70:	d898      	bhi.n	8008da4 <_strtod_l+0x434>
 8008e72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e76:	428b      	cmp	r3, r1
 8008e78:	bf86      	itte	hi
 8008e7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008f14 <_strtod_l+0x5a4>
 8008e7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e86:	2300      	movs	r3, #0
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	e077      	b.n	8008f7c <_strtod_l+0x60c>
 8008e8c:	f018 0f01 	tst.w	r8, #1
 8008e90:	d006      	beq.n	8008ea0 <_strtod_l+0x530>
 8008e92:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f7f7 fbad 	bl	80005f8 <__aeabi_dmul>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ea6:	e7cc      	b.n	8008e42 <_strtod_l+0x4d2>
 8008ea8:	d0ed      	beq.n	8008e86 <_strtod_l+0x516>
 8008eaa:	f1c8 0800 	rsb	r8, r8, #0
 8008eae:	f018 020f 	ands.w	r2, r8, #15
 8008eb2:	d00a      	beq.n	8008eca <_strtod_l+0x55a>
 8008eb4:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <_strtod_l+0x590>)
 8008eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eba:	4650      	mov	r0, sl
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 fcc3 	bl	800084c <__aeabi_ddiv>
 8008ec6:	4682      	mov	sl, r0
 8008ec8:	468b      	mov	fp, r1
 8008eca:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ece:	d0da      	beq.n	8008e86 <_strtod_l+0x516>
 8008ed0:	f1b8 0f1f 	cmp.w	r8, #31
 8008ed4:	dd20      	ble.n	8008f18 <_strtod_l+0x5a8>
 8008ed6:	2400      	movs	r4, #0
 8008ed8:	46a0      	mov	r8, r4
 8008eda:	9407      	str	r4, [sp, #28]
 8008edc:	9405      	str	r4, [sp, #20]
 8008ede:	2322      	movs	r3, #34	; 0x22
 8008ee0:	f04f 0a00 	mov.w	sl, #0
 8008ee4:	f04f 0b00 	mov.w	fp, #0
 8008ee8:	f8c9 3000 	str.w	r3, [r9]
 8008eec:	e765      	b.n	8008dba <_strtod_l+0x44a>
 8008eee:	bf00      	nop
 8008ef0:	0800c089 	.word	0x0800c089
 8008ef4:	0800c113 	.word	0x0800c113
 8008ef8:	0800c091 	.word	0x0800c091
 8008efc:	0800c0d4 	.word	0x0800c0d4
 8008f00:	0800c1b8 	.word	0x0800c1b8
 8008f04:	0800c190 	.word	0x0800c190
 8008f08:	7ff00000 	.word	0x7ff00000
 8008f0c:	7ca00000 	.word	0x7ca00000
 8008f10:	fff80000 	.word	0xfff80000
 8008f14:	7fefffff 	.word	0x7fefffff
 8008f18:	f018 0310 	ands.w	r3, r8, #16
 8008f1c:	bf18      	it	ne
 8008f1e:	236a      	movne	r3, #106	; 0x6a
 8008f20:	4da0      	ldr	r5, [pc, #640]	; (80091a4 <_strtod_l+0x834>)
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	4650      	mov	r0, sl
 8008f26:	4659      	mov	r1, fp
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f1b8 0f00 	cmp.w	r8, #0
 8008f2e:	f300 810a 	bgt.w	8009146 <_strtod_l+0x7d6>
 8008f32:	b10b      	cbz	r3, 8008f38 <_strtod_l+0x5c8>
 8008f34:	4682      	mov	sl, r0
 8008f36:	468b      	mov	fp, r1
 8008f38:	9b04      	ldr	r3, [sp, #16]
 8008f3a:	b1bb      	cbz	r3, 8008f6c <_strtod_l+0x5fc>
 8008f3c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008f40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	4659      	mov	r1, fp
 8008f48:	dd10      	ble.n	8008f6c <_strtod_l+0x5fc>
 8008f4a:	2b1f      	cmp	r3, #31
 8008f4c:	f340 8107 	ble.w	800915e <_strtod_l+0x7ee>
 8008f50:	2b34      	cmp	r3, #52	; 0x34
 8008f52:	bfde      	ittt	le
 8008f54:	3b20      	suble	r3, #32
 8008f56:	f04f 32ff 	movle.w	r2, #4294967295
 8008f5a:	fa02 f303 	lslle.w	r3, r2, r3
 8008f5e:	f04f 0a00 	mov.w	sl, #0
 8008f62:	bfcc      	ite	gt
 8008f64:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f68:	ea03 0b01 	andle.w	fp, r3, r1
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	4650      	mov	r0, sl
 8008f72:	4659      	mov	r1, fp
 8008f74:	f7f7 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d1ac      	bne.n	8008ed6 <_strtod_l+0x566>
 8008f7c:	9b07      	ldr	r3, [sp, #28]
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	9a05      	ldr	r2, [sp, #20]
 8008f82:	9908      	ldr	r1, [sp, #32]
 8008f84:	4623      	mov	r3, r4
 8008f86:	4648      	mov	r0, r9
 8008f88:	f001 fe79 	bl	800ac7e <__s2b>
 8008f8c:	9007      	str	r0, [sp, #28]
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f43f af08 	beq.w	8008da4 <_strtod_l+0x434>
 8008f94:	9a06      	ldr	r2, [sp, #24]
 8008f96:	9b06      	ldr	r3, [sp, #24]
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	f1c3 0300 	rsb	r3, r3, #0
 8008f9e:	bfa8      	it	ge
 8008fa0:	2300      	movge	r3, #0
 8008fa2:	930e      	str	r3, [sp, #56]	; 0x38
 8008fa4:	2400      	movs	r4, #0
 8008fa6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008faa:	9316      	str	r3, [sp, #88]	; 0x58
 8008fac:	46a0      	mov	r8, r4
 8008fae:	9b07      	ldr	r3, [sp, #28]
 8008fb0:	4648      	mov	r0, r9
 8008fb2:	6859      	ldr	r1, [r3, #4]
 8008fb4:	f001 fddd 	bl	800ab72 <_Balloc>
 8008fb8:	9005      	str	r0, [sp, #20]
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f43f aef6 	beq.w	8008dac <_strtod_l+0x43c>
 8008fc0:	9b07      	ldr	r3, [sp, #28]
 8008fc2:	691a      	ldr	r2, [r3, #16]
 8008fc4:	3202      	adds	r2, #2
 8008fc6:	f103 010c 	add.w	r1, r3, #12
 8008fca:	0092      	lsls	r2, r2, #2
 8008fcc:	300c      	adds	r0, #12
 8008fce:	f001 fdc5 	bl	800ab5c <memcpy>
 8008fd2:	aa1e      	add	r2, sp, #120	; 0x78
 8008fd4:	a91d      	add	r1, sp, #116	; 0x74
 8008fd6:	ec4b ab10 	vmov	d0, sl, fp
 8008fda:	4648      	mov	r0, r9
 8008fdc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008fe0:	f002 f908 	bl	800b1f4 <__d2b>
 8008fe4:	901c      	str	r0, [sp, #112]	; 0x70
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f43f aee0 	beq.w	8008dac <_strtod_l+0x43c>
 8008fec:	2101      	movs	r1, #1
 8008fee:	4648      	mov	r0, r9
 8008ff0:	f001 fed1 	bl	800ad96 <__i2b>
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f43f aed8 	beq.w	8008dac <_strtod_l+0x43c>
 8008ffc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008ffe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009000:	2e00      	cmp	r6, #0
 8009002:	bfab      	itete	ge
 8009004:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009006:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009008:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800900a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800900c:	bfac      	ite	ge
 800900e:	18f7      	addge	r7, r6, r3
 8009010:	1b9d      	sublt	r5, r3, r6
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	1af6      	subs	r6, r6, r3
 8009016:	4416      	add	r6, r2
 8009018:	4b63      	ldr	r3, [pc, #396]	; (80091a8 <_strtod_l+0x838>)
 800901a:	3e01      	subs	r6, #1
 800901c:	429e      	cmp	r6, r3
 800901e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009022:	f280 80af 	bge.w	8009184 <_strtod_l+0x814>
 8009026:	1b9b      	subs	r3, r3, r6
 8009028:	2b1f      	cmp	r3, #31
 800902a:	eba2 0203 	sub.w	r2, r2, r3
 800902e:	f04f 0101 	mov.w	r1, #1
 8009032:	f300 809b 	bgt.w	800916c <_strtod_l+0x7fc>
 8009036:	fa01 f303 	lsl.w	r3, r1, r3
 800903a:	930f      	str	r3, [sp, #60]	; 0x3c
 800903c:	2300      	movs	r3, #0
 800903e:	930a      	str	r3, [sp, #40]	; 0x28
 8009040:	18be      	adds	r6, r7, r2
 8009042:	9b04      	ldr	r3, [sp, #16]
 8009044:	42b7      	cmp	r7, r6
 8009046:	4415      	add	r5, r2
 8009048:	441d      	add	r5, r3
 800904a:	463b      	mov	r3, r7
 800904c:	bfa8      	it	ge
 800904e:	4633      	movge	r3, r6
 8009050:	42ab      	cmp	r3, r5
 8009052:	bfa8      	it	ge
 8009054:	462b      	movge	r3, r5
 8009056:	2b00      	cmp	r3, #0
 8009058:	bfc2      	ittt	gt
 800905a:	1af6      	subgt	r6, r6, r3
 800905c:	1aed      	subgt	r5, r5, r3
 800905e:	1aff      	subgt	r7, r7, r3
 8009060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009062:	b1bb      	cbz	r3, 8009094 <_strtod_l+0x724>
 8009064:	4641      	mov	r1, r8
 8009066:	461a      	mov	r2, r3
 8009068:	4648      	mov	r0, r9
 800906a:	f001 ff33 	bl	800aed4 <__pow5mult>
 800906e:	4680      	mov	r8, r0
 8009070:	2800      	cmp	r0, #0
 8009072:	f43f ae9b 	beq.w	8008dac <_strtod_l+0x43c>
 8009076:	4601      	mov	r1, r0
 8009078:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800907a:	4648      	mov	r0, r9
 800907c:	f001 fe94 	bl	800ada8 <__multiply>
 8009080:	900c      	str	r0, [sp, #48]	; 0x30
 8009082:	2800      	cmp	r0, #0
 8009084:	f43f ae92 	beq.w	8008dac <_strtod_l+0x43c>
 8009088:	991c      	ldr	r1, [sp, #112]	; 0x70
 800908a:	4648      	mov	r0, r9
 800908c:	f001 fda5 	bl	800abda <_Bfree>
 8009090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009092:	931c      	str	r3, [sp, #112]	; 0x70
 8009094:	2e00      	cmp	r6, #0
 8009096:	dc7a      	bgt.n	800918e <_strtod_l+0x81e>
 8009098:	9b06      	ldr	r3, [sp, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	dd08      	ble.n	80090b0 <_strtod_l+0x740>
 800909e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090a0:	9905      	ldr	r1, [sp, #20]
 80090a2:	4648      	mov	r0, r9
 80090a4:	f001 ff16 	bl	800aed4 <__pow5mult>
 80090a8:	9005      	str	r0, [sp, #20]
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f43f ae7e 	beq.w	8008dac <_strtod_l+0x43c>
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	dd08      	ble.n	80090c6 <_strtod_l+0x756>
 80090b4:	462a      	mov	r2, r5
 80090b6:	9905      	ldr	r1, [sp, #20]
 80090b8:	4648      	mov	r0, r9
 80090ba:	f001 ff59 	bl	800af70 <__lshift>
 80090be:	9005      	str	r0, [sp, #20]
 80090c0:	2800      	cmp	r0, #0
 80090c2:	f43f ae73 	beq.w	8008dac <_strtod_l+0x43c>
 80090c6:	2f00      	cmp	r7, #0
 80090c8:	dd08      	ble.n	80090dc <_strtod_l+0x76c>
 80090ca:	4641      	mov	r1, r8
 80090cc:	463a      	mov	r2, r7
 80090ce:	4648      	mov	r0, r9
 80090d0:	f001 ff4e 	bl	800af70 <__lshift>
 80090d4:	4680      	mov	r8, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	f43f ae68 	beq.w	8008dac <_strtod_l+0x43c>
 80090dc:	9a05      	ldr	r2, [sp, #20]
 80090de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80090e0:	4648      	mov	r0, r9
 80090e2:	f001 ffb3 	bl	800b04c <__mdiff>
 80090e6:	4604      	mov	r4, r0
 80090e8:	2800      	cmp	r0, #0
 80090ea:	f43f ae5f 	beq.w	8008dac <_strtod_l+0x43c>
 80090ee:	68c3      	ldr	r3, [r0, #12]
 80090f0:	930c      	str	r3, [sp, #48]	; 0x30
 80090f2:	2300      	movs	r3, #0
 80090f4:	60c3      	str	r3, [r0, #12]
 80090f6:	4641      	mov	r1, r8
 80090f8:	f001 ff8e 	bl	800b018 <__mcmp>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	da55      	bge.n	80091ac <_strtod_l+0x83c>
 8009100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009102:	b9e3      	cbnz	r3, 800913e <_strtod_l+0x7ce>
 8009104:	f1ba 0f00 	cmp.w	sl, #0
 8009108:	d119      	bne.n	800913e <_strtod_l+0x7ce>
 800910a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800910e:	b9b3      	cbnz	r3, 800913e <_strtod_l+0x7ce>
 8009110:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009114:	0d1b      	lsrs	r3, r3, #20
 8009116:	051b      	lsls	r3, r3, #20
 8009118:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800911c:	d90f      	bls.n	800913e <_strtod_l+0x7ce>
 800911e:	6963      	ldr	r3, [r4, #20]
 8009120:	b913      	cbnz	r3, 8009128 <_strtod_l+0x7b8>
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	2b01      	cmp	r3, #1
 8009126:	dd0a      	ble.n	800913e <_strtod_l+0x7ce>
 8009128:	4621      	mov	r1, r4
 800912a:	2201      	movs	r2, #1
 800912c:	4648      	mov	r0, r9
 800912e:	f001 ff1f 	bl	800af70 <__lshift>
 8009132:	4641      	mov	r1, r8
 8009134:	4604      	mov	r4, r0
 8009136:	f001 ff6f 	bl	800b018 <__mcmp>
 800913a:	2800      	cmp	r0, #0
 800913c:	dc67      	bgt.n	800920e <_strtod_l+0x89e>
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d171      	bne.n	8009228 <_strtod_l+0x8b8>
 8009144:	e63d      	b.n	8008dc2 <_strtod_l+0x452>
 8009146:	f018 0f01 	tst.w	r8, #1
 800914a:	d004      	beq.n	8009156 <_strtod_l+0x7e6>
 800914c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009150:	f7f7 fa52 	bl	80005f8 <__aeabi_dmul>
 8009154:	2301      	movs	r3, #1
 8009156:	ea4f 0868 	mov.w	r8, r8, asr #1
 800915a:	3508      	adds	r5, #8
 800915c:	e6e5      	b.n	8008f2a <_strtod_l+0x5ba>
 800915e:	f04f 32ff 	mov.w	r2, #4294967295
 8009162:	fa02 f303 	lsl.w	r3, r2, r3
 8009166:	ea03 0a0a 	and.w	sl, r3, sl
 800916a:	e6ff      	b.n	8008f6c <_strtod_l+0x5fc>
 800916c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009170:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009174:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009178:	36e2      	adds	r6, #226	; 0xe2
 800917a:	fa01 f306 	lsl.w	r3, r1, r6
 800917e:	930a      	str	r3, [sp, #40]	; 0x28
 8009180:	910f      	str	r1, [sp, #60]	; 0x3c
 8009182:	e75d      	b.n	8009040 <_strtod_l+0x6d0>
 8009184:	2300      	movs	r3, #0
 8009186:	930a      	str	r3, [sp, #40]	; 0x28
 8009188:	2301      	movs	r3, #1
 800918a:	930f      	str	r3, [sp, #60]	; 0x3c
 800918c:	e758      	b.n	8009040 <_strtod_l+0x6d0>
 800918e:	4632      	mov	r2, r6
 8009190:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009192:	4648      	mov	r0, r9
 8009194:	f001 feec 	bl	800af70 <__lshift>
 8009198:	901c      	str	r0, [sp, #112]	; 0x70
 800919a:	2800      	cmp	r0, #0
 800919c:	f47f af7c 	bne.w	8009098 <_strtod_l+0x728>
 80091a0:	e604      	b.n	8008dac <_strtod_l+0x43c>
 80091a2:	bf00      	nop
 80091a4:	0800c0e8 	.word	0x0800c0e8
 80091a8:	fffffc02 	.word	0xfffffc02
 80091ac:	465d      	mov	r5, fp
 80091ae:	f040 8086 	bne.w	80092be <_strtod_l+0x94e>
 80091b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091b8:	b32a      	cbz	r2, 8009206 <_strtod_l+0x896>
 80091ba:	4aaf      	ldr	r2, [pc, #700]	; (8009478 <_strtod_l+0xb08>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d153      	bne.n	8009268 <_strtod_l+0x8f8>
 80091c0:	9b04      	ldr	r3, [sp, #16]
 80091c2:	4650      	mov	r0, sl
 80091c4:	b1d3      	cbz	r3, 80091fc <_strtod_l+0x88c>
 80091c6:	4aad      	ldr	r2, [pc, #692]	; (800947c <_strtod_l+0xb0c>)
 80091c8:	402a      	ands	r2, r5
 80091ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80091ce:	f04f 31ff 	mov.w	r1, #4294967295
 80091d2:	d816      	bhi.n	8009202 <_strtod_l+0x892>
 80091d4:	0d12      	lsrs	r2, r2, #20
 80091d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091da:	fa01 f303 	lsl.w	r3, r1, r3
 80091de:	4298      	cmp	r0, r3
 80091e0:	d142      	bne.n	8009268 <_strtod_l+0x8f8>
 80091e2:	4ba7      	ldr	r3, [pc, #668]	; (8009480 <_strtod_l+0xb10>)
 80091e4:	429d      	cmp	r5, r3
 80091e6:	d102      	bne.n	80091ee <_strtod_l+0x87e>
 80091e8:	3001      	adds	r0, #1
 80091ea:	f43f addf 	beq.w	8008dac <_strtod_l+0x43c>
 80091ee:	4ba3      	ldr	r3, [pc, #652]	; (800947c <_strtod_l+0xb0c>)
 80091f0:	402b      	ands	r3, r5
 80091f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80091f6:	f04f 0a00 	mov.w	sl, #0
 80091fa:	e7a0      	b.n	800913e <_strtod_l+0x7ce>
 80091fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009200:	e7ed      	b.n	80091de <_strtod_l+0x86e>
 8009202:	460b      	mov	r3, r1
 8009204:	e7eb      	b.n	80091de <_strtod_l+0x86e>
 8009206:	bb7b      	cbnz	r3, 8009268 <_strtod_l+0x8f8>
 8009208:	f1ba 0f00 	cmp.w	sl, #0
 800920c:	d12c      	bne.n	8009268 <_strtod_l+0x8f8>
 800920e:	9904      	ldr	r1, [sp, #16]
 8009210:	4a9a      	ldr	r2, [pc, #616]	; (800947c <_strtod_l+0xb0c>)
 8009212:	465b      	mov	r3, fp
 8009214:	b1f1      	cbz	r1, 8009254 <_strtod_l+0x8e4>
 8009216:	ea02 010b 	and.w	r1, r2, fp
 800921a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800921e:	dc19      	bgt.n	8009254 <_strtod_l+0x8e4>
 8009220:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009224:	f77f ae5b 	ble.w	8008ede <_strtod_l+0x56e>
 8009228:	4a96      	ldr	r2, [pc, #600]	; (8009484 <_strtod_l+0xb14>)
 800922a:	2300      	movs	r3, #0
 800922c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009230:	4650      	mov	r0, sl
 8009232:	4659      	mov	r1, fp
 8009234:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009238:	f7f7 f9de 	bl	80005f8 <__aeabi_dmul>
 800923c:	4682      	mov	sl, r0
 800923e:	468b      	mov	fp, r1
 8009240:	2900      	cmp	r1, #0
 8009242:	f47f adbe 	bne.w	8008dc2 <_strtod_l+0x452>
 8009246:	2800      	cmp	r0, #0
 8009248:	f47f adbb 	bne.w	8008dc2 <_strtod_l+0x452>
 800924c:	2322      	movs	r3, #34	; 0x22
 800924e:	f8c9 3000 	str.w	r3, [r9]
 8009252:	e5b6      	b.n	8008dc2 <_strtod_l+0x452>
 8009254:	4013      	ands	r3, r2
 8009256:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800925a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800925e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009262:	f04f 3aff 	mov.w	sl, #4294967295
 8009266:	e76a      	b.n	800913e <_strtod_l+0x7ce>
 8009268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800926a:	b193      	cbz	r3, 8009292 <_strtod_l+0x922>
 800926c:	422b      	tst	r3, r5
 800926e:	f43f af66 	beq.w	800913e <_strtod_l+0x7ce>
 8009272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009274:	9a04      	ldr	r2, [sp, #16]
 8009276:	4650      	mov	r0, sl
 8009278:	4659      	mov	r1, fp
 800927a:	b173      	cbz	r3, 800929a <_strtod_l+0x92a>
 800927c:	f7ff fb5a 	bl	8008934 <sulp>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009288:	f7f7 f800 	bl	800028c <__adddf3>
 800928c:	4682      	mov	sl, r0
 800928e:	468b      	mov	fp, r1
 8009290:	e755      	b.n	800913e <_strtod_l+0x7ce>
 8009292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009294:	ea13 0f0a 	tst.w	r3, sl
 8009298:	e7e9      	b.n	800926e <_strtod_l+0x8fe>
 800929a:	f7ff fb4b 	bl	8008934 <sulp>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092a6:	f7f6 ffef 	bl	8000288 <__aeabi_dsub>
 80092aa:	2200      	movs	r2, #0
 80092ac:	2300      	movs	r3, #0
 80092ae:	4682      	mov	sl, r0
 80092b0:	468b      	mov	fp, r1
 80092b2:	f7f7 fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f47f ae11 	bne.w	8008ede <_strtod_l+0x56e>
 80092bc:	e73f      	b.n	800913e <_strtod_l+0x7ce>
 80092be:	4641      	mov	r1, r8
 80092c0:	4620      	mov	r0, r4
 80092c2:	f001 ffe6 	bl	800b292 <__ratio>
 80092c6:	ec57 6b10 	vmov	r6, r7, d0
 80092ca:	2200      	movs	r2, #0
 80092cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092d0:	ee10 0a10 	vmov	r0, s0
 80092d4:	4639      	mov	r1, r7
 80092d6:	f7f7 fc0b 	bl	8000af0 <__aeabi_dcmple>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d077      	beq.n	80093ce <_strtod_l+0xa5e>
 80092de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d04a      	beq.n	800937a <_strtod_l+0xa0a>
 80092e4:	4b68      	ldr	r3, [pc, #416]	; (8009488 <_strtod_l+0xb18>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092ec:	4f66      	ldr	r7, [pc, #408]	; (8009488 <_strtod_l+0xb18>)
 80092ee:	2600      	movs	r6, #0
 80092f0:	4b62      	ldr	r3, [pc, #392]	; (800947c <_strtod_l+0xb0c>)
 80092f2:	402b      	ands	r3, r5
 80092f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80092f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092f8:	4b64      	ldr	r3, [pc, #400]	; (800948c <_strtod_l+0xb1c>)
 80092fa:	429a      	cmp	r2, r3
 80092fc:	f040 80ce 	bne.w	800949c <_strtod_l+0xb2c>
 8009300:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009304:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009308:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800930c:	ec4b ab10 	vmov	d0, sl, fp
 8009310:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009314:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009318:	f001 fef6 	bl	800b108 <__ulp>
 800931c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009320:	ec53 2b10 	vmov	r2, r3, d0
 8009324:	f7f7 f968 	bl	80005f8 <__aeabi_dmul>
 8009328:	4652      	mov	r2, sl
 800932a:	465b      	mov	r3, fp
 800932c:	f7f6 ffae 	bl	800028c <__adddf3>
 8009330:	460b      	mov	r3, r1
 8009332:	4952      	ldr	r1, [pc, #328]	; (800947c <_strtod_l+0xb0c>)
 8009334:	4a56      	ldr	r2, [pc, #344]	; (8009490 <_strtod_l+0xb20>)
 8009336:	4019      	ands	r1, r3
 8009338:	4291      	cmp	r1, r2
 800933a:	4682      	mov	sl, r0
 800933c:	d95b      	bls.n	80093f6 <_strtod_l+0xa86>
 800933e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009340:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009344:	4293      	cmp	r3, r2
 8009346:	d103      	bne.n	8009350 <_strtod_l+0x9e0>
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	3301      	adds	r3, #1
 800934c:	f43f ad2e 	beq.w	8008dac <_strtod_l+0x43c>
 8009350:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009480 <_strtod_l+0xb10>
 8009354:	f04f 3aff 	mov.w	sl, #4294967295
 8009358:	991c      	ldr	r1, [sp, #112]	; 0x70
 800935a:	4648      	mov	r0, r9
 800935c:	f001 fc3d 	bl	800abda <_Bfree>
 8009360:	9905      	ldr	r1, [sp, #20]
 8009362:	4648      	mov	r0, r9
 8009364:	f001 fc39 	bl	800abda <_Bfree>
 8009368:	4641      	mov	r1, r8
 800936a:	4648      	mov	r0, r9
 800936c:	f001 fc35 	bl	800abda <_Bfree>
 8009370:	4621      	mov	r1, r4
 8009372:	4648      	mov	r0, r9
 8009374:	f001 fc31 	bl	800abda <_Bfree>
 8009378:	e619      	b.n	8008fae <_strtod_l+0x63e>
 800937a:	f1ba 0f00 	cmp.w	sl, #0
 800937e:	d11a      	bne.n	80093b6 <_strtod_l+0xa46>
 8009380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009384:	b9eb      	cbnz	r3, 80093c2 <_strtod_l+0xa52>
 8009386:	2200      	movs	r2, #0
 8009388:	4b3f      	ldr	r3, [pc, #252]	; (8009488 <_strtod_l+0xb18>)
 800938a:	4630      	mov	r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	f7f7 fba5 	bl	8000adc <__aeabi_dcmplt>
 8009392:	b9c8      	cbnz	r0, 80093c8 <_strtod_l+0xa58>
 8009394:	4630      	mov	r0, r6
 8009396:	4639      	mov	r1, r7
 8009398:	2200      	movs	r2, #0
 800939a:	4b3e      	ldr	r3, [pc, #248]	; (8009494 <_strtod_l+0xb24>)
 800939c:	f7f7 f92c 	bl	80005f8 <__aeabi_dmul>
 80093a0:	4606      	mov	r6, r0
 80093a2:	460f      	mov	r7, r1
 80093a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80093a8:	9618      	str	r6, [sp, #96]	; 0x60
 80093aa:	9319      	str	r3, [sp, #100]	; 0x64
 80093ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80093b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80093b4:	e79c      	b.n	80092f0 <_strtod_l+0x980>
 80093b6:	f1ba 0f01 	cmp.w	sl, #1
 80093ba:	d102      	bne.n	80093c2 <_strtod_l+0xa52>
 80093bc:	2d00      	cmp	r5, #0
 80093be:	f43f ad8e 	beq.w	8008ede <_strtod_l+0x56e>
 80093c2:	2200      	movs	r2, #0
 80093c4:	4b34      	ldr	r3, [pc, #208]	; (8009498 <_strtod_l+0xb28>)
 80093c6:	e78f      	b.n	80092e8 <_strtod_l+0x978>
 80093c8:	2600      	movs	r6, #0
 80093ca:	4f32      	ldr	r7, [pc, #200]	; (8009494 <_strtod_l+0xb24>)
 80093cc:	e7ea      	b.n	80093a4 <_strtod_l+0xa34>
 80093ce:	4b31      	ldr	r3, [pc, #196]	; (8009494 <_strtod_l+0xb24>)
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	2200      	movs	r2, #0
 80093d6:	f7f7 f90f 	bl	80005f8 <__aeabi_dmul>
 80093da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	b933      	cbnz	r3, 80093f0 <_strtod_l+0xa80>
 80093e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093e6:	9010      	str	r0, [sp, #64]	; 0x40
 80093e8:	9311      	str	r3, [sp, #68]	; 0x44
 80093ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093ee:	e7df      	b.n	80093b0 <_strtod_l+0xa40>
 80093f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80093f4:	e7f9      	b.n	80093ea <_strtod_l+0xa7a>
 80093f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1ab      	bne.n	8009358 <_strtod_l+0x9e8>
 8009400:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009404:	0d1b      	lsrs	r3, r3, #20
 8009406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009408:	051b      	lsls	r3, r3, #20
 800940a:	429a      	cmp	r2, r3
 800940c:	465d      	mov	r5, fp
 800940e:	d1a3      	bne.n	8009358 <_strtod_l+0x9e8>
 8009410:	4639      	mov	r1, r7
 8009412:	4630      	mov	r0, r6
 8009414:	f7f7 fba0 	bl	8000b58 <__aeabi_d2iz>
 8009418:	f7f7 f884 	bl	8000524 <__aeabi_i2d>
 800941c:	460b      	mov	r3, r1
 800941e:	4602      	mov	r2, r0
 8009420:	4639      	mov	r1, r7
 8009422:	4630      	mov	r0, r6
 8009424:	f7f6 ff30 	bl	8000288 <__aeabi_dsub>
 8009428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	b933      	cbnz	r3, 800943e <_strtod_l+0xace>
 8009430:	f1ba 0f00 	cmp.w	sl, #0
 8009434:	d103      	bne.n	800943e <_strtod_l+0xace>
 8009436:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800943a:	2d00      	cmp	r5, #0
 800943c:	d06d      	beq.n	800951a <_strtod_l+0xbaa>
 800943e:	a30a      	add	r3, pc, #40	; (adr r3, 8009468 <_strtod_l+0xaf8>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	4630      	mov	r0, r6
 8009446:	4639      	mov	r1, r7
 8009448:	f7f7 fb48 	bl	8000adc <__aeabi_dcmplt>
 800944c:	2800      	cmp	r0, #0
 800944e:	f47f acb8 	bne.w	8008dc2 <_strtod_l+0x452>
 8009452:	a307      	add	r3, pc, #28	; (adr r3, 8009470 <_strtod_l+0xb00>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	4630      	mov	r0, r6
 800945a:	4639      	mov	r1, r7
 800945c:	f7f7 fb5c 	bl	8000b18 <__aeabi_dcmpgt>
 8009460:	2800      	cmp	r0, #0
 8009462:	f43f af79 	beq.w	8009358 <_strtod_l+0x9e8>
 8009466:	e4ac      	b.n	8008dc2 <_strtod_l+0x452>
 8009468:	94a03595 	.word	0x94a03595
 800946c:	3fdfffff 	.word	0x3fdfffff
 8009470:	35afe535 	.word	0x35afe535
 8009474:	3fe00000 	.word	0x3fe00000
 8009478:	000fffff 	.word	0x000fffff
 800947c:	7ff00000 	.word	0x7ff00000
 8009480:	7fefffff 	.word	0x7fefffff
 8009484:	39500000 	.word	0x39500000
 8009488:	3ff00000 	.word	0x3ff00000
 800948c:	7fe00000 	.word	0x7fe00000
 8009490:	7c9fffff 	.word	0x7c9fffff
 8009494:	3fe00000 	.word	0x3fe00000
 8009498:	bff00000 	.word	0xbff00000
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	b333      	cbz	r3, 80094ee <_strtod_l+0xb7e>
 80094a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094a6:	d822      	bhi.n	80094ee <_strtod_l+0xb7e>
 80094a8:	a327      	add	r3, pc, #156	; (adr r3, 8009548 <_strtod_l+0xbd8>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	4630      	mov	r0, r6
 80094b0:	4639      	mov	r1, r7
 80094b2:	f7f7 fb1d 	bl	8000af0 <__aeabi_dcmple>
 80094b6:	b1a0      	cbz	r0, 80094e2 <_strtod_l+0xb72>
 80094b8:	4639      	mov	r1, r7
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7f7 fb74 	bl	8000ba8 <__aeabi_d2uiz>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	bf08      	it	eq
 80094c4:	2001      	moveq	r0, #1
 80094c6:	f7f7 f81d 	bl	8000504 <__aeabi_ui2d>
 80094ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094cc:	4606      	mov	r6, r0
 80094ce:	460f      	mov	r7, r1
 80094d0:	bb03      	cbnz	r3, 8009514 <_strtod_l+0xba4>
 80094d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094d6:	9012      	str	r0, [sp, #72]	; 0x48
 80094d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80094da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80094de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80094e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 80094f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80094f6:	f001 fe07 	bl	800b108 <__ulp>
 80094fa:	4650      	mov	r0, sl
 80094fc:	ec53 2b10 	vmov	r2, r3, d0
 8009500:	4659      	mov	r1, fp
 8009502:	f7f7 f879 	bl	80005f8 <__aeabi_dmul>
 8009506:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800950a:	f7f6 febf 	bl	800028c <__adddf3>
 800950e:	4682      	mov	sl, r0
 8009510:	468b      	mov	fp, r1
 8009512:	e772      	b.n	80093fa <_strtod_l+0xa8a>
 8009514:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009518:	e7df      	b.n	80094da <_strtod_l+0xb6a>
 800951a:	a30d      	add	r3, pc, #52	; (adr r3, 8009550 <_strtod_l+0xbe0>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f7f7 fadc 	bl	8000adc <__aeabi_dcmplt>
 8009524:	e79c      	b.n	8009460 <_strtod_l+0xaf0>
 8009526:	2300      	movs	r3, #0
 8009528:	930d      	str	r3, [sp, #52]	; 0x34
 800952a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800952c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	f7ff ba61 	b.w	80089f6 <_strtod_l+0x86>
 8009534:	2b65      	cmp	r3, #101	; 0x65
 8009536:	f04f 0200 	mov.w	r2, #0
 800953a:	f43f ab4e 	beq.w	8008bda <_strtod_l+0x26a>
 800953e:	2101      	movs	r1, #1
 8009540:	4614      	mov	r4, r2
 8009542:	9104      	str	r1, [sp, #16]
 8009544:	f7ff bacb 	b.w	8008ade <_strtod_l+0x16e>
 8009548:	ffc00000 	.word	0xffc00000
 800954c:	41dfffff 	.word	0x41dfffff
 8009550:	94a03595 	.word	0x94a03595
 8009554:	3fcfffff 	.word	0x3fcfffff

08009558 <_strtod_r>:
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <_strtod_r+0x18>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	b410      	push	{r4}
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	4c04      	ldr	r4, [pc, #16]	; (8009574 <_strtod_r+0x1c>)
 8009562:	2b00      	cmp	r3, #0
 8009564:	bf08      	it	eq
 8009566:	4623      	moveq	r3, r4
 8009568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800956c:	f7ff ba00 	b.w	8008970 <_strtod_l>
 8009570:	2000000c 	.word	0x2000000c
 8009574:	20000070 	.word	0x20000070

08009578 <_strtol_l.isra.0>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	4680      	mov	r8, r0
 800957e:	4689      	mov	r9, r1
 8009580:	4692      	mov	sl, r2
 8009582:	461e      	mov	r6, r3
 8009584:	460f      	mov	r7, r1
 8009586:	463d      	mov	r5, r7
 8009588:	9808      	ldr	r0, [sp, #32]
 800958a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800958e:	f001 fab7 	bl	800ab00 <__locale_ctype_ptr_l>
 8009592:	4420      	add	r0, r4
 8009594:	7843      	ldrb	r3, [r0, #1]
 8009596:	f013 0308 	ands.w	r3, r3, #8
 800959a:	d132      	bne.n	8009602 <_strtol_l.isra.0+0x8a>
 800959c:	2c2d      	cmp	r4, #45	; 0x2d
 800959e:	d132      	bne.n	8009606 <_strtol_l.isra.0+0x8e>
 80095a0:	787c      	ldrb	r4, [r7, #1]
 80095a2:	1cbd      	adds	r5, r7, #2
 80095a4:	2201      	movs	r2, #1
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d05d      	beq.n	8009666 <_strtol_l.isra.0+0xee>
 80095aa:	2e10      	cmp	r6, #16
 80095ac:	d109      	bne.n	80095c2 <_strtol_l.isra.0+0x4a>
 80095ae:	2c30      	cmp	r4, #48	; 0x30
 80095b0:	d107      	bne.n	80095c2 <_strtol_l.isra.0+0x4a>
 80095b2:	782b      	ldrb	r3, [r5, #0]
 80095b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095b8:	2b58      	cmp	r3, #88	; 0x58
 80095ba:	d14f      	bne.n	800965c <_strtol_l.isra.0+0xe4>
 80095bc:	786c      	ldrb	r4, [r5, #1]
 80095be:	2610      	movs	r6, #16
 80095c0:	3502      	adds	r5, #2
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	bf14      	ite	ne
 80095c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80095ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80095ce:	2700      	movs	r7, #0
 80095d0:	fbb1 fcf6 	udiv	ip, r1, r6
 80095d4:	4638      	mov	r0, r7
 80095d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80095da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d817      	bhi.n	8009612 <_strtol_l.isra.0+0x9a>
 80095e2:	461c      	mov	r4, r3
 80095e4:	42a6      	cmp	r6, r4
 80095e6:	dd23      	ble.n	8009630 <_strtol_l.isra.0+0xb8>
 80095e8:	1c7b      	adds	r3, r7, #1
 80095ea:	d007      	beq.n	80095fc <_strtol_l.isra.0+0x84>
 80095ec:	4584      	cmp	ip, r0
 80095ee:	d31c      	bcc.n	800962a <_strtol_l.isra.0+0xb2>
 80095f0:	d101      	bne.n	80095f6 <_strtol_l.isra.0+0x7e>
 80095f2:	45a6      	cmp	lr, r4
 80095f4:	db19      	blt.n	800962a <_strtol_l.isra.0+0xb2>
 80095f6:	fb00 4006 	mla	r0, r0, r6, r4
 80095fa:	2701      	movs	r7, #1
 80095fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009600:	e7eb      	b.n	80095da <_strtol_l.isra.0+0x62>
 8009602:	462f      	mov	r7, r5
 8009604:	e7bf      	b.n	8009586 <_strtol_l.isra.0+0xe>
 8009606:	2c2b      	cmp	r4, #43	; 0x2b
 8009608:	bf04      	itt	eq
 800960a:	1cbd      	addeq	r5, r7, #2
 800960c:	787c      	ldrbeq	r4, [r7, #1]
 800960e:	461a      	mov	r2, r3
 8009610:	e7c9      	b.n	80095a6 <_strtol_l.isra.0+0x2e>
 8009612:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009616:	2b19      	cmp	r3, #25
 8009618:	d801      	bhi.n	800961e <_strtol_l.isra.0+0xa6>
 800961a:	3c37      	subs	r4, #55	; 0x37
 800961c:	e7e2      	b.n	80095e4 <_strtol_l.isra.0+0x6c>
 800961e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009622:	2b19      	cmp	r3, #25
 8009624:	d804      	bhi.n	8009630 <_strtol_l.isra.0+0xb8>
 8009626:	3c57      	subs	r4, #87	; 0x57
 8009628:	e7dc      	b.n	80095e4 <_strtol_l.isra.0+0x6c>
 800962a:	f04f 37ff 	mov.w	r7, #4294967295
 800962e:	e7e5      	b.n	80095fc <_strtol_l.isra.0+0x84>
 8009630:	1c7b      	adds	r3, r7, #1
 8009632:	d108      	bne.n	8009646 <_strtol_l.isra.0+0xce>
 8009634:	2322      	movs	r3, #34	; 0x22
 8009636:	f8c8 3000 	str.w	r3, [r8]
 800963a:	4608      	mov	r0, r1
 800963c:	f1ba 0f00 	cmp.w	sl, #0
 8009640:	d107      	bne.n	8009652 <_strtol_l.isra.0+0xda>
 8009642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009646:	b102      	cbz	r2, 800964a <_strtol_l.isra.0+0xd2>
 8009648:	4240      	negs	r0, r0
 800964a:	f1ba 0f00 	cmp.w	sl, #0
 800964e:	d0f8      	beq.n	8009642 <_strtol_l.isra.0+0xca>
 8009650:	b10f      	cbz	r7, 8009656 <_strtol_l.isra.0+0xde>
 8009652:	f105 39ff 	add.w	r9, r5, #4294967295
 8009656:	f8ca 9000 	str.w	r9, [sl]
 800965a:	e7f2      	b.n	8009642 <_strtol_l.isra.0+0xca>
 800965c:	2430      	movs	r4, #48	; 0x30
 800965e:	2e00      	cmp	r6, #0
 8009660:	d1af      	bne.n	80095c2 <_strtol_l.isra.0+0x4a>
 8009662:	2608      	movs	r6, #8
 8009664:	e7ad      	b.n	80095c2 <_strtol_l.isra.0+0x4a>
 8009666:	2c30      	cmp	r4, #48	; 0x30
 8009668:	d0a3      	beq.n	80095b2 <_strtol_l.isra.0+0x3a>
 800966a:	260a      	movs	r6, #10
 800966c:	e7a9      	b.n	80095c2 <_strtol_l.isra.0+0x4a>
	...

08009670 <_strtol_r>:
 8009670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009672:	4c06      	ldr	r4, [pc, #24]	; (800968c <_strtol_r+0x1c>)
 8009674:	4d06      	ldr	r5, [pc, #24]	; (8009690 <_strtol_r+0x20>)
 8009676:	6824      	ldr	r4, [r4, #0]
 8009678:	6a24      	ldr	r4, [r4, #32]
 800967a:	2c00      	cmp	r4, #0
 800967c:	bf08      	it	eq
 800967e:	462c      	moveq	r4, r5
 8009680:	9400      	str	r4, [sp, #0]
 8009682:	f7ff ff79 	bl	8009578 <_strtol_l.isra.0>
 8009686:	b003      	add	sp, #12
 8009688:	bd30      	pop	{r4, r5, pc}
 800968a:	bf00      	nop
 800968c:	2000000c 	.word	0x2000000c
 8009690:	20000070 	.word	0x20000070

08009694 <quorem>:
 8009694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	6903      	ldr	r3, [r0, #16]
 800969a:	690c      	ldr	r4, [r1, #16]
 800969c:	42a3      	cmp	r3, r4
 800969e:	4680      	mov	r8, r0
 80096a0:	f2c0 8082 	blt.w	80097a8 <quorem+0x114>
 80096a4:	3c01      	subs	r4, #1
 80096a6:	f101 0714 	add.w	r7, r1, #20
 80096aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80096ae:	f100 0614 	add.w	r6, r0, #20
 80096b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80096b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80096ba:	eb06 030c 	add.w	r3, r6, ip
 80096be:	3501      	adds	r5, #1
 80096c0:	eb07 090c 	add.w	r9, r7, ip
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80096ca:	b395      	cbz	r5, 8009732 <quorem+0x9e>
 80096cc:	f04f 0a00 	mov.w	sl, #0
 80096d0:	4638      	mov	r0, r7
 80096d2:	46b6      	mov	lr, r6
 80096d4:	46d3      	mov	fp, sl
 80096d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80096da:	b293      	uxth	r3, r2
 80096dc:	fb05 a303 	mla	r3, r5, r3, sl
 80096e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	ebab 0303 	sub.w	r3, fp, r3
 80096ea:	0c12      	lsrs	r2, r2, #16
 80096ec:	f8de b000 	ldr.w	fp, [lr]
 80096f0:	fb05 a202 	mla	r2, r5, r2, sl
 80096f4:	fa13 f38b 	uxtah	r3, r3, fp
 80096f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80096fc:	fa1f fb82 	uxth.w	fp, r2
 8009700:	f8de 2000 	ldr.w	r2, [lr]
 8009704:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009708:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800970c:	b29b      	uxth	r3, r3
 800970e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009712:	4581      	cmp	r9, r0
 8009714:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009718:	f84e 3b04 	str.w	r3, [lr], #4
 800971c:	d2db      	bcs.n	80096d6 <quorem+0x42>
 800971e:	f856 300c 	ldr.w	r3, [r6, ip]
 8009722:	b933      	cbnz	r3, 8009732 <quorem+0x9e>
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	3b04      	subs	r3, #4
 8009728:	429e      	cmp	r6, r3
 800972a:	461a      	mov	r2, r3
 800972c:	d330      	bcc.n	8009790 <quorem+0xfc>
 800972e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009732:	4640      	mov	r0, r8
 8009734:	f001 fc70 	bl	800b018 <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	db25      	blt.n	8009788 <quorem+0xf4>
 800973c:	3501      	adds	r5, #1
 800973e:	4630      	mov	r0, r6
 8009740:	f04f 0c00 	mov.w	ip, #0
 8009744:	f857 2b04 	ldr.w	r2, [r7], #4
 8009748:	f8d0 e000 	ldr.w	lr, [r0]
 800974c:	b293      	uxth	r3, r2
 800974e:	ebac 0303 	sub.w	r3, ip, r3
 8009752:	0c12      	lsrs	r2, r2, #16
 8009754:	fa13 f38e 	uxtah	r3, r3, lr
 8009758:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800975c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009760:	b29b      	uxth	r3, r3
 8009762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009766:	45b9      	cmp	r9, r7
 8009768:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800976c:	f840 3b04 	str.w	r3, [r0], #4
 8009770:	d2e8      	bcs.n	8009744 <quorem+0xb0>
 8009772:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009776:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800977a:	b92a      	cbnz	r2, 8009788 <quorem+0xf4>
 800977c:	3b04      	subs	r3, #4
 800977e:	429e      	cmp	r6, r3
 8009780:	461a      	mov	r2, r3
 8009782:	d30b      	bcc.n	800979c <quorem+0x108>
 8009784:	f8c8 4010 	str.w	r4, [r8, #16]
 8009788:	4628      	mov	r0, r5
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	3b04      	subs	r3, #4
 8009794:	2a00      	cmp	r2, #0
 8009796:	d1ca      	bne.n	800972e <quorem+0x9a>
 8009798:	3c01      	subs	r4, #1
 800979a:	e7c5      	b.n	8009728 <quorem+0x94>
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	3b04      	subs	r3, #4
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	d1ef      	bne.n	8009784 <quorem+0xf0>
 80097a4:	3c01      	subs	r4, #1
 80097a6:	e7ea      	b.n	800977e <quorem+0xea>
 80097a8:	2000      	movs	r0, #0
 80097aa:	e7ee      	b.n	800978a <quorem+0xf6>
 80097ac:	0000      	movs	r0, r0
	...

080097b0 <_dtoa_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	ec57 6b10 	vmov	r6, r7, d0
 80097b8:	b097      	sub	sp, #92	; 0x5c
 80097ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097bc:	9106      	str	r1, [sp, #24]
 80097be:	4604      	mov	r4, r0
 80097c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80097c2:	9312      	str	r3, [sp, #72]	; 0x48
 80097c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097c8:	e9cd 6700 	strd	r6, r7, [sp]
 80097cc:	b93d      	cbnz	r5, 80097de <_dtoa_r+0x2e>
 80097ce:	2010      	movs	r0, #16
 80097d0:	f001 f9aa 	bl	800ab28 <malloc>
 80097d4:	6260      	str	r0, [r4, #36]	; 0x24
 80097d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097da:	6005      	str	r5, [r0, #0]
 80097dc:	60c5      	str	r5, [r0, #12]
 80097de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e0:	6819      	ldr	r1, [r3, #0]
 80097e2:	b151      	cbz	r1, 80097fa <_dtoa_r+0x4a>
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	604a      	str	r2, [r1, #4]
 80097e8:	2301      	movs	r3, #1
 80097ea:	4093      	lsls	r3, r2
 80097ec:	608b      	str	r3, [r1, #8]
 80097ee:	4620      	mov	r0, r4
 80097f0:	f001 f9f3 	bl	800abda <_Bfree>
 80097f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	1e3b      	subs	r3, r7, #0
 80097fc:	bfbb      	ittet	lt
 80097fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009802:	9301      	strlt	r3, [sp, #4]
 8009804:	2300      	movge	r3, #0
 8009806:	2201      	movlt	r2, #1
 8009808:	bfac      	ite	ge
 800980a:	f8c8 3000 	strge.w	r3, [r8]
 800980e:	f8c8 2000 	strlt.w	r2, [r8]
 8009812:	4baf      	ldr	r3, [pc, #700]	; (8009ad0 <_dtoa_r+0x320>)
 8009814:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009818:	ea33 0308 	bics.w	r3, r3, r8
 800981c:	d114      	bne.n	8009848 <_dtoa_r+0x98>
 800981e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009820:	f242 730f 	movw	r3, #9999	; 0x270f
 8009824:	6013      	str	r3, [r2, #0]
 8009826:	9b00      	ldr	r3, [sp, #0]
 8009828:	b923      	cbnz	r3, 8009834 <_dtoa_r+0x84>
 800982a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800982e:	2800      	cmp	r0, #0
 8009830:	f000 8542 	beq.w	800a2b8 <_dtoa_r+0xb08>
 8009834:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009836:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009ae4 <_dtoa_r+0x334>
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 8544 	beq.w	800a2c8 <_dtoa_r+0xb18>
 8009840:	f10b 0303 	add.w	r3, fp, #3
 8009844:	f000 bd3e 	b.w	800a2c4 <_dtoa_r+0xb14>
 8009848:	e9dd 6700 	ldrd	r6, r7, [sp]
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	4630      	mov	r0, r6
 8009852:	4639      	mov	r1, r7
 8009854:	f7f7 f938 	bl	8000ac8 <__aeabi_dcmpeq>
 8009858:	4681      	mov	r9, r0
 800985a:	b168      	cbz	r0, 8009878 <_dtoa_r+0xc8>
 800985c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800985e:	2301      	movs	r3, #1
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 8524 	beq.w	800a2b2 <_dtoa_r+0xb02>
 800986a:	4b9a      	ldr	r3, [pc, #616]	; (8009ad4 <_dtoa_r+0x324>)
 800986c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800986e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	f000 bd28 	b.w	800a2c8 <_dtoa_r+0xb18>
 8009878:	aa14      	add	r2, sp, #80	; 0x50
 800987a:	a915      	add	r1, sp, #84	; 0x54
 800987c:	ec47 6b10 	vmov	d0, r6, r7
 8009880:	4620      	mov	r0, r4
 8009882:	f001 fcb7 	bl	800b1f4 <__d2b>
 8009886:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800988a:	9004      	str	r0, [sp, #16]
 800988c:	2d00      	cmp	r5, #0
 800988e:	d07c      	beq.n	800998a <_dtoa_r+0x1da>
 8009890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009894:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009898:	46b2      	mov	sl, r6
 800989a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800989e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80098a6:	2200      	movs	r2, #0
 80098a8:	4b8b      	ldr	r3, [pc, #556]	; (8009ad8 <_dtoa_r+0x328>)
 80098aa:	4650      	mov	r0, sl
 80098ac:	4659      	mov	r1, fp
 80098ae:	f7f6 fceb 	bl	8000288 <__aeabi_dsub>
 80098b2:	a381      	add	r3, pc, #516	; (adr r3, 8009ab8 <_dtoa_r+0x308>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fe9e 	bl	80005f8 <__aeabi_dmul>
 80098bc:	a380      	add	r3, pc, #512	; (adr r3, 8009ac0 <_dtoa_r+0x310>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fce3 	bl	800028c <__adddf3>
 80098c6:	4606      	mov	r6, r0
 80098c8:	4628      	mov	r0, r5
 80098ca:	460f      	mov	r7, r1
 80098cc:	f7f6 fe2a 	bl	8000524 <__aeabi_i2d>
 80098d0:	a37d      	add	r3, pc, #500	; (adr r3, 8009ac8 <_dtoa_r+0x318>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7f6 fe8f 	bl	80005f8 <__aeabi_dmul>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4630      	mov	r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	f7f6 fcd3 	bl	800028c <__adddf3>
 80098e6:	4606      	mov	r6, r0
 80098e8:	460f      	mov	r7, r1
 80098ea:	f7f7 f935 	bl	8000b58 <__aeabi_d2iz>
 80098ee:	2200      	movs	r2, #0
 80098f0:	4682      	mov	sl, r0
 80098f2:	2300      	movs	r3, #0
 80098f4:	4630      	mov	r0, r6
 80098f6:	4639      	mov	r1, r7
 80098f8:	f7f7 f8f0 	bl	8000adc <__aeabi_dcmplt>
 80098fc:	b148      	cbz	r0, 8009912 <_dtoa_r+0x162>
 80098fe:	4650      	mov	r0, sl
 8009900:	f7f6 fe10 	bl	8000524 <__aeabi_i2d>
 8009904:	4632      	mov	r2, r6
 8009906:	463b      	mov	r3, r7
 8009908:	f7f7 f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800990c:	b908      	cbnz	r0, 8009912 <_dtoa_r+0x162>
 800990e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009912:	f1ba 0f16 	cmp.w	sl, #22
 8009916:	d859      	bhi.n	80099cc <_dtoa_r+0x21c>
 8009918:	4970      	ldr	r1, [pc, #448]	; (8009adc <_dtoa_r+0x32c>)
 800991a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800991e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009926:	f7f7 f8f7 	bl	8000b18 <__aeabi_dcmpgt>
 800992a:	2800      	cmp	r0, #0
 800992c:	d050      	beq.n	80099d0 <_dtoa_r+0x220>
 800992e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009932:	2300      	movs	r3, #0
 8009934:	930f      	str	r3, [sp, #60]	; 0x3c
 8009936:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009938:	1b5d      	subs	r5, r3, r5
 800993a:	f1b5 0801 	subs.w	r8, r5, #1
 800993e:	bf49      	itett	mi
 8009940:	f1c5 0301 	rsbmi	r3, r5, #1
 8009944:	2300      	movpl	r3, #0
 8009946:	9305      	strmi	r3, [sp, #20]
 8009948:	f04f 0800 	movmi.w	r8, #0
 800994c:	bf58      	it	pl
 800994e:	9305      	strpl	r3, [sp, #20]
 8009950:	f1ba 0f00 	cmp.w	sl, #0
 8009954:	db3e      	blt.n	80099d4 <_dtoa_r+0x224>
 8009956:	2300      	movs	r3, #0
 8009958:	44d0      	add	r8, sl
 800995a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	9b06      	ldr	r3, [sp, #24]
 8009962:	2b09      	cmp	r3, #9
 8009964:	f200 8090 	bhi.w	8009a88 <_dtoa_r+0x2d8>
 8009968:	2b05      	cmp	r3, #5
 800996a:	bfc4      	itt	gt
 800996c:	3b04      	subgt	r3, #4
 800996e:	9306      	strgt	r3, [sp, #24]
 8009970:	9b06      	ldr	r3, [sp, #24]
 8009972:	f1a3 0302 	sub.w	r3, r3, #2
 8009976:	bfcc      	ite	gt
 8009978:	2500      	movgt	r5, #0
 800997a:	2501      	movle	r5, #1
 800997c:	2b03      	cmp	r3, #3
 800997e:	f200 808f 	bhi.w	8009aa0 <_dtoa_r+0x2f0>
 8009982:	e8df f003 	tbb	[pc, r3]
 8009986:	7f7d      	.short	0x7f7d
 8009988:	7131      	.short	0x7131
 800998a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800998e:	441d      	add	r5, r3
 8009990:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009994:	2820      	cmp	r0, #32
 8009996:	dd13      	ble.n	80099c0 <_dtoa_r+0x210>
 8009998:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800999c:	9b00      	ldr	r3, [sp, #0]
 800999e:	fa08 f800 	lsl.w	r8, r8, r0
 80099a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80099a6:	fa23 f000 	lsr.w	r0, r3, r0
 80099aa:	ea48 0000 	orr.w	r0, r8, r0
 80099ae:	f7f6 fda9 	bl	8000504 <__aeabi_ui2d>
 80099b2:	2301      	movs	r3, #1
 80099b4:	4682      	mov	sl, r0
 80099b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80099ba:	3d01      	subs	r5, #1
 80099bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80099be:	e772      	b.n	80098a6 <_dtoa_r+0xf6>
 80099c0:	9b00      	ldr	r3, [sp, #0]
 80099c2:	f1c0 0020 	rsb	r0, r0, #32
 80099c6:	fa03 f000 	lsl.w	r0, r3, r0
 80099ca:	e7f0      	b.n	80099ae <_dtoa_r+0x1fe>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e7b1      	b.n	8009934 <_dtoa_r+0x184>
 80099d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80099d2:	e7b0      	b.n	8009936 <_dtoa_r+0x186>
 80099d4:	9b05      	ldr	r3, [sp, #20]
 80099d6:	eba3 030a 	sub.w	r3, r3, sl
 80099da:	9305      	str	r3, [sp, #20]
 80099dc:	f1ca 0300 	rsb	r3, sl, #0
 80099e0:	9307      	str	r3, [sp, #28]
 80099e2:	2300      	movs	r3, #0
 80099e4:	930e      	str	r3, [sp, #56]	; 0x38
 80099e6:	e7bb      	b.n	8009960 <_dtoa_r+0x1b0>
 80099e8:	2301      	movs	r3, #1
 80099ea:	930a      	str	r3, [sp, #40]	; 0x28
 80099ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dd59      	ble.n	8009aa6 <_dtoa_r+0x2f6>
 80099f2:	9302      	str	r3, [sp, #8]
 80099f4:	4699      	mov	r9, r3
 80099f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099f8:	2200      	movs	r2, #0
 80099fa:	6072      	str	r2, [r6, #4]
 80099fc:	2204      	movs	r2, #4
 80099fe:	f102 0014 	add.w	r0, r2, #20
 8009a02:	4298      	cmp	r0, r3
 8009a04:	6871      	ldr	r1, [r6, #4]
 8009a06:	d953      	bls.n	8009ab0 <_dtoa_r+0x300>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f001 f8b2 	bl	800ab72 <_Balloc>
 8009a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a10:	6030      	str	r0, [r6, #0]
 8009a12:	f1b9 0f0e 	cmp.w	r9, #14
 8009a16:	f8d3 b000 	ldr.w	fp, [r3]
 8009a1a:	f200 80e6 	bhi.w	8009bea <_dtoa_r+0x43a>
 8009a1e:	2d00      	cmp	r5, #0
 8009a20:	f000 80e3 	beq.w	8009bea <_dtoa_r+0x43a>
 8009a24:	ed9d 7b00 	vldr	d7, [sp]
 8009a28:	f1ba 0f00 	cmp.w	sl, #0
 8009a2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009a30:	dd74      	ble.n	8009b1c <_dtoa_r+0x36c>
 8009a32:	4a2a      	ldr	r2, [pc, #168]	; (8009adc <_dtoa_r+0x32c>)
 8009a34:	f00a 030f 	and.w	r3, sl, #15
 8009a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a3c:	ed93 7b00 	vldr	d7, [r3]
 8009a40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009a44:	06f0      	lsls	r0, r6, #27
 8009a46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009a4a:	d565      	bpl.n	8009b18 <_dtoa_r+0x368>
 8009a4c:	4b24      	ldr	r3, [pc, #144]	; (8009ae0 <_dtoa_r+0x330>)
 8009a4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a56:	f7f6 fef9 	bl	800084c <__aeabi_ddiv>
 8009a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8009a5e:	f006 060f 	and.w	r6, r6, #15
 8009a62:	2503      	movs	r5, #3
 8009a64:	4f1e      	ldr	r7, [pc, #120]	; (8009ae0 <_dtoa_r+0x330>)
 8009a66:	e04c      	b.n	8009b02 <_dtoa_r+0x352>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a6e:	4453      	add	r3, sl
 8009a70:	f103 0901 	add.w	r9, r3, #1
 8009a74:	9302      	str	r3, [sp, #8]
 8009a76:	464b      	mov	r3, r9
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	bfb8      	it	lt
 8009a7c:	2301      	movlt	r3, #1
 8009a7e:	e7ba      	b.n	80099f6 <_dtoa_r+0x246>
 8009a80:	2300      	movs	r3, #0
 8009a82:	e7b2      	b.n	80099ea <_dtoa_r+0x23a>
 8009a84:	2300      	movs	r3, #0
 8009a86:	e7f0      	b.n	8009a6a <_dtoa_r+0x2ba>
 8009a88:	2501      	movs	r5, #1
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9306      	str	r3, [sp, #24]
 8009a8e:	950a      	str	r5, [sp, #40]	; 0x28
 8009a90:	f04f 33ff 	mov.w	r3, #4294967295
 8009a94:	9302      	str	r3, [sp, #8]
 8009a96:	4699      	mov	r9, r3
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2312      	movs	r3, #18
 8009a9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009a9e:	e7aa      	b.n	80099f6 <_dtoa_r+0x246>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8009aa4:	e7f4      	b.n	8009a90 <_dtoa_r+0x2e0>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	9302      	str	r3, [sp, #8]
 8009aaa:	4699      	mov	r9, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	e7f5      	b.n	8009a9c <_dtoa_r+0x2ec>
 8009ab0:	3101      	adds	r1, #1
 8009ab2:	6071      	str	r1, [r6, #4]
 8009ab4:	0052      	lsls	r2, r2, #1
 8009ab6:	e7a2      	b.n	80099fe <_dtoa_r+0x24e>
 8009ab8:	636f4361 	.word	0x636f4361
 8009abc:	3fd287a7 	.word	0x3fd287a7
 8009ac0:	8b60c8b3 	.word	0x8b60c8b3
 8009ac4:	3fc68a28 	.word	0x3fc68a28
 8009ac8:	509f79fb 	.word	0x509f79fb
 8009acc:	3fd34413 	.word	0x3fd34413
 8009ad0:	7ff00000 	.word	0x7ff00000
 8009ad4:	0800c095 	.word	0x0800c095
 8009ad8:	3ff80000 	.word	0x3ff80000
 8009adc:	0800c1b8 	.word	0x0800c1b8
 8009ae0:	0800c190 	.word	0x0800c190
 8009ae4:	0800c119 	.word	0x0800c119
 8009ae8:	07f1      	lsls	r1, r6, #31
 8009aea:	d508      	bpl.n	8009afe <_dtoa_r+0x34e>
 8009aec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af4:	f7f6 fd80 	bl	80005f8 <__aeabi_dmul>
 8009af8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009afc:	3501      	adds	r5, #1
 8009afe:	1076      	asrs	r6, r6, #1
 8009b00:	3708      	adds	r7, #8
 8009b02:	2e00      	cmp	r6, #0
 8009b04:	d1f0      	bne.n	8009ae8 <_dtoa_r+0x338>
 8009b06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b0e:	f7f6 fe9d 	bl	800084c <__aeabi_ddiv>
 8009b12:	e9cd 0100 	strd	r0, r1, [sp]
 8009b16:	e01a      	b.n	8009b4e <_dtoa_r+0x39e>
 8009b18:	2502      	movs	r5, #2
 8009b1a:	e7a3      	b.n	8009a64 <_dtoa_r+0x2b4>
 8009b1c:	f000 80a0 	beq.w	8009c60 <_dtoa_r+0x4b0>
 8009b20:	f1ca 0600 	rsb	r6, sl, #0
 8009b24:	4b9f      	ldr	r3, [pc, #636]	; (8009da4 <_dtoa_r+0x5f4>)
 8009b26:	4fa0      	ldr	r7, [pc, #640]	; (8009da8 <_dtoa_r+0x5f8>)
 8009b28:	f006 020f 	and.w	r2, r6, #15
 8009b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b38:	f7f6 fd5e 	bl	80005f8 <__aeabi_dmul>
 8009b3c:	e9cd 0100 	strd	r0, r1, [sp]
 8009b40:	1136      	asrs	r6, r6, #4
 8009b42:	2300      	movs	r3, #0
 8009b44:	2502      	movs	r5, #2
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	d17f      	bne.n	8009c4a <_dtoa_r+0x49a>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e1      	bne.n	8009b12 <_dtoa_r+0x362>
 8009b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 8087 	beq.w	8009c64 <_dtoa_r+0x4b4>
 8009b56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	4b93      	ldr	r3, [pc, #588]	; (8009dac <_dtoa_r+0x5fc>)
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	f7f6 ffbb 	bl	8000adc <__aeabi_dcmplt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d07c      	beq.n	8009c64 <_dtoa_r+0x4b4>
 8009b6a:	f1b9 0f00 	cmp.w	r9, #0
 8009b6e:	d079      	beq.n	8009c64 <_dtoa_r+0x4b4>
 8009b70:	9b02      	ldr	r3, [sp, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	dd35      	ble.n	8009be2 <_dtoa_r+0x432>
 8009b76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009b7a:	9308      	str	r3, [sp, #32]
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	2200      	movs	r2, #0
 8009b80:	4b8b      	ldr	r3, [pc, #556]	; (8009db0 <_dtoa_r+0x600>)
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7f6 fd38 	bl	80005f8 <__aeabi_dmul>
 8009b88:	e9cd 0100 	strd	r0, r1, [sp]
 8009b8c:	9f02      	ldr	r7, [sp, #8]
 8009b8e:	3501      	adds	r5, #1
 8009b90:	4628      	mov	r0, r5
 8009b92:	f7f6 fcc7 	bl	8000524 <__aeabi_i2d>
 8009b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b9a:	f7f6 fd2d 	bl	80005f8 <__aeabi_dmul>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4b84      	ldr	r3, [pc, #528]	; (8009db4 <_dtoa_r+0x604>)
 8009ba2:	f7f6 fb73 	bl	800028c <__adddf3>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bac:	2f00      	cmp	r7, #0
 8009bae:	d15d      	bne.n	8009c6c <_dtoa_r+0x4bc>
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4b81      	ldr	r3, [pc, #516]	; (8009db8 <_dtoa_r+0x608>)
 8009bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bb8:	f7f6 fb66 	bl	8000288 <__aeabi_dsub>
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	4633      	mov	r3, r6
 8009bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8009bc4:	f7f6 ffa8 	bl	8000b18 <__aeabi_dcmpgt>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	f040 8288 	bne.w	800a0de <_dtoa_r+0x92e>
 8009bce:	462a      	mov	r2, r5
 8009bd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bd8:	f7f6 ff80 	bl	8000adc <__aeabi_dcmplt>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	f040 827c 	bne.w	800a0da <_dtoa_r+0x92a>
 8009be2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009be6:	e9cd 2300 	strd	r2, r3, [sp]
 8009bea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f2c0 8150 	blt.w	8009e92 <_dtoa_r+0x6e2>
 8009bf2:	f1ba 0f0e 	cmp.w	sl, #14
 8009bf6:	f300 814c 	bgt.w	8009e92 <_dtoa_r+0x6e2>
 8009bfa:	4b6a      	ldr	r3, [pc, #424]	; (8009da4 <_dtoa_r+0x5f4>)
 8009bfc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c00:	ed93 7b00 	vldr	d7, [r3]
 8009c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c0c:	f280 80d8 	bge.w	8009dc0 <_dtoa_r+0x610>
 8009c10:	f1b9 0f00 	cmp.w	r9, #0
 8009c14:	f300 80d4 	bgt.w	8009dc0 <_dtoa_r+0x610>
 8009c18:	f040 825e 	bne.w	800a0d8 <_dtoa_r+0x928>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4b66      	ldr	r3, [pc, #408]	; (8009db8 <_dtoa_r+0x608>)
 8009c20:	ec51 0b17 	vmov	r0, r1, d7
 8009c24:	f7f6 fce8 	bl	80005f8 <__aeabi_dmul>
 8009c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c2c:	f7f6 ff6a 	bl	8000b04 <__aeabi_dcmpge>
 8009c30:	464f      	mov	r7, r9
 8009c32:	464e      	mov	r6, r9
 8009c34:	2800      	cmp	r0, #0
 8009c36:	f040 8234 	bne.w	800a0a2 <_dtoa_r+0x8f2>
 8009c3a:	2331      	movs	r3, #49	; 0x31
 8009c3c:	f10b 0501 	add.w	r5, fp, #1
 8009c40:	f88b 3000 	strb.w	r3, [fp]
 8009c44:	f10a 0a01 	add.w	sl, sl, #1
 8009c48:	e22f      	b.n	800a0aa <_dtoa_r+0x8fa>
 8009c4a:	07f2      	lsls	r2, r6, #31
 8009c4c:	d505      	bpl.n	8009c5a <_dtoa_r+0x4aa>
 8009c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c52:	f7f6 fcd1 	bl	80005f8 <__aeabi_dmul>
 8009c56:	3501      	adds	r5, #1
 8009c58:	2301      	movs	r3, #1
 8009c5a:	1076      	asrs	r6, r6, #1
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	e772      	b.n	8009b46 <_dtoa_r+0x396>
 8009c60:	2502      	movs	r5, #2
 8009c62:	e774      	b.n	8009b4e <_dtoa_r+0x39e>
 8009c64:	f8cd a020 	str.w	sl, [sp, #32]
 8009c68:	464f      	mov	r7, r9
 8009c6a:	e791      	b.n	8009b90 <_dtoa_r+0x3e0>
 8009c6c:	4b4d      	ldr	r3, [pc, #308]	; (8009da4 <_dtoa_r+0x5f4>)
 8009c6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d047      	beq.n	8009d0c <_dtoa_r+0x55c>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	2000      	movs	r0, #0
 8009c82:	494e      	ldr	r1, [pc, #312]	; (8009dbc <_dtoa_r+0x60c>)
 8009c84:	f7f6 fde2 	bl	800084c <__aeabi_ddiv>
 8009c88:	462a      	mov	r2, r5
 8009c8a:	4633      	mov	r3, r6
 8009c8c:	f7f6 fafc 	bl	8000288 <__aeabi_dsub>
 8009c90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c94:	465d      	mov	r5, fp
 8009c96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c9a:	f7f6 ff5d 	bl	8000b58 <__aeabi_d2iz>
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	f7f6 fc40 	bl	8000524 <__aeabi_i2d>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cac:	f7f6 faec 	bl	8000288 <__aeabi_dsub>
 8009cb0:	3630      	adds	r6, #48	; 0x30
 8009cb2:	f805 6b01 	strb.w	r6, [r5], #1
 8009cb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cba:	e9cd 0100 	strd	r0, r1, [sp]
 8009cbe:	f7f6 ff0d 	bl	8000adc <__aeabi_dcmplt>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d163      	bne.n	8009d8e <_dtoa_r+0x5de>
 8009cc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cca:	2000      	movs	r0, #0
 8009ccc:	4937      	ldr	r1, [pc, #220]	; (8009dac <_dtoa_r+0x5fc>)
 8009cce:	f7f6 fadb 	bl	8000288 <__aeabi_dsub>
 8009cd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cd6:	f7f6 ff01 	bl	8000adc <__aeabi_dcmplt>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	f040 80b7 	bne.w	8009e4e <_dtoa_r+0x69e>
 8009ce0:	eba5 030b 	sub.w	r3, r5, fp
 8009ce4:	429f      	cmp	r7, r3
 8009ce6:	f77f af7c 	ble.w	8009be2 <_dtoa_r+0x432>
 8009cea:	2200      	movs	r2, #0
 8009cec:	4b30      	ldr	r3, [pc, #192]	; (8009db0 <_dtoa_r+0x600>)
 8009cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cf2:	f7f6 fc81 	bl	80005f8 <__aeabi_dmul>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009cfc:	4b2c      	ldr	r3, [pc, #176]	; (8009db0 <_dtoa_r+0x600>)
 8009cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d02:	f7f6 fc79 	bl	80005f8 <__aeabi_dmul>
 8009d06:	e9cd 0100 	strd	r0, r1, [sp]
 8009d0a:	e7c4      	b.n	8009c96 <_dtoa_r+0x4e6>
 8009d0c:	462a      	mov	r2, r5
 8009d0e:	4633      	mov	r3, r6
 8009d10:	f7f6 fc72 	bl	80005f8 <__aeabi_dmul>
 8009d14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d18:	eb0b 0507 	add.w	r5, fp, r7
 8009d1c:	465e      	mov	r6, fp
 8009d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d22:	f7f6 ff19 	bl	8000b58 <__aeabi_d2iz>
 8009d26:	4607      	mov	r7, r0
 8009d28:	f7f6 fbfc 	bl	8000524 <__aeabi_i2d>
 8009d2c:	3730      	adds	r7, #48	; 0x30
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	f806 7b01 	strb.w	r7, [r6], #1
 8009d3e:	42ae      	cmp	r6, r5
 8009d40:	e9cd 0100 	strd	r0, r1, [sp]
 8009d44:	f04f 0200 	mov.w	r2, #0
 8009d48:	d126      	bne.n	8009d98 <_dtoa_r+0x5e8>
 8009d4a:	4b1c      	ldr	r3, [pc, #112]	; (8009dbc <_dtoa_r+0x60c>)
 8009d4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d50:	f7f6 fa9c 	bl	800028c <__adddf3>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d5c:	f7f6 fedc 	bl	8000b18 <__aeabi_dcmpgt>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d174      	bne.n	8009e4e <_dtoa_r+0x69e>
 8009d64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d68:	2000      	movs	r0, #0
 8009d6a:	4914      	ldr	r1, [pc, #80]	; (8009dbc <_dtoa_r+0x60c>)
 8009d6c:	f7f6 fa8c 	bl	8000288 <__aeabi_dsub>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d78:	f7f6 feb0 	bl	8000adc <__aeabi_dcmplt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f43f af30 	beq.w	8009be2 <_dtoa_r+0x432>
 8009d82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d86:	2b30      	cmp	r3, #48	; 0x30
 8009d88:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d8c:	d002      	beq.n	8009d94 <_dtoa_r+0x5e4>
 8009d8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009d92:	e04a      	b.n	8009e2a <_dtoa_r+0x67a>
 8009d94:	4615      	mov	r5, r2
 8009d96:	e7f4      	b.n	8009d82 <_dtoa_r+0x5d2>
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <_dtoa_r+0x600>)
 8009d9a:	f7f6 fc2d 	bl	80005f8 <__aeabi_dmul>
 8009d9e:	e9cd 0100 	strd	r0, r1, [sp]
 8009da2:	e7bc      	b.n	8009d1e <_dtoa_r+0x56e>
 8009da4:	0800c1b8 	.word	0x0800c1b8
 8009da8:	0800c190 	.word	0x0800c190
 8009dac:	3ff00000 	.word	0x3ff00000
 8009db0:	40240000 	.word	0x40240000
 8009db4:	401c0000 	.word	0x401c0000
 8009db8:	40140000 	.word	0x40140000
 8009dbc:	3fe00000 	.word	0x3fe00000
 8009dc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009dc4:	465d      	mov	r5, fp
 8009dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fd3d 	bl	800084c <__aeabi_ddiv>
 8009dd2:	f7f6 fec1 	bl	8000b58 <__aeabi_d2iz>
 8009dd6:	4680      	mov	r8, r0
 8009dd8:	f7f6 fba4 	bl	8000524 <__aeabi_i2d>
 8009ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de0:	f7f6 fc0a 	bl	80005f8 <__aeabi_dmul>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4630      	mov	r0, r6
 8009dea:	4639      	mov	r1, r7
 8009dec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009df0:	f7f6 fa4a 	bl	8000288 <__aeabi_dsub>
 8009df4:	f805 6b01 	strb.w	r6, [r5], #1
 8009df8:	eba5 060b 	sub.w	r6, r5, fp
 8009dfc:	45b1      	cmp	r9, r6
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	d139      	bne.n	8009e78 <_dtoa_r+0x6c8>
 8009e04:	f7f6 fa42 	bl	800028c <__adddf3>
 8009e08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	460f      	mov	r7, r1
 8009e10:	f7f6 fe82 	bl	8000b18 <__aeabi_dcmpgt>
 8009e14:	b9c8      	cbnz	r0, 8009e4a <_dtoa_r+0x69a>
 8009e16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e22:	b110      	cbz	r0, 8009e2a <_dtoa_r+0x67a>
 8009e24:	f018 0f01 	tst.w	r8, #1
 8009e28:	d10f      	bne.n	8009e4a <_dtoa_r+0x69a>
 8009e2a:	9904      	ldr	r1, [sp, #16]
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fed4 	bl	800abda <_Bfree>
 8009e32:	2300      	movs	r3, #0
 8009e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e36:	702b      	strb	r3, [r5, #0]
 8009e38:	f10a 0301 	add.w	r3, sl, #1
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 8241 	beq.w	800a2c8 <_dtoa_r+0xb18>
 8009e46:	601d      	str	r5, [r3, #0]
 8009e48:	e23e      	b.n	800a2c8 <_dtoa_r+0xb18>
 8009e4a:	f8cd a020 	str.w	sl, [sp, #32]
 8009e4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e52:	2a39      	cmp	r2, #57	; 0x39
 8009e54:	f105 33ff 	add.w	r3, r5, #4294967295
 8009e58:	d108      	bne.n	8009e6c <_dtoa_r+0x6bc>
 8009e5a:	459b      	cmp	fp, r3
 8009e5c:	d10a      	bne.n	8009e74 <_dtoa_r+0x6c4>
 8009e5e:	9b08      	ldr	r3, [sp, #32]
 8009e60:	3301      	adds	r3, #1
 8009e62:	9308      	str	r3, [sp, #32]
 8009e64:	2330      	movs	r3, #48	; 0x30
 8009e66:	f88b 3000 	strb.w	r3, [fp]
 8009e6a:	465b      	mov	r3, fp
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	3201      	adds	r2, #1
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	e78c      	b.n	8009d8e <_dtoa_r+0x5de>
 8009e74:	461d      	mov	r5, r3
 8009e76:	e7ea      	b.n	8009e4e <_dtoa_r+0x69e>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	4b9b      	ldr	r3, [pc, #620]	; (800a0e8 <_dtoa_r+0x938>)
 8009e7c:	f7f6 fbbc 	bl	80005f8 <__aeabi_dmul>
 8009e80:	2200      	movs	r2, #0
 8009e82:	2300      	movs	r3, #0
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	f7f6 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d09a      	beq.n	8009dc6 <_dtoa_r+0x616>
 8009e90:	e7cb      	b.n	8009e2a <_dtoa_r+0x67a>
 8009e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	f000 808b 	beq.w	8009fb0 <_dtoa_r+0x800>
 8009e9a:	9a06      	ldr	r2, [sp, #24]
 8009e9c:	2a01      	cmp	r2, #1
 8009e9e:	dc6e      	bgt.n	8009f7e <_dtoa_r+0x7ce>
 8009ea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	d067      	beq.n	8009f76 <_dtoa_r+0x7c6>
 8009ea6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009eaa:	9f07      	ldr	r7, [sp, #28]
 8009eac:	9d05      	ldr	r5, [sp, #20]
 8009eae:	9a05      	ldr	r2, [sp, #20]
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	441a      	add	r2, r3
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	9205      	str	r2, [sp, #20]
 8009eb8:	4498      	add	r8, r3
 8009eba:	f000 ff6c 	bl	800ad96 <__i2b>
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	dd0c      	ble.n	8009ede <_dtoa_r+0x72e>
 8009ec4:	f1b8 0f00 	cmp.w	r8, #0
 8009ec8:	dd09      	ble.n	8009ede <_dtoa_r+0x72e>
 8009eca:	4545      	cmp	r5, r8
 8009ecc:	9a05      	ldr	r2, [sp, #20]
 8009ece:	462b      	mov	r3, r5
 8009ed0:	bfa8      	it	ge
 8009ed2:	4643      	movge	r3, r8
 8009ed4:	1ad2      	subs	r2, r2, r3
 8009ed6:	9205      	str	r2, [sp, #20]
 8009ed8:	1aed      	subs	r5, r5, r3
 8009eda:	eba8 0803 	sub.w	r8, r8, r3
 8009ede:	9b07      	ldr	r3, [sp, #28]
 8009ee0:	b1eb      	cbz	r3, 8009f1e <_dtoa_r+0x76e>
 8009ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d067      	beq.n	8009fb8 <_dtoa_r+0x808>
 8009ee8:	b18f      	cbz	r7, 8009f0e <_dtoa_r+0x75e>
 8009eea:	4631      	mov	r1, r6
 8009eec:	463a      	mov	r2, r7
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f000 fff0 	bl	800aed4 <__pow5mult>
 8009ef4:	9a04      	ldr	r2, [sp, #16]
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	4606      	mov	r6, r0
 8009efa:	4620      	mov	r0, r4
 8009efc:	f000 ff54 	bl	800ada8 <__multiply>
 8009f00:	9904      	ldr	r1, [sp, #16]
 8009f02:	9008      	str	r0, [sp, #32]
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 fe68 	bl	800abda <_Bfree>
 8009f0a:	9b08      	ldr	r3, [sp, #32]
 8009f0c:	9304      	str	r3, [sp, #16]
 8009f0e:	9b07      	ldr	r3, [sp, #28]
 8009f10:	1bda      	subs	r2, r3, r7
 8009f12:	d004      	beq.n	8009f1e <_dtoa_r+0x76e>
 8009f14:	9904      	ldr	r1, [sp, #16]
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 ffdc 	bl	800aed4 <__pow5mult>
 8009f1c:	9004      	str	r0, [sp, #16]
 8009f1e:	2101      	movs	r1, #1
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 ff38 	bl	800ad96 <__i2b>
 8009f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f28:	4607      	mov	r7, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 81d0 	beq.w	800a2d0 <_dtoa_r+0xb20>
 8009f30:	461a      	mov	r2, r3
 8009f32:	4601      	mov	r1, r0
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 ffcd 	bl	800aed4 <__pow5mult>
 8009f3a:	9b06      	ldr	r3, [sp, #24]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	4607      	mov	r7, r0
 8009f40:	dc40      	bgt.n	8009fc4 <_dtoa_r+0x814>
 8009f42:	9b00      	ldr	r3, [sp, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d139      	bne.n	8009fbc <_dtoa_r+0x80c>
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d136      	bne.n	8009fc0 <_dtoa_r+0x810>
 8009f52:	9b01      	ldr	r3, [sp, #4]
 8009f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f58:	0d1b      	lsrs	r3, r3, #20
 8009f5a:	051b      	lsls	r3, r3, #20
 8009f5c:	b12b      	cbz	r3, 8009f6a <_dtoa_r+0x7ba>
 8009f5e:	9b05      	ldr	r3, [sp, #20]
 8009f60:	3301      	adds	r3, #1
 8009f62:	9305      	str	r3, [sp, #20]
 8009f64:	f108 0801 	add.w	r8, r8, #1
 8009f68:	2301      	movs	r3, #1
 8009f6a:	9307      	str	r3, [sp, #28]
 8009f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d12a      	bne.n	8009fc8 <_dtoa_r+0x818>
 8009f72:	2001      	movs	r0, #1
 8009f74:	e030      	b.n	8009fd8 <_dtoa_r+0x828>
 8009f76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f7c:	e795      	b.n	8009eaa <_dtoa_r+0x6fa>
 8009f7e:	9b07      	ldr	r3, [sp, #28]
 8009f80:	f109 37ff 	add.w	r7, r9, #4294967295
 8009f84:	42bb      	cmp	r3, r7
 8009f86:	bfbf      	itttt	lt
 8009f88:	9b07      	ldrlt	r3, [sp, #28]
 8009f8a:	9707      	strlt	r7, [sp, #28]
 8009f8c:	1afa      	sublt	r2, r7, r3
 8009f8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009f90:	bfbb      	ittet	lt
 8009f92:	189b      	addlt	r3, r3, r2
 8009f94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009f96:	1bdf      	subge	r7, r3, r7
 8009f98:	2700      	movlt	r7, #0
 8009f9a:	f1b9 0f00 	cmp.w	r9, #0
 8009f9e:	bfb5      	itete	lt
 8009fa0:	9b05      	ldrlt	r3, [sp, #20]
 8009fa2:	9d05      	ldrge	r5, [sp, #20]
 8009fa4:	eba3 0509 	sublt.w	r5, r3, r9
 8009fa8:	464b      	movge	r3, r9
 8009faa:	bfb8      	it	lt
 8009fac:	2300      	movlt	r3, #0
 8009fae:	e77e      	b.n	8009eae <_dtoa_r+0x6fe>
 8009fb0:	9f07      	ldr	r7, [sp, #28]
 8009fb2:	9d05      	ldr	r5, [sp, #20]
 8009fb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009fb6:	e783      	b.n	8009ec0 <_dtoa_r+0x710>
 8009fb8:	9a07      	ldr	r2, [sp, #28]
 8009fba:	e7ab      	b.n	8009f14 <_dtoa_r+0x764>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e7d4      	b.n	8009f6a <_dtoa_r+0x7ba>
 8009fc0:	9b00      	ldr	r3, [sp, #0]
 8009fc2:	e7d2      	b.n	8009f6a <_dtoa_r+0x7ba>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9307      	str	r3, [sp, #28]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009fce:	6918      	ldr	r0, [r3, #16]
 8009fd0:	f000 fe93 	bl	800acfa <__hi0bits>
 8009fd4:	f1c0 0020 	rsb	r0, r0, #32
 8009fd8:	4440      	add	r0, r8
 8009fda:	f010 001f 	ands.w	r0, r0, #31
 8009fde:	d047      	beq.n	800a070 <_dtoa_r+0x8c0>
 8009fe0:	f1c0 0320 	rsb	r3, r0, #32
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	dd3b      	ble.n	800a060 <_dtoa_r+0x8b0>
 8009fe8:	9b05      	ldr	r3, [sp, #20]
 8009fea:	f1c0 001c 	rsb	r0, r0, #28
 8009fee:	4403      	add	r3, r0
 8009ff0:	9305      	str	r3, [sp, #20]
 8009ff2:	4405      	add	r5, r0
 8009ff4:	4480      	add	r8, r0
 8009ff6:	9b05      	ldr	r3, [sp, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dd05      	ble.n	800a008 <_dtoa_r+0x858>
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	9904      	ldr	r1, [sp, #16]
 800a000:	4620      	mov	r0, r4
 800a002:	f000 ffb5 	bl	800af70 <__lshift>
 800a006:	9004      	str	r0, [sp, #16]
 800a008:	f1b8 0f00 	cmp.w	r8, #0
 800a00c:	dd05      	ble.n	800a01a <_dtoa_r+0x86a>
 800a00e:	4639      	mov	r1, r7
 800a010:	4642      	mov	r2, r8
 800a012:	4620      	mov	r0, r4
 800a014:	f000 ffac 	bl	800af70 <__lshift>
 800a018:	4607      	mov	r7, r0
 800a01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a01c:	b353      	cbz	r3, 800a074 <_dtoa_r+0x8c4>
 800a01e:	4639      	mov	r1, r7
 800a020:	9804      	ldr	r0, [sp, #16]
 800a022:	f000 fff9 	bl	800b018 <__mcmp>
 800a026:	2800      	cmp	r0, #0
 800a028:	da24      	bge.n	800a074 <_dtoa_r+0x8c4>
 800a02a:	2300      	movs	r3, #0
 800a02c:	220a      	movs	r2, #10
 800a02e:	9904      	ldr	r1, [sp, #16]
 800a030:	4620      	mov	r0, r4
 800a032:	f000 fde9 	bl	800ac08 <__multadd>
 800a036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a038:	9004      	str	r0, [sp, #16]
 800a03a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 814d 	beq.w	800a2de <_dtoa_r+0xb2e>
 800a044:	2300      	movs	r3, #0
 800a046:	4631      	mov	r1, r6
 800a048:	220a      	movs	r2, #10
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 fddc 	bl	800ac08 <__multadd>
 800a050:	9b02      	ldr	r3, [sp, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	4606      	mov	r6, r0
 800a056:	dc4f      	bgt.n	800a0f8 <_dtoa_r+0x948>
 800a058:	9b06      	ldr	r3, [sp, #24]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	dd4c      	ble.n	800a0f8 <_dtoa_r+0x948>
 800a05e:	e011      	b.n	800a084 <_dtoa_r+0x8d4>
 800a060:	d0c9      	beq.n	8009ff6 <_dtoa_r+0x846>
 800a062:	9a05      	ldr	r2, [sp, #20]
 800a064:	331c      	adds	r3, #28
 800a066:	441a      	add	r2, r3
 800a068:	9205      	str	r2, [sp, #20]
 800a06a:	441d      	add	r5, r3
 800a06c:	4498      	add	r8, r3
 800a06e:	e7c2      	b.n	8009ff6 <_dtoa_r+0x846>
 800a070:	4603      	mov	r3, r0
 800a072:	e7f6      	b.n	800a062 <_dtoa_r+0x8b2>
 800a074:	f1b9 0f00 	cmp.w	r9, #0
 800a078:	dc38      	bgt.n	800a0ec <_dtoa_r+0x93c>
 800a07a:	9b06      	ldr	r3, [sp, #24]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	dd35      	ble.n	800a0ec <_dtoa_r+0x93c>
 800a080:	f8cd 9008 	str.w	r9, [sp, #8]
 800a084:	9b02      	ldr	r3, [sp, #8]
 800a086:	b963      	cbnz	r3, 800a0a2 <_dtoa_r+0x8f2>
 800a088:	4639      	mov	r1, r7
 800a08a:	2205      	movs	r2, #5
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 fdbb 	bl	800ac08 <__multadd>
 800a092:	4601      	mov	r1, r0
 800a094:	4607      	mov	r7, r0
 800a096:	9804      	ldr	r0, [sp, #16]
 800a098:	f000 ffbe 	bl	800b018 <__mcmp>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f73f adcc 	bgt.w	8009c3a <_dtoa_r+0x48a>
 800a0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a4:	465d      	mov	r5, fp
 800a0a6:	ea6f 0a03 	mvn.w	sl, r3
 800a0aa:	f04f 0900 	mov.w	r9, #0
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 fd92 	bl	800abda <_Bfree>
 800a0b6:	2e00      	cmp	r6, #0
 800a0b8:	f43f aeb7 	beq.w	8009e2a <_dtoa_r+0x67a>
 800a0bc:	f1b9 0f00 	cmp.w	r9, #0
 800a0c0:	d005      	beq.n	800a0ce <_dtoa_r+0x91e>
 800a0c2:	45b1      	cmp	r9, r6
 800a0c4:	d003      	beq.n	800a0ce <_dtoa_r+0x91e>
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fd86 	bl	800abda <_Bfree>
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f000 fd82 	bl	800abda <_Bfree>
 800a0d6:	e6a8      	b.n	8009e2a <_dtoa_r+0x67a>
 800a0d8:	2700      	movs	r7, #0
 800a0da:	463e      	mov	r6, r7
 800a0dc:	e7e1      	b.n	800a0a2 <_dtoa_r+0x8f2>
 800a0de:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a0e2:	463e      	mov	r6, r7
 800a0e4:	e5a9      	b.n	8009c3a <_dtoa_r+0x48a>
 800a0e6:	bf00      	nop
 800a0e8:	40240000 	.word	0x40240000
 800a0ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ee:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 80fa 	beq.w	800a2ec <_dtoa_r+0xb3c>
 800a0f8:	2d00      	cmp	r5, #0
 800a0fa:	dd05      	ble.n	800a108 <_dtoa_r+0x958>
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	462a      	mov	r2, r5
 800a100:	4620      	mov	r0, r4
 800a102:	f000 ff35 	bl	800af70 <__lshift>
 800a106:	4606      	mov	r6, r0
 800a108:	9b07      	ldr	r3, [sp, #28]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d04c      	beq.n	800a1a8 <_dtoa_r+0x9f8>
 800a10e:	6871      	ldr	r1, [r6, #4]
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fd2e 	bl	800ab72 <_Balloc>
 800a116:	6932      	ldr	r2, [r6, #16]
 800a118:	3202      	adds	r2, #2
 800a11a:	4605      	mov	r5, r0
 800a11c:	0092      	lsls	r2, r2, #2
 800a11e:	f106 010c 	add.w	r1, r6, #12
 800a122:	300c      	adds	r0, #12
 800a124:	f000 fd1a 	bl	800ab5c <memcpy>
 800a128:	2201      	movs	r2, #1
 800a12a:	4629      	mov	r1, r5
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 ff1f 	bl	800af70 <__lshift>
 800a132:	9b00      	ldr	r3, [sp, #0]
 800a134:	f8cd b014 	str.w	fp, [sp, #20]
 800a138:	f003 0301 	and.w	r3, r3, #1
 800a13c:	46b1      	mov	r9, r6
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	4606      	mov	r6, r0
 800a142:	4639      	mov	r1, r7
 800a144:	9804      	ldr	r0, [sp, #16]
 800a146:	f7ff faa5 	bl	8009694 <quorem>
 800a14a:	4649      	mov	r1, r9
 800a14c:	4605      	mov	r5, r0
 800a14e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a152:	9804      	ldr	r0, [sp, #16]
 800a154:	f000 ff60 	bl	800b018 <__mcmp>
 800a158:	4632      	mov	r2, r6
 800a15a:	9000      	str	r0, [sp, #0]
 800a15c:	4639      	mov	r1, r7
 800a15e:	4620      	mov	r0, r4
 800a160:	f000 ff74 	bl	800b04c <__mdiff>
 800a164:	68c3      	ldr	r3, [r0, #12]
 800a166:	4602      	mov	r2, r0
 800a168:	bb03      	cbnz	r3, 800a1ac <_dtoa_r+0x9fc>
 800a16a:	4601      	mov	r1, r0
 800a16c:	9008      	str	r0, [sp, #32]
 800a16e:	9804      	ldr	r0, [sp, #16]
 800a170:	f000 ff52 	bl	800b018 <__mcmp>
 800a174:	9a08      	ldr	r2, [sp, #32]
 800a176:	4603      	mov	r3, r0
 800a178:	4611      	mov	r1, r2
 800a17a:	4620      	mov	r0, r4
 800a17c:	9308      	str	r3, [sp, #32]
 800a17e:	f000 fd2c 	bl	800abda <_Bfree>
 800a182:	9b08      	ldr	r3, [sp, #32]
 800a184:	b9a3      	cbnz	r3, 800a1b0 <_dtoa_r+0xa00>
 800a186:	9a06      	ldr	r2, [sp, #24]
 800a188:	b992      	cbnz	r2, 800a1b0 <_dtoa_r+0xa00>
 800a18a:	9a07      	ldr	r2, [sp, #28]
 800a18c:	b982      	cbnz	r2, 800a1b0 <_dtoa_r+0xa00>
 800a18e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a192:	d029      	beq.n	800a1e8 <_dtoa_r+0xa38>
 800a194:	9b00      	ldr	r3, [sp, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	dd01      	ble.n	800a19e <_dtoa_r+0x9ee>
 800a19a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a19e:	9b05      	ldr	r3, [sp, #20]
 800a1a0:	1c5d      	adds	r5, r3, #1
 800a1a2:	f883 8000 	strb.w	r8, [r3]
 800a1a6:	e782      	b.n	800a0ae <_dtoa_r+0x8fe>
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	e7c2      	b.n	800a132 <_dtoa_r+0x982>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e7e3      	b.n	800a178 <_dtoa_r+0x9c8>
 800a1b0:	9a00      	ldr	r2, [sp, #0]
 800a1b2:	2a00      	cmp	r2, #0
 800a1b4:	db04      	blt.n	800a1c0 <_dtoa_r+0xa10>
 800a1b6:	d125      	bne.n	800a204 <_dtoa_r+0xa54>
 800a1b8:	9a06      	ldr	r2, [sp, #24]
 800a1ba:	bb1a      	cbnz	r2, 800a204 <_dtoa_r+0xa54>
 800a1bc:	9a07      	ldr	r2, [sp, #28]
 800a1be:	bb0a      	cbnz	r2, 800a204 <_dtoa_r+0xa54>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	ddec      	ble.n	800a19e <_dtoa_r+0x9ee>
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	9904      	ldr	r1, [sp, #16]
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 fed1 	bl	800af70 <__lshift>
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	9004      	str	r0, [sp, #16]
 800a1d2:	f000 ff21 	bl	800b018 <__mcmp>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	dc03      	bgt.n	800a1e2 <_dtoa_r+0xa32>
 800a1da:	d1e0      	bne.n	800a19e <_dtoa_r+0x9ee>
 800a1dc:	f018 0f01 	tst.w	r8, #1
 800a1e0:	d0dd      	beq.n	800a19e <_dtoa_r+0x9ee>
 800a1e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a1e6:	d1d8      	bne.n	800a19a <_dtoa_r+0x9ea>
 800a1e8:	9b05      	ldr	r3, [sp, #20]
 800a1ea:	9a05      	ldr	r2, [sp, #20]
 800a1ec:	1c5d      	adds	r5, r3, #1
 800a1ee:	2339      	movs	r3, #57	; 0x39
 800a1f0:	7013      	strb	r3, [r2, #0]
 800a1f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1f6:	2b39      	cmp	r3, #57	; 0x39
 800a1f8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a1fc:	d04f      	beq.n	800a29e <_dtoa_r+0xaee>
 800a1fe:	3301      	adds	r3, #1
 800a200:	7013      	strb	r3, [r2, #0]
 800a202:	e754      	b.n	800a0ae <_dtoa_r+0x8fe>
 800a204:	9a05      	ldr	r2, [sp, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	f102 0501 	add.w	r5, r2, #1
 800a20c:	dd06      	ble.n	800a21c <_dtoa_r+0xa6c>
 800a20e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a212:	d0e9      	beq.n	800a1e8 <_dtoa_r+0xa38>
 800a214:	f108 0801 	add.w	r8, r8, #1
 800a218:	9b05      	ldr	r3, [sp, #20]
 800a21a:	e7c2      	b.n	800a1a2 <_dtoa_r+0x9f2>
 800a21c:	9a02      	ldr	r2, [sp, #8]
 800a21e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a222:	eba5 030b 	sub.w	r3, r5, fp
 800a226:	4293      	cmp	r3, r2
 800a228:	d021      	beq.n	800a26e <_dtoa_r+0xabe>
 800a22a:	2300      	movs	r3, #0
 800a22c:	220a      	movs	r2, #10
 800a22e:	9904      	ldr	r1, [sp, #16]
 800a230:	4620      	mov	r0, r4
 800a232:	f000 fce9 	bl	800ac08 <__multadd>
 800a236:	45b1      	cmp	r9, r6
 800a238:	9004      	str	r0, [sp, #16]
 800a23a:	f04f 0300 	mov.w	r3, #0
 800a23e:	f04f 020a 	mov.w	r2, #10
 800a242:	4649      	mov	r1, r9
 800a244:	4620      	mov	r0, r4
 800a246:	d105      	bne.n	800a254 <_dtoa_r+0xaa4>
 800a248:	f000 fcde 	bl	800ac08 <__multadd>
 800a24c:	4681      	mov	r9, r0
 800a24e:	4606      	mov	r6, r0
 800a250:	9505      	str	r5, [sp, #20]
 800a252:	e776      	b.n	800a142 <_dtoa_r+0x992>
 800a254:	f000 fcd8 	bl	800ac08 <__multadd>
 800a258:	4631      	mov	r1, r6
 800a25a:	4681      	mov	r9, r0
 800a25c:	2300      	movs	r3, #0
 800a25e:	220a      	movs	r2, #10
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fcd1 	bl	800ac08 <__multadd>
 800a266:	4606      	mov	r6, r0
 800a268:	e7f2      	b.n	800a250 <_dtoa_r+0xaa0>
 800a26a:	f04f 0900 	mov.w	r9, #0
 800a26e:	2201      	movs	r2, #1
 800a270:	9904      	ldr	r1, [sp, #16]
 800a272:	4620      	mov	r0, r4
 800a274:	f000 fe7c 	bl	800af70 <__lshift>
 800a278:	4639      	mov	r1, r7
 800a27a:	9004      	str	r0, [sp, #16]
 800a27c:	f000 fecc 	bl	800b018 <__mcmp>
 800a280:	2800      	cmp	r0, #0
 800a282:	dcb6      	bgt.n	800a1f2 <_dtoa_r+0xa42>
 800a284:	d102      	bne.n	800a28c <_dtoa_r+0xadc>
 800a286:	f018 0f01 	tst.w	r8, #1
 800a28a:	d1b2      	bne.n	800a1f2 <_dtoa_r+0xa42>
 800a28c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a290:	2b30      	cmp	r3, #48	; 0x30
 800a292:	f105 32ff 	add.w	r2, r5, #4294967295
 800a296:	f47f af0a 	bne.w	800a0ae <_dtoa_r+0x8fe>
 800a29a:	4615      	mov	r5, r2
 800a29c:	e7f6      	b.n	800a28c <_dtoa_r+0xadc>
 800a29e:	4593      	cmp	fp, r2
 800a2a0:	d105      	bne.n	800a2ae <_dtoa_r+0xafe>
 800a2a2:	2331      	movs	r3, #49	; 0x31
 800a2a4:	f10a 0a01 	add.w	sl, sl, #1
 800a2a8:	f88b 3000 	strb.w	r3, [fp]
 800a2ac:	e6ff      	b.n	800a0ae <_dtoa_r+0x8fe>
 800a2ae:	4615      	mov	r5, r2
 800a2b0:	e79f      	b.n	800a1f2 <_dtoa_r+0xa42>
 800a2b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a318 <_dtoa_r+0xb68>
 800a2b6:	e007      	b.n	800a2c8 <_dtoa_r+0xb18>
 800a2b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a31c <_dtoa_r+0xb6c>
 800a2be:	b11b      	cbz	r3, 800a2c8 <_dtoa_r+0xb18>
 800a2c0:	f10b 0308 	add.w	r3, fp, #8
 800a2c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	4658      	mov	r0, fp
 800a2ca:	b017      	add	sp, #92	; 0x5c
 800a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d0:	9b06      	ldr	r3, [sp, #24]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	f77f ae35 	ble.w	8009f42 <_dtoa_r+0x792>
 800a2d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2da:	9307      	str	r3, [sp, #28]
 800a2dc:	e649      	b.n	8009f72 <_dtoa_r+0x7c2>
 800a2de:	9b02      	ldr	r3, [sp, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dc03      	bgt.n	800a2ec <_dtoa_r+0xb3c>
 800a2e4:	9b06      	ldr	r3, [sp, #24]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	f73f aecc 	bgt.w	800a084 <_dtoa_r+0x8d4>
 800a2ec:	465d      	mov	r5, fp
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	9804      	ldr	r0, [sp, #16]
 800a2f2:	f7ff f9cf 	bl	8009694 <quorem>
 800a2f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a2fa:	f805 8b01 	strb.w	r8, [r5], #1
 800a2fe:	9a02      	ldr	r2, [sp, #8]
 800a300:	eba5 030b 	sub.w	r3, r5, fp
 800a304:	429a      	cmp	r2, r3
 800a306:	ddb0      	ble.n	800a26a <_dtoa_r+0xaba>
 800a308:	2300      	movs	r3, #0
 800a30a:	220a      	movs	r2, #10
 800a30c:	9904      	ldr	r1, [sp, #16]
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 fc7a 	bl	800ac08 <__multadd>
 800a314:	9004      	str	r0, [sp, #16]
 800a316:	e7ea      	b.n	800a2ee <_dtoa_r+0xb3e>
 800a318:	0800c094 	.word	0x0800c094
 800a31c:	0800c110 	.word	0x0800c110

0800a320 <std>:
 800a320:	2300      	movs	r3, #0
 800a322:	b510      	push	{r4, lr}
 800a324:	4604      	mov	r4, r0
 800a326:	e9c0 3300 	strd	r3, r3, [r0]
 800a32a:	6083      	str	r3, [r0, #8]
 800a32c:	8181      	strh	r1, [r0, #12]
 800a32e:	6643      	str	r3, [r0, #100]	; 0x64
 800a330:	81c2      	strh	r2, [r0, #14]
 800a332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a336:	6183      	str	r3, [r0, #24]
 800a338:	4619      	mov	r1, r3
 800a33a:	2208      	movs	r2, #8
 800a33c:	305c      	adds	r0, #92	; 0x5c
 800a33e:	f7fd fc75 	bl	8007c2c <memset>
 800a342:	4b05      	ldr	r3, [pc, #20]	; (800a358 <std+0x38>)
 800a344:	6263      	str	r3, [r4, #36]	; 0x24
 800a346:	4b05      	ldr	r3, [pc, #20]	; (800a35c <std+0x3c>)
 800a348:	62a3      	str	r3, [r4, #40]	; 0x28
 800a34a:	4b05      	ldr	r3, [pc, #20]	; (800a360 <std+0x40>)
 800a34c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <std+0x44>)
 800a350:	6224      	str	r4, [r4, #32]
 800a352:	6323      	str	r3, [r4, #48]	; 0x30
 800a354:	bd10      	pop	{r4, pc}
 800a356:	bf00      	nop
 800a358:	0800ba21 	.word	0x0800ba21
 800a35c:	0800ba43 	.word	0x0800ba43
 800a360:	0800ba7b 	.word	0x0800ba7b
 800a364:	0800ba9f 	.word	0x0800ba9f

0800a368 <_cleanup_r>:
 800a368:	4901      	ldr	r1, [pc, #4]	; (800a370 <_cleanup_r+0x8>)
 800a36a:	f000 b885 	b.w	800a478 <_fwalk_reent>
 800a36e:	bf00      	nop
 800a370:	0800bdb9 	.word	0x0800bdb9

0800a374 <__sfmoreglue>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	1e4a      	subs	r2, r1, #1
 800a378:	2568      	movs	r5, #104	; 0x68
 800a37a:	4355      	muls	r5, r2
 800a37c:	460e      	mov	r6, r1
 800a37e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a382:	f001 f851 	bl	800b428 <_malloc_r>
 800a386:	4604      	mov	r4, r0
 800a388:	b140      	cbz	r0, 800a39c <__sfmoreglue+0x28>
 800a38a:	2100      	movs	r1, #0
 800a38c:	e9c0 1600 	strd	r1, r6, [r0]
 800a390:	300c      	adds	r0, #12
 800a392:	60a0      	str	r0, [r4, #8]
 800a394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a398:	f7fd fc48 	bl	8007c2c <memset>
 800a39c:	4620      	mov	r0, r4
 800a39e:	bd70      	pop	{r4, r5, r6, pc}

0800a3a0 <__sinit>:
 800a3a0:	6983      	ldr	r3, [r0, #24]
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	bb33      	cbnz	r3, 800a3f6 <__sinit+0x56>
 800a3a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a3ac:	6503      	str	r3, [r0, #80]	; 0x50
 800a3ae:	4b12      	ldr	r3, [pc, #72]	; (800a3f8 <__sinit+0x58>)
 800a3b0:	4a12      	ldr	r2, [pc, #72]	; (800a3fc <__sinit+0x5c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6282      	str	r2, [r0, #40]	; 0x28
 800a3b6:	4298      	cmp	r0, r3
 800a3b8:	bf04      	itt	eq
 800a3ba:	2301      	moveq	r3, #1
 800a3bc:	6183      	streq	r3, [r0, #24]
 800a3be:	f000 f81f 	bl	800a400 <__sfp>
 800a3c2:	6060      	str	r0, [r4, #4]
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f000 f81b 	bl	800a400 <__sfp>
 800a3ca:	60a0      	str	r0, [r4, #8]
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f000 f817 	bl	800a400 <__sfp>
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	60e0      	str	r0, [r4, #12]
 800a3d6:	2104      	movs	r1, #4
 800a3d8:	6860      	ldr	r0, [r4, #4]
 800a3da:	f7ff ffa1 	bl	800a320 <std>
 800a3de:	2201      	movs	r2, #1
 800a3e0:	2109      	movs	r1, #9
 800a3e2:	68a0      	ldr	r0, [r4, #8]
 800a3e4:	f7ff ff9c 	bl	800a320 <std>
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	2112      	movs	r1, #18
 800a3ec:	68e0      	ldr	r0, [r4, #12]
 800a3ee:	f7ff ff97 	bl	800a320 <std>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	61a3      	str	r3, [r4, #24]
 800a3f6:	bd10      	pop	{r4, pc}
 800a3f8:	0800c080 	.word	0x0800c080
 800a3fc:	0800a369 	.word	0x0800a369

0800a400 <__sfp>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	4b1b      	ldr	r3, [pc, #108]	; (800a470 <__sfp+0x70>)
 800a404:	681e      	ldr	r6, [r3, #0]
 800a406:	69b3      	ldr	r3, [r6, #24]
 800a408:	4607      	mov	r7, r0
 800a40a:	b913      	cbnz	r3, 800a412 <__sfp+0x12>
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7ff ffc7 	bl	800a3a0 <__sinit>
 800a412:	3648      	adds	r6, #72	; 0x48
 800a414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a418:	3b01      	subs	r3, #1
 800a41a:	d503      	bpl.n	800a424 <__sfp+0x24>
 800a41c:	6833      	ldr	r3, [r6, #0]
 800a41e:	b133      	cbz	r3, 800a42e <__sfp+0x2e>
 800a420:	6836      	ldr	r6, [r6, #0]
 800a422:	e7f7      	b.n	800a414 <__sfp+0x14>
 800a424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a428:	b16d      	cbz	r5, 800a446 <__sfp+0x46>
 800a42a:	3468      	adds	r4, #104	; 0x68
 800a42c:	e7f4      	b.n	800a418 <__sfp+0x18>
 800a42e:	2104      	movs	r1, #4
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff ff9f 	bl	800a374 <__sfmoreglue>
 800a436:	6030      	str	r0, [r6, #0]
 800a438:	2800      	cmp	r0, #0
 800a43a:	d1f1      	bne.n	800a420 <__sfp+0x20>
 800a43c:	230c      	movs	r3, #12
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	4604      	mov	r4, r0
 800a442:	4620      	mov	r0, r4
 800a444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a446:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <__sfp+0x74>)
 800a448:	6665      	str	r5, [r4, #100]	; 0x64
 800a44a:	e9c4 5500 	strd	r5, r5, [r4]
 800a44e:	60a5      	str	r5, [r4, #8]
 800a450:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a454:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a458:	2208      	movs	r2, #8
 800a45a:	4629      	mov	r1, r5
 800a45c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a460:	f7fd fbe4 	bl	8007c2c <memset>
 800a464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a46c:	e7e9      	b.n	800a442 <__sfp+0x42>
 800a46e:	bf00      	nop
 800a470:	0800c080 	.word	0x0800c080
 800a474:	ffff0001 	.word	0xffff0001

0800a478 <_fwalk_reent>:
 800a478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4680      	mov	r8, r0
 800a47e:	4689      	mov	r9, r1
 800a480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a484:	2600      	movs	r6, #0
 800a486:	b914      	cbnz	r4, 800a48e <_fwalk_reent+0x16>
 800a488:	4630      	mov	r0, r6
 800a48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a492:	3f01      	subs	r7, #1
 800a494:	d501      	bpl.n	800a49a <_fwalk_reent+0x22>
 800a496:	6824      	ldr	r4, [r4, #0]
 800a498:	e7f5      	b.n	800a486 <_fwalk_reent+0xe>
 800a49a:	89ab      	ldrh	r3, [r5, #12]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d907      	bls.n	800a4b0 <_fwalk_reent+0x38>
 800a4a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	d003      	beq.n	800a4b0 <_fwalk_reent+0x38>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	47c8      	blx	r9
 800a4ae:	4306      	orrs	r6, r0
 800a4b0:	3568      	adds	r5, #104	; 0x68
 800a4b2:	e7ee      	b.n	800a492 <_fwalk_reent+0x1a>

0800a4b4 <rshift>:
 800a4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b6:	6906      	ldr	r6, [r0, #16]
 800a4b8:	114b      	asrs	r3, r1, #5
 800a4ba:	429e      	cmp	r6, r3
 800a4bc:	f100 0414 	add.w	r4, r0, #20
 800a4c0:	dd30      	ble.n	800a524 <rshift+0x70>
 800a4c2:	f011 011f 	ands.w	r1, r1, #31
 800a4c6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a4ca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a4ce:	d108      	bne.n	800a4e2 <rshift+0x2e>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	42b2      	cmp	r2, r6
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	d211      	bcs.n	800a4fc <rshift+0x48>
 800a4d8:	f852 3b04 	ldr.w	r3, [r2], #4
 800a4dc:	f841 3b04 	str.w	r3, [r1], #4
 800a4e0:	e7f7      	b.n	800a4d2 <rshift+0x1e>
 800a4e2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a4e6:	f1c1 0c20 	rsb	ip, r1, #32
 800a4ea:	40cd      	lsrs	r5, r1
 800a4ec:	3204      	adds	r2, #4
 800a4ee:	4623      	mov	r3, r4
 800a4f0:	42b2      	cmp	r2, r6
 800a4f2:	4617      	mov	r7, r2
 800a4f4:	d30c      	bcc.n	800a510 <rshift+0x5c>
 800a4f6:	601d      	str	r5, [r3, #0]
 800a4f8:	b105      	cbz	r5, 800a4fc <rshift+0x48>
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	1b1a      	subs	r2, r3, r4
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a504:	bf08      	it	eq
 800a506:	2300      	moveq	r3, #0
 800a508:	6102      	str	r2, [r0, #16]
 800a50a:	bf08      	it	eq
 800a50c:	6143      	streq	r3, [r0, #20]
 800a50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a510:	683f      	ldr	r7, [r7, #0]
 800a512:	fa07 f70c 	lsl.w	r7, r7, ip
 800a516:	433d      	orrs	r5, r7
 800a518:	f843 5b04 	str.w	r5, [r3], #4
 800a51c:	f852 5b04 	ldr.w	r5, [r2], #4
 800a520:	40cd      	lsrs	r5, r1
 800a522:	e7e5      	b.n	800a4f0 <rshift+0x3c>
 800a524:	4623      	mov	r3, r4
 800a526:	e7e9      	b.n	800a4fc <rshift+0x48>

0800a528 <__hexdig_fun>:
 800a528:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	d802      	bhi.n	800a536 <__hexdig_fun+0xe>
 800a530:	3820      	subs	r0, #32
 800a532:	b2c0      	uxtb	r0, r0
 800a534:	4770      	bx	lr
 800a536:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	d801      	bhi.n	800a542 <__hexdig_fun+0x1a>
 800a53e:	3847      	subs	r0, #71	; 0x47
 800a540:	e7f7      	b.n	800a532 <__hexdig_fun+0xa>
 800a542:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a546:	2b05      	cmp	r3, #5
 800a548:	d801      	bhi.n	800a54e <__hexdig_fun+0x26>
 800a54a:	3827      	subs	r0, #39	; 0x27
 800a54c:	e7f1      	b.n	800a532 <__hexdig_fun+0xa>
 800a54e:	2000      	movs	r0, #0
 800a550:	4770      	bx	lr

0800a552 <__gethex>:
 800a552:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a556:	b08b      	sub	sp, #44	; 0x2c
 800a558:	468a      	mov	sl, r1
 800a55a:	9002      	str	r0, [sp, #8]
 800a55c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a55e:	9306      	str	r3, [sp, #24]
 800a560:	4690      	mov	r8, r2
 800a562:	f000 fad0 	bl	800ab06 <__localeconv_l>
 800a566:	6803      	ldr	r3, [r0, #0]
 800a568:	9303      	str	r3, [sp, #12]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7f5 fe30 	bl	80001d0 <strlen>
 800a570:	9b03      	ldr	r3, [sp, #12]
 800a572:	9001      	str	r0, [sp, #4]
 800a574:	4403      	add	r3, r0
 800a576:	f04f 0b00 	mov.w	fp, #0
 800a57a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a57e:	9307      	str	r3, [sp, #28]
 800a580:	f8da 3000 	ldr.w	r3, [sl]
 800a584:	3302      	adds	r3, #2
 800a586:	461f      	mov	r7, r3
 800a588:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a58c:	2830      	cmp	r0, #48	; 0x30
 800a58e:	d06c      	beq.n	800a66a <__gethex+0x118>
 800a590:	f7ff ffca 	bl	800a528 <__hexdig_fun>
 800a594:	4604      	mov	r4, r0
 800a596:	2800      	cmp	r0, #0
 800a598:	d16a      	bne.n	800a670 <__gethex+0x11e>
 800a59a:	9a01      	ldr	r2, [sp, #4]
 800a59c:	9903      	ldr	r1, [sp, #12]
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f001 fa81 	bl	800baa6 <strncmp>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d166      	bne.n	800a676 <__gethex+0x124>
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	5cf8      	ldrb	r0, [r7, r3]
 800a5ac:	18fe      	adds	r6, r7, r3
 800a5ae:	f7ff ffbb 	bl	800a528 <__hexdig_fun>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d062      	beq.n	800a67c <__gethex+0x12a>
 800a5b6:	4633      	mov	r3, r6
 800a5b8:	7818      	ldrb	r0, [r3, #0]
 800a5ba:	2830      	cmp	r0, #48	; 0x30
 800a5bc:	461f      	mov	r7, r3
 800a5be:	f103 0301 	add.w	r3, r3, #1
 800a5c2:	d0f9      	beq.n	800a5b8 <__gethex+0x66>
 800a5c4:	f7ff ffb0 	bl	800a528 <__hexdig_fun>
 800a5c8:	fab0 f580 	clz	r5, r0
 800a5cc:	096d      	lsrs	r5, r5, #5
 800a5ce:	4634      	mov	r4, r6
 800a5d0:	f04f 0b01 	mov.w	fp, #1
 800a5d4:	463a      	mov	r2, r7
 800a5d6:	4616      	mov	r6, r2
 800a5d8:	3201      	adds	r2, #1
 800a5da:	7830      	ldrb	r0, [r6, #0]
 800a5dc:	f7ff ffa4 	bl	800a528 <__hexdig_fun>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d1f8      	bne.n	800a5d6 <__gethex+0x84>
 800a5e4:	9a01      	ldr	r2, [sp, #4]
 800a5e6:	9903      	ldr	r1, [sp, #12]
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f001 fa5c 	bl	800baa6 <strncmp>
 800a5ee:	b950      	cbnz	r0, 800a606 <__gethex+0xb4>
 800a5f0:	b954      	cbnz	r4, 800a608 <__gethex+0xb6>
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	18f4      	adds	r4, r6, r3
 800a5f6:	4622      	mov	r2, r4
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	3201      	adds	r2, #1
 800a5fc:	7830      	ldrb	r0, [r6, #0]
 800a5fe:	f7ff ff93 	bl	800a528 <__hexdig_fun>
 800a602:	2800      	cmp	r0, #0
 800a604:	d1f8      	bne.n	800a5f8 <__gethex+0xa6>
 800a606:	b10c      	cbz	r4, 800a60c <__gethex+0xba>
 800a608:	1ba4      	subs	r4, r4, r6
 800a60a:	00a4      	lsls	r4, r4, #2
 800a60c:	7833      	ldrb	r3, [r6, #0]
 800a60e:	2b50      	cmp	r3, #80	; 0x50
 800a610:	d001      	beq.n	800a616 <__gethex+0xc4>
 800a612:	2b70      	cmp	r3, #112	; 0x70
 800a614:	d140      	bne.n	800a698 <__gethex+0x146>
 800a616:	7873      	ldrb	r3, [r6, #1]
 800a618:	2b2b      	cmp	r3, #43	; 0x2b
 800a61a:	d031      	beq.n	800a680 <__gethex+0x12e>
 800a61c:	2b2d      	cmp	r3, #45	; 0x2d
 800a61e:	d033      	beq.n	800a688 <__gethex+0x136>
 800a620:	1c71      	adds	r1, r6, #1
 800a622:	f04f 0900 	mov.w	r9, #0
 800a626:	7808      	ldrb	r0, [r1, #0]
 800a628:	f7ff ff7e 	bl	800a528 <__hexdig_fun>
 800a62c:	1e43      	subs	r3, r0, #1
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b18      	cmp	r3, #24
 800a632:	d831      	bhi.n	800a698 <__gethex+0x146>
 800a634:	f1a0 0210 	sub.w	r2, r0, #16
 800a638:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a63c:	f7ff ff74 	bl	800a528 <__hexdig_fun>
 800a640:	1e43      	subs	r3, r0, #1
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b18      	cmp	r3, #24
 800a646:	d922      	bls.n	800a68e <__gethex+0x13c>
 800a648:	f1b9 0f00 	cmp.w	r9, #0
 800a64c:	d000      	beq.n	800a650 <__gethex+0xfe>
 800a64e:	4252      	negs	r2, r2
 800a650:	4414      	add	r4, r2
 800a652:	f8ca 1000 	str.w	r1, [sl]
 800a656:	b30d      	cbz	r5, 800a69c <__gethex+0x14a>
 800a658:	f1bb 0f00 	cmp.w	fp, #0
 800a65c:	bf0c      	ite	eq
 800a65e:	2706      	moveq	r7, #6
 800a660:	2700      	movne	r7, #0
 800a662:	4638      	mov	r0, r7
 800a664:	b00b      	add	sp, #44	; 0x2c
 800a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66a:	f10b 0b01 	add.w	fp, fp, #1
 800a66e:	e78a      	b.n	800a586 <__gethex+0x34>
 800a670:	2500      	movs	r5, #0
 800a672:	462c      	mov	r4, r5
 800a674:	e7ae      	b.n	800a5d4 <__gethex+0x82>
 800a676:	463e      	mov	r6, r7
 800a678:	2501      	movs	r5, #1
 800a67a:	e7c7      	b.n	800a60c <__gethex+0xba>
 800a67c:	4604      	mov	r4, r0
 800a67e:	e7fb      	b.n	800a678 <__gethex+0x126>
 800a680:	f04f 0900 	mov.w	r9, #0
 800a684:	1cb1      	adds	r1, r6, #2
 800a686:	e7ce      	b.n	800a626 <__gethex+0xd4>
 800a688:	f04f 0901 	mov.w	r9, #1
 800a68c:	e7fa      	b.n	800a684 <__gethex+0x132>
 800a68e:	230a      	movs	r3, #10
 800a690:	fb03 0202 	mla	r2, r3, r2, r0
 800a694:	3a10      	subs	r2, #16
 800a696:	e7cf      	b.n	800a638 <__gethex+0xe6>
 800a698:	4631      	mov	r1, r6
 800a69a:	e7da      	b.n	800a652 <__gethex+0x100>
 800a69c:	1bf3      	subs	r3, r6, r7
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	2b07      	cmp	r3, #7
 800a6a4:	dc49      	bgt.n	800a73a <__gethex+0x1e8>
 800a6a6:	9802      	ldr	r0, [sp, #8]
 800a6a8:	f000 fa63 	bl	800ab72 <_Balloc>
 800a6ac:	9b01      	ldr	r3, [sp, #4]
 800a6ae:	f100 0914 	add.w	r9, r0, #20
 800a6b2:	f04f 0b00 	mov.w	fp, #0
 800a6b6:	f1c3 0301 	rsb	r3, r3, #1
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	f8cd 9010 	str.w	r9, [sp, #16]
 800a6c0:	46da      	mov	sl, fp
 800a6c2:	9308      	str	r3, [sp, #32]
 800a6c4:	42b7      	cmp	r7, r6
 800a6c6:	d33b      	bcc.n	800a740 <__gethex+0x1ee>
 800a6c8:	9804      	ldr	r0, [sp, #16]
 800a6ca:	f840 ab04 	str.w	sl, [r0], #4
 800a6ce:	eba0 0009 	sub.w	r0, r0, r9
 800a6d2:	1080      	asrs	r0, r0, #2
 800a6d4:	6128      	str	r0, [r5, #16]
 800a6d6:	0147      	lsls	r7, r0, #5
 800a6d8:	4650      	mov	r0, sl
 800a6da:	f000 fb0e 	bl	800acfa <__hi0bits>
 800a6de:	f8d8 6000 	ldr.w	r6, [r8]
 800a6e2:	1a3f      	subs	r7, r7, r0
 800a6e4:	42b7      	cmp	r7, r6
 800a6e6:	dd64      	ble.n	800a7b2 <__gethex+0x260>
 800a6e8:	1bbf      	subs	r7, r7, r6
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f000 fe1d 	bl	800b32c <__any_on>
 800a6f2:	4682      	mov	sl, r0
 800a6f4:	b178      	cbz	r0, 800a716 <__gethex+0x1c4>
 800a6f6:	1e7b      	subs	r3, r7, #1
 800a6f8:	1159      	asrs	r1, r3, #5
 800a6fa:	f003 021f 	and.w	r2, r3, #31
 800a6fe:	f04f 0a01 	mov.w	sl, #1
 800a702:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a706:	fa0a f202 	lsl.w	r2, sl, r2
 800a70a:	420a      	tst	r2, r1
 800a70c:	d003      	beq.n	800a716 <__gethex+0x1c4>
 800a70e:	4553      	cmp	r3, sl
 800a710:	dc46      	bgt.n	800a7a0 <__gethex+0x24e>
 800a712:	f04f 0a02 	mov.w	sl, #2
 800a716:	4639      	mov	r1, r7
 800a718:	4628      	mov	r0, r5
 800a71a:	f7ff fecb 	bl	800a4b4 <rshift>
 800a71e:	443c      	add	r4, r7
 800a720:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a724:	42a3      	cmp	r3, r4
 800a726:	da52      	bge.n	800a7ce <__gethex+0x27c>
 800a728:	4629      	mov	r1, r5
 800a72a:	9802      	ldr	r0, [sp, #8]
 800a72c:	f000 fa55 	bl	800abda <_Bfree>
 800a730:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a732:	2300      	movs	r3, #0
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	27a3      	movs	r7, #163	; 0xa3
 800a738:	e793      	b.n	800a662 <__gethex+0x110>
 800a73a:	3101      	adds	r1, #1
 800a73c:	105b      	asrs	r3, r3, #1
 800a73e:	e7b0      	b.n	800a6a2 <__gethex+0x150>
 800a740:	1e73      	subs	r3, r6, #1
 800a742:	9305      	str	r3, [sp, #20]
 800a744:	9a07      	ldr	r2, [sp, #28]
 800a746:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d018      	beq.n	800a780 <__gethex+0x22e>
 800a74e:	f1bb 0f20 	cmp.w	fp, #32
 800a752:	d107      	bne.n	800a764 <__gethex+0x212>
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	f8c3 a000 	str.w	sl, [r3]
 800a75a:	3304      	adds	r3, #4
 800a75c:	f04f 0a00 	mov.w	sl, #0
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	46d3      	mov	fp, sl
 800a764:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a768:	f7ff fede 	bl	800a528 <__hexdig_fun>
 800a76c:	f000 000f 	and.w	r0, r0, #15
 800a770:	fa00 f00b 	lsl.w	r0, r0, fp
 800a774:	ea4a 0a00 	orr.w	sl, sl, r0
 800a778:	f10b 0b04 	add.w	fp, fp, #4
 800a77c:	9b05      	ldr	r3, [sp, #20]
 800a77e:	e00d      	b.n	800a79c <__gethex+0x24a>
 800a780:	9b05      	ldr	r3, [sp, #20]
 800a782:	9a08      	ldr	r2, [sp, #32]
 800a784:	4413      	add	r3, r2
 800a786:	42bb      	cmp	r3, r7
 800a788:	d3e1      	bcc.n	800a74e <__gethex+0x1fc>
 800a78a:	4618      	mov	r0, r3
 800a78c:	9a01      	ldr	r2, [sp, #4]
 800a78e:	9903      	ldr	r1, [sp, #12]
 800a790:	9309      	str	r3, [sp, #36]	; 0x24
 800a792:	f001 f988 	bl	800baa6 <strncmp>
 800a796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a798:	2800      	cmp	r0, #0
 800a79a:	d1d8      	bne.n	800a74e <__gethex+0x1fc>
 800a79c:	461e      	mov	r6, r3
 800a79e:	e791      	b.n	800a6c4 <__gethex+0x172>
 800a7a0:	1eb9      	subs	r1, r7, #2
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f000 fdc2 	bl	800b32c <__any_on>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d0b2      	beq.n	800a712 <__gethex+0x1c0>
 800a7ac:	f04f 0a03 	mov.w	sl, #3
 800a7b0:	e7b1      	b.n	800a716 <__gethex+0x1c4>
 800a7b2:	da09      	bge.n	800a7c8 <__gethex+0x276>
 800a7b4:	1bf7      	subs	r7, r6, r7
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	463a      	mov	r2, r7
 800a7ba:	9802      	ldr	r0, [sp, #8]
 800a7bc:	f000 fbd8 	bl	800af70 <__lshift>
 800a7c0:	1be4      	subs	r4, r4, r7
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	f100 0914 	add.w	r9, r0, #20
 800a7c8:	f04f 0a00 	mov.w	sl, #0
 800a7cc:	e7a8      	b.n	800a720 <__gethex+0x1ce>
 800a7ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a7d2:	42a0      	cmp	r0, r4
 800a7d4:	dd6a      	ble.n	800a8ac <__gethex+0x35a>
 800a7d6:	1b04      	subs	r4, r0, r4
 800a7d8:	42a6      	cmp	r6, r4
 800a7da:	dc2e      	bgt.n	800a83a <__gethex+0x2e8>
 800a7dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d022      	beq.n	800a82a <__gethex+0x2d8>
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d024      	beq.n	800a832 <__gethex+0x2e0>
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d115      	bne.n	800a818 <__gethex+0x2c6>
 800a7ec:	42a6      	cmp	r6, r4
 800a7ee:	d113      	bne.n	800a818 <__gethex+0x2c6>
 800a7f0:	2e01      	cmp	r6, #1
 800a7f2:	dc0b      	bgt.n	800a80c <__gethex+0x2ba>
 800a7f4:	9a06      	ldr	r2, [sp, #24]
 800a7f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	612b      	str	r3, [r5, #16]
 800a800:	f8c9 3000 	str.w	r3, [r9]
 800a804:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a806:	2762      	movs	r7, #98	; 0x62
 800a808:	601d      	str	r5, [r3, #0]
 800a80a:	e72a      	b.n	800a662 <__gethex+0x110>
 800a80c:	1e71      	subs	r1, r6, #1
 800a80e:	4628      	mov	r0, r5
 800a810:	f000 fd8c 	bl	800b32c <__any_on>
 800a814:	2800      	cmp	r0, #0
 800a816:	d1ed      	bne.n	800a7f4 <__gethex+0x2a2>
 800a818:	4629      	mov	r1, r5
 800a81a:	9802      	ldr	r0, [sp, #8]
 800a81c:	f000 f9dd 	bl	800abda <_Bfree>
 800a820:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a822:	2300      	movs	r3, #0
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	2750      	movs	r7, #80	; 0x50
 800a828:	e71b      	b.n	800a662 <__gethex+0x110>
 800a82a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0e1      	beq.n	800a7f4 <__gethex+0x2a2>
 800a830:	e7f2      	b.n	800a818 <__gethex+0x2c6>
 800a832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1dd      	bne.n	800a7f4 <__gethex+0x2a2>
 800a838:	e7ee      	b.n	800a818 <__gethex+0x2c6>
 800a83a:	1e67      	subs	r7, r4, #1
 800a83c:	f1ba 0f00 	cmp.w	sl, #0
 800a840:	d131      	bne.n	800a8a6 <__gethex+0x354>
 800a842:	b127      	cbz	r7, 800a84e <__gethex+0x2fc>
 800a844:	4639      	mov	r1, r7
 800a846:	4628      	mov	r0, r5
 800a848:	f000 fd70 	bl	800b32c <__any_on>
 800a84c:	4682      	mov	sl, r0
 800a84e:	117a      	asrs	r2, r7, #5
 800a850:	2301      	movs	r3, #1
 800a852:	f007 071f 	and.w	r7, r7, #31
 800a856:	fa03 f707 	lsl.w	r7, r3, r7
 800a85a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a85e:	4621      	mov	r1, r4
 800a860:	421f      	tst	r7, r3
 800a862:	4628      	mov	r0, r5
 800a864:	bf18      	it	ne
 800a866:	f04a 0a02 	orrne.w	sl, sl, #2
 800a86a:	1b36      	subs	r6, r6, r4
 800a86c:	f7ff fe22 	bl	800a4b4 <rshift>
 800a870:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a874:	2702      	movs	r7, #2
 800a876:	f1ba 0f00 	cmp.w	sl, #0
 800a87a:	d048      	beq.n	800a90e <__gethex+0x3bc>
 800a87c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d015      	beq.n	800a8b0 <__gethex+0x35e>
 800a884:	2b03      	cmp	r3, #3
 800a886:	d017      	beq.n	800a8b8 <__gethex+0x366>
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d109      	bne.n	800a8a0 <__gethex+0x34e>
 800a88c:	f01a 0f02 	tst.w	sl, #2
 800a890:	d006      	beq.n	800a8a0 <__gethex+0x34e>
 800a892:	f8d9 3000 	ldr.w	r3, [r9]
 800a896:	ea4a 0a03 	orr.w	sl, sl, r3
 800a89a:	f01a 0f01 	tst.w	sl, #1
 800a89e:	d10e      	bne.n	800a8be <__gethex+0x36c>
 800a8a0:	f047 0710 	orr.w	r7, r7, #16
 800a8a4:	e033      	b.n	800a90e <__gethex+0x3bc>
 800a8a6:	f04f 0a01 	mov.w	sl, #1
 800a8aa:	e7d0      	b.n	800a84e <__gethex+0x2fc>
 800a8ac:	2701      	movs	r7, #1
 800a8ae:	e7e2      	b.n	800a876 <__gethex+0x324>
 800a8b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8b2:	f1c3 0301 	rsb	r3, r3, #1
 800a8b6:	9315      	str	r3, [sp, #84]	; 0x54
 800a8b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0f0      	beq.n	800a8a0 <__gethex+0x34e>
 800a8be:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a8c2:	f105 0314 	add.w	r3, r5, #20
 800a8c6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a8ca:	eb03 010a 	add.w	r1, r3, sl
 800a8ce:	f04f 0c00 	mov.w	ip, #0
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a8dc:	d01c      	beq.n	800a918 <__gethex+0x3c6>
 800a8de:	3201      	adds	r2, #1
 800a8e0:	6002      	str	r2, [r0, #0]
 800a8e2:	2f02      	cmp	r7, #2
 800a8e4:	f105 0314 	add.w	r3, r5, #20
 800a8e8:	d138      	bne.n	800a95c <__gethex+0x40a>
 800a8ea:	f8d8 2000 	ldr.w	r2, [r8]
 800a8ee:	3a01      	subs	r2, #1
 800a8f0:	42b2      	cmp	r2, r6
 800a8f2:	d10a      	bne.n	800a90a <__gethex+0x3b8>
 800a8f4:	1171      	asrs	r1, r6, #5
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f006 061f 	and.w	r6, r6, #31
 800a8fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a900:	fa02 f606 	lsl.w	r6, r2, r6
 800a904:	421e      	tst	r6, r3
 800a906:	bf18      	it	ne
 800a908:	4617      	movne	r7, r2
 800a90a:	f047 0720 	orr.w	r7, r7, #32
 800a90e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a910:	601d      	str	r5, [r3, #0]
 800a912:	9b06      	ldr	r3, [sp, #24]
 800a914:	601c      	str	r4, [r3, #0]
 800a916:	e6a4      	b.n	800a662 <__gethex+0x110>
 800a918:	4299      	cmp	r1, r3
 800a91a:	f843 cc04 	str.w	ip, [r3, #-4]
 800a91e:	d8d8      	bhi.n	800a8d2 <__gethex+0x380>
 800a920:	68ab      	ldr	r3, [r5, #8]
 800a922:	4599      	cmp	r9, r3
 800a924:	db12      	blt.n	800a94c <__gethex+0x3fa>
 800a926:	6869      	ldr	r1, [r5, #4]
 800a928:	9802      	ldr	r0, [sp, #8]
 800a92a:	3101      	adds	r1, #1
 800a92c:	f000 f921 	bl	800ab72 <_Balloc>
 800a930:	692a      	ldr	r2, [r5, #16]
 800a932:	3202      	adds	r2, #2
 800a934:	f105 010c 	add.w	r1, r5, #12
 800a938:	4683      	mov	fp, r0
 800a93a:	0092      	lsls	r2, r2, #2
 800a93c:	300c      	adds	r0, #12
 800a93e:	f000 f90d 	bl	800ab5c <memcpy>
 800a942:	4629      	mov	r1, r5
 800a944:	9802      	ldr	r0, [sp, #8]
 800a946:	f000 f948 	bl	800abda <_Bfree>
 800a94a:	465d      	mov	r5, fp
 800a94c:	692b      	ldr	r3, [r5, #16]
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a954:	612a      	str	r2, [r5, #16]
 800a956:	2201      	movs	r2, #1
 800a958:	615a      	str	r2, [r3, #20]
 800a95a:	e7c2      	b.n	800a8e2 <__gethex+0x390>
 800a95c:	692a      	ldr	r2, [r5, #16]
 800a95e:	454a      	cmp	r2, r9
 800a960:	dd0b      	ble.n	800a97a <__gethex+0x428>
 800a962:	2101      	movs	r1, #1
 800a964:	4628      	mov	r0, r5
 800a966:	f7ff fda5 	bl	800a4b4 <rshift>
 800a96a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a96e:	3401      	adds	r4, #1
 800a970:	42a3      	cmp	r3, r4
 800a972:	f6ff aed9 	blt.w	800a728 <__gethex+0x1d6>
 800a976:	2701      	movs	r7, #1
 800a978:	e7c7      	b.n	800a90a <__gethex+0x3b8>
 800a97a:	f016 061f 	ands.w	r6, r6, #31
 800a97e:	d0fa      	beq.n	800a976 <__gethex+0x424>
 800a980:	449a      	add	sl, r3
 800a982:	f1c6 0620 	rsb	r6, r6, #32
 800a986:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a98a:	f000 f9b6 	bl	800acfa <__hi0bits>
 800a98e:	42b0      	cmp	r0, r6
 800a990:	dbe7      	blt.n	800a962 <__gethex+0x410>
 800a992:	e7f0      	b.n	800a976 <__gethex+0x424>

0800a994 <L_shift>:
 800a994:	f1c2 0208 	rsb	r2, r2, #8
 800a998:	0092      	lsls	r2, r2, #2
 800a99a:	b570      	push	{r4, r5, r6, lr}
 800a99c:	f1c2 0620 	rsb	r6, r2, #32
 800a9a0:	6843      	ldr	r3, [r0, #4]
 800a9a2:	6804      	ldr	r4, [r0, #0]
 800a9a4:	fa03 f506 	lsl.w	r5, r3, r6
 800a9a8:	432c      	orrs	r4, r5
 800a9aa:	40d3      	lsrs	r3, r2
 800a9ac:	6004      	str	r4, [r0, #0]
 800a9ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9b2:	4288      	cmp	r0, r1
 800a9b4:	d3f4      	bcc.n	800a9a0 <L_shift+0xc>
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}

0800a9b8 <__match>:
 800a9b8:	b530      	push	{r4, r5, lr}
 800a9ba:	6803      	ldr	r3, [r0, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c2:	b914      	cbnz	r4, 800a9ca <__match+0x12>
 800a9c4:	6003      	str	r3, [r0, #0]
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	bd30      	pop	{r4, r5, pc}
 800a9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a9d2:	2d19      	cmp	r5, #25
 800a9d4:	bf98      	it	ls
 800a9d6:	3220      	addls	r2, #32
 800a9d8:	42a2      	cmp	r2, r4
 800a9da:	d0f0      	beq.n	800a9be <__match+0x6>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e7f3      	b.n	800a9c8 <__match+0x10>

0800a9e0 <__hexnan>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	680b      	ldr	r3, [r1, #0]
 800a9e6:	6801      	ldr	r1, [r0, #0]
 800a9e8:	115f      	asrs	r7, r3, #5
 800a9ea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a9ee:	f013 031f 	ands.w	r3, r3, #31
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	bf18      	it	ne
 800a9f6:	3704      	addne	r7, #4
 800a9f8:	2500      	movs	r5, #0
 800a9fa:	1f3e      	subs	r6, r7, #4
 800a9fc:	4682      	mov	sl, r0
 800a9fe:	4690      	mov	r8, r2
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	f847 5c04 	str.w	r5, [r7, #-4]
 800aa06:	46b1      	mov	r9, r6
 800aa08:	4634      	mov	r4, r6
 800aa0a:	9502      	str	r5, [sp, #8]
 800aa0c:	46ab      	mov	fp, r5
 800aa0e:	784a      	ldrb	r2, [r1, #1]
 800aa10:	1c4b      	adds	r3, r1, #1
 800aa12:	9303      	str	r3, [sp, #12]
 800aa14:	b342      	cbz	r2, 800aa68 <__hexnan+0x88>
 800aa16:	4610      	mov	r0, r2
 800aa18:	9105      	str	r1, [sp, #20]
 800aa1a:	9204      	str	r2, [sp, #16]
 800aa1c:	f7ff fd84 	bl	800a528 <__hexdig_fun>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d143      	bne.n	800aaac <__hexnan+0xcc>
 800aa24:	9a04      	ldr	r2, [sp, #16]
 800aa26:	9905      	ldr	r1, [sp, #20]
 800aa28:	2a20      	cmp	r2, #32
 800aa2a:	d818      	bhi.n	800aa5e <__hexnan+0x7e>
 800aa2c:	9b02      	ldr	r3, [sp, #8]
 800aa2e:	459b      	cmp	fp, r3
 800aa30:	dd13      	ble.n	800aa5a <__hexnan+0x7a>
 800aa32:	454c      	cmp	r4, r9
 800aa34:	d206      	bcs.n	800aa44 <__hexnan+0x64>
 800aa36:	2d07      	cmp	r5, #7
 800aa38:	dc04      	bgt.n	800aa44 <__hexnan+0x64>
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7ff ffa8 	bl	800a994 <L_shift>
 800aa44:	4544      	cmp	r4, r8
 800aa46:	d944      	bls.n	800aad2 <__hexnan+0xf2>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f1a4 0904 	sub.w	r9, r4, #4
 800aa4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa52:	f8cd b008 	str.w	fp, [sp, #8]
 800aa56:	464c      	mov	r4, r9
 800aa58:	461d      	mov	r5, r3
 800aa5a:	9903      	ldr	r1, [sp, #12]
 800aa5c:	e7d7      	b.n	800aa0e <__hexnan+0x2e>
 800aa5e:	2a29      	cmp	r2, #41	; 0x29
 800aa60:	d14a      	bne.n	800aaf8 <__hexnan+0x118>
 800aa62:	3102      	adds	r1, #2
 800aa64:	f8ca 1000 	str.w	r1, [sl]
 800aa68:	f1bb 0f00 	cmp.w	fp, #0
 800aa6c:	d044      	beq.n	800aaf8 <__hexnan+0x118>
 800aa6e:	454c      	cmp	r4, r9
 800aa70:	d206      	bcs.n	800aa80 <__hexnan+0xa0>
 800aa72:	2d07      	cmp	r5, #7
 800aa74:	dc04      	bgt.n	800aa80 <__hexnan+0xa0>
 800aa76:	462a      	mov	r2, r5
 800aa78:	4649      	mov	r1, r9
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f7ff ff8a 	bl	800a994 <L_shift>
 800aa80:	4544      	cmp	r4, r8
 800aa82:	d928      	bls.n	800aad6 <__hexnan+0xf6>
 800aa84:	4643      	mov	r3, r8
 800aa86:	f854 2b04 	ldr.w	r2, [r4], #4
 800aa8a:	f843 2b04 	str.w	r2, [r3], #4
 800aa8e:	42a6      	cmp	r6, r4
 800aa90:	d2f9      	bcs.n	800aa86 <__hexnan+0xa6>
 800aa92:	2200      	movs	r2, #0
 800aa94:	f843 2b04 	str.w	r2, [r3], #4
 800aa98:	429e      	cmp	r6, r3
 800aa9a:	d2fb      	bcs.n	800aa94 <__hexnan+0xb4>
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	b91b      	cbnz	r3, 800aaa8 <__hexnan+0xc8>
 800aaa0:	4546      	cmp	r6, r8
 800aaa2:	d127      	bne.n	800aaf4 <__hexnan+0x114>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	6033      	str	r3, [r6, #0]
 800aaa8:	2005      	movs	r0, #5
 800aaaa:	e026      	b.n	800aafa <__hexnan+0x11a>
 800aaac:	3501      	adds	r5, #1
 800aaae:	2d08      	cmp	r5, #8
 800aab0:	f10b 0b01 	add.w	fp, fp, #1
 800aab4:	dd06      	ble.n	800aac4 <__hexnan+0xe4>
 800aab6:	4544      	cmp	r4, r8
 800aab8:	d9cf      	bls.n	800aa5a <__hexnan+0x7a>
 800aaba:	2300      	movs	r3, #0
 800aabc:	f844 3c04 	str.w	r3, [r4, #-4]
 800aac0:	2501      	movs	r5, #1
 800aac2:	3c04      	subs	r4, #4
 800aac4:	6822      	ldr	r2, [r4, #0]
 800aac6:	f000 000f 	and.w	r0, r0, #15
 800aaca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aace:	6020      	str	r0, [r4, #0]
 800aad0:	e7c3      	b.n	800aa5a <__hexnan+0x7a>
 800aad2:	2508      	movs	r5, #8
 800aad4:	e7c1      	b.n	800aa5a <__hexnan+0x7a>
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0df      	beq.n	800aa9c <__hexnan+0xbc>
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	f1c3 0320 	rsb	r3, r3, #32
 800aae4:	fa22 f303 	lsr.w	r3, r2, r3
 800aae8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aaec:	401a      	ands	r2, r3
 800aaee:	f847 2c04 	str.w	r2, [r7, #-4]
 800aaf2:	e7d3      	b.n	800aa9c <__hexnan+0xbc>
 800aaf4:	3e04      	subs	r6, #4
 800aaf6:	e7d1      	b.n	800aa9c <__hexnan+0xbc>
 800aaf8:	2004      	movs	r0, #4
 800aafa:	b007      	add	sp, #28
 800aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab00 <__locale_ctype_ptr_l>:
 800ab00:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ab04:	4770      	bx	lr

0800ab06 <__localeconv_l>:
 800ab06:	30f0      	adds	r0, #240	; 0xf0
 800ab08:	4770      	bx	lr
	...

0800ab0c <_localeconv_r>:
 800ab0c:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <_localeconv_r+0x14>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6a18      	ldr	r0, [r3, #32]
 800ab12:	4b04      	ldr	r3, [pc, #16]	; (800ab24 <_localeconv_r+0x18>)
 800ab14:	2800      	cmp	r0, #0
 800ab16:	bf08      	it	eq
 800ab18:	4618      	moveq	r0, r3
 800ab1a:	30f0      	adds	r0, #240	; 0xf0
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	2000000c 	.word	0x2000000c
 800ab24:	20000070 	.word	0x20000070

0800ab28 <malloc>:
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <malloc+0xc>)
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f000 bc7b 	b.w	800b428 <_malloc_r>
 800ab32:	bf00      	nop
 800ab34:	2000000c 	.word	0x2000000c

0800ab38 <__ascii_mbtowc>:
 800ab38:	b082      	sub	sp, #8
 800ab3a:	b901      	cbnz	r1, 800ab3e <__ascii_mbtowc+0x6>
 800ab3c:	a901      	add	r1, sp, #4
 800ab3e:	b142      	cbz	r2, 800ab52 <__ascii_mbtowc+0x1a>
 800ab40:	b14b      	cbz	r3, 800ab56 <__ascii_mbtowc+0x1e>
 800ab42:	7813      	ldrb	r3, [r2, #0]
 800ab44:	600b      	str	r3, [r1, #0]
 800ab46:	7812      	ldrb	r2, [r2, #0]
 800ab48:	1c10      	adds	r0, r2, #0
 800ab4a:	bf18      	it	ne
 800ab4c:	2001      	movne	r0, #1
 800ab4e:	b002      	add	sp, #8
 800ab50:	4770      	bx	lr
 800ab52:	4610      	mov	r0, r2
 800ab54:	e7fb      	b.n	800ab4e <__ascii_mbtowc+0x16>
 800ab56:	f06f 0001 	mvn.w	r0, #1
 800ab5a:	e7f8      	b.n	800ab4e <__ascii_mbtowc+0x16>

0800ab5c <memcpy>:
 800ab5c:	b510      	push	{r4, lr}
 800ab5e:	1e43      	subs	r3, r0, #1
 800ab60:	440a      	add	r2, r1
 800ab62:	4291      	cmp	r1, r2
 800ab64:	d100      	bne.n	800ab68 <memcpy+0xc>
 800ab66:	bd10      	pop	{r4, pc}
 800ab68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab70:	e7f7      	b.n	800ab62 <memcpy+0x6>

0800ab72 <_Balloc>:
 800ab72:	b570      	push	{r4, r5, r6, lr}
 800ab74:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab76:	4604      	mov	r4, r0
 800ab78:	460e      	mov	r6, r1
 800ab7a:	b93d      	cbnz	r5, 800ab8c <_Balloc+0x1a>
 800ab7c:	2010      	movs	r0, #16
 800ab7e:	f7ff ffd3 	bl	800ab28 <malloc>
 800ab82:	6260      	str	r0, [r4, #36]	; 0x24
 800ab84:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab88:	6005      	str	r5, [r0, #0]
 800ab8a:	60c5      	str	r5, [r0, #12]
 800ab8c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab8e:	68eb      	ldr	r3, [r5, #12]
 800ab90:	b183      	cbz	r3, 800abb4 <_Balloc+0x42>
 800ab92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab9a:	b9b8      	cbnz	r0, 800abcc <_Balloc+0x5a>
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	fa01 f506 	lsl.w	r5, r1, r6
 800aba2:	1d6a      	adds	r2, r5, #5
 800aba4:	0092      	lsls	r2, r2, #2
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 fbe1 	bl	800b36e <_calloc_r>
 800abac:	b160      	cbz	r0, 800abc8 <_Balloc+0x56>
 800abae:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800abb2:	e00e      	b.n	800abd2 <_Balloc+0x60>
 800abb4:	2221      	movs	r2, #33	; 0x21
 800abb6:	2104      	movs	r1, #4
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fbd8 	bl	800b36e <_calloc_r>
 800abbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc0:	60e8      	str	r0, [r5, #12]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e4      	bne.n	800ab92 <_Balloc+0x20>
 800abc8:	2000      	movs	r0, #0
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	6802      	ldr	r2, [r0, #0]
 800abce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800abd2:	2300      	movs	r3, #0
 800abd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abd8:	e7f7      	b.n	800abca <_Balloc+0x58>

0800abda <_Bfree>:
 800abda:	b570      	push	{r4, r5, r6, lr}
 800abdc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800abde:	4606      	mov	r6, r0
 800abe0:	460d      	mov	r5, r1
 800abe2:	b93c      	cbnz	r4, 800abf4 <_Bfree+0x1a>
 800abe4:	2010      	movs	r0, #16
 800abe6:	f7ff ff9f 	bl	800ab28 <malloc>
 800abea:	6270      	str	r0, [r6, #36]	; 0x24
 800abec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abf0:	6004      	str	r4, [r0, #0]
 800abf2:	60c4      	str	r4, [r0, #12]
 800abf4:	b13d      	cbz	r5, 800ac06 <_Bfree+0x2c>
 800abf6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800abf8:	686a      	ldr	r2, [r5, #4]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac00:	6029      	str	r1, [r5, #0]
 800ac02:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ac06:	bd70      	pop	{r4, r5, r6, pc}

0800ac08 <__multadd>:
 800ac08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0c:	690d      	ldr	r5, [r1, #16]
 800ac0e:	461f      	mov	r7, r3
 800ac10:	4606      	mov	r6, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	f101 0c14 	add.w	ip, r1, #20
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f8dc 0000 	ldr.w	r0, [ip]
 800ac1e:	b281      	uxth	r1, r0
 800ac20:	fb02 7101 	mla	r1, r2, r1, r7
 800ac24:	0c0f      	lsrs	r7, r1, #16
 800ac26:	0c00      	lsrs	r0, r0, #16
 800ac28:	fb02 7000 	mla	r0, r2, r0, r7
 800ac2c:	b289      	uxth	r1, r1
 800ac2e:	3301      	adds	r3, #1
 800ac30:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ac34:	429d      	cmp	r5, r3
 800ac36:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ac3a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac3e:	dcec      	bgt.n	800ac1a <__multadd+0x12>
 800ac40:	b1d7      	cbz	r7, 800ac78 <__multadd+0x70>
 800ac42:	68a3      	ldr	r3, [r4, #8]
 800ac44:	42ab      	cmp	r3, r5
 800ac46:	dc12      	bgt.n	800ac6e <__multadd+0x66>
 800ac48:	6861      	ldr	r1, [r4, #4]
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	3101      	adds	r1, #1
 800ac4e:	f7ff ff90 	bl	800ab72 <_Balloc>
 800ac52:	6922      	ldr	r2, [r4, #16]
 800ac54:	3202      	adds	r2, #2
 800ac56:	f104 010c 	add.w	r1, r4, #12
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	0092      	lsls	r2, r2, #2
 800ac5e:	300c      	adds	r0, #12
 800ac60:	f7ff ff7c 	bl	800ab5c <memcpy>
 800ac64:	4621      	mov	r1, r4
 800ac66:	4630      	mov	r0, r6
 800ac68:	f7ff ffb7 	bl	800abda <_Bfree>
 800ac6c:	4644      	mov	r4, r8
 800ac6e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac72:	3501      	adds	r5, #1
 800ac74:	615f      	str	r7, [r3, #20]
 800ac76:	6125      	str	r5, [r4, #16]
 800ac78:	4620      	mov	r0, r4
 800ac7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac7e <__s2b>:
 800ac7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac82:	460c      	mov	r4, r1
 800ac84:	4615      	mov	r5, r2
 800ac86:	461f      	mov	r7, r3
 800ac88:	2209      	movs	r2, #9
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac92:	2100      	movs	r1, #0
 800ac94:	2201      	movs	r2, #1
 800ac96:	429a      	cmp	r2, r3
 800ac98:	db20      	blt.n	800acdc <__s2b+0x5e>
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f7ff ff69 	bl	800ab72 <_Balloc>
 800aca0:	9b08      	ldr	r3, [sp, #32]
 800aca2:	6143      	str	r3, [r0, #20]
 800aca4:	2d09      	cmp	r5, #9
 800aca6:	f04f 0301 	mov.w	r3, #1
 800acaa:	6103      	str	r3, [r0, #16]
 800acac:	dd19      	ble.n	800ace2 <__s2b+0x64>
 800acae:	f104 0809 	add.w	r8, r4, #9
 800acb2:	46c1      	mov	r9, r8
 800acb4:	442c      	add	r4, r5
 800acb6:	f819 3b01 	ldrb.w	r3, [r9], #1
 800acba:	4601      	mov	r1, r0
 800acbc:	3b30      	subs	r3, #48	; 0x30
 800acbe:	220a      	movs	r2, #10
 800acc0:	4630      	mov	r0, r6
 800acc2:	f7ff ffa1 	bl	800ac08 <__multadd>
 800acc6:	45a1      	cmp	r9, r4
 800acc8:	d1f5      	bne.n	800acb6 <__s2b+0x38>
 800acca:	eb08 0405 	add.w	r4, r8, r5
 800acce:	3c08      	subs	r4, #8
 800acd0:	1b2d      	subs	r5, r5, r4
 800acd2:	1963      	adds	r3, r4, r5
 800acd4:	42bb      	cmp	r3, r7
 800acd6:	db07      	blt.n	800ace8 <__s2b+0x6a>
 800acd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acdc:	0052      	lsls	r2, r2, #1
 800acde:	3101      	adds	r1, #1
 800ace0:	e7d9      	b.n	800ac96 <__s2b+0x18>
 800ace2:	340a      	adds	r4, #10
 800ace4:	2509      	movs	r5, #9
 800ace6:	e7f3      	b.n	800acd0 <__s2b+0x52>
 800ace8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acec:	4601      	mov	r1, r0
 800acee:	3b30      	subs	r3, #48	; 0x30
 800acf0:	220a      	movs	r2, #10
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7ff ff88 	bl	800ac08 <__multadd>
 800acf8:	e7eb      	b.n	800acd2 <__s2b+0x54>

0800acfa <__hi0bits>:
 800acfa:	0c02      	lsrs	r2, r0, #16
 800acfc:	0412      	lsls	r2, r2, #16
 800acfe:	4603      	mov	r3, r0
 800ad00:	b9b2      	cbnz	r2, 800ad30 <__hi0bits+0x36>
 800ad02:	0403      	lsls	r3, r0, #16
 800ad04:	2010      	movs	r0, #16
 800ad06:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad0a:	bf04      	itt	eq
 800ad0c:	021b      	lsleq	r3, r3, #8
 800ad0e:	3008      	addeq	r0, #8
 800ad10:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad14:	bf04      	itt	eq
 800ad16:	011b      	lsleq	r3, r3, #4
 800ad18:	3004      	addeq	r0, #4
 800ad1a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad1e:	bf04      	itt	eq
 800ad20:	009b      	lsleq	r3, r3, #2
 800ad22:	3002      	addeq	r0, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	db06      	blt.n	800ad36 <__hi0bits+0x3c>
 800ad28:	005b      	lsls	r3, r3, #1
 800ad2a:	d503      	bpl.n	800ad34 <__hi0bits+0x3a>
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	4770      	bx	lr
 800ad30:	2000      	movs	r0, #0
 800ad32:	e7e8      	b.n	800ad06 <__hi0bits+0xc>
 800ad34:	2020      	movs	r0, #32
 800ad36:	4770      	bx	lr

0800ad38 <__lo0bits>:
 800ad38:	6803      	ldr	r3, [r0, #0]
 800ad3a:	f013 0207 	ands.w	r2, r3, #7
 800ad3e:	4601      	mov	r1, r0
 800ad40:	d00b      	beq.n	800ad5a <__lo0bits+0x22>
 800ad42:	07da      	lsls	r2, r3, #31
 800ad44:	d423      	bmi.n	800ad8e <__lo0bits+0x56>
 800ad46:	0798      	lsls	r0, r3, #30
 800ad48:	bf49      	itett	mi
 800ad4a:	085b      	lsrmi	r3, r3, #1
 800ad4c:	089b      	lsrpl	r3, r3, #2
 800ad4e:	2001      	movmi	r0, #1
 800ad50:	600b      	strmi	r3, [r1, #0]
 800ad52:	bf5c      	itt	pl
 800ad54:	600b      	strpl	r3, [r1, #0]
 800ad56:	2002      	movpl	r0, #2
 800ad58:	4770      	bx	lr
 800ad5a:	b298      	uxth	r0, r3
 800ad5c:	b9a8      	cbnz	r0, 800ad8a <__lo0bits+0x52>
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	2010      	movs	r0, #16
 800ad62:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad66:	bf04      	itt	eq
 800ad68:	0a1b      	lsreq	r3, r3, #8
 800ad6a:	3008      	addeq	r0, #8
 800ad6c:	071a      	lsls	r2, r3, #28
 800ad6e:	bf04      	itt	eq
 800ad70:	091b      	lsreq	r3, r3, #4
 800ad72:	3004      	addeq	r0, #4
 800ad74:	079a      	lsls	r2, r3, #30
 800ad76:	bf04      	itt	eq
 800ad78:	089b      	lsreq	r3, r3, #2
 800ad7a:	3002      	addeq	r0, #2
 800ad7c:	07da      	lsls	r2, r3, #31
 800ad7e:	d402      	bmi.n	800ad86 <__lo0bits+0x4e>
 800ad80:	085b      	lsrs	r3, r3, #1
 800ad82:	d006      	beq.n	800ad92 <__lo0bits+0x5a>
 800ad84:	3001      	adds	r0, #1
 800ad86:	600b      	str	r3, [r1, #0]
 800ad88:	4770      	bx	lr
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	e7e9      	b.n	800ad62 <__lo0bits+0x2a>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	4770      	bx	lr
 800ad92:	2020      	movs	r0, #32
 800ad94:	4770      	bx	lr

0800ad96 <__i2b>:
 800ad96:	b510      	push	{r4, lr}
 800ad98:	460c      	mov	r4, r1
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	f7ff fee9 	bl	800ab72 <_Balloc>
 800ada0:	2201      	movs	r2, #1
 800ada2:	6144      	str	r4, [r0, #20]
 800ada4:	6102      	str	r2, [r0, #16]
 800ada6:	bd10      	pop	{r4, pc}

0800ada8 <__multiply>:
 800ada8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	4614      	mov	r4, r2
 800adae:	690a      	ldr	r2, [r1, #16]
 800adb0:	6923      	ldr	r3, [r4, #16]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	bfb8      	it	lt
 800adb6:	460b      	movlt	r3, r1
 800adb8:	4688      	mov	r8, r1
 800adba:	bfbc      	itt	lt
 800adbc:	46a0      	movlt	r8, r4
 800adbe:	461c      	movlt	r4, r3
 800adc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800adc4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800adc8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800add0:	eb07 0609 	add.w	r6, r7, r9
 800add4:	42b3      	cmp	r3, r6
 800add6:	bfb8      	it	lt
 800add8:	3101      	addlt	r1, #1
 800adda:	f7ff feca 	bl	800ab72 <_Balloc>
 800adde:	f100 0514 	add.w	r5, r0, #20
 800ade2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ade6:	462b      	mov	r3, r5
 800ade8:	2200      	movs	r2, #0
 800adea:	4573      	cmp	r3, lr
 800adec:	d316      	bcc.n	800ae1c <__multiply+0x74>
 800adee:	f104 0214 	add.w	r2, r4, #20
 800adf2:	f108 0114 	add.w	r1, r8, #20
 800adf6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800adfa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	9b00      	ldr	r3, [sp, #0]
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d80c      	bhi.n	800ae22 <__multiply+0x7a>
 800ae08:	2e00      	cmp	r6, #0
 800ae0a:	dd03      	ble.n	800ae14 <__multiply+0x6c>
 800ae0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d05d      	beq.n	800aed0 <__multiply+0x128>
 800ae14:	6106      	str	r6, [r0, #16]
 800ae16:	b003      	add	sp, #12
 800ae18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1c:	f843 2b04 	str.w	r2, [r3], #4
 800ae20:	e7e3      	b.n	800adea <__multiply+0x42>
 800ae22:	f8b2 b000 	ldrh.w	fp, [r2]
 800ae26:	f1bb 0f00 	cmp.w	fp, #0
 800ae2a:	d023      	beq.n	800ae74 <__multiply+0xcc>
 800ae2c:	4689      	mov	r9, r1
 800ae2e:	46ac      	mov	ip, r5
 800ae30:	f04f 0800 	mov.w	r8, #0
 800ae34:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae38:	f8dc a000 	ldr.w	sl, [ip]
 800ae3c:	b2a3      	uxth	r3, r4
 800ae3e:	fa1f fa8a 	uxth.w	sl, sl
 800ae42:	fb0b a303 	mla	r3, fp, r3, sl
 800ae46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae4a:	f8dc 4000 	ldr.w	r4, [ip]
 800ae4e:	4443      	add	r3, r8
 800ae50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae54:	fb0b 840a 	mla	r4, fp, sl, r8
 800ae58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ae5c:	46e2      	mov	sl, ip
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae64:	454f      	cmp	r7, r9
 800ae66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae6a:	f84a 3b04 	str.w	r3, [sl], #4
 800ae6e:	d82b      	bhi.n	800aec8 <__multiply+0x120>
 800ae70:	f8cc 8004 	str.w	r8, [ip, #4]
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ae7a:	3204      	adds	r2, #4
 800ae7c:	f1ba 0f00 	cmp.w	sl, #0
 800ae80:	d020      	beq.n	800aec4 <__multiply+0x11c>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	4689      	mov	r9, r1
 800ae86:	46a8      	mov	r8, r5
 800ae88:	f04f 0b00 	mov.w	fp, #0
 800ae8c:	f8b9 c000 	ldrh.w	ip, [r9]
 800ae90:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ae94:	fb0a 440c 	mla	r4, sl, ip, r4
 800ae98:	445c      	add	r4, fp
 800ae9a:	46c4      	mov	ip, r8
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aea2:	f84c 3b04 	str.w	r3, [ip], #4
 800aea6:	f859 3b04 	ldr.w	r3, [r9], #4
 800aeaa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aeae:	0c1b      	lsrs	r3, r3, #16
 800aeb0:	fb0a b303 	mla	r3, sl, r3, fp
 800aeb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aeb8:	454f      	cmp	r7, r9
 800aeba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aebe:	d805      	bhi.n	800aecc <__multiply+0x124>
 800aec0:	f8c8 3004 	str.w	r3, [r8, #4]
 800aec4:	3504      	adds	r5, #4
 800aec6:	e79b      	b.n	800ae00 <__multiply+0x58>
 800aec8:	46d4      	mov	ip, sl
 800aeca:	e7b3      	b.n	800ae34 <__multiply+0x8c>
 800aecc:	46e0      	mov	r8, ip
 800aece:	e7dd      	b.n	800ae8c <__multiply+0xe4>
 800aed0:	3e01      	subs	r6, #1
 800aed2:	e799      	b.n	800ae08 <__multiply+0x60>

0800aed4 <__pow5mult>:
 800aed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	4615      	mov	r5, r2
 800aeda:	f012 0203 	ands.w	r2, r2, #3
 800aede:	4606      	mov	r6, r0
 800aee0:	460f      	mov	r7, r1
 800aee2:	d007      	beq.n	800aef4 <__pow5mult+0x20>
 800aee4:	3a01      	subs	r2, #1
 800aee6:	4c21      	ldr	r4, [pc, #132]	; (800af6c <__pow5mult+0x98>)
 800aee8:	2300      	movs	r3, #0
 800aeea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeee:	f7ff fe8b 	bl	800ac08 <__multadd>
 800aef2:	4607      	mov	r7, r0
 800aef4:	10ad      	asrs	r5, r5, #2
 800aef6:	d035      	beq.n	800af64 <__pow5mult+0x90>
 800aef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aefa:	b93c      	cbnz	r4, 800af0c <__pow5mult+0x38>
 800aefc:	2010      	movs	r0, #16
 800aefe:	f7ff fe13 	bl	800ab28 <malloc>
 800af02:	6270      	str	r0, [r6, #36]	; 0x24
 800af04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af08:	6004      	str	r4, [r0, #0]
 800af0a:	60c4      	str	r4, [r0, #12]
 800af0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af14:	b94c      	cbnz	r4, 800af2a <__pow5mult+0x56>
 800af16:	f240 2171 	movw	r1, #625	; 0x271
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff ff3b 	bl	800ad96 <__i2b>
 800af20:	2300      	movs	r3, #0
 800af22:	f8c8 0008 	str.w	r0, [r8, #8]
 800af26:	4604      	mov	r4, r0
 800af28:	6003      	str	r3, [r0, #0]
 800af2a:	f04f 0800 	mov.w	r8, #0
 800af2e:	07eb      	lsls	r3, r5, #31
 800af30:	d50a      	bpl.n	800af48 <__pow5mult+0x74>
 800af32:	4639      	mov	r1, r7
 800af34:	4622      	mov	r2, r4
 800af36:	4630      	mov	r0, r6
 800af38:	f7ff ff36 	bl	800ada8 <__multiply>
 800af3c:	4639      	mov	r1, r7
 800af3e:	4681      	mov	r9, r0
 800af40:	4630      	mov	r0, r6
 800af42:	f7ff fe4a 	bl	800abda <_Bfree>
 800af46:	464f      	mov	r7, r9
 800af48:	106d      	asrs	r5, r5, #1
 800af4a:	d00b      	beq.n	800af64 <__pow5mult+0x90>
 800af4c:	6820      	ldr	r0, [r4, #0]
 800af4e:	b938      	cbnz	r0, 800af60 <__pow5mult+0x8c>
 800af50:	4622      	mov	r2, r4
 800af52:	4621      	mov	r1, r4
 800af54:	4630      	mov	r0, r6
 800af56:	f7ff ff27 	bl	800ada8 <__multiply>
 800af5a:	6020      	str	r0, [r4, #0]
 800af5c:	f8c0 8000 	str.w	r8, [r0]
 800af60:	4604      	mov	r4, r0
 800af62:	e7e4      	b.n	800af2e <__pow5mult+0x5a>
 800af64:	4638      	mov	r0, r7
 800af66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af6a:	bf00      	nop
 800af6c:	0800c280 	.word	0x0800c280

0800af70 <__lshift>:
 800af70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af74:	460c      	mov	r4, r1
 800af76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af7a:	6923      	ldr	r3, [r4, #16]
 800af7c:	6849      	ldr	r1, [r1, #4]
 800af7e:	eb0a 0903 	add.w	r9, sl, r3
 800af82:	68a3      	ldr	r3, [r4, #8]
 800af84:	4607      	mov	r7, r0
 800af86:	4616      	mov	r6, r2
 800af88:	f109 0501 	add.w	r5, r9, #1
 800af8c:	42ab      	cmp	r3, r5
 800af8e:	db32      	blt.n	800aff6 <__lshift+0x86>
 800af90:	4638      	mov	r0, r7
 800af92:	f7ff fdee 	bl	800ab72 <_Balloc>
 800af96:	2300      	movs	r3, #0
 800af98:	4680      	mov	r8, r0
 800af9a:	f100 0114 	add.w	r1, r0, #20
 800af9e:	461a      	mov	r2, r3
 800afa0:	4553      	cmp	r3, sl
 800afa2:	db2b      	blt.n	800affc <__lshift+0x8c>
 800afa4:	6920      	ldr	r0, [r4, #16]
 800afa6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afaa:	f104 0314 	add.w	r3, r4, #20
 800afae:	f016 021f 	ands.w	r2, r6, #31
 800afb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afba:	d025      	beq.n	800b008 <__lshift+0x98>
 800afbc:	f1c2 0e20 	rsb	lr, r2, #32
 800afc0:	2000      	movs	r0, #0
 800afc2:	681e      	ldr	r6, [r3, #0]
 800afc4:	468a      	mov	sl, r1
 800afc6:	4096      	lsls	r6, r2
 800afc8:	4330      	orrs	r0, r6
 800afca:	f84a 0b04 	str.w	r0, [sl], #4
 800afce:	f853 0b04 	ldr.w	r0, [r3], #4
 800afd2:	459c      	cmp	ip, r3
 800afd4:	fa20 f00e 	lsr.w	r0, r0, lr
 800afd8:	d814      	bhi.n	800b004 <__lshift+0x94>
 800afda:	6048      	str	r0, [r1, #4]
 800afdc:	b108      	cbz	r0, 800afe2 <__lshift+0x72>
 800afde:	f109 0502 	add.w	r5, r9, #2
 800afe2:	3d01      	subs	r5, #1
 800afe4:	4638      	mov	r0, r7
 800afe6:	f8c8 5010 	str.w	r5, [r8, #16]
 800afea:	4621      	mov	r1, r4
 800afec:	f7ff fdf5 	bl	800abda <_Bfree>
 800aff0:	4640      	mov	r0, r8
 800aff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff6:	3101      	adds	r1, #1
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	e7c7      	b.n	800af8c <__lshift+0x1c>
 800affc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b000:	3301      	adds	r3, #1
 800b002:	e7cd      	b.n	800afa0 <__lshift+0x30>
 800b004:	4651      	mov	r1, sl
 800b006:	e7dc      	b.n	800afc2 <__lshift+0x52>
 800b008:	3904      	subs	r1, #4
 800b00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b00e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b012:	459c      	cmp	ip, r3
 800b014:	d8f9      	bhi.n	800b00a <__lshift+0x9a>
 800b016:	e7e4      	b.n	800afe2 <__lshift+0x72>

0800b018 <__mcmp>:
 800b018:	6903      	ldr	r3, [r0, #16]
 800b01a:	690a      	ldr	r2, [r1, #16]
 800b01c:	1a9b      	subs	r3, r3, r2
 800b01e:	b530      	push	{r4, r5, lr}
 800b020:	d10c      	bne.n	800b03c <__mcmp+0x24>
 800b022:	0092      	lsls	r2, r2, #2
 800b024:	3014      	adds	r0, #20
 800b026:	3114      	adds	r1, #20
 800b028:	1884      	adds	r4, r0, r2
 800b02a:	4411      	add	r1, r2
 800b02c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b030:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b034:	4295      	cmp	r5, r2
 800b036:	d003      	beq.n	800b040 <__mcmp+0x28>
 800b038:	d305      	bcc.n	800b046 <__mcmp+0x2e>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4618      	mov	r0, r3
 800b03e:	bd30      	pop	{r4, r5, pc}
 800b040:	42a0      	cmp	r0, r4
 800b042:	d3f3      	bcc.n	800b02c <__mcmp+0x14>
 800b044:	e7fa      	b.n	800b03c <__mcmp+0x24>
 800b046:	f04f 33ff 	mov.w	r3, #4294967295
 800b04a:	e7f7      	b.n	800b03c <__mcmp+0x24>

0800b04c <__mdiff>:
 800b04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b050:	460d      	mov	r5, r1
 800b052:	4607      	mov	r7, r0
 800b054:	4611      	mov	r1, r2
 800b056:	4628      	mov	r0, r5
 800b058:	4614      	mov	r4, r2
 800b05a:	f7ff ffdd 	bl	800b018 <__mcmp>
 800b05e:	1e06      	subs	r6, r0, #0
 800b060:	d108      	bne.n	800b074 <__mdiff+0x28>
 800b062:	4631      	mov	r1, r6
 800b064:	4638      	mov	r0, r7
 800b066:	f7ff fd84 	bl	800ab72 <_Balloc>
 800b06a:	2301      	movs	r3, #1
 800b06c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b074:	bfa4      	itt	ge
 800b076:	4623      	movge	r3, r4
 800b078:	462c      	movge	r4, r5
 800b07a:	4638      	mov	r0, r7
 800b07c:	6861      	ldr	r1, [r4, #4]
 800b07e:	bfa6      	itte	ge
 800b080:	461d      	movge	r5, r3
 800b082:	2600      	movge	r6, #0
 800b084:	2601      	movlt	r6, #1
 800b086:	f7ff fd74 	bl	800ab72 <_Balloc>
 800b08a:	692b      	ldr	r3, [r5, #16]
 800b08c:	60c6      	str	r6, [r0, #12]
 800b08e:	6926      	ldr	r6, [r4, #16]
 800b090:	f105 0914 	add.w	r9, r5, #20
 800b094:	f104 0214 	add.w	r2, r4, #20
 800b098:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b09c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b0a0:	f100 0514 	add.w	r5, r0, #20
 800b0a4:	f04f 0e00 	mov.w	lr, #0
 800b0a8:	f852 ab04 	ldr.w	sl, [r2], #4
 800b0ac:	f859 4b04 	ldr.w	r4, [r9], #4
 800b0b0:	fa1e f18a 	uxtah	r1, lr, sl
 800b0b4:	b2a3      	uxth	r3, r4
 800b0b6:	1ac9      	subs	r1, r1, r3
 800b0b8:	0c23      	lsrs	r3, r4, #16
 800b0ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b0be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b0c2:	b289      	uxth	r1, r1
 800b0c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b0c8:	45c8      	cmp	r8, r9
 800b0ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b0ce:	4694      	mov	ip, r2
 800b0d0:	f845 3b04 	str.w	r3, [r5], #4
 800b0d4:	d8e8      	bhi.n	800b0a8 <__mdiff+0x5c>
 800b0d6:	45bc      	cmp	ip, r7
 800b0d8:	d304      	bcc.n	800b0e4 <__mdiff+0x98>
 800b0da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b0de:	b183      	cbz	r3, 800b102 <__mdiff+0xb6>
 800b0e0:	6106      	str	r6, [r0, #16]
 800b0e2:	e7c5      	b.n	800b070 <__mdiff+0x24>
 800b0e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b0e8:	fa1e f381 	uxtah	r3, lr, r1
 800b0ec:	141a      	asrs	r2, r3, #16
 800b0ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b0fc:	f845 3b04 	str.w	r3, [r5], #4
 800b100:	e7e9      	b.n	800b0d6 <__mdiff+0x8a>
 800b102:	3e01      	subs	r6, #1
 800b104:	e7e9      	b.n	800b0da <__mdiff+0x8e>
	...

0800b108 <__ulp>:
 800b108:	4b12      	ldr	r3, [pc, #72]	; (800b154 <__ulp+0x4c>)
 800b10a:	ee10 2a90 	vmov	r2, s1
 800b10e:	401a      	ands	r2, r3
 800b110:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b114:	2b00      	cmp	r3, #0
 800b116:	dd04      	ble.n	800b122 <__ulp+0x1a>
 800b118:	2000      	movs	r0, #0
 800b11a:	4619      	mov	r1, r3
 800b11c:	ec41 0b10 	vmov	d0, r0, r1
 800b120:	4770      	bx	lr
 800b122:	425b      	negs	r3, r3
 800b124:	151b      	asrs	r3, r3, #20
 800b126:	2b13      	cmp	r3, #19
 800b128:	f04f 0000 	mov.w	r0, #0
 800b12c:	f04f 0100 	mov.w	r1, #0
 800b130:	dc04      	bgt.n	800b13c <__ulp+0x34>
 800b132:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b136:	fa42 f103 	asr.w	r1, r2, r3
 800b13a:	e7ef      	b.n	800b11c <__ulp+0x14>
 800b13c:	3b14      	subs	r3, #20
 800b13e:	2b1e      	cmp	r3, #30
 800b140:	f04f 0201 	mov.w	r2, #1
 800b144:	bfda      	itte	le
 800b146:	f1c3 031f 	rsble	r3, r3, #31
 800b14a:	fa02 f303 	lslle.w	r3, r2, r3
 800b14e:	4613      	movgt	r3, r2
 800b150:	4618      	mov	r0, r3
 800b152:	e7e3      	b.n	800b11c <__ulp+0x14>
 800b154:	7ff00000 	.word	0x7ff00000

0800b158 <__b2d>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	6905      	ldr	r5, [r0, #16]
 800b15c:	f100 0714 	add.w	r7, r0, #20
 800b160:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b164:	1f2e      	subs	r6, r5, #4
 800b166:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b16a:	4620      	mov	r0, r4
 800b16c:	f7ff fdc5 	bl	800acfa <__hi0bits>
 800b170:	f1c0 0320 	rsb	r3, r0, #32
 800b174:	280a      	cmp	r0, #10
 800b176:	600b      	str	r3, [r1, #0]
 800b178:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b1f0 <__b2d+0x98>
 800b17c:	dc14      	bgt.n	800b1a8 <__b2d+0x50>
 800b17e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b182:	fa24 f10e 	lsr.w	r1, r4, lr
 800b186:	42b7      	cmp	r7, r6
 800b188:	ea41 030c 	orr.w	r3, r1, ip
 800b18c:	bf34      	ite	cc
 800b18e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b192:	2100      	movcs	r1, #0
 800b194:	3015      	adds	r0, #21
 800b196:	fa04 f000 	lsl.w	r0, r4, r0
 800b19a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b19e:	ea40 0201 	orr.w	r2, r0, r1
 800b1a2:	ec43 2b10 	vmov	d0, r2, r3
 800b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a8:	42b7      	cmp	r7, r6
 800b1aa:	bf3a      	itte	cc
 800b1ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800b1b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1b4:	2100      	movcs	r1, #0
 800b1b6:	380b      	subs	r0, #11
 800b1b8:	d015      	beq.n	800b1e6 <__b2d+0x8e>
 800b1ba:	4084      	lsls	r4, r0
 800b1bc:	f1c0 0520 	rsb	r5, r0, #32
 800b1c0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b1c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b1c8:	42be      	cmp	r6, r7
 800b1ca:	fa21 fc05 	lsr.w	ip, r1, r5
 800b1ce:	ea44 030c 	orr.w	r3, r4, ip
 800b1d2:	bf8c      	ite	hi
 800b1d4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b1d8:	2400      	movls	r4, #0
 800b1da:	fa01 f000 	lsl.w	r0, r1, r0
 800b1de:	40ec      	lsrs	r4, r5
 800b1e0:	ea40 0204 	orr.w	r2, r0, r4
 800b1e4:	e7dd      	b.n	800b1a2 <__b2d+0x4a>
 800b1e6:	ea44 030c 	orr.w	r3, r4, ip
 800b1ea:	460a      	mov	r2, r1
 800b1ec:	e7d9      	b.n	800b1a2 <__b2d+0x4a>
 800b1ee:	bf00      	nop
 800b1f0:	3ff00000 	.word	0x3ff00000

0800b1f4 <__d2b>:
 800b1f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1f8:	460e      	mov	r6, r1
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	ec59 8b10 	vmov	r8, r9, d0
 800b200:	4615      	mov	r5, r2
 800b202:	f7ff fcb6 	bl	800ab72 <_Balloc>
 800b206:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b20a:	4607      	mov	r7, r0
 800b20c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b210:	bb34      	cbnz	r4, 800b260 <__d2b+0x6c>
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	f1b8 0300 	subs.w	r3, r8, #0
 800b218:	d027      	beq.n	800b26a <__d2b+0x76>
 800b21a:	a802      	add	r0, sp, #8
 800b21c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b220:	f7ff fd8a 	bl	800ad38 <__lo0bits>
 800b224:	9900      	ldr	r1, [sp, #0]
 800b226:	b1f0      	cbz	r0, 800b266 <__d2b+0x72>
 800b228:	9a01      	ldr	r2, [sp, #4]
 800b22a:	f1c0 0320 	rsb	r3, r0, #32
 800b22e:	fa02 f303 	lsl.w	r3, r2, r3
 800b232:	430b      	orrs	r3, r1
 800b234:	40c2      	lsrs	r2, r0
 800b236:	617b      	str	r3, [r7, #20]
 800b238:	9201      	str	r2, [sp, #4]
 800b23a:	9b01      	ldr	r3, [sp, #4]
 800b23c:	61bb      	str	r3, [r7, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	bf14      	ite	ne
 800b242:	2102      	movne	r1, #2
 800b244:	2101      	moveq	r1, #1
 800b246:	6139      	str	r1, [r7, #16]
 800b248:	b1c4      	cbz	r4, 800b27c <__d2b+0x88>
 800b24a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b24e:	4404      	add	r4, r0
 800b250:	6034      	str	r4, [r6, #0]
 800b252:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b256:	6028      	str	r0, [r5, #0]
 800b258:	4638      	mov	r0, r7
 800b25a:	b003      	add	sp, #12
 800b25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b264:	e7d5      	b.n	800b212 <__d2b+0x1e>
 800b266:	6179      	str	r1, [r7, #20]
 800b268:	e7e7      	b.n	800b23a <__d2b+0x46>
 800b26a:	a801      	add	r0, sp, #4
 800b26c:	f7ff fd64 	bl	800ad38 <__lo0bits>
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	617b      	str	r3, [r7, #20]
 800b274:	2101      	movs	r1, #1
 800b276:	6139      	str	r1, [r7, #16]
 800b278:	3020      	adds	r0, #32
 800b27a:	e7e5      	b.n	800b248 <__d2b+0x54>
 800b27c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b280:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b284:	6030      	str	r0, [r6, #0]
 800b286:	6918      	ldr	r0, [r3, #16]
 800b288:	f7ff fd37 	bl	800acfa <__hi0bits>
 800b28c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b290:	e7e1      	b.n	800b256 <__d2b+0x62>

0800b292 <__ratio>:
 800b292:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b296:	4688      	mov	r8, r1
 800b298:	4669      	mov	r1, sp
 800b29a:	4681      	mov	r9, r0
 800b29c:	f7ff ff5c 	bl	800b158 <__b2d>
 800b2a0:	a901      	add	r1, sp, #4
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	ec57 6b10 	vmov	r6, r7, d0
 800b2a8:	f7ff ff56 	bl	800b158 <__b2d>
 800b2ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b2b4:	eba3 0c02 	sub.w	ip, r3, r2
 800b2b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b2bc:	1a9b      	subs	r3, r3, r2
 800b2be:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b2c2:	ec5b ab10 	vmov	sl, fp, d0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfce      	itee	gt
 800b2ca:	463a      	movgt	r2, r7
 800b2cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b2d0:	465a      	movle	r2, fp
 800b2d2:	4659      	mov	r1, fp
 800b2d4:	463d      	mov	r5, r7
 800b2d6:	bfd4      	ite	le
 800b2d8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b2dc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	ee10 2a10 	vmov	r2, s0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 faaf 	bl	800084c <__aeabi_ddiv>
 800b2ee:	ec41 0b10 	vmov	d0, r0, r1
 800b2f2:	b003      	add	sp, #12
 800b2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2f8 <__copybits>:
 800b2f8:	3901      	subs	r1, #1
 800b2fa:	b510      	push	{r4, lr}
 800b2fc:	1149      	asrs	r1, r1, #5
 800b2fe:	6914      	ldr	r4, [r2, #16]
 800b300:	3101      	adds	r1, #1
 800b302:	f102 0314 	add.w	r3, r2, #20
 800b306:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b30a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b30e:	42a3      	cmp	r3, r4
 800b310:	4602      	mov	r2, r0
 800b312:	d303      	bcc.n	800b31c <__copybits+0x24>
 800b314:	2300      	movs	r3, #0
 800b316:	428a      	cmp	r2, r1
 800b318:	d305      	bcc.n	800b326 <__copybits+0x2e>
 800b31a:	bd10      	pop	{r4, pc}
 800b31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b320:	f840 2b04 	str.w	r2, [r0], #4
 800b324:	e7f3      	b.n	800b30e <__copybits+0x16>
 800b326:	f842 3b04 	str.w	r3, [r2], #4
 800b32a:	e7f4      	b.n	800b316 <__copybits+0x1e>

0800b32c <__any_on>:
 800b32c:	f100 0214 	add.w	r2, r0, #20
 800b330:	6900      	ldr	r0, [r0, #16]
 800b332:	114b      	asrs	r3, r1, #5
 800b334:	4298      	cmp	r0, r3
 800b336:	b510      	push	{r4, lr}
 800b338:	db11      	blt.n	800b35e <__any_on+0x32>
 800b33a:	dd0a      	ble.n	800b352 <__any_on+0x26>
 800b33c:	f011 011f 	ands.w	r1, r1, #31
 800b340:	d007      	beq.n	800b352 <__any_on+0x26>
 800b342:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b346:	fa24 f001 	lsr.w	r0, r4, r1
 800b34a:	fa00 f101 	lsl.w	r1, r0, r1
 800b34e:	428c      	cmp	r4, r1
 800b350:	d10b      	bne.n	800b36a <__any_on+0x3e>
 800b352:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b356:	4293      	cmp	r3, r2
 800b358:	d803      	bhi.n	800b362 <__any_on+0x36>
 800b35a:	2000      	movs	r0, #0
 800b35c:	bd10      	pop	{r4, pc}
 800b35e:	4603      	mov	r3, r0
 800b360:	e7f7      	b.n	800b352 <__any_on+0x26>
 800b362:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b366:	2900      	cmp	r1, #0
 800b368:	d0f5      	beq.n	800b356 <__any_on+0x2a>
 800b36a:	2001      	movs	r0, #1
 800b36c:	e7f6      	b.n	800b35c <__any_on+0x30>

0800b36e <_calloc_r>:
 800b36e:	b538      	push	{r3, r4, r5, lr}
 800b370:	fb02 f401 	mul.w	r4, r2, r1
 800b374:	4621      	mov	r1, r4
 800b376:	f000 f857 	bl	800b428 <_malloc_r>
 800b37a:	4605      	mov	r5, r0
 800b37c:	b118      	cbz	r0, 800b386 <_calloc_r+0x18>
 800b37e:	4622      	mov	r2, r4
 800b380:	2100      	movs	r1, #0
 800b382:	f7fc fc53 	bl	8007c2c <memset>
 800b386:	4628      	mov	r0, r5
 800b388:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b38c <_free_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4605      	mov	r5, r0
 800b390:	2900      	cmp	r1, #0
 800b392:	d045      	beq.n	800b420 <_free_r+0x94>
 800b394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b398:	1f0c      	subs	r4, r1, #4
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	bfb8      	it	lt
 800b39e:	18e4      	addlt	r4, r4, r3
 800b3a0:	f000 fdc3 	bl	800bf2a <__malloc_lock>
 800b3a4:	4a1f      	ldr	r2, [pc, #124]	; (800b424 <_free_r+0x98>)
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	b933      	cbnz	r3, 800b3ba <_free_r+0x2e>
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	6014      	str	r4, [r2, #0]
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b6:	f000 bdb9 	b.w	800bf2c <__malloc_unlock>
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	d90c      	bls.n	800b3d8 <_free_r+0x4c>
 800b3be:	6821      	ldr	r1, [r4, #0]
 800b3c0:	1862      	adds	r2, r4, r1
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	bf04      	itt	eq
 800b3c6:	681a      	ldreq	r2, [r3, #0]
 800b3c8:	685b      	ldreq	r3, [r3, #4]
 800b3ca:	6063      	str	r3, [r4, #4]
 800b3cc:	bf04      	itt	eq
 800b3ce:	1852      	addeq	r2, r2, r1
 800b3d0:	6022      	streq	r2, [r4, #0]
 800b3d2:	6004      	str	r4, [r0, #0]
 800b3d4:	e7ec      	b.n	800b3b0 <_free_r+0x24>
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	b10a      	cbz	r2, 800b3e0 <_free_r+0x54>
 800b3dc:	42a2      	cmp	r2, r4
 800b3de:	d9fa      	bls.n	800b3d6 <_free_r+0x4a>
 800b3e0:	6819      	ldr	r1, [r3, #0]
 800b3e2:	1858      	adds	r0, r3, r1
 800b3e4:	42a0      	cmp	r0, r4
 800b3e6:	d10b      	bne.n	800b400 <_free_r+0x74>
 800b3e8:	6820      	ldr	r0, [r4, #0]
 800b3ea:	4401      	add	r1, r0
 800b3ec:	1858      	adds	r0, r3, r1
 800b3ee:	4282      	cmp	r2, r0
 800b3f0:	6019      	str	r1, [r3, #0]
 800b3f2:	d1dd      	bne.n	800b3b0 <_free_r+0x24>
 800b3f4:	6810      	ldr	r0, [r2, #0]
 800b3f6:	6852      	ldr	r2, [r2, #4]
 800b3f8:	605a      	str	r2, [r3, #4]
 800b3fa:	4401      	add	r1, r0
 800b3fc:	6019      	str	r1, [r3, #0]
 800b3fe:	e7d7      	b.n	800b3b0 <_free_r+0x24>
 800b400:	d902      	bls.n	800b408 <_free_r+0x7c>
 800b402:	230c      	movs	r3, #12
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	e7d3      	b.n	800b3b0 <_free_r+0x24>
 800b408:	6820      	ldr	r0, [r4, #0]
 800b40a:	1821      	adds	r1, r4, r0
 800b40c:	428a      	cmp	r2, r1
 800b40e:	bf04      	itt	eq
 800b410:	6811      	ldreq	r1, [r2, #0]
 800b412:	6852      	ldreq	r2, [r2, #4]
 800b414:	6062      	str	r2, [r4, #4]
 800b416:	bf04      	itt	eq
 800b418:	1809      	addeq	r1, r1, r0
 800b41a:	6021      	streq	r1, [r4, #0]
 800b41c:	605c      	str	r4, [r3, #4]
 800b41e:	e7c7      	b.n	800b3b0 <_free_r+0x24>
 800b420:	bd38      	pop	{r3, r4, r5, pc}
 800b422:	bf00      	nop
 800b424:	2000020c 	.word	0x2000020c

0800b428 <_malloc_r>:
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	1ccd      	adds	r5, r1, #3
 800b42c:	f025 0503 	bic.w	r5, r5, #3
 800b430:	3508      	adds	r5, #8
 800b432:	2d0c      	cmp	r5, #12
 800b434:	bf38      	it	cc
 800b436:	250c      	movcc	r5, #12
 800b438:	2d00      	cmp	r5, #0
 800b43a:	4606      	mov	r6, r0
 800b43c:	db01      	blt.n	800b442 <_malloc_r+0x1a>
 800b43e:	42a9      	cmp	r1, r5
 800b440:	d903      	bls.n	800b44a <_malloc_r+0x22>
 800b442:	230c      	movs	r3, #12
 800b444:	6033      	str	r3, [r6, #0]
 800b446:	2000      	movs	r0, #0
 800b448:	bd70      	pop	{r4, r5, r6, pc}
 800b44a:	f000 fd6e 	bl	800bf2a <__malloc_lock>
 800b44e:	4a21      	ldr	r2, [pc, #132]	; (800b4d4 <_malloc_r+0xac>)
 800b450:	6814      	ldr	r4, [r2, #0]
 800b452:	4621      	mov	r1, r4
 800b454:	b991      	cbnz	r1, 800b47c <_malloc_r+0x54>
 800b456:	4c20      	ldr	r4, [pc, #128]	; (800b4d8 <_malloc_r+0xb0>)
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	b91b      	cbnz	r3, 800b464 <_malloc_r+0x3c>
 800b45c:	4630      	mov	r0, r6
 800b45e:	f000 facf 	bl	800ba00 <_sbrk_r>
 800b462:	6020      	str	r0, [r4, #0]
 800b464:	4629      	mov	r1, r5
 800b466:	4630      	mov	r0, r6
 800b468:	f000 faca 	bl	800ba00 <_sbrk_r>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d124      	bne.n	800b4ba <_malloc_r+0x92>
 800b470:	230c      	movs	r3, #12
 800b472:	6033      	str	r3, [r6, #0]
 800b474:	4630      	mov	r0, r6
 800b476:	f000 fd59 	bl	800bf2c <__malloc_unlock>
 800b47a:	e7e4      	b.n	800b446 <_malloc_r+0x1e>
 800b47c:	680b      	ldr	r3, [r1, #0]
 800b47e:	1b5b      	subs	r3, r3, r5
 800b480:	d418      	bmi.n	800b4b4 <_malloc_r+0x8c>
 800b482:	2b0b      	cmp	r3, #11
 800b484:	d90f      	bls.n	800b4a6 <_malloc_r+0x7e>
 800b486:	600b      	str	r3, [r1, #0]
 800b488:	50cd      	str	r5, [r1, r3]
 800b48a:	18cc      	adds	r4, r1, r3
 800b48c:	4630      	mov	r0, r6
 800b48e:	f000 fd4d 	bl	800bf2c <__malloc_unlock>
 800b492:	f104 000b 	add.w	r0, r4, #11
 800b496:	1d23      	adds	r3, r4, #4
 800b498:	f020 0007 	bic.w	r0, r0, #7
 800b49c:	1ac3      	subs	r3, r0, r3
 800b49e:	d0d3      	beq.n	800b448 <_malloc_r+0x20>
 800b4a0:	425a      	negs	r2, r3
 800b4a2:	50e2      	str	r2, [r4, r3]
 800b4a4:	e7d0      	b.n	800b448 <_malloc_r+0x20>
 800b4a6:	428c      	cmp	r4, r1
 800b4a8:	684b      	ldr	r3, [r1, #4]
 800b4aa:	bf16      	itet	ne
 800b4ac:	6063      	strne	r3, [r4, #4]
 800b4ae:	6013      	streq	r3, [r2, #0]
 800b4b0:	460c      	movne	r4, r1
 800b4b2:	e7eb      	b.n	800b48c <_malloc_r+0x64>
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	6849      	ldr	r1, [r1, #4]
 800b4b8:	e7cc      	b.n	800b454 <_malloc_r+0x2c>
 800b4ba:	1cc4      	adds	r4, r0, #3
 800b4bc:	f024 0403 	bic.w	r4, r4, #3
 800b4c0:	42a0      	cmp	r0, r4
 800b4c2:	d005      	beq.n	800b4d0 <_malloc_r+0xa8>
 800b4c4:	1a21      	subs	r1, r4, r0
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f000 fa9a 	bl	800ba00 <_sbrk_r>
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	d0cf      	beq.n	800b470 <_malloc_r+0x48>
 800b4d0:	6025      	str	r5, [r4, #0]
 800b4d2:	e7db      	b.n	800b48c <_malloc_r+0x64>
 800b4d4:	2000020c 	.word	0x2000020c
 800b4d8:	20000210 	.word	0x20000210

0800b4dc <__ssputs_r>:
 800b4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e0:	688e      	ldr	r6, [r1, #8]
 800b4e2:	429e      	cmp	r6, r3
 800b4e4:	4682      	mov	sl, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	4690      	mov	r8, r2
 800b4ea:	4699      	mov	r9, r3
 800b4ec:	d837      	bhi.n	800b55e <__ssputs_r+0x82>
 800b4ee:	898a      	ldrh	r2, [r1, #12]
 800b4f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4f4:	d031      	beq.n	800b55a <__ssputs_r+0x7e>
 800b4f6:	6825      	ldr	r5, [r4, #0]
 800b4f8:	6909      	ldr	r1, [r1, #16]
 800b4fa:	1a6f      	subs	r7, r5, r1
 800b4fc:	6965      	ldr	r5, [r4, #20]
 800b4fe:	2302      	movs	r3, #2
 800b500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b504:	fb95 f5f3 	sdiv	r5, r5, r3
 800b508:	f109 0301 	add.w	r3, r9, #1
 800b50c:	443b      	add	r3, r7
 800b50e:	429d      	cmp	r5, r3
 800b510:	bf38      	it	cc
 800b512:	461d      	movcc	r5, r3
 800b514:	0553      	lsls	r3, r2, #21
 800b516:	d530      	bpl.n	800b57a <__ssputs_r+0x9e>
 800b518:	4629      	mov	r1, r5
 800b51a:	f7ff ff85 	bl	800b428 <_malloc_r>
 800b51e:	4606      	mov	r6, r0
 800b520:	b950      	cbnz	r0, 800b538 <__ssputs_r+0x5c>
 800b522:	230c      	movs	r3, #12
 800b524:	f8ca 3000 	str.w	r3, [sl]
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	f04f 30ff 	mov.w	r0, #4294967295
 800b534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b538:	463a      	mov	r2, r7
 800b53a:	6921      	ldr	r1, [r4, #16]
 800b53c:	f7ff fb0e 	bl	800ab5c <memcpy>
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b54a:	81a3      	strh	r3, [r4, #12]
 800b54c:	6126      	str	r6, [r4, #16]
 800b54e:	6165      	str	r5, [r4, #20]
 800b550:	443e      	add	r6, r7
 800b552:	1bed      	subs	r5, r5, r7
 800b554:	6026      	str	r6, [r4, #0]
 800b556:	60a5      	str	r5, [r4, #8]
 800b558:	464e      	mov	r6, r9
 800b55a:	454e      	cmp	r6, r9
 800b55c:	d900      	bls.n	800b560 <__ssputs_r+0x84>
 800b55e:	464e      	mov	r6, r9
 800b560:	4632      	mov	r2, r6
 800b562:	4641      	mov	r1, r8
 800b564:	6820      	ldr	r0, [r4, #0]
 800b566:	f000 fcc7 	bl	800bef8 <memmove>
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	1b9b      	subs	r3, r3, r6
 800b56e:	60a3      	str	r3, [r4, #8]
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	441e      	add	r6, r3
 800b574:	6026      	str	r6, [r4, #0]
 800b576:	2000      	movs	r0, #0
 800b578:	e7dc      	b.n	800b534 <__ssputs_r+0x58>
 800b57a:	462a      	mov	r2, r5
 800b57c:	f000 fcd7 	bl	800bf2e <_realloc_r>
 800b580:	4606      	mov	r6, r0
 800b582:	2800      	cmp	r0, #0
 800b584:	d1e2      	bne.n	800b54c <__ssputs_r+0x70>
 800b586:	6921      	ldr	r1, [r4, #16]
 800b588:	4650      	mov	r0, sl
 800b58a:	f7ff feff 	bl	800b38c <_free_r>
 800b58e:	e7c8      	b.n	800b522 <__ssputs_r+0x46>

0800b590 <_svfiprintf_r>:
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	461d      	mov	r5, r3
 800b596:	898b      	ldrh	r3, [r1, #12]
 800b598:	061f      	lsls	r7, r3, #24
 800b59a:	b09d      	sub	sp, #116	; 0x74
 800b59c:	4680      	mov	r8, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	d50f      	bpl.n	800b5c4 <_svfiprintf_r+0x34>
 800b5a4:	690b      	ldr	r3, [r1, #16]
 800b5a6:	b96b      	cbnz	r3, 800b5c4 <_svfiprintf_r+0x34>
 800b5a8:	2140      	movs	r1, #64	; 0x40
 800b5aa:	f7ff ff3d 	bl	800b428 <_malloc_r>
 800b5ae:	6020      	str	r0, [r4, #0]
 800b5b0:	6120      	str	r0, [r4, #16]
 800b5b2:	b928      	cbnz	r0, 800b5c0 <_svfiprintf_r+0x30>
 800b5b4:	230c      	movs	r3, #12
 800b5b6:	f8c8 3000 	str.w	r3, [r8]
 800b5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b5be:	e0c8      	b.n	800b752 <_svfiprintf_r+0x1c2>
 800b5c0:	2340      	movs	r3, #64	; 0x40
 800b5c2:	6163      	str	r3, [r4, #20]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c8:	2320      	movs	r3, #32
 800b5ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ce:	2330      	movs	r3, #48	; 0x30
 800b5d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5d4:	9503      	str	r5, [sp, #12]
 800b5d6:	f04f 0b01 	mov.w	fp, #1
 800b5da:	4637      	mov	r7, r6
 800b5dc:	463d      	mov	r5, r7
 800b5de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5e2:	b10b      	cbz	r3, 800b5e8 <_svfiprintf_r+0x58>
 800b5e4:	2b25      	cmp	r3, #37	; 0x25
 800b5e6:	d13e      	bne.n	800b666 <_svfiprintf_r+0xd6>
 800b5e8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b5ec:	d00b      	beq.n	800b606 <_svfiprintf_r+0x76>
 800b5ee:	4653      	mov	r3, sl
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	f7ff ff71 	bl	800b4dc <__ssputs_r>
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	f000 80a4 	beq.w	800b748 <_svfiprintf_r+0x1b8>
 800b600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b602:	4453      	add	r3, sl
 800b604:	9309      	str	r3, [sp, #36]	; 0x24
 800b606:	783b      	ldrb	r3, [r7, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 809d 	beq.w	800b748 <_svfiprintf_r+0x1b8>
 800b60e:	2300      	movs	r3, #0
 800b610:	f04f 32ff 	mov.w	r2, #4294967295
 800b614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	9307      	str	r3, [sp, #28]
 800b61c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b620:	931a      	str	r3, [sp, #104]	; 0x68
 800b622:	462f      	mov	r7, r5
 800b624:	2205      	movs	r2, #5
 800b626:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b62a:	4850      	ldr	r0, [pc, #320]	; (800b76c <_svfiprintf_r+0x1dc>)
 800b62c:	f7f4 fdd8 	bl	80001e0 <memchr>
 800b630:	9b04      	ldr	r3, [sp, #16]
 800b632:	b9d0      	cbnz	r0, 800b66a <_svfiprintf_r+0xda>
 800b634:	06d9      	lsls	r1, r3, #27
 800b636:	bf44      	itt	mi
 800b638:	2220      	movmi	r2, #32
 800b63a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b63e:	071a      	lsls	r2, r3, #28
 800b640:	bf44      	itt	mi
 800b642:	222b      	movmi	r2, #43	; 0x2b
 800b644:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b648:	782a      	ldrb	r2, [r5, #0]
 800b64a:	2a2a      	cmp	r2, #42	; 0x2a
 800b64c:	d015      	beq.n	800b67a <_svfiprintf_r+0xea>
 800b64e:	9a07      	ldr	r2, [sp, #28]
 800b650:	462f      	mov	r7, r5
 800b652:	2000      	movs	r0, #0
 800b654:	250a      	movs	r5, #10
 800b656:	4639      	mov	r1, r7
 800b658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b65c:	3b30      	subs	r3, #48	; 0x30
 800b65e:	2b09      	cmp	r3, #9
 800b660:	d94d      	bls.n	800b6fe <_svfiprintf_r+0x16e>
 800b662:	b1b8      	cbz	r0, 800b694 <_svfiprintf_r+0x104>
 800b664:	e00f      	b.n	800b686 <_svfiprintf_r+0xf6>
 800b666:	462f      	mov	r7, r5
 800b668:	e7b8      	b.n	800b5dc <_svfiprintf_r+0x4c>
 800b66a:	4a40      	ldr	r2, [pc, #256]	; (800b76c <_svfiprintf_r+0x1dc>)
 800b66c:	1a80      	subs	r0, r0, r2
 800b66e:	fa0b f000 	lsl.w	r0, fp, r0
 800b672:	4318      	orrs	r0, r3
 800b674:	9004      	str	r0, [sp, #16]
 800b676:	463d      	mov	r5, r7
 800b678:	e7d3      	b.n	800b622 <_svfiprintf_r+0x92>
 800b67a:	9a03      	ldr	r2, [sp, #12]
 800b67c:	1d11      	adds	r1, r2, #4
 800b67e:	6812      	ldr	r2, [r2, #0]
 800b680:	9103      	str	r1, [sp, #12]
 800b682:	2a00      	cmp	r2, #0
 800b684:	db01      	blt.n	800b68a <_svfiprintf_r+0xfa>
 800b686:	9207      	str	r2, [sp, #28]
 800b688:	e004      	b.n	800b694 <_svfiprintf_r+0x104>
 800b68a:	4252      	negs	r2, r2
 800b68c:	f043 0302 	orr.w	r3, r3, #2
 800b690:	9207      	str	r2, [sp, #28]
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	783b      	ldrb	r3, [r7, #0]
 800b696:	2b2e      	cmp	r3, #46	; 0x2e
 800b698:	d10c      	bne.n	800b6b4 <_svfiprintf_r+0x124>
 800b69a:	787b      	ldrb	r3, [r7, #1]
 800b69c:	2b2a      	cmp	r3, #42	; 0x2a
 800b69e:	d133      	bne.n	800b708 <_svfiprintf_r+0x178>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	1d1a      	adds	r2, r3, #4
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	9203      	str	r2, [sp, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	bfb8      	it	lt
 800b6ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6b0:	3702      	adds	r7, #2
 800b6b2:	9305      	str	r3, [sp, #20]
 800b6b4:	4d2e      	ldr	r5, [pc, #184]	; (800b770 <_svfiprintf_r+0x1e0>)
 800b6b6:	7839      	ldrb	r1, [r7, #0]
 800b6b8:	2203      	movs	r2, #3
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f7f4 fd90 	bl	80001e0 <memchr>
 800b6c0:	b138      	cbz	r0, 800b6d2 <_svfiprintf_r+0x142>
 800b6c2:	2340      	movs	r3, #64	; 0x40
 800b6c4:	1b40      	subs	r0, r0, r5
 800b6c6:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ca:	9b04      	ldr	r3, [sp, #16]
 800b6cc:	4303      	orrs	r3, r0
 800b6ce:	3701      	adds	r7, #1
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	7839      	ldrb	r1, [r7, #0]
 800b6d4:	4827      	ldr	r0, [pc, #156]	; (800b774 <_svfiprintf_r+0x1e4>)
 800b6d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6da:	2206      	movs	r2, #6
 800b6dc:	1c7e      	adds	r6, r7, #1
 800b6de:	f7f4 fd7f 	bl	80001e0 <memchr>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d038      	beq.n	800b758 <_svfiprintf_r+0x1c8>
 800b6e6:	4b24      	ldr	r3, [pc, #144]	; (800b778 <_svfiprintf_r+0x1e8>)
 800b6e8:	bb13      	cbnz	r3, 800b730 <_svfiprintf_r+0x1a0>
 800b6ea:	9b03      	ldr	r3, [sp, #12]
 800b6ec:	3307      	adds	r3, #7
 800b6ee:	f023 0307 	bic.w	r3, r3, #7
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	9303      	str	r3, [sp, #12]
 800b6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f8:	444b      	add	r3, r9
 800b6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fc:	e76d      	b.n	800b5da <_svfiprintf_r+0x4a>
 800b6fe:	fb05 3202 	mla	r2, r5, r2, r3
 800b702:	2001      	movs	r0, #1
 800b704:	460f      	mov	r7, r1
 800b706:	e7a6      	b.n	800b656 <_svfiprintf_r+0xc6>
 800b708:	2300      	movs	r3, #0
 800b70a:	3701      	adds	r7, #1
 800b70c:	9305      	str	r3, [sp, #20]
 800b70e:	4619      	mov	r1, r3
 800b710:	250a      	movs	r5, #10
 800b712:	4638      	mov	r0, r7
 800b714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b718:	3a30      	subs	r2, #48	; 0x30
 800b71a:	2a09      	cmp	r2, #9
 800b71c:	d903      	bls.n	800b726 <_svfiprintf_r+0x196>
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0c8      	beq.n	800b6b4 <_svfiprintf_r+0x124>
 800b722:	9105      	str	r1, [sp, #20]
 800b724:	e7c6      	b.n	800b6b4 <_svfiprintf_r+0x124>
 800b726:	fb05 2101 	mla	r1, r5, r1, r2
 800b72a:	2301      	movs	r3, #1
 800b72c:	4607      	mov	r7, r0
 800b72e:	e7f0      	b.n	800b712 <_svfiprintf_r+0x182>
 800b730:	ab03      	add	r3, sp, #12
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4622      	mov	r2, r4
 800b736:	4b11      	ldr	r3, [pc, #68]	; (800b77c <_svfiprintf_r+0x1ec>)
 800b738:	a904      	add	r1, sp, #16
 800b73a:	4640      	mov	r0, r8
 800b73c:	f7fc fb12 	bl	8007d64 <_printf_float>
 800b740:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b744:	4681      	mov	r9, r0
 800b746:	d1d6      	bne.n	800b6f6 <_svfiprintf_r+0x166>
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	065b      	lsls	r3, r3, #25
 800b74c:	f53f af35 	bmi.w	800b5ba <_svfiprintf_r+0x2a>
 800b750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b752:	b01d      	add	sp, #116	; 0x74
 800b754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b758:	ab03      	add	r3, sp, #12
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	4622      	mov	r2, r4
 800b75e:	4b07      	ldr	r3, [pc, #28]	; (800b77c <_svfiprintf_r+0x1ec>)
 800b760:	a904      	add	r1, sp, #16
 800b762:	4640      	mov	r0, r8
 800b764:	f7fc fdb4 	bl	80082d0 <_printf_i>
 800b768:	e7ea      	b.n	800b740 <_svfiprintf_r+0x1b0>
 800b76a:	bf00      	nop
 800b76c:	0800c28c 	.word	0x0800c28c
 800b770:	0800c292 	.word	0x0800c292
 800b774:	0800c296 	.word	0x0800c296
 800b778:	08007d65 	.word	0x08007d65
 800b77c:	0800b4dd 	.word	0x0800b4dd

0800b780 <__sfputc_r>:
 800b780:	6893      	ldr	r3, [r2, #8]
 800b782:	3b01      	subs	r3, #1
 800b784:	2b00      	cmp	r3, #0
 800b786:	b410      	push	{r4}
 800b788:	6093      	str	r3, [r2, #8]
 800b78a:	da08      	bge.n	800b79e <__sfputc_r+0x1e>
 800b78c:	6994      	ldr	r4, [r2, #24]
 800b78e:	42a3      	cmp	r3, r4
 800b790:	db01      	blt.n	800b796 <__sfputc_r+0x16>
 800b792:	290a      	cmp	r1, #10
 800b794:	d103      	bne.n	800b79e <__sfputc_r+0x1e>
 800b796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b79a:	f000 b997 	b.w	800bacc <__swbuf_r>
 800b79e:	6813      	ldr	r3, [r2, #0]
 800b7a0:	1c58      	adds	r0, r3, #1
 800b7a2:	6010      	str	r0, [r2, #0]
 800b7a4:	7019      	strb	r1, [r3, #0]
 800b7a6:	4608      	mov	r0, r1
 800b7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <__sfputs_r>:
 800b7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	460f      	mov	r7, r1
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	18d5      	adds	r5, r2, r3
 800b7b8:	42ac      	cmp	r4, r5
 800b7ba:	d101      	bne.n	800b7c0 <__sfputs_r+0x12>
 800b7bc:	2000      	movs	r0, #0
 800b7be:	e007      	b.n	800b7d0 <__sfputs_r+0x22>
 800b7c0:	463a      	mov	r2, r7
 800b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	f7ff ffda 	bl	800b780 <__sfputc_r>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d1f3      	bne.n	800b7b8 <__sfputs_r+0xa>
 800b7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7d4 <_vfiprintf_r>:
 800b7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	460c      	mov	r4, r1
 800b7da:	b09d      	sub	sp, #116	; 0x74
 800b7dc:	4617      	mov	r7, r2
 800b7de:	461d      	mov	r5, r3
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	b118      	cbz	r0, 800b7ec <_vfiprintf_r+0x18>
 800b7e4:	6983      	ldr	r3, [r0, #24]
 800b7e6:	b90b      	cbnz	r3, 800b7ec <_vfiprintf_r+0x18>
 800b7e8:	f7fe fdda 	bl	800a3a0 <__sinit>
 800b7ec:	4b7c      	ldr	r3, [pc, #496]	; (800b9e0 <_vfiprintf_r+0x20c>)
 800b7ee:	429c      	cmp	r4, r3
 800b7f0:	d158      	bne.n	800b8a4 <_vfiprintf_r+0xd0>
 800b7f2:	6874      	ldr	r4, [r6, #4]
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	0718      	lsls	r0, r3, #28
 800b7f8:	d55e      	bpl.n	800b8b8 <_vfiprintf_r+0xe4>
 800b7fa:	6923      	ldr	r3, [r4, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d05b      	beq.n	800b8b8 <_vfiprintf_r+0xe4>
 800b800:	2300      	movs	r3, #0
 800b802:	9309      	str	r3, [sp, #36]	; 0x24
 800b804:	2320      	movs	r3, #32
 800b806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b80a:	2330      	movs	r3, #48	; 0x30
 800b80c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b810:	9503      	str	r5, [sp, #12]
 800b812:	f04f 0b01 	mov.w	fp, #1
 800b816:	46b8      	mov	r8, r7
 800b818:	4645      	mov	r5, r8
 800b81a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b81e:	b10b      	cbz	r3, 800b824 <_vfiprintf_r+0x50>
 800b820:	2b25      	cmp	r3, #37	; 0x25
 800b822:	d154      	bne.n	800b8ce <_vfiprintf_r+0xfa>
 800b824:	ebb8 0a07 	subs.w	sl, r8, r7
 800b828:	d00b      	beq.n	800b842 <_vfiprintf_r+0x6e>
 800b82a:	4653      	mov	r3, sl
 800b82c:	463a      	mov	r2, r7
 800b82e:	4621      	mov	r1, r4
 800b830:	4630      	mov	r0, r6
 800b832:	f7ff ffbc 	bl	800b7ae <__sfputs_r>
 800b836:	3001      	adds	r0, #1
 800b838:	f000 80c2 	beq.w	800b9c0 <_vfiprintf_r+0x1ec>
 800b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83e:	4453      	add	r3, sl
 800b840:	9309      	str	r3, [sp, #36]	; 0x24
 800b842:	f898 3000 	ldrb.w	r3, [r8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	f000 80ba 	beq.w	800b9c0 <_vfiprintf_r+0x1ec>
 800b84c:	2300      	movs	r3, #0
 800b84e:	f04f 32ff 	mov.w	r2, #4294967295
 800b852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b856:	9304      	str	r3, [sp, #16]
 800b858:	9307      	str	r3, [sp, #28]
 800b85a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b85e:	931a      	str	r3, [sp, #104]	; 0x68
 800b860:	46a8      	mov	r8, r5
 800b862:	2205      	movs	r2, #5
 800b864:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b868:	485e      	ldr	r0, [pc, #376]	; (800b9e4 <_vfiprintf_r+0x210>)
 800b86a:	f7f4 fcb9 	bl	80001e0 <memchr>
 800b86e:	9b04      	ldr	r3, [sp, #16]
 800b870:	bb78      	cbnz	r0, 800b8d2 <_vfiprintf_r+0xfe>
 800b872:	06d9      	lsls	r1, r3, #27
 800b874:	bf44      	itt	mi
 800b876:	2220      	movmi	r2, #32
 800b878:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b87c:	071a      	lsls	r2, r3, #28
 800b87e:	bf44      	itt	mi
 800b880:	222b      	movmi	r2, #43	; 0x2b
 800b882:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b886:	782a      	ldrb	r2, [r5, #0]
 800b888:	2a2a      	cmp	r2, #42	; 0x2a
 800b88a:	d02a      	beq.n	800b8e2 <_vfiprintf_r+0x10e>
 800b88c:	9a07      	ldr	r2, [sp, #28]
 800b88e:	46a8      	mov	r8, r5
 800b890:	2000      	movs	r0, #0
 800b892:	250a      	movs	r5, #10
 800b894:	4641      	mov	r1, r8
 800b896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b89a:	3b30      	subs	r3, #48	; 0x30
 800b89c:	2b09      	cmp	r3, #9
 800b89e:	d969      	bls.n	800b974 <_vfiprintf_r+0x1a0>
 800b8a0:	b360      	cbz	r0, 800b8fc <_vfiprintf_r+0x128>
 800b8a2:	e024      	b.n	800b8ee <_vfiprintf_r+0x11a>
 800b8a4:	4b50      	ldr	r3, [pc, #320]	; (800b9e8 <_vfiprintf_r+0x214>)
 800b8a6:	429c      	cmp	r4, r3
 800b8a8:	d101      	bne.n	800b8ae <_vfiprintf_r+0xda>
 800b8aa:	68b4      	ldr	r4, [r6, #8]
 800b8ac:	e7a2      	b.n	800b7f4 <_vfiprintf_r+0x20>
 800b8ae:	4b4f      	ldr	r3, [pc, #316]	; (800b9ec <_vfiprintf_r+0x218>)
 800b8b0:	429c      	cmp	r4, r3
 800b8b2:	bf08      	it	eq
 800b8b4:	68f4      	ldreq	r4, [r6, #12]
 800b8b6:	e79d      	b.n	800b7f4 <_vfiprintf_r+0x20>
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f000 f978 	bl	800bbb0 <__swsetup_r>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d09d      	beq.n	800b800 <_vfiprintf_r+0x2c>
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	b01d      	add	sp, #116	; 0x74
 800b8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ce:	46a8      	mov	r8, r5
 800b8d0:	e7a2      	b.n	800b818 <_vfiprintf_r+0x44>
 800b8d2:	4a44      	ldr	r2, [pc, #272]	; (800b9e4 <_vfiprintf_r+0x210>)
 800b8d4:	1a80      	subs	r0, r0, r2
 800b8d6:	fa0b f000 	lsl.w	r0, fp, r0
 800b8da:	4318      	orrs	r0, r3
 800b8dc:	9004      	str	r0, [sp, #16]
 800b8de:	4645      	mov	r5, r8
 800b8e0:	e7be      	b.n	800b860 <_vfiprintf_r+0x8c>
 800b8e2:	9a03      	ldr	r2, [sp, #12]
 800b8e4:	1d11      	adds	r1, r2, #4
 800b8e6:	6812      	ldr	r2, [r2, #0]
 800b8e8:	9103      	str	r1, [sp, #12]
 800b8ea:	2a00      	cmp	r2, #0
 800b8ec:	db01      	blt.n	800b8f2 <_vfiprintf_r+0x11e>
 800b8ee:	9207      	str	r2, [sp, #28]
 800b8f0:	e004      	b.n	800b8fc <_vfiprintf_r+0x128>
 800b8f2:	4252      	negs	r2, r2
 800b8f4:	f043 0302 	orr.w	r3, r3, #2
 800b8f8:	9207      	str	r2, [sp, #28]
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	f898 3000 	ldrb.w	r3, [r8]
 800b900:	2b2e      	cmp	r3, #46	; 0x2e
 800b902:	d10e      	bne.n	800b922 <_vfiprintf_r+0x14e>
 800b904:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b908:	2b2a      	cmp	r3, #42	; 0x2a
 800b90a:	d138      	bne.n	800b97e <_vfiprintf_r+0x1aa>
 800b90c:	9b03      	ldr	r3, [sp, #12]
 800b90e:	1d1a      	adds	r2, r3, #4
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	9203      	str	r2, [sp, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	bfb8      	it	lt
 800b918:	f04f 33ff 	movlt.w	r3, #4294967295
 800b91c:	f108 0802 	add.w	r8, r8, #2
 800b920:	9305      	str	r3, [sp, #20]
 800b922:	4d33      	ldr	r5, [pc, #204]	; (800b9f0 <_vfiprintf_r+0x21c>)
 800b924:	f898 1000 	ldrb.w	r1, [r8]
 800b928:	2203      	movs	r2, #3
 800b92a:	4628      	mov	r0, r5
 800b92c:	f7f4 fc58 	bl	80001e0 <memchr>
 800b930:	b140      	cbz	r0, 800b944 <_vfiprintf_r+0x170>
 800b932:	2340      	movs	r3, #64	; 0x40
 800b934:	1b40      	subs	r0, r0, r5
 800b936:	fa03 f000 	lsl.w	r0, r3, r0
 800b93a:	9b04      	ldr	r3, [sp, #16]
 800b93c:	4303      	orrs	r3, r0
 800b93e:	f108 0801 	add.w	r8, r8, #1
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	f898 1000 	ldrb.w	r1, [r8]
 800b948:	482a      	ldr	r0, [pc, #168]	; (800b9f4 <_vfiprintf_r+0x220>)
 800b94a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b94e:	2206      	movs	r2, #6
 800b950:	f108 0701 	add.w	r7, r8, #1
 800b954:	f7f4 fc44 	bl	80001e0 <memchr>
 800b958:	2800      	cmp	r0, #0
 800b95a:	d037      	beq.n	800b9cc <_vfiprintf_r+0x1f8>
 800b95c:	4b26      	ldr	r3, [pc, #152]	; (800b9f8 <_vfiprintf_r+0x224>)
 800b95e:	bb1b      	cbnz	r3, 800b9a8 <_vfiprintf_r+0x1d4>
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	3307      	adds	r3, #7
 800b964:	f023 0307 	bic.w	r3, r3, #7
 800b968:	3308      	adds	r3, #8
 800b96a:	9303      	str	r3, [sp, #12]
 800b96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b96e:	444b      	add	r3, r9
 800b970:	9309      	str	r3, [sp, #36]	; 0x24
 800b972:	e750      	b.n	800b816 <_vfiprintf_r+0x42>
 800b974:	fb05 3202 	mla	r2, r5, r2, r3
 800b978:	2001      	movs	r0, #1
 800b97a:	4688      	mov	r8, r1
 800b97c:	e78a      	b.n	800b894 <_vfiprintf_r+0xc0>
 800b97e:	2300      	movs	r3, #0
 800b980:	f108 0801 	add.w	r8, r8, #1
 800b984:	9305      	str	r3, [sp, #20]
 800b986:	4619      	mov	r1, r3
 800b988:	250a      	movs	r5, #10
 800b98a:	4640      	mov	r0, r8
 800b98c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b990:	3a30      	subs	r2, #48	; 0x30
 800b992:	2a09      	cmp	r2, #9
 800b994:	d903      	bls.n	800b99e <_vfiprintf_r+0x1ca>
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0c3      	beq.n	800b922 <_vfiprintf_r+0x14e>
 800b99a:	9105      	str	r1, [sp, #20]
 800b99c:	e7c1      	b.n	800b922 <_vfiprintf_r+0x14e>
 800b99e:	fb05 2101 	mla	r1, r5, r1, r2
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	4680      	mov	r8, r0
 800b9a6:	e7f0      	b.n	800b98a <_vfiprintf_r+0x1b6>
 800b9a8:	ab03      	add	r3, sp, #12
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <_vfiprintf_r+0x228>)
 800b9b0:	a904      	add	r1, sp, #16
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7fc f9d6 	bl	8007d64 <_printf_float>
 800b9b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b9bc:	4681      	mov	r9, r0
 800b9be:	d1d5      	bne.n	800b96c <_vfiprintf_r+0x198>
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	065b      	lsls	r3, r3, #25
 800b9c4:	f53f af7e 	bmi.w	800b8c4 <_vfiprintf_r+0xf0>
 800b9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ca:	e77d      	b.n	800b8c8 <_vfiprintf_r+0xf4>
 800b9cc:	ab03      	add	r3, sp, #12
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	4622      	mov	r2, r4
 800b9d2:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <_vfiprintf_r+0x228>)
 800b9d4:	a904      	add	r1, sp, #16
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f7fc fc7a 	bl	80082d0 <_printf_i>
 800b9dc:	e7ec      	b.n	800b9b8 <_vfiprintf_r+0x1e4>
 800b9de:	bf00      	nop
 800b9e0:	0800c140 	.word	0x0800c140
 800b9e4:	0800c28c 	.word	0x0800c28c
 800b9e8:	0800c160 	.word	0x0800c160
 800b9ec:	0800c120 	.word	0x0800c120
 800b9f0:	0800c292 	.word	0x0800c292
 800b9f4:	0800c296 	.word	0x0800c296
 800b9f8:	08007d65 	.word	0x08007d65
 800b9fc:	0800b7af 	.word	0x0800b7af

0800ba00 <_sbrk_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4c06      	ldr	r4, [pc, #24]	; (800ba1c <_sbrk_r+0x1c>)
 800ba04:	2300      	movs	r3, #0
 800ba06:	4605      	mov	r5, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	f7f6 fe7c 	bl	8002708 <_sbrk>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_sbrk_r+0x1a>
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_sbrk_r+0x1a>
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	20000550 	.word	0x20000550

0800ba20 <__sread>:
 800ba20:	b510      	push	{r4, lr}
 800ba22:	460c      	mov	r4, r1
 800ba24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba28:	f000 faa8 	bl	800bf7c <_read_r>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	bfab      	itete	ge
 800ba30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba32:	89a3      	ldrhlt	r3, [r4, #12]
 800ba34:	181b      	addge	r3, r3, r0
 800ba36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba3a:	bfac      	ite	ge
 800ba3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba3e:	81a3      	strhlt	r3, [r4, #12]
 800ba40:	bd10      	pop	{r4, pc}

0800ba42 <__swrite>:
 800ba42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba46:	461f      	mov	r7, r3
 800ba48:	898b      	ldrh	r3, [r1, #12]
 800ba4a:	05db      	lsls	r3, r3, #23
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	460c      	mov	r4, r1
 800ba50:	4616      	mov	r6, r2
 800ba52:	d505      	bpl.n	800ba60 <__swrite+0x1e>
 800ba54:	2302      	movs	r3, #2
 800ba56:	2200      	movs	r2, #0
 800ba58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5c:	f000 f9d6 	bl	800be0c <_lseek_r>
 800ba60:	89a3      	ldrh	r3, [r4, #12]
 800ba62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba6a:	81a3      	strh	r3, [r4, #12]
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	463b      	mov	r3, r7
 800ba70:	4628      	mov	r0, r5
 800ba72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba76:	f000 b889 	b.w	800bb8c <_write_r>

0800ba7a <__sseek>:
 800ba7a:	b510      	push	{r4, lr}
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba82:	f000 f9c3 	bl	800be0c <_lseek_r>
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	bf15      	itete	ne
 800ba8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba96:	81a3      	strheq	r3, [r4, #12]
 800ba98:	bf18      	it	ne
 800ba9a:	81a3      	strhne	r3, [r4, #12]
 800ba9c:	bd10      	pop	{r4, pc}

0800ba9e <__sclose>:
 800ba9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa2:	f000 b8f3 	b.w	800bc8c <_close_r>

0800baa6 <strncmp>:
 800baa6:	b510      	push	{r4, lr}
 800baa8:	b16a      	cbz	r2, 800bac6 <strncmp+0x20>
 800baaa:	3901      	subs	r1, #1
 800baac:	1884      	adds	r4, r0, r2
 800baae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bab2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d103      	bne.n	800bac2 <strncmp+0x1c>
 800baba:	42a0      	cmp	r0, r4
 800babc:	d001      	beq.n	800bac2 <strncmp+0x1c>
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1f5      	bne.n	800baae <strncmp+0x8>
 800bac2:	1a98      	subs	r0, r3, r2
 800bac4:	bd10      	pop	{r4, pc}
 800bac6:	4610      	mov	r0, r2
 800bac8:	e7fc      	b.n	800bac4 <strncmp+0x1e>
	...

0800bacc <__swbuf_r>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	460e      	mov	r6, r1
 800bad0:	4614      	mov	r4, r2
 800bad2:	4605      	mov	r5, r0
 800bad4:	b118      	cbz	r0, 800bade <__swbuf_r+0x12>
 800bad6:	6983      	ldr	r3, [r0, #24]
 800bad8:	b90b      	cbnz	r3, 800bade <__swbuf_r+0x12>
 800bada:	f7fe fc61 	bl	800a3a0 <__sinit>
 800bade:	4b21      	ldr	r3, [pc, #132]	; (800bb64 <__swbuf_r+0x98>)
 800bae0:	429c      	cmp	r4, r3
 800bae2:	d12a      	bne.n	800bb3a <__swbuf_r+0x6e>
 800bae4:	686c      	ldr	r4, [r5, #4]
 800bae6:	69a3      	ldr	r3, [r4, #24]
 800bae8:	60a3      	str	r3, [r4, #8]
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	071a      	lsls	r2, r3, #28
 800baee:	d52e      	bpl.n	800bb4e <__swbuf_r+0x82>
 800baf0:	6923      	ldr	r3, [r4, #16]
 800baf2:	b363      	cbz	r3, 800bb4e <__swbuf_r+0x82>
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	6820      	ldr	r0, [r4, #0]
 800baf8:	1ac0      	subs	r0, r0, r3
 800bafa:	6963      	ldr	r3, [r4, #20]
 800bafc:	b2f6      	uxtb	r6, r6
 800bafe:	4283      	cmp	r3, r0
 800bb00:	4637      	mov	r7, r6
 800bb02:	dc04      	bgt.n	800bb0e <__swbuf_r+0x42>
 800bb04:	4621      	mov	r1, r4
 800bb06:	4628      	mov	r0, r5
 800bb08:	f000 f956 	bl	800bdb8 <_fflush_r>
 800bb0c:	bb28      	cbnz	r0, 800bb5a <__swbuf_r+0x8e>
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	60a3      	str	r3, [r4, #8]
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	1c5a      	adds	r2, r3, #1
 800bb18:	6022      	str	r2, [r4, #0]
 800bb1a:	701e      	strb	r6, [r3, #0]
 800bb1c:	6963      	ldr	r3, [r4, #20]
 800bb1e:	3001      	adds	r0, #1
 800bb20:	4283      	cmp	r3, r0
 800bb22:	d004      	beq.n	800bb2e <__swbuf_r+0x62>
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	07db      	lsls	r3, r3, #31
 800bb28:	d519      	bpl.n	800bb5e <__swbuf_r+0x92>
 800bb2a:	2e0a      	cmp	r6, #10
 800bb2c:	d117      	bne.n	800bb5e <__swbuf_r+0x92>
 800bb2e:	4621      	mov	r1, r4
 800bb30:	4628      	mov	r0, r5
 800bb32:	f000 f941 	bl	800bdb8 <_fflush_r>
 800bb36:	b190      	cbz	r0, 800bb5e <__swbuf_r+0x92>
 800bb38:	e00f      	b.n	800bb5a <__swbuf_r+0x8e>
 800bb3a:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <__swbuf_r+0x9c>)
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	d101      	bne.n	800bb44 <__swbuf_r+0x78>
 800bb40:	68ac      	ldr	r4, [r5, #8]
 800bb42:	e7d0      	b.n	800bae6 <__swbuf_r+0x1a>
 800bb44:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <__swbuf_r+0xa0>)
 800bb46:	429c      	cmp	r4, r3
 800bb48:	bf08      	it	eq
 800bb4a:	68ec      	ldreq	r4, [r5, #12]
 800bb4c:	e7cb      	b.n	800bae6 <__swbuf_r+0x1a>
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4628      	mov	r0, r5
 800bb52:	f000 f82d 	bl	800bbb0 <__swsetup_r>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d0cc      	beq.n	800baf4 <__swbuf_r+0x28>
 800bb5a:	f04f 37ff 	mov.w	r7, #4294967295
 800bb5e:	4638      	mov	r0, r7
 800bb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb62:	bf00      	nop
 800bb64:	0800c140 	.word	0x0800c140
 800bb68:	0800c160 	.word	0x0800c160
 800bb6c:	0800c120 	.word	0x0800c120

0800bb70 <__ascii_wctomb>:
 800bb70:	b149      	cbz	r1, 800bb86 <__ascii_wctomb+0x16>
 800bb72:	2aff      	cmp	r2, #255	; 0xff
 800bb74:	bf85      	ittet	hi
 800bb76:	238a      	movhi	r3, #138	; 0x8a
 800bb78:	6003      	strhi	r3, [r0, #0]
 800bb7a:	700a      	strbls	r2, [r1, #0]
 800bb7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb80:	bf98      	it	ls
 800bb82:	2001      	movls	r0, #1
 800bb84:	4770      	bx	lr
 800bb86:	4608      	mov	r0, r1
 800bb88:	4770      	bx	lr
	...

0800bb8c <_write_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4c07      	ldr	r4, [pc, #28]	; (800bbac <_write_r+0x20>)
 800bb90:	4605      	mov	r5, r0
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	6022      	str	r2, [r4, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f7f5 fe38 	bl	8001810 <_write>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_write_r+0x1e>
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_write_r+0x1e>
 800bba8:	602b      	str	r3, [r5, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	20000550 	.word	0x20000550

0800bbb0 <__swsetup_r>:
 800bbb0:	4b32      	ldr	r3, [pc, #200]	; (800bc7c <__swsetup_r+0xcc>)
 800bbb2:	b570      	push	{r4, r5, r6, lr}
 800bbb4:	681d      	ldr	r5, [r3, #0]
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460c      	mov	r4, r1
 800bbba:	b125      	cbz	r5, 800bbc6 <__swsetup_r+0x16>
 800bbbc:	69ab      	ldr	r3, [r5, #24]
 800bbbe:	b913      	cbnz	r3, 800bbc6 <__swsetup_r+0x16>
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f7fe fbed 	bl	800a3a0 <__sinit>
 800bbc6:	4b2e      	ldr	r3, [pc, #184]	; (800bc80 <__swsetup_r+0xd0>)
 800bbc8:	429c      	cmp	r4, r3
 800bbca:	d10f      	bne.n	800bbec <__swsetup_r+0x3c>
 800bbcc:	686c      	ldr	r4, [r5, #4]
 800bbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	0715      	lsls	r5, r2, #28
 800bbd6:	d42c      	bmi.n	800bc32 <__swsetup_r+0x82>
 800bbd8:	06d0      	lsls	r0, r2, #27
 800bbda:	d411      	bmi.n	800bc00 <__swsetup_r+0x50>
 800bbdc:	2209      	movs	r2, #9
 800bbde:	6032      	str	r2, [r6, #0]
 800bbe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbea:	e03e      	b.n	800bc6a <__swsetup_r+0xba>
 800bbec:	4b25      	ldr	r3, [pc, #148]	; (800bc84 <__swsetup_r+0xd4>)
 800bbee:	429c      	cmp	r4, r3
 800bbf0:	d101      	bne.n	800bbf6 <__swsetup_r+0x46>
 800bbf2:	68ac      	ldr	r4, [r5, #8]
 800bbf4:	e7eb      	b.n	800bbce <__swsetup_r+0x1e>
 800bbf6:	4b24      	ldr	r3, [pc, #144]	; (800bc88 <__swsetup_r+0xd8>)
 800bbf8:	429c      	cmp	r4, r3
 800bbfa:	bf08      	it	eq
 800bbfc:	68ec      	ldreq	r4, [r5, #12]
 800bbfe:	e7e6      	b.n	800bbce <__swsetup_r+0x1e>
 800bc00:	0751      	lsls	r1, r2, #29
 800bc02:	d512      	bpl.n	800bc2a <__swsetup_r+0x7a>
 800bc04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc06:	b141      	cbz	r1, 800bc1a <__swsetup_r+0x6a>
 800bc08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc0c:	4299      	cmp	r1, r3
 800bc0e:	d002      	beq.n	800bc16 <__swsetup_r+0x66>
 800bc10:	4630      	mov	r0, r6
 800bc12:	f7ff fbbb 	bl	800b38c <_free_r>
 800bc16:	2300      	movs	r3, #0
 800bc18:	6363      	str	r3, [r4, #52]	; 0x34
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	2300      	movs	r3, #0
 800bc24:	6063      	str	r3, [r4, #4]
 800bc26:	6923      	ldr	r3, [r4, #16]
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	f043 0308 	orr.w	r3, r3, #8
 800bc30:	81a3      	strh	r3, [r4, #12]
 800bc32:	6923      	ldr	r3, [r4, #16]
 800bc34:	b94b      	cbnz	r3, 800bc4a <__swsetup_r+0x9a>
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc40:	d003      	beq.n	800bc4a <__swsetup_r+0x9a>
 800bc42:	4621      	mov	r1, r4
 800bc44:	4630      	mov	r0, r6
 800bc46:	f000 f917 	bl	800be78 <__smakebuf_r>
 800bc4a:	89a2      	ldrh	r2, [r4, #12]
 800bc4c:	f012 0301 	ands.w	r3, r2, #1
 800bc50:	d00c      	beq.n	800bc6c <__swsetup_r+0xbc>
 800bc52:	2300      	movs	r3, #0
 800bc54:	60a3      	str	r3, [r4, #8]
 800bc56:	6963      	ldr	r3, [r4, #20]
 800bc58:	425b      	negs	r3, r3
 800bc5a:	61a3      	str	r3, [r4, #24]
 800bc5c:	6923      	ldr	r3, [r4, #16]
 800bc5e:	b953      	cbnz	r3, 800bc76 <__swsetup_r+0xc6>
 800bc60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc64:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bc68:	d1ba      	bne.n	800bbe0 <__swsetup_r+0x30>
 800bc6a:	bd70      	pop	{r4, r5, r6, pc}
 800bc6c:	0792      	lsls	r2, r2, #30
 800bc6e:	bf58      	it	pl
 800bc70:	6963      	ldrpl	r3, [r4, #20]
 800bc72:	60a3      	str	r3, [r4, #8]
 800bc74:	e7f2      	b.n	800bc5c <__swsetup_r+0xac>
 800bc76:	2000      	movs	r0, #0
 800bc78:	e7f7      	b.n	800bc6a <__swsetup_r+0xba>
 800bc7a:	bf00      	nop
 800bc7c:	2000000c 	.word	0x2000000c
 800bc80:	0800c140 	.word	0x0800c140
 800bc84:	0800c160 	.word	0x0800c160
 800bc88:	0800c120 	.word	0x0800c120

0800bc8c <_close_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4c06      	ldr	r4, [pc, #24]	; (800bca8 <_close_r+0x1c>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4605      	mov	r5, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	6023      	str	r3, [r4, #0]
 800bc98:	f7f6 fd01 	bl	800269e <_close>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_close_r+0x1a>
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_close_r+0x1a>
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	20000550 	.word	0x20000550

0800bcac <__sflush_r>:
 800bcac:	898a      	ldrh	r2, [r1, #12]
 800bcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	0710      	lsls	r0, r2, #28
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	d458      	bmi.n	800bd6c <__sflush_r+0xc0>
 800bcba:	684b      	ldr	r3, [r1, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dc05      	bgt.n	800bccc <__sflush_r+0x20>
 800bcc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dc02      	bgt.n	800bccc <__sflush_r+0x20>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcce:	2e00      	cmp	r6, #0
 800bcd0:	d0f9      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcd8:	682f      	ldr	r7, [r5, #0]
 800bcda:	6a21      	ldr	r1, [r4, #32]
 800bcdc:	602b      	str	r3, [r5, #0]
 800bcde:	d032      	beq.n	800bd46 <__sflush_r+0x9a>
 800bce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	075a      	lsls	r2, r3, #29
 800bce6:	d505      	bpl.n	800bcf4 <__sflush_r+0x48>
 800bce8:	6863      	ldr	r3, [r4, #4]
 800bcea:	1ac0      	subs	r0, r0, r3
 800bcec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcee:	b10b      	cbz	r3, 800bcf4 <__sflush_r+0x48>
 800bcf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcf2:	1ac0      	subs	r0, r0, r3
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcfa:	6a21      	ldr	r1, [r4, #32]
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b0      	blx	r6
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	d106      	bne.n	800bd14 <__sflush_r+0x68>
 800bd06:	6829      	ldr	r1, [r5, #0]
 800bd08:	291d      	cmp	r1, #29
 800bd0a:	d848      	bhi.n	800bd9e <__sflush_r+0xf2>
 800bd0c:	4a29      	ldr	r2, [pc, #164]	; (800bdb4 <__sflush_r+0x108>)
 800bd0e:	40ca      	lsrs	r2, r1
 800bd10:	07d6      	lsls	r6, r2, #31
 800bd12:	d544      	bpl.n	800bd9e <__sflush_r+0xf2>
 800bd14:	2200      	movs	r2, #0
 800bd16:	6062      	str	r2, [r4, #4]
 800bd18:	04d9      	lsls	r1, r3, #19
 800bd1a:	6922      	ldr	r2, [r4, #16]
 800bd1c:	6022      	str	r2, [r4, #0]
 800bd1e:	d504      	bpl.n	800bd2a <__sflush_r+0x7e>
 800bd20:	1c42      	adds	r2, r0, #1
 800bd22:	d101      	bne.n	800bd28 <__sflush_r+0x7c>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b903      	cbnz	r3, 800bd2a <__sflush_r+0x7e>
 800bd28:	6560      	str	r0, [r4, #84]	; 0x54
 800bd2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd2c:	602f      	str	r7, [r5, #0]
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	d0c9      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bd32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd36:	4299      	cmp	r1, r3
 800bd38:	d002      	beq.n	800bd40 <__sflush_r+0x94>
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f7ff fb26 	bl	800b38c <_free_r>
 800bd40:	2000      	movs	r0, #0
 800bd42:	6360      	str	r0, [r4, #52]	; 0x34
 800bd44:	e7c0      	b.n	800bcc8 <__sflush_r+0x1c>
 800bd46:	2301      	movs	r3, #1
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b0      	blx	r6
 800bd4c:	1c41      	adds	r1, r0, #1
 800bd4e:	d1c8      	bne.n	800bce2 <__sflush_r+0x36>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0c5      	beq.n	800bce2 <__sflush_r+0x36>
 800bd56:	2b1d      	cmp	r3, #29
 800bd58:	d001      	beq.n	800bd5e <__sflush_r+0xb2>
 800bd5a:	2b16      	cmp	r3, #22
 800bd5c:	d101      	bne.n	800bd62 <__sflush_r+0xb6>
 800bd5e:	602f      	str	r7, [r5, #0]
 800bd60:	e7b1      	b.n	800bcc6 <__sflush_r+0x1a>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd68:	81a3      	strh	r3, [r4, #12]
 800bd6a:	e7ad      	b.n	800bcc8 <__sflush_r+0x1c>
 800bd6c:	690f      	ldr	r7, [r1, #16]
 800bd6e:	2f00      	cmp	r7, #0
 800bd70:	d0a9      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bd72:	0793      	lsls	r3, r2, #30
 800bd74:	680e      	ldr	r6, [r1, #0]
 800bd76:	bf08      	it	eq
 800bd78:	694b      	ldreq	r3, [r1, #20]
 800bd7a:	600f      	str	r7, [r1, #0]
 800bd7c:	bf18      	it	ne
 800bd7e:	2300      	movne	r3, #0
 800bd80:	eba6 0807 	sub.w	r8, r6, r7
 800bd84:	608b      	str	r3, [r1, #8]
 800bd86:	f1b8 0f00 	cmp.w	r8, #0
 800bd8a:	dd9c      	ble.n	800bcc6 <__sflush_r+0x1a>
 800bd8c:	4643      	mov	r3, r8
 800bd8e:	463a      	mov	r2, r7
 800bd90:	6a21      	ldr	r1, [r4, #32]
 800bd92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b0      	blx	r6
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dc06      	bgt.n	800bdaa <__sflush_r+0xfe>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda2:	81a3      	strh	r3, [r4, #12]
 800bda4:	f04f 30ff 	mov.w	r0, #4294967295
 800bda8:	e78e      	b.n	800bcc8 <__sflush_r+0x1c>
 800bdaa:	4407      	add	r7, r0
 800bdac:	eba8 0800 	sub.w	r8, r8, r0
 800bdb0:	e7e9      	b.n	800bd86 <__sflush_r+0xda>
 800bdb2:	bf00      	nop
 800bdb4:	20400001 	.word	0x20400001

0800bdb8 <_fflush_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	690b      	ldr	r3, [r1, #16]
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	b1db      	cbz	r3, 800bdfa <_fflush_r+0x42>
 800bdc2:	b118      	cbz	r0, 800bdcc <_fflush_r+0x14>
 800bdc4:	6983      	ldr	r3, [r0, #24]
 800bdc6:	b90b      	cbnz	r3, 800bdcc <_fflush_r+0x14>
 800bdc8:	f7fe faea 	bl	800a3a0 <__sinit>
 800bdcc:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <_fflush_r+0x48>)
 800bdce:	429c      	cmp	r4, r3
 800bdd0:	d109      	bne.n	800bde6 <_fflush_r+0x2e>
 800bdd2:	686c      	ldr	r4, [r5, #4]
 800bdd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd8:	b17b      	cbz	r3, 800bdfa <_fflush_r+0x42>
 800bdda:	4621      	mov	r1, r4
 800bddc:	4628      	mov	r0, r5
 800bdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bde2:	f7ff bf63 	b.w	800bcac <__sflush_r>
 800bde6:	4b07      	ldr	r3, [pc, #28]	; (800be04 <_fflush_r+0x4c>)
 800bde8:	429c      	cmp	r4, r3
 800bdea:	d101      	bne.n	800bdf0 <_fflush_r+0x38>
 800bdec:	68ac      	ldr	r4, [r5, #8]
 800bdee:	e7f1      	b.n	800bdd4 <_fflush_r+0x1c>
 800bdf0:	4b05      	ldr	r3, [pc, #20]	; (800be08 <_fflush_r+0x50>)
 800bdf2:	429c      	cmp	r4, r3
 800bdf4:	bf08      	it	eq
 800bdf6:	68ec      	ldreq	r4, [r5, #12]
 800bdf8:	e7ec      	b.n	800bdd4 <_fflush_r+0x1c>
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	bd38      	pop	{r3, r4, r5, pc}
 800bdfe:	bf00      	nop
 800be00:	0800c140 	.word	0x0800c140
 800be04:	0800c160 	.word	0x0800c160
 800be08:	0800c120 	.word	0x0800c120

0800be0c <_lseek_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4c07      	ldr	r4, [pc, #28]	; (800be2c <_lseek_r+0x20>)
 800be10:	4605      	mov	r5, r0
 800be12:	4608      	mov	r0, r1
 800be14:	4611      	mov	r1, r2
 800be16:	2200      	movs	r2, #0
 800be18:	6022      	str	r2, [r4, #0]
 800be1a:	461a      	mov	r2, r3
 800be1c:	f7f6 fc66 	bl	80026ec <_lseek>
 800be20:	1c43      	adds	r3, r0, #1
 800be22:	d102      	bne.n	800be2a <_lseek_r+0x1e>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	b103      	cbz	r3, 800be2a <_lseek_r+0x1e>
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	bd38      	pop	{r3, r4, r5, pc}
 800be2c:	20000550 	.word	0x20000550

0800be30 <__swhatbuf_r>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	460e      	mov	r6, r1
 800be34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be38:	2900      	cmp	r1, #0
 800be3a:	b096      	sub	sp, #88	; 0x58
 800be3c:	4614      	mov	r4, r2
 800be3e:	461d      	mov	r5, r3
 800be40:	da07      	bge.n	800be52 <__swhatbuf_r+0x22>
 800be42:	2300      	movs	r3, #0
 800be44:	602b      	str	r3, [r5, #0]
 800be46:	89b3      	ldrh	r3, [r6, #12]
 800be48:	061a      	lsls	r2, r3, #24
 800be4a:	d410      	bmi.n	800be6e <__swhatbuf_r+0x3e>
 800be4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be50:	e00e      	b.n	800be70 <__swhatbuf_r+0x40>
 800be52:	466a      	mov	r2, sp
 800be54:	f000 f8a4 	bl	800bfa0 <_fstat_r>
 800be58:	2800      	cmp	r0, #0
 800be5a:	dbf2      	blt.n	800be42 <__swhatbuf_r+0x12>
 800be5c:	9a01      	ldr	r2, [sp, #4]
 800be5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be66:	425a      	negs	r2, r3
 800be68:	415a      	adcs	r2, r3
 800be6a:	602a      	str	r2, [r5, #0]
 800be6c:	e7ee      	b.n	800be4c <__swhatbuf_r+0x1c>
 800be6e:	2340      	movs	r3, #64	; 0x40
 800be70:	2000      	movs	r0, #0
 800be72:	6023      	str	r3, [r4, #0]
 800be74:	b016      	add	sp, #88	; 0x58
 800be76:	bd70      	pop	{r4, r5, r6, pc}

0800be78 <__smakebuf_r>:
 800be78:	898b      	ldrh	r3, [r1, #12]
 800be7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be7c:	079d      	lsls	r5, r3, #30
 800be7e:	4606      	mov	r6, r0
 800be80:	460c      	mov	r4, r1
 800be82:	d507      	bpl.n	800be94 <__smakebuf_r+0x1c>
 800be84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	6123      	str	r3, [r4, #16]
 800be8c:	2301      	movs	r3, #1
 800be8e:	6163      	str	r3, [r4, #20]
 800be90:	b002      	add	sp, #8
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	ab01      	add	r3, sp, #4
 800be96:	466a      	mov	r2, sp
 800be98:	f7ff ffca 	bl	800be30 <__swhatbuf_r>
 800be9c:	9900      	ldr	r1, [sp, #0]
 800be9e:	4605      	mov	r5, r0
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7ff fac1 	bl	800b428 <_malloc_r>
 800bea6:	b948      	cbnz	r0, 800bebc <__smakebuf_r+0x44>
 800bea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beac:	059a      	lsls	r2, r3, #22
 800beae:	d4ef      	bmi.n	800be90 <__smakebuf_r+0x18>
 800beb0:	f023 0303 	bic.w	r3, r3, #3
 800beb4:	f043 0302 	orr.w	r3, r3, #2
 800beb8:	81a3      	strh	r3, [r4, #12]
 800beba:	e7e3      	b.n	800be84 <__smakebuf_r+0xc>
 800bebc:	4b0d      	ldr	r3, [pc, #52]	; (800bef4 <__smakebuf_r+0x7c>)
 800bebe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bec0:	89a3      	ldrh	r3, [r4, #12]
 800bec2:	6020      	str	r0, [r4, #0]
 800bec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec8:	81a3      	strh	r3, [r4, #12]
 800beca:	9b00      	ldr	r3, [sp, #0]
 800becc:	6163      	str	r3, [r4, #20]
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	6120      	str	r0, [r4, #16]
 800bed2:	b15b      	cbz	r3, 800beec <__smakebuf_r+0x74>
 800bed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bed8:	4630      	mov	r0, r6
 800beda:	f000 f873 	bl	800bfc4 <_isatty_r>
 800bede:	b128      	cbz	r0, 800beec <__smakebuf_r+0x74>
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	f023 0303 	bic.w	r3, r3, #3
 800bee6:	f043 0301 	orr.w	r3, r3, #1
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	431d      	orrs	r5, r3
 800bef0:	81a5      	strh	r5, [r4, #12]
 800bef2:	e7cd      	b.n	800be90 <__smakebuf_r+0x18>
 800bef4:	0800a369 	.word	0x0800a369

0800bef8 <memmove>:
 800bef8:	4288      	cmp	r0, r1
 800befa:	b510      	push	{r4, lr}
 800befc:	eb01 0302 	add.w	r3, r1, r2
 800bf00:	d807      	bhi.n	800bf12 <memmove+0x1a>
 800bf02:	1e42      	subs	r2, r0, #1
 800bf04:	4299      	cmp	r1, r3
 800bf06:	d00a      	beq.n	800bf1e <memmove+0x26>
 800bf08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf0c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bf10:	e7f8      	b.n	800bf04 <memmove+0xc>
 800bf12:	4283      	cmp	r3, r0
 800bf14:	d9f5      	bls.n	800bf02 <memmove+0xa>
 800bf16:	1881      	adds	r1, r0, r2
 800bf18:	1ad2      	subs	r2, r2, r3
 800bf1a:	42d3      	cmn	r3, r2
 800bf1c:	d100      	bne.n	800bf20 <memmove+0x28>
 800bf1e:	bd10      	pop	{r4, pc}
 800bf20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf24:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bf28:	e7f7      	b.n	800bf1a <memmove+0x22>

0800bf2a <__malloc_lock>:
 800bf2a:	4770      	bx	lr

0800bf2c <__malloc_unlock>:
 800bf2c:	4770      	bx	lr

0800bf2e <_realloc_r>:
 800bf2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf30:	4607      	mov	r7, r0
 800bf32:	4614      	mov	r4, r2
 800bf34:	460e      	mov	r6, r1
 800bf36:	b921      	cbnz	r1, 800bf42 <_realloc_r+0x14>
 800bf38:	4611      	mov	r1, r2
 800bf3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf3e:	f7ff ba73 	b.w	800b428 <_malloc_r>
 800bf42:	b922      	cbnz	r2, 800bf4e <_realloc_r+0x20>
 800bf44:	f7ff fa22 	bl	800b38c <_free_r>
 800bf48:	4625      	mov	r5, r4
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf4e:	f000 f849 	bl	800bfe4 <_malloc_usable_size_r>
 800bf52:	42a0      	cmp	r0, r4
 800bf54:	d20f      	bcs.n	800bf76 <_realloc_r+0x48>
 800bf56:	4621      	mov	r1, r4
 800bf58:	4638      	mov	r0, r7
 800bf5a:	f7ff fa65 	bl	800b428 <_malloc_r>
 800bf5e:	4605      	mov	r5, r0
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d0f2      	beq.n	800bf4a <_realloc_r+0x1c>
 800bf64:	4631      	mov	r1, r6
 800bf66:	4622      	mov	r2, r4
 800bf68:	f7fe fdf8 	bl	800ab5c <memcpy>
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	4638      	mov	r0, r7
 800bf70:	f7ff fa0c 	bl	800b38c <_free_r>
 800bf74:	e7e9      	b.n	800bf4a <_realloc_r+0x1c>
 800bf76:	4635      	mov	r5, r6
 800bf78:	e7e7      	b.n	800bf4a <_realloc_r+0x1c>
	...

0800bf7c <_read_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4c07      	ldr	r4, [pc, #28]	; (800bf9c <_read_r+0x20>)
 800bf80:	4605      	mov	r5, r0
 800bf82:	4608      	mov	r0, r1
 800bf84:	4611      	mov	r1, r2
 800bf86:	2200      	movs	r2, #0
 800bf88:	6022      	str	r2, [r4, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	f7f6 fb6a 	bl	8002664 <_read>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_read_r+0x1e>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_read_r+0x1e>
 800bf98:	602b      	str	r3, [r5, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	20000550 	.word	0x20000550

0800bfa0 <_fstat_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	4c07      	ldr	r4, [pc, #28]	; (800bfc0 <_fstat_r+0x20>)
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	4611      	mov	r1, r2
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	f7f6 fb82 	bl	80026b6 <_fstat>
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	d102      	bne.n	800bfbc <_fstat_r+0x1c>
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	b103      	cbz	r3, 800bfbc <_fstat_r+0x1c>
 800bfba:	602b      	str	r3, [r5, #0]
 800bfbc:	bd38      	pop	{r3, r4, r5, pc}
 800bfbe:	bf00      	nop
 800bfc0:	20000550 	.word	0x20000550

0800bfc4 <_isatty_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4c06      	ldr	r4, [pc, #24]	; (800bfe0 <_isatty_r+0x1c>)
 800bfc8:	2300      	movs	r3, #0
 800bfca:	4605      	mov	r5, r0
 800bfcc:	4608      	mov	r0, r1
 800bfce:	6023      	str	r3, [r4, #0]
 800bfd0:	f7f6 fb81 	bl	80026d6 <_isatty>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d102      	bne.n	800bfde <_isatty_r+0x1a>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	b103      	cbz	r3, 800bfde <_isatty_r+0x1a>
 800bfdc:	602b      	str	r3, [r5, #0]
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	20000550 	.word	0x20000550

0800bfe4 <_malloc_usable_size_r>:
 800bfe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe8:	1f18      	subs	r0, r3, #4
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	bfbc      	itt	lt
 800bfee:	580b      	ldrlt	r3, [r1, r0]
 800bff0:	18c0      	addlt	r0, r0, r3
 800bff2:	4770      	bx	lr

0800bff4 <_init>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	bf00      	nop
 800bff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffa:	bc08      	pop	{r3}
 800bffc:	469e      	mov	lr, r3
 800bffe:	4770      	bx	lr

0800c000 <_fini>:
 800c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c002:	bf00      	nop
 800c004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c006:	bc08      	pop	{r3}
 800c008:	469e      	mov	lr, r3
 800c00a:	4770      	bx	lr
