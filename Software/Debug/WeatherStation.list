
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800b5f8  0800b5f8  0001b5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bae4  0800bae4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baec  0800baec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baec  0800baec  0001baec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800baf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200001e0  0800bcd4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800bcd4  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b65  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b78  00000000  00000000  00035d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  000388f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001480  00000000  00000000  00039eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a298  00000000  00000000  0003b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f86  00000000  00000000  000655d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a866  00000000  00000000  0007c556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186dbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007378  00000000  00000000  00186e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5e0 	.word	0x0800b5e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b5e0 	.word	0x0800b5e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_write>:

#define DHT_PORT GPIOC
#define DHT_PIN GPIO_PIN_9


int _write ( int file , char *ptr , int len ) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2 , (uint8_t*)ptr , len , 50) ;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	b29a      	uxth	r2, r3
 8001008:	2332      	movs	r3, #50	; 0x32
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <_write+0x24>)
 800100e:	f004 ffe1 	bl	8005fd4 <HAL_UART_Transmit>
	return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200003dc 	.word	0x200003dc

08001020 <delay_us>:

void delay_us (uint16_t us)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <delay_us+0x30>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8001032:	bf00      	nop
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <delay_us+0x30>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3f9      	bcc.n	8001034 <delay_us+0x14>
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000310 	.word	0x20000310

08001054 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f002 fcac 	bl	80039e0 <HAL_GPIO_Init>
}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f002 fc8e 	bl	80039e0 <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <DHT11_Start>:


void DHT11_Start (void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <DHT11_Start+0x30>)
 80010d6:	f7ff ffbd 	bl	8001054 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <DHT11_Start+0x30>)
 80010e2:	f002 fe3f 	bl	8003d64 <HAL_GPIO_WritePin>
	 delay_us(18000);  // wait for 18ms
 80010e6:	f244 6050 	movw	r0, #18000	; 0x4650
 80010ea:	f7ff ff99 	bl	8001020 <delay_us>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <DHT11_Start+0x30>)
 80010f4:	f7ff ffcc 	bl	8001090 <Set_Pin_Input>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	48000800 	.word	0x48000800

08001100 <Check_Response>:

uint8_t Check_Response (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
	 delay_us(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f7ff ff88 	bl	8001020 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <Check_Response+0x5c>)
 8001116:	f002 fe0d 	bl	8003d34 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <Check_Response+0x40>
	{
		 delay_us(80);
 8001120:	2050      	movs	r0, #80	; 0x50
 8001122:	f7ff ff7d 	bl	8001020 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <Check_Response+0x5c>)
 800112c:	f002 fe02 	bl	8003d34 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <Check_Response+0x3c>
 8001136:	2301      	movs	r3, #1
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e001      	b.n	8001140 <Check_Response+0x40>
		else Response = -1;
 800113c:	23ff      	movs	r3, #255	; 0xff
 800113e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001140:	bf00      	nop
 8001142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <Check_Response+0x5c>)
 8001148:	f002 fdf4 	bl	8003d34 <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f7      	bne.n	8001142 <Check_Response+0x42>

	return Response;
 8001152:	79fb      	ldrb	r3, [r7, #7]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	48000800 	.word	0x48000800

08001160 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001166:	2300      	movs	r3, #0
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	e03a      	b.n	80011e2 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 800116c:	bf00      	nop
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	4820      	ldr	r0, [pc, #128]	; (80011f4 <DHT11_Read+0x94>)
 8001174:	f002 fdde 	bl	8003d34 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f7      	beq.n	800116e <DHT11_Read+0xe>
		 delay_us(40);   // wait for 40 us
 800117e:	2028      	movs	r0, #40	; 0x28
 8001180:	f7ff ff4e 	bl	8001020 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <DHT11_Read+0x94>)
 800118a:	f002 fdd3 	bl	8003d34 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10e      	bne.n	80011b2 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	4013      	ands	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	e00b      	b.n	80011ca <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	f1c3 0307 	rsb	r3, r3, #7
 80011b8:	2201      	movs	r2, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	b25a      	sxtb	r2, r3
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80011ca:	bf00      	nop
 80011cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <DHT11_Read+0x94>)
 80011d2:	f002 fdaf 	bl	8003d34 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f7      	bne.n	80011cc <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	3301      	adds	r3, #1
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d9c1      	bls.n	800116c <DHT11_Read+0xc>
	}
	return i;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	48000800 	.word	0x48000800

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
int main(void)
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 feb2 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f892 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 faf4 	bl	80017f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001210:	f000 fa9c 	bl	800174c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001214:	f000 f916 	bl	8001444 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001218:	f000 f98c 	bl	8001534 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800121c:	f000 fa66 	bl	80016ec <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001220:	f000 fac4 	bl	80017ac <MX_DMA_Init>
  MX_TIM3_Init();
 8001224:	f000 fa14 	bl	8001650 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001228:	f000 f9c2 	bl	80015b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800122c:	217f      	movs	r1, #127	; 0x7f
 800122e:	4831      	ldr	r0, [pc, #196]	; (80012f4 <main+0xfc>)
 8001230:	f002 f80f 	bl	8003252 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001234:	482f      	ldr	r0, [pc, #188]	; (80012f4 <main+0xfc>)
 8001236:	f001 fa51 	bl	80026dc <HAL_ADC_Start>

  HAL_TIM_Base_Start(&htim3);
 800123a:	482f      	ldr	r0, [pc, #188]	; (80012f8 <main+0x100>)
 800123c:	f004 f9b2 	bl	80055a4 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8001240:	482e      	ldr	r0, [pc, #184]	; (80012fc <main+0x104>)
 8001242:	f004 fa17 	bl	8005674 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001246:	482b      	ldr	r0, [pc, #172]	; (80012f4 <main+0xfc>)
 8001248:	f001 fb02 	bl	8002850 <HAL_ADC_GetValue>
 800124c:	4603      	mov	r3, r0
 800124e:	607b      	str	r3, [r7, #4]
	  float temp = adc_value * 330.0f / 4096.0f;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001300 <main+0x108>
 800125e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001262:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001304 <main+0x10c>
 8001266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126a:	edc7 7a02 	vstr	s15, [r7, #8]




	  DHT11_Start();
 800126e:	f7ff ff2d 	bl	80010cc <DHT11_Start>
	  Presence=Check_Response();
 8001272:	f7ff ff45 	bl	8001100 <Check_Response>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <main+0x110>)
 800127c:	701a      	strb	r2, [r3, #0]
	  RH_byte1=DHT11_Read();
 800127e:	f7ff ff6f 	bl	8001160 <DHT11_Read>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <main+0x114>)
 8001288:	701a      	strb	r2, [r3, #0]
	  RH_byte2=DHT11_Read();
 800128a:	f7ff ff69 	bl	8001160 <DHT11_Read>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <main+0x118>)
 8001294:	701a      	strb	r2, [r3, #0]
	  Temp_byte1=DHT11_Read();
 8001296:	f7ff ff63 	bl	8001160 <DHT11_Read>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <main+0x11c>)
 80012a0:	701a      	strb	r2, [r3, #0]
	  Temp_byte2=DHT11_Read();
 80012a2:	f7ff ff5d 	bl	8001160 <DHT11_Read>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <main+0x120>)
 80012ac:	701a      	strb	r2, [r3, #0]
	  SUM=DHT11_Read();
 80012ae:	f7ff ff57 	bl	8001160 <DHT11_Read>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <main+0x124>)
 80012b8:	801a      	strh	r2, [r3, #0]

	  Te=Temp_byte1;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <main+0x11c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <main+0x128>)
 80012c2:	801a      	strh	r2, [r3, #0]
	  RH=RH_byte1;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <main+0x114>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <main+0x12c>)
 80012cc:	801a      	strh	r2, [r3, #0]
	  Temperature= (float) Te;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <main+0x128>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <main+0x130>)
 80012dc:	edc3 7a00 	vstr	s15, [r3]
	  Humidity=(float) RH;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <main+0x12c>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <main+0x134>)
 80012ee:	edc3 7a00 	vstr	s15, [r3]
  {
 80012f2:	e7a8      	b.n	8001246 <main+0x4e>
 80012f4:	200001fc 	.word	0x200001fc
 80012f8:	20000310 	.word	0x20000310
 80012fc:	200002c4 	.word	0x200002c4
 8001300:	43a50000 	.word	0x43a50000
 8001304:	45800000 	.word	0x45800000
 8001308:	20000500 	.word	0x20000500
 800130c:	200004ec 	.word	0x200004ec
 8001310:	200004ed 	.word	0x200004ed
 8001314:	200004ee 	.word	0x200004ee
 8001318:	200004ef 	.word	0x200004ef
 800131c:	200004f0 	.word	0x200004f0
 8001320:	200004f4 	.word	0x200004f4
 8001324:	200004f2 	.word	0x200004f2
 8001328:	200004f8 	.word	0x200004f8
 800132c:	200004fc 	.word	0x200004fc

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0b8      	sub	sp, #224	; 0xe0
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800133a:	2244      	movs	r2, #68	; 0x44
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f005 fcd6 	bl	8006cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2288      	movs	r2, #136	; 0x88
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fcc8 	bl	8006cf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136e:	2310      	movs	r3, #16
 8001370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001386:	230a      	movs	r3, #10
 8001388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800138c:	2307      	movs	r3, #7
 800138e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fd5a 	bl	8003e5c <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013ae:	f000 fa9f 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2303      	movs	r3, #3
 80013ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013d4:	2104      	movs	r1, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 f928 	bl	800462c <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013e2:	f000 fa85 	bl	80018f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80013e6:	f244 0303 	movw	r3, #16387	; 0x4003
 80013ea:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013ec:	2300      	movs	r3, #0
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013f8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80013fa:	2302      	movs	r3, #2
 80013fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001402:	2308      	movs	r3, #8
 8001404:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001406:	2307      	movs	r3, #7
 8001408:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800140a:	2302      	movs	r3, #2
 800140c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001416:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fb0c 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001426:	f000 fa63 	bl	80018f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800142a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800142e:	f002 fcbf 	bl	8003db0 <HAL_PWREx_ControlVoltageScaling>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001438:	f000 fa5a 	bl	80018f0 <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	37e0      	adds	r7, #224	; 0xe0
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <MX_ADC1_Init+0xe4>)
 8001468:	4a30      	ldr	r2, [pc, #192]	; (800152c <MX_ADC1_Init+0xe8>)
 800146a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <MX_ADC1_Init+0xe4>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_ADC1_Init+0xe4>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_ADC1_Init+0xe4>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MX_ADC1_Init+0xe4>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_ADC1_Init+0xe4>)
 8001486:	2204      	movs	r2, #4
 8001488:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <MX_ADC1_Init+0xe4>)
 800148c:	2200      	movs	r2, #0
 800148e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_ADC1_Init+0xe4>)
 8001492:	2201      	movs	r2, #1
 8001494:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_ADC1_Init+0xe4>)
 8001498:	2201      	movs	r2, #1
 800149a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_ADC1_Init+0xe4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_ADC1_Init+0xe4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_ADC1_Init+0xe4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_ADC1_Init+0xe4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_ADC1_Init+0xe4>)
 80014ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_ADC1_Init+0xe4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c8:	4817      	ldr	r0, [pc, #92]	; (8001528 <MX_ADC1_Init+0xe4>)
 80014ca:	f000 ffb3 	bl	8002434 <HAL_ADC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80014d4:	f000 fa0c 	bl	80018f0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_ADC1_Init+0xe4>)
 80014e4:	f001 ff16 	bl	8003314 <HAL_ADCEx_MultiModeConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80014ee:	f000 f9ff 	bl	80018f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_ADC1_Init+0xec>)
 80014f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f6:	2306      	movs	r3, #6
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014fa:	2307      	movs	r3, #7
 80014fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014fe:	237f      	movs	r3, #127	; 0x7f
 8001500:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001502:	2304      	movs	r3, #4
 8001504:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_ADC1_Init+0xe4>)
 8001510:	f001 f9ac 	bl	800286c <HAL_ADC_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800151a:	f000 f9e9 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200001fc 	.word	0x200001fc
 800152c:	50040000 	.word	0x50040000
 8001530:	04300002 	.word	0x04300002

08001534 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_SPI2_Init+0x74>)
 800153a:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <MX_SPI2_Init+0x78>)
 800153c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001544:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_SPI2_Init+0x74>)
 800154e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001552:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_SPI2_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001566:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_SPI2_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_SPI2_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001582:	2207      	movs	r2, #7
 8001584:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_SPI2_Init+0x74>)
 800158e:	2208      	movs	r2, #8
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_SPI2_Init+0x74>)
 8001594:	f003 ff0c 	bl	80053b0 <HAL_SPI_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800159e:	f000 f9a7 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000260 	.word	0x20000260
 80015ac:	40003800 	.word	0x40003800

080015b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_TIM2_Init+0x98>)
 80015d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_TIM2_Init+0x98>)
 80015d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_TIM2_Init+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 730959;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_TIM2_Init+0x98>)
 80015e6:	4a19      	ldr	r2, [pc, #100]	; (800164c <MX_TIM2_Init+0x9c>)
 80015e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_TIM2_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_TIM2_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <MX_TIM2_Init+0x98>)
 80015f8:	f003 ff7d 	bl	80054f6 <HAL_TIM_Base_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001602:	f000 f975 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_TIM2_Init+0x98>)
 8001614:	f004 f9bd 	bl	8005992 <HAL_TIM_ConfigClockSource>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800161e:	f000 f967 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_TIM2_Init+0x98>)
 8001630:	f004 fbdc 	bl	8005dec <HAL_TIMEx_MasterConfigSynchronization>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800163a:	f000 f959 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002c4 	.word	0x200002c4
 800164c:	000b274f 	.word	0x000b274f

08001650 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_TIM3_Init+0x94>)
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <MX_TIM3_Init+0x98>)
 8001672:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_TIM3_Init+0x94>)
 8001676:	224f      	movs	r2, #79	; 0x4f
 8001678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_TIM3_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_TIM3_Init+0x94>)
 8001682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_TIM3_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_TIM3_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001694:	4813      	ldr	r0, [pc, #76]	; (80016e4 <MX_TIM3_Init+0x94>)
 8001696:	f003 ff2e 	bl	80054f6 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016a0:	f000 f926 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <MX_TIM3_Init+0x94>)
 80016b2:	f004 f96e 	bl	8005992 <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016bc:	f000 f918 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_TIM3_Init+0x94>)
 80016ce:	f004 fb8d 	bl	8005dec <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016d8:	f000 f90a 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000310 	.word	0x20000310
 80016e8:	40000400 	.word	0x40000400

080016ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_USART1_UART_Init+0x58>)
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <MX_USART1_UART_Init+0x5c>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_USART1_UART_Init+0x58>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART1_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART1_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART1_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART1_UART_Init+0x58>)
 8001730:	f004 fc02 	bl	8005f38 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800173a:	f000 f8d9 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000035c 	.word	0x2000035c
 8001748:	40013800 	.word	0x40013800

0800174c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <MX_USART2_UART_Init+0x5c>)
 8001754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_USART2_UART_Init+0x58>)
 8001790:	f004 fbd2 	bl	8005f38 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800179a:	f000 f8a9 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200003dc 	.word	0x200003dc
 80017a8:	40004400 	.word	0x40004400

080017ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_DMA_Init+0x48>)
 80017b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <MX_DMA_Init+0x48>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6493      	str	r3, [r2, #72]	; 0x48
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <MX_DMA_Init+0x48>)
 80017c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2010      	movs	r0, #16
 80017d0:	f001 ff27 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017d4:	2010      	movs	r0, #16
 80017d6:	f001 ff40 	bl	800365a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2011      	movs	r0, #17
 80017e0:	f001 ff1f 	bl	8003622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017e4:	2011      	movs	r0, #17
 80017e6:	f001 ff38 	bl	800365a <HAL_NVIC_EnableIRQ>

}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <MX_GPIO_Init+0xec>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a34      	ldr	r2, [pc, #208]	; (80018e4 <MX_GPIO_Init+0xec>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <MX_GPIO_Init+0xec>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <MX_GPIO_Init+0xec>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a2e      	ldr	r2, [pc, #184]	; (80018e4 <MX_GPIO_Init+0xec>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <MX_GPIO_Init+0xec>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <MX_GPIO_Init+0xec>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <MX_GPIO_Init+0xec>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <MX_GPIO_Init+0xec>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <MX_GPIO_Init+0xec>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <MX_GPIO_Init+0xec>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <MX_GPIO_Init+0xec>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CSB_Pin|DHT11_DATA_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	f240 2102 	movw	r1, #514	; 0x202
 8001874:	481c      	ldr	r0, [pc, #112]	; (80018e8 <MX_GPIO_Init+0xf0>)
 8001876:	f002 fa75 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2120      	movs	r1, #32
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f002 fa6f 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_GPIO_Init+0xf4>)
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4813      	ldr	r0, [pc, #76]	; (80018e8 <MX_GPIO_Init+0xf0>)
 800189c:	f002 f8a0 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CSB_Pin DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = SPI2_CSB_Pin|DHT11_DATA_Pin;
 80018a0:	f240 2302 	movw	r3, #514	; 0x202
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <MX_GPIO_Init+0xf0>)
 80018ba:	f002 f891 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018be:	2320      	movs	r3, #32
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f002 f882 	bl	80039e0 <HAL_GPIO_Init>

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000800 	.word	0x48000800
 80018ec:	10210000 	.word	0x10210000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_MspInit+0x44>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_MspInit+0x44>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6613      	str	r3, [r2, #96]	; 0x60
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_MspInit+0x44>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_MspInit+0x44>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_MspInit+0x44>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_MspInit+0x44>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a15      	ldr	r2, [pc, #84]	; (80019bc <HAL_ADC_MspInit+0x74>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d123      	bne.n	80019b2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_ADC_MspInit+0x78>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_ADC_MspInit+0x78>)
 8001970:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_ADC_MspInit+0x78>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_ADC_MspInit+0x78>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_ADC_MspInit+0x78>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_ADC_MspInit+0x78>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199a:	2301      	movs	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800199e:	230b      	movs	r3, #11
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_ADC_MspInit+0x7c>)
 80019ae:	f002 f817 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	50040000 	.word	0x50040000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000800 	.word	0x48000800

080019c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <HAL_SPI_MspInit+0xb4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d144      	bne.n	8001a74 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6593      	str	r3, [r2, #88]	; 0x58
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_SPI_MspInit+0xb8>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a32:	230c      	movs	r3, #12
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a42:	2305      	movs	r3, #5
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <HAL_SPI_MspInit+0xbc>)
 8001a4e:	f001 ffc7 	bl	80039e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a64:	2305      	movs	r3, #5
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	; (8001a88 <HAL_SPI_MspInit+0xc0>)
 8001a70:	f001 ffb6 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40003800 	.word	0x40003800
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000800 	.word	0x48000800
 8001a88:	48000400 	.word	0x48000400

08001a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9c:	d114      	bne.n	8001ac8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_TIM_Base_MspInit+0x68>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <HAL_TIM_Base_MspInit+0x68>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_TIM_Base_MspInit+0x68>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	201c      	movs	r0, #28
 8001abc:	f001 fdb1 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac0:	201c      	movs	r0, #28
 8001ac2:	f001 fdca 	bl	800365a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ac6:	e010      	b.n	8001aea <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10b      	bne.n	8001aea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_TIM_Base_MspInit+0x68>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_TIM_Base_MspInit+0x68>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_TIM_Base_MspInit+0x68>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40000400 	.word	0x40000400

08001afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	; 0x30
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a5d      	ldr	r2, [pc, #372]	; (8001c90 <HAL_UART_MspInit+0x194>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d12a      	bne.n	8001b74 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	4a5c      	ldr	r2, [pc, #368]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6613      	str	r3, [r2, #96]	; 0x60
 8001b2a:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a56      	ldr	r2, [pc, #344]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b60:	2307      	movs	r3, #7
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6e:	f001 ff37 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b72:	e088      	b.n	8001c86 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a47      	ldr	r2, [pc, #284]	; (8001c98 <HAL_UART_MspInit+0x19c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	f040 8083 	bne.w	8001c86 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b80:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	4a43      	ldr	r2, [pc, #268]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <HAL_UART_MspInit+0x198>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bce:	f001 ff07 	bl	80039e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001bd2:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001bd4:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <HAL_UART_MspInit+0x1a4>)
 8001bd6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001bfe:	2220      	movs	r2, #32
 8001c00:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c08:	4824      	ldr	r0, [pc, #144]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001c0a:	f001 fd41 	bl	8003690 <HAL_DMA_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001c14:	f7ff fe6c 	bl	80018f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001c1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_UART_MspInit+0x1a0>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <HAL_UART_MspInit+0x1ac>)
 8001c28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c32:	2210      	movs	r2, #16
 8001c34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c50:	2220      	movs	r2, #32
 8001c52:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c5a:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c5c:	f001 fd18 	bl	8003690 <HAL_DMA_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8001c66:	f7ff fe43 	bl	80018f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c6e:	669a      	str	r2, [r3, #104]	; 0x68
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_UART_MspInit+0x1a8>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2026      	movs	r0, #38	; 0x26
 8001c7c:	f001 fcd1 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c80:	2026      	movs	r0, #38	; 0x26
 8001c82:	f001 fcea 	bl	800365a <HAL_NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3730      	adds	r7, #48	; 0x30
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40004400 	.word	0x40004400
 8001c9c:	2000045c 	.word	0x2000045c
 8001ca0:	4002006c 	.word	0x4002006c
 8001ca4:	200004a4 	.word	0x200004a4
 8001ca8:	40020080 	.word	0x40020080

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 f990 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA1_Channel6_IRQHandler+0x10>)
 8001d0e:	f001 fdb8 	bl	8003882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000045c 	.word	0x2000045c

08001d1c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <DMA1_Channel7_IRQHandler+0x10>)
 8001d22:	f001 fdae 	bl	8003882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200004a4 	.word	0x200004a4

08001d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM2_IRQHandler+0x10>)
 8001d36:	f003 fd0d 	bl	8005754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002c4 	.word	0x200002c4

08001d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USART2_IRQHandler+0x10>)
 8001d4a:	f004 f9d7 	bl	80060fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200003dc 	.word	0x200003dc

08001d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_kill>:

int _kill(int pid, int sig)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d72:	f004 ff93 	bl	8006c9c <__errno>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2216      	movs	r2, #22
 8001d7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_exit>:

void _exit (int status)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffe7 	bl	8001d68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d9a:	e7fe      	b.n	8001d9a <_exit+0x12>

08001d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e00a      	b.n	8001dc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dae:	f3af 8000 	nop.w
 8001db2:	4601      	mov	r1, r0
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf0      	blt.n	8001dae <_read+0x12>
	}

return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_isatty>:

int _isatty(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f004 ff14 	bl	8006c9c <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20018000 	.word	0x20018000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	20000504 	.word	0x20000504
 8001ea8:	20000520 	.word	0x20000520

08001eac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <SystemInit+0x64>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <SystemInit+0x64>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <SystemInit+0x68>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <SystemInit+0x68>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <SystemInit+0x68>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <SystemInit+0x68>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <SystemInit+0x68>)
 8001ed8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001edc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <SystemInit+0x68>)
 8001ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <SystemInit+0x68>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <SystemInit+0x68>)
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <SystemInit+0x68>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SystemInit+0x64>)
 8001efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f02:	609a      	str	r2, [r3, #8]
#endif
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00
 8001f14:	40021000 	.word	0x40021000

08001f18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f1c:	f7ff ffc6 	bl	8001eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f22:	e003      	b.n	8001f2c <LoopCopyDataInit>

08001f24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f2a:	3104      	adds	r1, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f2c:	480a      	ldr	r0, [pc, #40]	; (8001f58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f34:	d3f6      	bcc.n	8001f24 <CopyDataInit>
	ldr	r2, =_sbss
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f38:	e002      	b.n	8001f40 <LoopFillZerobss>

08001f3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f3c:	f842 3b04 	str.w	r3, [r2], #4

08001f40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <LoopForever+0x16>)
	cmp	r2, r3
 8001f42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f44:	d3f9      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f46:	f004 feaf 	bl	8006ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f4a:	f7ff f955 	bl	80011f8 <main>

08001f4e <LoopForever>:

LoopForever:
    b LoopForever
 8001f4e:	e7fe      	b.n	8001f4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f50:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001f54:	0800baf4 	.word	0x0800baf4
	ldr	r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f5c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001f60:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001f64:	2000051c 	.word	0x2000051c

08001f68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC1_2_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_Init+0x3c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_Init+0x3c>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f82:	2003      	movs	r0, #3
 8001f84:	f001 fb42 	bl	800360c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 f80f 	bl	8001fac <HAL_InitTick>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	e001      	b.n	8001f9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f9a:	f7ff fcb1 	bl	8001900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_InitTick+0x6c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d023      	beq.n	8002008 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_InitTick+0x70>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_InitTick+0x6c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 fb4d 	bl	8003676 <HAL_SYSTICK_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d809      	bhi.n	8001ffc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f001 fb17 	bl	8003622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_InitTick+0x74>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e007      	b.n	800200c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e004      	b.n	800200c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e001      	b.n	800200c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000008 	.word	0x20000008
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008
 8002048:	20000508 	.word	0x20000508

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000508 	.word	0x20000508

08002064 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3360      	adds	r3, #96	; 0x60
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <LL_ADC_SetOffset+0x44>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	03fff000 	.word	0x03fff000

08002114 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3360      	adds	r3, #96	; 0x60
 8002122:	461a      	mov	r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002176:	b480      	push	{r7}
 8002178:	b087      	sub	sp, #28
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3330      	adds	r3, #48	; 0x30
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	4413      	add	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	211f      	movs	r1, #31
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	401a      	ands	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	f003 011f 	and.w	r1, r3, #31
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b087      	sub	sp, #28
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3314      	adds	r3, #20
 80021de:	461a      	mov	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	0e5b      	lsrs	r3, r3, #25
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	0d1b      	lsrs	r3, r3, #20
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	2107      	movs	r1, #7
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	401a      	ands	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	0d1b      	lsrs	r3, r3, #20
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	431a      	orrs	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002218:	bf00      	nop
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223c:	43db      	mvns	r3, r3
 800223e:	401a      	ands	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0318 	and.w	r3, r3, #24
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002248:	40d9      	lsrs	r1, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	400b      	ands	r3, r1
 800224e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002252:	431a      	orrs	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	0007ffff 	.word	0x0007ffff

0800226c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 031f 	and.w	r3, r3, #31
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6093      	str	r3, [r2, #8]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002310:	d101      	bne.n	8002316 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800235c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002360:	f043 0202 	orr.w	r2, r3, #2
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <LL_ADC_IsEnabled+0x18>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <LL_ADC_IsEnabled+0x1a>
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d101      	bne.n	80023b2 <LL_ADC_IsDisableOngoing+0x18>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <LL_ADC_IsDisableOngoing+0x1a>
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023d4:	f043 0204 	orr.w	r2, r3, #4
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d101      	bne.n	8002400 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b08      	cmp	r3, #8
 8002420:	d101      	bne.n	8002426 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e134      	b.n	80026b8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff fa73 	bl	8001948 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff19 	bl	80022ac <LL_ADC_IsDeepPowerDownEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff feff 	bl	8002288 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff34 	bl	80022fc <LL_ADC_IsInternalRegulatorEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d113      	bne.n	80024c2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff18 	bl	80022d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024a4:	4b86      	ldr	r3, [pc, #536]	; (80026c0 <HAL_ADC_Init+0x28c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	4a86      	ldr	r2, [pc, #536]	; (80026c4 <HAL_ADC_Init+0x290>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	099b      	lsrs	r3, r3, #6
 80024b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff18 	bl	80022fc <LL_ADC_IsInternalRegulatorEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff78 	bl	80023e8 <LL_ADC_REG_IsConversionOngoing>
 80024f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 80cf 	bne.w	80026a6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 80cb 	bne.w	80026a6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002518:	f043 0202 	orr.w	r2, r3, #2
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff25 	bl	8002374 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d115      	bne.n	800255c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002530:	4865      	ldr	r0, [pc, #404]	; (80026c8 <HAL_ADC_Init+0x294>)
 8002532:	f7ff ff1f 	bl	8002374 <LL_ADC_IsEnabled>
 8002536:	4604      	mov	r4, r0
 8002538:	4864      	ldr	r0, [pc, #400]	; (80026cc <HAL_ADC_Init+0x298>)
 800253a:	f7ff ff1b 	bl	8002374 <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	431c      	orrs	r4, r3
 8002542:	4863      	ldr	r0, [pc, #396]	; (80026d0 <HAL_ADC_Init+0x29c>)
 8002544:	f7ff ff16 	bl	8002374 <LL_ADC_IsEnabled>
 8002548:	4603      	mov	r3, r0
 800254a:	4323      	orrs	r3, r4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4619      	mov	r1, r3
 8002556:	485f      	ldr	r0, [pc, #380]	; (80026d4 <HAL_ADC_Init+0x2a0>)
 8002558:	f7ff fd84 	bl	8002064 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7e5b      	ldrb	r3, [r3, #25]
 8002560:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002566:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800256c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002572:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d106      	bne.n	8002598 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	3b01      	subs	r3, #1
 8002590:	045b      	lsls	r3, r3, #17
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_ADC_Init+0x2a4>)
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff0b 	bl	80023e8 <LL_ADC_REG_IsConversionOngoing>
 80025d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff18 	bl	800240e <LL_ADC_INJ_IsConversionOngoing>
 80025de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d13d      	bne.n	8002662 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d13a      	bne.n	8002662 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002608:	f023 0302 	bic.w	r3, r3, #2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	69b9      	ldr	r1, [r7, #24]
 8002612:	430b      	orrs	r3, r1
 8002614:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800261c:	2b01      	cmp	r3, #1
 800261e:	d118      	bne.n	8002652 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002636:	4311      	orrs	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800263c:	4311      	orrs	r1, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002642:	430a      	orrs	r2, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	611a      	str	r2, [r3, #16]
 8002650:	e007      	b.n	8002662 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10c      	bne.n	8002684 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f023 010f 	bic.w	r1, r3, #15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
 8002682:	e007      	b.n	8002694 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 020f 	bic.w	r2, r2, #15
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	f023 0303 	bic.w	r3, r3, #3
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
 80026a4:	e007      	b.n	80026b6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3724      	adds	r7, #36	; 0x24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd90      	pop	{r4, r7, pc}
 80026c0:	20000000 	.word	0x20000000
 80026c4:	053e2d63 	.word	0x053e2d63
 80026c8:	50040000 	.word	0x50040000
 80026cc:	50040100 	.word	0x50040100
 80026d0:	50040200 	.word	0x50040200
 80026d4:	50040300 	.word	0x50040300
 80026d8:	fff0c007 	.word	0xfff0c007

080026dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e4:	4857      	ldr	r0, [pc, #348]	; (8002844 <HAL_ADC_Start+0x168>)
 80026e6:	f7ff fdc1 	bl	800226c <LL_ADC_GetMultimode>
 80026ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fe79 	bl	80023e8 <LL_ADC_REG_IsConversionOngoing>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 809c 	bne.w	8002836 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_ADC_Start+0x30>
 8002708:	2302      	movs	r3, #2
 800270a:	e097      	b.n	800283c <HAL_ADC_Start+0x160>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fc97 	bl	8003048 <ADC_Enable>
 800271a:	4603      	mov	r3, r0
 800271c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 8083 	bne.w	800282c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a42      	ldr	r2, [pc, #264]	; (8002848 <HAL_ADC_Start+0x16c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d002      	beq.n	800274a <HAL_ADC_Start+0x6e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	e000      	b.n	800274c <HAL_ADC_Start+0x70>
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <HAL_ADC_Start+0x170>)
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	4293      	cmp	r3, r2
 8002752:	d002      	beq.n	800275a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002772:	d106      	bne.n	8002782 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f023 0206 	bic.w	r2, r3, #6
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	659a      	str	r2, [r3, #88]	; 0x58
 8002780:	e002      	b.n	8002788 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	221c      	movs	r2, #28
 800278e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2a      	ldr	r2, [pc, #168]	; (8002848 <HAL_ADC_Start+0x16c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d002      	beq.n	80027a8 <HAL_ADC_Start+0xcc>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	e000      	b.n	80027aa <HAL_ADC_Start+0xce>
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <HAL_ADC_Start+0x170>)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d008      	beq.n	80027c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d002      	beq.n	80027c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d114      	bne.n	80027ee <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fdea 	bl	80023c0 <LL_ADC_REG_StartConversion>
 80027ec:	e025      	b.n	800283a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_ADC_Start+0x16c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d002      	beq.n	800280a <HAL_ADC_Start+0x12e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	e000      	b.n	800280c <HAL_ADC_Start+0x130>
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_ADC_Start+0x170>)
 800280c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00f      	beq.n	800283a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002822:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
 800282a:	e006      	b.n	800283a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002834:	e001      	b.n	800283a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	50040300 	.word	0x50040300
 8002848:	50040100 	.word	0x50040100
 800284c:	50040000 	.word	0x50040000

08002850 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b0b6      	sub	sp, #216	; 0xd8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x22>
 800288a:	2302      	movs	r3, #2
 800288c:	e3c6      	b.n	800301c <HAL_ADC_ConfigChannel+0x7b0>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fda4 	bl	80023e8 <LL_ADC_REG_IsConversionOngoing>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 83a7 	bne.w	8002ff6 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b05      	cmp	r3, #5
 80028ae:	d824      	bhi.n	80028fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	3b02      	subs	r3, #2
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d81b      	bhi.n	80028f2 <HAL_ADC_ConfigChannel+0x86>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_ADC_ConfigChannel+0x54>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	080028d9 	.word	0x080028d9
 80028c8:	080028e1 	.word	0x080028e1
 80028cc:	080028e9 	.word	0x080028e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	220c      	movs	r2, #12
 80028d4:	605a      	str	r2, [r3, #4]
          break;
 80028d6:	e011      	b.n	80028fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2212      	movs	r2, #18
 80028dc:	605a      	str	r2, [r3, #4]
          break;
 80028de:	e00d      	b.n	80028fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2218      	movs	r2, #24
 80028e4:	605a      	str	r2, [r3, #4]
          break;
 80028e6:	e009      	b.n	80028fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ee:	605a      	str	r2, [r3, #4]
          break;
 80028f0:	e004      	b.n	80028fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2206      	movs	r2, #6
 80028f6:	605a      	str	r2, [r3, #4]
          break;
 80028f8:	e000      	b.n	80028fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80028fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	f7ff fc34 	bl	8002176 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fd68 	bl	80023e8 <LL_ADC_REG_IsConversionOngoing>
 8002918:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fd74 	bl	800240e <LL_ADC_INJ_IsConversionOngoing>
 8002926:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800292a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 81a6 	bne.w	8002c80 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 81a1 	bne.w	8002c80 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	461a      	mov	r2, r3
 800294c:	f7ff fc3f 	bl	80021ce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	08db      	lsrs	r3, r3, #3
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00a      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6919      	ldr	r1, [r3, #16]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002982:	f7ff fba3 	bl	80020cc <LL_ADC_SetOffset>
 8002986:	e17b      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fbc0 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x148>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fbb5 	bl	8002114 <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	e01e      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x186>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fbaa 	bl	8002114 <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e004      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80029e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x19e>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	e018      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x1d0>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e004      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fb79 	bl	8002140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2101      	movs	r1, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fb5d 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x20e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fb52 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	e01e      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x24c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fb47 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002aa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e004      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x264>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	e018      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x296>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e004      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d106      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fb16 	bl	8002140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2102      	movs	r1, #2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fafa 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x2d4>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff faef 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	f003 021f 	and.w	r2, r3, #31
 8002b3e:	e01e      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x312>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fae4 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e004      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d105      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x32a>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	e016      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x358>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e004      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d106      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2102      	movs	r1, #2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fab5 	bl	8002140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2103      	movs	r1, #3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fa99 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x396>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2103      	movs	r1, #3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fa8e 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	e017      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x3c6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2103      	movs	r1, #3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fa83 	bl	8002114 <LL_ADC_GetOffsetChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x3de>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	0e9b      	lsrs	r3, r3, #26
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	e011      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x402>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c62:	2320      	movs	r3, #32
 8002c64:	e003      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d106      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2103      	movs	r1, #3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fa60 	bl	8002140 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fb75 	bl	8002374 <LL_ADC_IsEnabled>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f040 813f 	bne.w	8002f10 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f7ff fac0 	bl	8002224 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a8e      	ldr	r2, [pc, #568]	; (8002ee4 <HAL_ADC_ConfigChannel+0x678>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f040 8130 	bne.w	8002f10 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x46c>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e019      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x4a0>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	e003      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2b09      	cmp	r3, #9
 8002d04:	bf94      	ite	ls
 8002d06:	2301      	movls	r3, #1
 8002d08:	2300      	movhi	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d079      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x4c0>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	069b      	lsls	r3, r3, #26
 8002d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2a:	e015      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x4ec>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e003      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	069b      	lsls	r3, r3, #26
 8002d54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x50c>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	e017      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x53c>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e003      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	ea42 0103 	orr.w	r1, r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x562>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	051b      	lsls	r3, r3, #20
 8002dcc:	e018      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x594>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002de6:	2320      	movs	r3, #32
 8002de8:	e003      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e00:	430b      	orrs	r3, r1
 8002e02:	e080      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x5b4>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	069b      	lsls	r3, r3, #26
 8002e1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e1e:	e015      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x5e0>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e003      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	069b      	lsls	r3, r3, #26
 8002e48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x600>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	e017      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x630>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	61fb      	str	r3, [r7, #28]
  return result;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x65c>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b1e      	subs	r3, #30
 8002ec0:	051b      	lsls	r3, r3, #20
 8002ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	e01d      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x698>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	613b      	str	r3, [r7, #16]
  return result;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e005      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x684>
 8002ee4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 021f 	and.w	r2, r3, #31
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	3b1e      	subs	r3, #30
 8002efe:	051b      	lsls	r3, r3, #20
 8002f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f04:	430b      	orrs	r3, r1
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	6892      	ldr	r2, [r2, #8]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f7ff f95f 	bl	80021ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_ADC_ConfigChannel+0x7b8>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d079      	beq.n	8003010 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f1c:	4842      	ldr	r0, [pc, #264]	; (8003028 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f1e:	f7ff f8c7 	bl	80020b0 <LL_ADC_GetCommonPathInternalCh>
 8002f22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a40      	ldr	r2, [pc, #256]	; (800302c <HAL_ADC_ConfigChannel+0x7c0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d12b      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d125      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x6e4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d15c      	bne.n	800300a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4833      	ldr	r0, [pc, #204]	; (8003028 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f5c:	f7ff f895 	bl	800208a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	4a35      	ldr	r2, [pc, #212]	; (800303c <HAL_ADC_ConfigChannel+0x7d0>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099a      	lsrs	r2, r3, #6
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f78:	e002      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f9      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f86:	e040      	b.n	800300a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d118      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x758>
 8002f92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d112      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a23      	ldr	r2, [pc, #140]	; (8003030 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_ConfigChannel+0x746>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a21      	ldr	r2, [pc, #132]	; (8003034 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d12d      	bne.n	800300e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fba:	4619      	mov	r1, r3
 8002fbc:	481a      	ldr	r0, [pc, #104]	; (8003028 <HAL_ADC_ConfigChannel+0x7bc>)
 8002fbe:	f7ff f864 	bl	800208a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fc2:	e024      	b.n	800300e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d120      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11a      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a14      	ldr	r2, [pc, #80]	; (8003030 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d115      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fec:	4619      	mov	r1, r3
 8002fee:	480e      	ldr	r0, [pc, #56]	; (8003028 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ff0:	f7ff f84b 	bl	800208a <LL_ADC_SetCommonPathInternalCh>
 8002ff4:	e00c      	b.n	8003010 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003008:	e002      	b.n	8003010 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800300e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003018:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800301c:	4618      	mov	r0, r3
 800301e:	37d8      	adds	r7, #216	; 0xd8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	80080000 	.word	0x80080000
 8003028:	50040300 	.word	0x50040300
 800302c:	c7520000 	.word	0xc7520000
 8003030:	50040000 	.word	0x50040000
 8003034:	50040200 	.word	0x50040200
 8003038:	20000000 	.word	0x20000000
 800303c:	053e2d63 	.word	0x053e2d63
 8003040:	cb840000 	.word	0xcb840000
 8003044:	80000001 	.word	0x80000001

08003048 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff f98d 	bl	8002374 <LL_ADC_IsEnabled>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d146      	bne.n	80030ee <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <ADC_Enable+0xb0>)
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	f043 0210 	orr.w	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e032      	b.n	80030f0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f948 	bl	8002324 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003094:	f7fe ffda 	bl	800204c <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800309a:	e021      	b.n	80030e0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f967 	bl	8002374 <LL_ADC_IsEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d104      	bne.n	80030b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f937 	bl	8002324 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030b6:	f7fe ffc9 	bl	800204c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d90d      	bls.n	80030e0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f043 0210 	orr.w	r2, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d1d6      	bne.n	800309c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	8000003f 	.word	0x8000003f

080030fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f946 	bl	800239a <LL_ADC_IsDisableOngoing>
 800310e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f92d 	bl	8002374 <LL_ADC_IsEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d040      	beq.n	80031a2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d13d      	bne.n	80031a2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030d 	and.w	r3, r3, #13
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10c      	bne.n	800314e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f907 	bl	800234c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2203      	movs	r2, #3
 8003144:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003146:	f7fe ff81 	bl	800204c <HAL_GetTick>
 800314a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800314c:	e022      	b.n	8003194 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 0210 	orr.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e01c      	b.n	80031a4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800316a:	f7fe ff6f 	bl	800204c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d90d      	bls.n	8003194 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e007      	b.n	80031a4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e3      	bne.n	800316a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <LL_ADC_IsEnabled>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <LL_ADC_IsEnabled+0x18>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <LL_ADC_IsEnabled+0x1a>
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_ADC_StartCalibration>:
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_IsCalibrationOnGoing>:
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003218:	d101      	bne.n	800321e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_REG_IsConversionOngoing>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b04      	cmp	r3, #4
 800323e:	d101      	bne.n	8003244 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_ADCEx_Calibration_Start+0x1c>
 800326a:	2302      	movs	r3, #2
 800326c:	e04d      	b.n	800330a <HAL_ADCEx_Calibration_Start+0xb8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ff40 	bl	80030fc <ADC_Disable>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d136      	bne.n	80032f4 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800328e:	f023 0302 	bic.w	r3, r3, #2
 8003292:	f043 0202 	orr.w	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6839      	ldr	r1, [r7, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff96 	bl	80031d2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032a6:	e014      	b.n	80032d2 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3301      	adds	r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80032b4:	d30d      	bcc.n	80032d2 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f023 0312 	bic.w	r3, r3, #18
 80032be:	f043 0210 	orr.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e01b      	b.n	800330a <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff94 	bl	8003204 <LL_ADC_IsCalibrationOnGoing>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1e2      	bne.n	80032a8 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
 80032f2:	e005      	b.n	8003300 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f043 0210 	orr.w	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b09f      	sub	sp, #124	; 0x7c
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800332e:	2302      	movs	r3, #2
 8003330:	e08f      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a47      	ldr	r2, [pc, #284]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d102      	bne.n	800334a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003344:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	e001      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e072      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff5c 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003374:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ff56 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d154      	bne.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003388:	2b00      	cmp	r3, #0
 800338a:	d151      	bne.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800338c:	4b35      	ldr	r3, [pc, #212]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800338e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02c      	beq.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033aa:	035b      	lsls	r3, r3, #13
 80033ac:	430b      	orrs	r3, r1
 80033ae:	431a      	orrs	r2, r3
 80033b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033b4:	4829      	ldr	r0, [pc, #164]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033b6:	f7ff fef9 	bl	80031ac <LL_ADC_IsEnabled>
 80033ba:	4604      	mov	r4, r0
 80033bc:	4828      	ldr	r0, [pc, #160]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033be:	f7ff fef5 	bl	80031ac <LL_ADC_IsEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	431c      	orrs	r4, r3
 80033c6:	4828      	ldr	r0, [pc, #160]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033c8:	f7ff fef0 	bl	80031ac <LL_ADC_IsEnabled>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4323      	orrs	r3, r4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d137      	bne.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033dc:	f023 030f 	bic.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	6811      	ldr	r1, [r2, #0]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	6892      	ldr	r2, [r2, #8]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f0:	e028      	b.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033fe:	4817      	ldr	r0, [pc, #92]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003400:	f7ff fed4 	bl	80031ac <LL_ADC_IsEnabled>
 8003404:	4604      	mov	r4, r0
 8003406:	4816      	ldr	r0, [pc, #88]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003408:	f7ff fed0 	bl	80031ac <LL_ADC_IsEnabled>
 800340c:	4603      	mov	r3, r0
 800340e:	431c      	orrs	r4, r3
 8003410:	4815      	ldr	r0, [pc, #84]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003412:	f7ff fecb 	bl	80031ac <LL_ADC_IsEnabled>
 8003416:	4603      	mov	r3, r0
 8003418:	4323      	orrs	r3, r4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d112      	bne.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003426:	f023 030f 	bic.w	r3, r3, #15
 800342a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800342c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800342e:	e009      	b.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003442:	e000      	b.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800344e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003452:	4618      	mov	r0, r3
 8003454:	377c      	adds	r7, #124	; 0x7c
 8003456:	46bd      	mov	sp, r7
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	bf00      	nop
 800345c:	50040000 	.word	0x50040000
 8003460:	50040100 	.word	0x50040100
 8003464:	50040300 	.word	0x50040300
 8003468:	50040200 	.word	0x50040200

0800346c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003488:	4013      	ands	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <__NVIC_SetPriorityGrouping+0x44>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <__NVIC_GetPriorityGrouping+0x18>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	0a1b      	lsrs	r3, r3, #8
 80034be:	f003 0307 	and.w	r3, r3, #7
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db0b      	blt.n	80034fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <__NVIC_EnableIRQ+0x38>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2001      	movs	r0, #1
 80034f2:	fa00 f202 	lsl.w	r2, r0, r2
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000e100 	.word	0xe000e100

0800350c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	6039      	str	r1, [r7, #0]
 8003516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db0a      	blt.n	8003536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	490c      	ldr	r1, [pc, #48]	; (8003558 <__NVIC_SetPriority+0x4c>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	0112      	lsls	r2, r2, #4
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	440b      	add	r3, r1
 8003530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003534:	e00a      	b.n	800354c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4908      	ldr	r1, [pc, #32]	; (800355c <__NVIC_SetPriority+0x50>)
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	3b04      	subs	r3, #4
 8003544:	0112      	lsls	r2, r2, #4
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	440b      	add	r3, r1
 800354a:	761a      	strb	r2, [r3, #24]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000e100 	.word	0xe000e100
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f1c3 0307 	rsb	r3, r3, #7
 800357a:	2b04      	cmp	r3, #4
 800357c:	bf28      	it	cs
 800357e:	2304      	movcs	r3, #4
 8003580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3304      	adds	r3, #4
 8003586:	2b06      	cmp	r3, #6
 8003588:	d902      	bls.n	8003590 <NVIC_EncodePriority+0x30>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3b03      	subs	r3, #3
 800358e:	e000      	b.n	8003592 <NVIC_EncodePriority+0x32>
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	43d9      	mvns	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	4313      	orrs	r3, r2
         );
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3724      	adds	r7, #36	; 0x24
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d8:	d301      	bcc.n	80035de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035da:	2301      	movs	r3, #1
 80035dc:	e00f      	b.n	80035fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <SysTick_Config+0x40>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035e6:	210f      	movs	r1, #15
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	f7ff ff8e 	bl	800350c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <SysTick_Config+0x40>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <SysTick_Config+0x40>)
 80035f8:	2207      	movs	r2, #7
 80035fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	e000e010 	.word	0xe000e010

0800360c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff29 	bl	800346c <__NVIC_SetPriorityGrouping>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003634:	f7ff ff3e 	bl	80034b4 <__NVIC_GetPriorityGrouping>
 8003638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	6978      	ldr	r0, [r7, #20]
 8003640:	f7ff ff8e 	bl	8003560 <NVIC_EncodePriority>
 8003644:	4602      	mov	r2, r0
 8003646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff5d 	bl	800350c <__NVIC_SetPriority>
}
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff31 	bl	80034d0 <__NVIC_EnableIRQ>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ffa2 	bl	80035c8 <SysTick_Config>
 8003684:	4603      	mov	r3, r0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e098      	b.n	80037d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b4d      	ldr	r3, [pc, #308]	; (80037e0 <HAL_DMA_Init+0x150>)
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d80f      	bhi.n	80036ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_DMA_Init+0x154>)
 80036b6:	4413      	add	r3, r2
 80036b8:	4a4b      	ldr	r2, [pc, #300]	; (80037e8 <HAL_DMA_Init+0x158>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	009a      	lsls	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a48      	ldr	r2, [pc, #288]	; (80037ec <HAL_DMA_Init+0x15c>)
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
 80036cc:	e00e      	b.n	80036ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <HAL_DMA_Init+0x160>)
 80036d6:	4413      	add	r3, r2
 80036d8:	4a43      	ldr	r2, [pc, #268]	; (80037e8 <HAL_DMA_Init+0x158>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	009a      	lsls	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <HAL_DMA_Init+0x164>)
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003746:	d039      	beq.n	80037bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	4a27      	ldr	r2, [pc, #156]	; (80037ec <HAL_DMA_Init+0x15c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d11a      	bne.n	8003788 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_DMA_Init+0x168>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f003 031c 	and.w	r3, r3, #28
 800375e:	210f      	movs	r1, #15
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	4924      	ldr	r1, [pc, #144]	; (80037f8 <HAL_DMA_Init+0x168>)
 8003768:	4013      	ands	r3, r2
 800376a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800376c:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_DMA_Init+0x168>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f003 031c 	and.w	r3, r3, #28
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	491d      	ldr	r1, [pc, #116]	; (80037f8 <HAL_DMA_Init+0x168>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
 8003786:	e019      	b.n	80037bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <HAL_DMA_Init+0x16c>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	f003 031c 	and.w	r3, r3, #28
 8003794:	210f      	movs	r1, #15
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	4917      	ldr	r1, [pc, #92]	; (80037fc <HAL_DMA_Init+0x16c>)
 800379e:	4013      	ands	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037a2:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_DMA_Init+0x16c>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f003 031c 	and.w	r3, r3, #28
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	4911      	ldr	r1, [pc, #68]	; (80037fc <HAL_DMA_Init+0x16c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40020407 	.word	0x40020407
 80037e4:	bffdfff8 	.word	0xbffdfff8
 80037e8:	cccccccd 	.word	0xcccccccd
 80037ec:	40020000 	.word	0x40020000
 80037f0:	bffdfbf8 	.word	0xbffdfbf8
 80037f4:	40020400 	.word	0x40020400
 80037f8:	400200a8 	.word	0x400200a8
 80037fc:	400204a8 	.word	0x400204a8

08003800 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d005      	beq.n	8003824 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2204      	movs	r2, #4
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
 8003822:	e029      	b.n	8003878 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 020e 	bic.w	r2, r2, #14
 8003832:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f003 021c 	and.w	r2, r3, #28
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	2101      	movs	r1, #1
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
 8003856:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
    }
  }
  return status;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f003 031c 	and.w	r3, r3, #28
 80038a2:	2204      	movs	r2, #4
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d026      	beq.n	80038fc <HAL_DMA_IRQHandler+0x7a>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d021      	beq.n	80038fc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d107      	bne.n	80038d6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0204 	bic.w	r2, r2, #4
 80038d4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f003 021c 	and.w	r2, r3, #28
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2104      	movs	r1, #4
 80038e4:	fa01 f202 	lsl.w	r2, r1, r2
 80038e8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d071      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038fa:	e06c      	b.n	80039d6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	f003 031c 	and.w	r3, r3, #28
 8003904:	2202      	movs	r2, #2
 8003906:	409a      	lsls	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02e      	beq.n	800396e <HAL_DMA_IRQHandler+0xec>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d029      	beq.n	800396e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 020a 	bic.w	r2, r2, #10
 8003936:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	f003 021c 	and.w	r2, r3, #28
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	2102      	movs	r1, #2
 800394e:	fa01 f202 	lsl.w	r2, r1, r2
 8003952:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d038      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800396c:	e033      	b.n	80039d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f003 031c 	and.w	r3, r3, #28
 8003976:	2208      	movs	r2, #8
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02a      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x156>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d025      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 020e 	bic.w	r2, r2, #14
 800399a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f003 021c 	and.w	r2, r3, #28
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039d6:	bf00      	nop
 80039d8:	bf00      	nop
}
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ee:	e17f      	b.n	8003cf0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	4013      	ands	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8171 	beq.w	8003cea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d00b      	beq.n	8003a28 <HAL_GPIO_Init+0x48>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d007      	beq.n	8003a28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a1c:	2b11      	cmp	r3, #17
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b12      	cmp	r3, #18
 8003a26:	d130      	bne.n	8003a8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a5e:	2201      	movs	r2, #1
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	f003 0201 	and.w	r2, r3, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d118      	bne.n	8003ac8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	f003 0201 	and.w	r2, r3, #1
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x128>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b12      	cmp	r3, #18
 8003b06:	d123      	bne.n	8003b50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	08da      	lsrs	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3208      	adds	r2, #8
 8003b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	08da      	lsrs	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3208      	adds	r2, #8
 8003b4a:	6939      	ldr	r1, [r7, #16]
 8003b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0203 	and.w	r2, r3, #3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80ac 	beq.w	8003cea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b92:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <HAL_GPIO_Init+0x330>)
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	4a5e      	ldr	r2, [pc, #376]	; (8003d10 <HAL_GPIO_Init+0x330>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b9e:	4b5c      	ldr	r3, [pc, #368]	; (8003d10 <HAL_GPIO_Init+0x330>)
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003baa:	4a5a      	ldr	r2, [pc, #360]	; (8003d14 <HAL_GPIO_Init+0x334>)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bd4:	d025      	beq.n	8003c22 <HAL_GPIO_Init+0x242>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4f      	ldr	r2, [pc, #316]	; (8003d18 <HAL_GPIO_Init+0x338>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01f      	beq.n	8003c1e <HAL_GPIO_Init+0x23e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4e      	ldr	r2, [pc, #312]	; (8003d1c <HAL_GPIO_Init+0x33c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d019      	beq.n	8003c1a <HAL_GPIO_Init+0x23a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4d      	ldr	r2, [pc, #308]	; (8003d20 <HAL_GPIO_Init+0x340>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_GPIO_Init+0x236>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4c      	ldr	r2, [pc, #304]	; (8003d24 <HAL_GPIO_Init+0x344>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00d      	beq.n	8003c12 <HAL_GPIO_Init+0x232>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4b      	ldr	r2, [pc, #300]	; (8003d28 <HAL_GPIO_Init+0x348>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <HAL_GPIO_Init+0x22e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4a      	ldr	r2, [pc, #296]	; (8003d2c <HAL_GPIO_Init+0x34c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_GPIO_Init+0x22a>
 8003c06:	2306      	movs	r3, #6
 8003c08:	e00c      	b.n	8003c24 <HAL_GPIO_Init+0x244>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00a      	b.n	8003c24 <HAL_GPIO_Init+0x244>
 8003c0e:	2305      	movs	r3, #5
 8003c10:	e008      	b.n	8003c24 <HAL_GPIO_Init+0x244>
 8003c12:	2304      	movs	r3, #4
 8003c14:	e006      	b.n	8003c24 <HAL_GPIO_Init+0x244>
 8003c16:	2303      	movs	r3, #3
 8003c18:	e004      	b.n	8003c24 <HAL_GPIO_Init+0x244>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e002      	b.n	8003c24 <HAL_GPIO_Init+0x244>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_GPIO_Init+0x244>
 8003c22:	2300      	movs	r3, #0
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	f002 0203 	and.w	r2, r2, #3
 8003c2a:	0092      	lsls	r2, r2, #2
 8003c2c:	4093      	lsls	r3, r2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c34:	4937      	ldr	r1, [pc, #220]	; (8003d14 <HAL_GPIO_Init+0x334>)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c42:	4b3b      	ldr	r3, [pc, #236]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c66:	4a32      	ldr	r2, [pc, #200]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c6c:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ce4:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <HAL_GPIO_Init+0x350>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3301      	adds	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f47f ae78 	bne.w	80039f0 <HAL_GPIO_Init+0x10>
  }
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40010000 	.word	0x40010000
 8003d18:	48000400 	.word	0x48000400
 8003d1c:	48000800 	.word	0x48000800
 8003d20:	48000c00 	.word	0x48000c00
 8003d24:	48001000 	.word	0x48001000
 8003d28:	48001400 	.word	0x48001400
 8003d2c:	48001800 	.word	0x48001800
 8003d30:	40010400 	.word	0x40010400

08003d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e001      	b.n	8003d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
 8003d70:	4613      	mov	r3, r2
 8003d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d74:	787b      	ldrb	r3, [r7, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d80:	e002      	b.n	8003d88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_PWREx_GetVoltageRange+0x18>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40007000 	.word	0x40007000

08003db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbe:	d130      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dcc:	d038      	beq.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2232      	movs	r2, #50	; 0x32
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	0c9b      	lsrs	r3, r3, #18
 8003df0:	3301      	adds	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df4:	e002      	b.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e08:	d102      	bne.n	8003e10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f2      	bne.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1c:	d110      	bne.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e00f      	b.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d007      	beq.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e38:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40007000 	.word	0x40007000
 8003e54:	20000000 	.word	0x20000000
 8003e58:	431bde83 	.word	0x431bde83

08003e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e3d8      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6e:	4b97      	ldr	r3, [pc, #604]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e78:	4b94      	ldr	r3, [pc, #592]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80e4 	beq.w	8004058 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x4a>
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	f040 808b 	bne.w	8003fb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f040 8087 	bne.w	8003fb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ea6:	4b89      	ldr	r3, [pc, #548]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e3b0      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	4b82      	ldr	r3, [pc, #520]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x7c>
 8003ece:	4b7f      	ldr	r3, [pc, #508]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCC_OscConfig+0x88>
 8003ed8:	4b7c      	ldr	r3, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d223      	bcs.n	8003f30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd43 	bl	8004978 <RCC_SetFlashLatencyFromMSIRange>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e391      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003efc:	4b73      	ldr	r3, [pc, #460]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a72      	ldr	r2, [pc, #456]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f02:	f043 0308 	orr.w	r3, r3, #8
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b70      	ldr	r3, [pc, #448]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	496d      	ldr	r1, [pc, #436]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f1a:	4b6c      	ldr	r3, [pc, #432]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	4968      	ldr	r1, [pc, #416]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
 8003f2e:	e025      	b.n	8003f7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f30:	4b66      	ldr	r3, [pc, #408]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f36:	f043 0308 	orr.w	r3, r3, #8
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4960      	ldr	r1, [pc, #384]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f4e:	4b5f      	ldr	r3, [pc, #380]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	495b      	ldr	r1, [pc, #364]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fd03 	bl	8004978 <RCC_SetFlashLatencyFromMSIRange>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e351      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f7c:	f000 fc38 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b52      	ldr	r3, [pc, #328]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	4950      	ldr	r1, [pc, #320]	; (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	4a4e      	ldr	r2, [pc, #312]	; (80040d4 <HAL_RCC_OscConfig+0x278>)
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f9c:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe f803 	bl	8001fac <HAL_InitTick>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d052      	beq.n	8004056 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	e335      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d032      	beq.n	8004022 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fbc:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a42      	ldr	r2, [pc, #264]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fc8:	f7fe f840 	bl	800204c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd0:	f7fe f83c 	bl	800204c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e31e      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fee:	4b37      	ldr	r3, [pc, #220]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a36      	ldr	r2, [pc, #216]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4931      	ldr	r1, [pc, #196]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	492c      	ldr	r1, [pc, #176]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	e01a      	b.n	8004058 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a29      	ldr	r2, [pc, #164]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800402e:	f7fe f80d 	bl	800204c <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004036:	f7fe f809 	bl	800204c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e2eb      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004048:	4b20      	ldr	r3, [pc, #128]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x1da>
 8004054:	e000      	b.n	8004058 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004056:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d074      	beq.n	800414e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b08      	cmp	r3, #8
 8004068:	d005      	beq.n	8004076 <HAL_RCC_OscConfig+0x21a>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d10e      	bne.n	800408e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d10b      	bne.n	800408e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d064      	beq.n	800414c <HAL_RCC_OscConfig+0x2f0>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d160      	bne.n	800414c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e2c8      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004096:	d106      	bne.n	80040a6 <HAL_RCC_OscConfig+0x24a>
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0b      	ldr	r2, [pc, #44]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 800409e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e026      	b.n	80040f4 <HAL_RCC_OscConfig+0x298>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ae:	d115      	bne.n	80040dc <HAL_RCC_OscConfig+0x280>
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a05      	ldr	r2, [pc, #20]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 80040b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a02      	ldr	r2, [pc, #8]	; (80040cc <HAL_RCC_OscConfig+0x270>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e014      	b.n	80040f4 <HAL_RCC_OscConfig+0x298>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800b5f8 	.word	0x0800b5f8
 80040d4:	20000000 	.word	0x20000000
 80040d8:	20000004 	.word	0x20000004
 80040dc:	4ba0      	ldr	r3, [pc, #640]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a9f      	ldr	r2, [pc, #636]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b9d      	ldr	r3, [pc, #628]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a9c      	ldr	r2, [pc, #624]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd ffa6 	bl	800204c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd ffa2 	bl	800204c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e284      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004116:	4b92      	ldr	r3, [pc, #584]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x2a8>
 8004122:	e014      	b.n	800414e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fd ff92 	bl	800204c <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412c:	f7fd ff8e 	bl	800204c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e270      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800413e:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x2d0>
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d060      	beq.n	800421c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d005      	beq.n	800416c <HAL_RCC_OscConfig+0x310>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d119      	bne.n	800419a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d116      	bne.n	800419a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416c:	4b7c      	ldr	r3, [pc, #496]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_OscConfig+0x328>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e24d      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004184:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	4973      	ldr	r1, [pc, #460]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004198:	e040      	b.n	800421c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d023      	beq.n	80041ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a2:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6e      	ldr	r2, [pc, #440]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fd ff4d 	bl	800204c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b6:	f7fd ff49 	bl	800204c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e22b      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c8:	4b65      	ldr	r3, [pc, #404]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b62      	ldr	r3, [pc, #392]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	495f      	ldr	r1, [pc, #380]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
 80041e8:	e018      	b.n	800421c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b5d      	ldr	r3, [pc, #372]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a5c      	ldr	r2, [pc, #368]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80041f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fd ff29 	bl	800204c <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fd ff25 	bl	800204c <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e207      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03c      	beq.n	80042a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01c      	beq.n	800426a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004230:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004236:	4a4a      	ldr	r2, [pc, #296]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fd ff04 	bl	800204c <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004248:	f7fd ff00 	bl	800204c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e1e2      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800425c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ef      	beq.n	8004248 <HAL_RCC_OscConfig+0x3ec>
 8004268:	e01b      	b.n	80042a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426a:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004270:	4a3b      	ldr	r2, [pc, #236]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427a:	f7fd fee7 	bl	800204c <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004282:	f7fd fee3 	bl	800204c <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e1c5      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004294:	4b32      	ldr	r3, [pc, #200]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ef      	bne.n	8004282 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80a6 	beq.w	80043fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b0:	2300      	movs	r3, #0
 80042b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042b4:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	4a26      	ldr	r2, [pc, #152]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6593      	str	r3, [r2, #88]	; 0x58
 80042cc:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_RCC_OscConfig+0x508>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d118      	bne.n	800431a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e8:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <HAL_RCC_OscConfig+0x508>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <HAL_RCC_OscConfig+0x508>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f4:	f7fd feaa 	bl	800204c <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fc:	f7fd fea6 	bl	800204c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e188      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <HAL_RCC_OscConfig+0x508>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d108      	bne.n	8004334 <HAL_RCC_OscConfig+0x4d8>
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004332:	e029      	b.n	8004388 <HAL_RCC_OscConfig+0x52c>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b05      	cmp	r3, #5
 800433a:	d115      	bne.n	8004368 <HAL_RCC_OscConfig+0x50c>
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004344:	f043 0304 	orr.w	r3, r3, #4
 8004348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	4a03      	ldr	r2, [pc, #12]	; (8004360 <HAL_RCC_OscConfig+0x504>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800435c:	e014      	b.n	8004388 <HAL_RCC_OscConfig+0x52c>
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	40007000 	.word	0x40007000
 8004368:	4b91      	ldr	r3, [pc, #580]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	4a90      	ldr	r2, [pc, #576]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004378:	4b8d      	ldr	r3, [pc, #564]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	4a8c      	ldr	r2, [pc, #560]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004380:	f023 0304 	bic.w	r3, r3, #4
 8004384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d016      	beq.n	80043be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fd fe5c 	bl	800204c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004396:	e00a      	b.n	80043ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004398:	f7fd fe58 	bl	800204c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e138      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ae:	4b80      	ldr	r3, [pc, #512]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ed      	beq.n	8004398 <HAL_RCC_OscConfig+0x53c>
 80043bc:	e015      	b.n	80043ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd fe45 	bl	800204c <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fd fe41 	bl	800204c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e121      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043dc:	4b74      	ldr	r3, [pc, #464]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1ed      	bne.n	80043c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f0:	4b6f      	ldr	r3, [pc, #444]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	4a6e      	ldr	r2, [pc, #440]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80043f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 810c 	beq.w	800461e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	2b02      	cmp	r3, #2
 800440c:	f040 80d4 	bne.w	80045b8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004410:	4b67      	ldr	r3, [pc, #412]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	429a      	cmp	r2, r3
 8004422:	d130      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	3b01      	subs	r3, #1
 8004430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d127      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d11f      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004450:	2a07      	cmp	r2, #7
 8004452:	bf14      	ite	ne
 8004454:	2201      	movne	r2, #1
 8004456:	2200      	moveq	r2, #0
 8004458:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	4293      	cmp	r3, r2
 800445c:	d113      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	3b01      	subs	r3, #1
 800446c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d109      	bne.n	8004486 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	3b01      	subs	r3, #1
 8004480:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d06e      	beq.n	8004564 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b0c      	cmp	r3, #12
 800448a:	d069      	beq.n	8004560 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800448c:	4b48      	ldr	r3, [pc, #288]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004498:	4b45      	ldr	r3, [pc, #276]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0bb      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044a8:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a40      	ldr	r2, [pc, #256]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80044ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044b4:	f7fd fdca 	bl	800204c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd fdc6 	bl	800204c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0a8      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ce:	4b38      	ldr	r3, [pc, #224]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044da:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCC_OscConfig+0x758>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044ea:	3a01      	subs	r2, #1
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	4311      	orrs	r1, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044f4:	0212      	lsls	r2, r2, #8
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044fc:	0852      	lsrs	r2, r2, #1
 80044fe:	3a01      	subs	r2, #1
 8004500:	0552      	lsls	r2, r2, #21
 8004502:	4311      	orrs	r1, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004508:	0852      	lsrs	r2, r2, #1
 800450a:	3a01      	subs	r2, #1
 800450c:	0652      	lsls	r2, r2, #25
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004514:	0912      	lsrs	r2, r2, #4
 8004516:	0452      	lsls	r2, r2, #17
 8004518:	430a      	orrs	r2, r1
 800451a:	4925      	ldr	r1, [pc, #148]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 800451c:	4313      	orrs	r3, r2
 800451e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004520:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800452c:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004536:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004538:	f7fd fd88 	bl	800204c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd fd84 	bl	800204c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e066      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004552:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800455e:	e05e      	b.n	800461e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e05d      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d156      	bne.n	800461e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0e      	ldr	r2, [pc, #56]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004588:	f7fd fd60 	bl	800204c <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd fd5c 	bl	800204c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e03e      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x754>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x734>
 80045ae:	e036      	b.n	800461e <HAL_RCC_OscConfig+0x7c2>
 80045b0:	40021000 	.word	0x40021000
 80045b4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d02d      	beq.n	800461a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCC_OscConfig+0x7cc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_RCC_OscConfig+0x7cc>)
 80045c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80045ca:	4b17      	ldr	r3, [pc, #92]	; (8004628 <HAL_RCC_OscConfig+0x7cc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_RCC_OscConfig+0x7cc>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <HAL_RCC_OscConfig+0x7cc>)
 80045dc:	f023 0303 	bic.w	r3, r3, #3
 80045e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045e2:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_RCC_OscConfig+0x7cc>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4a10      	ldr	r2, [pc, #64]	; (8004628 <HAL_RCC_OscConfig+0x7cc>)
 80045e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd fd2b 	bl	800204c <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fd fd27 	bl	800204c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e009      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_RCC_OscConfig+0x7cc>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x79e>
 8004618:	e001      	b.n	800461e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40021000 	.word	0x40021000

0800462c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0c8      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004640:	4b66      	ldr	r3, [pc, #408]	; (80047dc <HAL_RCC_ClockConfig+0x1b0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d910      	bls.n	8004670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b63      	ldr	r3, [pc, #396]	; (80047dc <HAL_RCC_ClockConfig+0x1b0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 0207 	bic.w	r2, r3, #7
 8004656:	4961      	ldr	r1, [pc, #388]	; (80047dc <HAL_RCC_ClockConfig+0x1b0>)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b5f      	ldr	r3, [pc, #380]	; (80047dc <HAL_RCC_ClockConfig+0x1b0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0b0      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d04c      	beq.n	8004716 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d107      	bne.n	8004694 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004684:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d121      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e09e      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d107      	bne.n	80046ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d115      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e092      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046b4:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e086      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c4:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e07e      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046d4:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f023 0203 	bic.w	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	493f      	ldr	r1, [pc, #252]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e6:	f7fd fcb1 	bl	800204c <HAL_GetTick>
 80046ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ec:	e00a      	b.n	8004704 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ee:	f7fd fcad 	bl	800204c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e066      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004704:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 020c 	and.w	r2, r3, #12
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	429a      	cmp	r2, r3
 8004714:	d1eb      	bne.n	80046ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004722:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	492c      	ldr	r1, [pc, #176]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004734:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_RCC_ClockConfig+0x1b0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d210      	bcs.n	8004764 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <HAL_RCC_ClockConfig+0x1b0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 0207 	bic.w	r2, r3, #7
 800474a:	4924      	ldr	r1, [pc, #144]	; (80047dc <HAL_RCC_ClockConfig+0x1b0>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <HAL_RCC_ClockConfig+0x1b0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e036      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004770:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4918      	ldr	r1, [pc, #96]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4910      	ldr	r1, [pc, #64]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047a2:	f000 f825 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80047a6:	4602      	mov	r2, r0
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <HAL_RCC_ClockConfig+0x1b4>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	490c      	ldr	r1, [pc, #48]	; (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	5ccb      	ldrb	r3, [r1, r3]
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	fa22 f303 	lsr.w	r3, r2, r3
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd fbf0 	bl	8001fac <HAL_InitTick>
 80047cc:	4603      	mov	r3, r0
 80047ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80047d0:	7afb      	ldrb	r3, [r7, #11]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40022000 	.word	0x40022000
 80047e0:	40021000 	.word	0x40021000
 80047e4:	0800b5f8 	.word	0x0800b5f8
 80047e8:	20000000 	.word	0x20000000
 80047ec:	20000004 	.word	0x20000004

080047f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fe:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004808:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x34>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d121      	bne.n	8004862 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d11e      	bne.n	8004862 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004824:	4b34      	ldr	r3, [pc, #208]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004830:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	e005      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004840:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800484c:	4a2b      	ldr	r2, [pc, #172]	; (80048fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004854:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10d      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004860:	e00a      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d102      	bne.n	800486e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <HAL_RCC_GetSysClockFreq+0x110>)
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	e004      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d101      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004874:	4b23      	ldr	r3, [pc, #140]	; (8004904 <HAL_RCC_GetSysClockFreq+0x114>)
 8004876:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d134      	bne.n	80048e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0xa6>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d003      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0xac>
 8004894:	e005      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <HAL_RCC_GetSysClockFreq+0x110>)
 8004898:	617b      	str	r3, [r7, #20]
      break;
 800489a:	e005      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_RCC_GetSysClockFreq+0x114>)
 800489e:	617b      	str	r3, [r7, #20]
      break;
 80048a0:	e002      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	617b      	str	r3, [r7, #20]
      break;
 80048a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	3301      	adds	r3, #1
 80048b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	fb03 f202 	mul.w	r2, r3, r2
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	0e5b      	lsrs	r3, r3, #25
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	3301      	adds	r3, #1
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048e8:	69bb      	ldr	r3, [r7, #24]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3724      	adds	r7, #36	; 0x24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	0800b610 	.word	0x0800b610
 8004900:	00f42400 	.word	0x00f42400
 8004904:	007a1200 	.word	0x007a1200

08004908 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_RCC_GetHCLKFreq+0x14>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000000 	.word	0x20000000

08004920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004924:	f7ff fff0 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4904      	ldr	r1, [pc, #16]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	0800b608 	.word	0x0800b608

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004950:	f7ff ffda 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0adb      	lsrs	r3, r3, #11
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4904      	ldr	r1, [pc, #16]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000
 8004974:	0800b608 	.word	0x0800b608

08004978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004984:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004990:	f7ff fa00 	bl	8003d94 <HAL_PWREx_GetVoltageRange>
 8004994:	6178      	str	r0, [r7, #20]
 8004996:	e014      	b.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004998:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	4a24      	ldr	r2, [pc, #144]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a2:	6593      	str	r3, [r2, #88]	; 0x58
 80049a4:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049b0:	f7ff f9f0 	bl	8003d94 <HAL_PWREx_GetVoltageRange>
 80049b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049b6:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d10b      	bne.n	80049e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b80      	cmp	r3, #128	; 0x80
 80049ce:	d919      	bls.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2ba0      	cmp	r3, #160	; 0xa0
 80049d4:	d902      	bls.n	80049dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049d6:	2302      	movs	r3, #2
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	e013      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049dc:	2301      	movs	r3, #1
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e010      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d902      	bls.n	80049ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049e8:	2303      	movs	r3, #3
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	e00a      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d102      	bne.n	80049fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049f4:	2302      	movs	r3, #2
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	e004      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b70      	cmp	r3, #112	; 0x70
 80049fe:	d101      	bne.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a00:	2301      	movs	r3, #1
 8004a02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 0207 	bic.w	r2, r3, #7
 8004a0c:	4909      	ldr	r1, [pc, #36]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a14:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d001      	beq.n	8004a26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40022000 	.word	0x40022000

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a40:	2300      	movs	r3, #0
 8004a42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a44:	2300      	movs	r3, #0
 8004a46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d041      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a5c:	d02a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a62:	d824      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a68:	d008      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a6e:	d81e      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a78:	d010      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a7a:	e018      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a7c:	4b86      	ldr	r3, [pc, #536]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a85      	ldr	r2, [pc, #532]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a88:	e015      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fabb 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a9a:	e00c      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3320      	adds	r3, #32
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fba6 	bl	80051f4 <RCCEx_PLLSAI2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aac:	e003      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004abc:	4b76      	ldr	r3, [pc, #472]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aca:	4973      	ldr	r1, [pc, #460]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ad2:	e001      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d041      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aec:	d02a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004aee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004af2:	d824      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af8:	d008      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004afe:	d81e      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b08:	d010      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b0a:	e018      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b0c:	4b62      	ldr	r3, [pc, #392]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a61      	ldr	r2, [pc, #388]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b18:	e015      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fa73 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b2a:	e00c      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3320      	adds	r3, #32
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fb5e 	bl	80051f4 <RCCEx_PLLSAI2_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b3c:	e003      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	74fb      	strb	r3, [r7, #19]
      break;
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b4c:	4b52      	ldr	r3, [pc, #328]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b5a:	494f      	ldr	r1, [pc, #316]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b62:	e001      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80a0 	beq.w	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b7a:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	4a40      	ldr	r2, [pc, #256]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9c:	4b3e      	ldr	r3, [pc, #248]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bac:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3a      	ldr	r2, [pc, #232]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bb8:	f7fd fa48 	bl	800204c <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bbe:	e009      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc0:	f7fd fa44 	bl	800204c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	74fb      	strb	r3, [r7, #19]
        break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bd4:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ef      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d15c      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01f      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d019      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	4a20      	ldr	r2, [pc, #128]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c30:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fd fa03 	bl	800204c <HAL_GetTick>
 8004c46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c48:	e00b      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fd f9ff 	bl	800204c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d902      	bls.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004c60:	e006      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ec      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c86:	4904      	ldr	r1, [pc, #16]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c8e:	e009      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	74bb      	strb	r3, [r7, #18]
 8004c94:	e006      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca4:	7c7b      	ldrb	r3, [r7, #17]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d105      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004caa:	4b9e      	ldr	r3, [pc, #632]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	4a9d      	ldr	r2, [pc, #628]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc2:	4b98      	ldr	r3, [pc, #608]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	f023 0203 	bic.w	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	4994      	ldr	r1, [pc, #592]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 020c 	bic.w	r2, r3, #12
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	498c      	ldr	r1, [pc, #560]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d06:	4b87      	ldr	r3, [pc, #540]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	4983      	ldr	r1, [pc, #524]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d28:	4b7e      	ldr	r3, [pc, #504]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	497b      	ldr	r1, [pc, #492]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d4a:	4b76      	ldr	r3, [pc, #472]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d58:	4972      	ldr	r1, [pc, #456]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d6c:	4b6d      	ldr	r3, [pc, #436]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7a:	496a      	ldr	r1, [pc, #424]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d8e:	4b65      	ldr	r3, [pc, #404]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	4961      	ldr	r1, [pc, #388]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004db0:	4b5c      	ldr	r3, [pc, #368]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	4959      	ldr	r1, [pc, #356]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd2:	4b54      	ldr	r3, [pc, #336]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	4950      	ldr	r1, [pc, #320]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004df4:	4b4b      	ldr	r3, [pc, #300]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	4948      	ldr	r1, [pc, #288]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e16:	4b43      	ldr	r3, [pc, #268]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	493f      	ldr	r1, [pc, #252]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d028      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e38:	4b3a      	ldr	r3, [pc, #232]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e46:	4937      	ldr	r1, [pc, #220]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e56:	d106      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e58:	4b32      	ldr	r3, [pc, #200]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a31      	ldr	r2, [pc, #196]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e62:	60d3      	str	r3, [r2, #12]
 8004e64:	e011      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	2101      	movs	r1, #1
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f8c8 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d028      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e96:	4b23      	ldr	r3, [pc, #140]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	491f      	ldr	r1, [pc, #124]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb6:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	4a1a      	ldr	r2, [pc, #104]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec0:	60d3      	str	r3, [r2, #12]
 8004ec2:	e011      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f899 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f02:	4908      	ldr	r1, [pc, #32]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f12:	d109      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a02      	ldr	r2, [pc, #8]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1e:	60d3      	str	r3, [r2, #12]
 8004f20:	e014      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2101      	movs	r1, #1
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f867 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02f      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f66:	4928      	ldr	r1, [pc, #160]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f76:	d10d      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f844 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d014      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	74bb      	strb	r3, [r7, #18]
 8004f92:	e011      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3320      	adds	r3, #32
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f925 	bl	80051f4 <RCCEx_PLLSAI2_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fc4:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd2:	490d      	ldr	r1, [pc, #52]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff6:	4904      	ldr	r1, [pc, #16]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ffe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000

0800500c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800501a:	4b75      	ldr	r3, [pc, #468]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d018      	beq.n	8005058 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005026:	4b72      	ldr	r3, [pc, #456]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0203 	and.w	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d10d      	bne.n	8005052 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
       ||
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800503e:	4b6c      	ldr	r3, [pc, #432]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
       ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d047      	beq.n	80050e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	e044      	b.n	80050e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d018      	beq.n	8005092 <RCCEx_PLLSAI1_Config+0x86>
 8005060:	2b03      	cmp	r3, #3
 8005062:	d825      	bhi.n	80050b0 <RCCEx_PLLSAI1_Config+0xa4>
 8005064:	2b01      	cmp	r3, #1
 8005066:	d002      	beq.n	800506e <RCCEx_PLLSAI1_Config+0x62>
 8005068:	2b02      	cmp	r3, #2
 800506a:	d009      	beq.n	8005080 <RCCEx_PLLSAI1_Config+0x74>
 800506c:	e020      	b.n	80050b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800506e:	4b60      	ldr	r3, [pc, #384]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11d      	bne.n	80050b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800507e:	e01a      	b.n	80050b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005080:	4b5b      	ldr	r3, [pc, #364]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005088:	2b00      	cmp	r3, #0
 800508a:	d116      	bne.n	80050ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005090:	e013      	b.n	80050ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005092:	4b57      	ldr	r3, [pc, #348]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10f      	bne.n	80050be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800509e:	4b54      	ldr	r3, [pc, #336]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ae:	e006      	b.n	80050be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e004      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050b6:	bf00      	nop
 80050b8:	e002      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ba:	bf00      	nop
 80050bc:	e000      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050be:	bf00      	nop
    }

    if(status == HAL_OK)
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050c6:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	430b      	orrs	r3, r1
 80050dc:	4944      	ldr	r1, [pc, #272]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d17d      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050e8:	4b41      	ldr	r3, [pc, #260]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a40      	ldr	r2, [pc, #256]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f4:	f7fc ffaa 	bl	800204c <HAL_GetTick>
 80050f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050fa:	e009      	b.n	8005110 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050fc:	f7fc ffa6 	bl	800204c <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d902      	bls.n	8005110 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	73fb      	strb	r3, [r7, #15]
        break;
 800510e:	e005      	b.n	800511c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005110:	4b37      	ldr	r3, [pc, #220]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ef      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d160      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d111      	bne.n	800514c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6892      	ldr	r2, [r2, #8]
 8005138:	0211      	lsls	r1, r2, #8
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68d2      	ldr	r2, [r2, #12]
 800513e:	0912      	lsrs	r2, r2, #4
 8005140:	0452      	lsls	r2, r2, #17
 8005142:	430a      	orrs	r2, r1
 8005144:	492a      	ldr	r1, [pc, #168]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	610b      	str	r3, [r1, #16]
 800514a:	e027      	b.n	800519c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d112      	bne.n	8005178 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005152:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800515a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6892      	ldr	r2, [r2, #8]
 8005162:	0211      	lsls	r1, r2, #8
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6912      	ldr	r2, [r2, #16]
 8005168:	0852      	lsrs	r2, r2, #1
 800516a:	3a01      	subs	r2, #1
 800516c:	0552      	lsls	r2, r2, #21
 800516e:	430a      	orrs	r2, r1
 8005170:	491f      	ldr	r1, [pc, #124]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005172:	4313      	orrs	r3, r2
 8005174:	610b      	str	r3, [r1, #16]
 8005176:	e011      	b.n	800519c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6892      	ldr	r2, [r2, #8]
 8005188:	0211      	lsls	r1, r2, #8
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6952      	ldr	r2, [r2, #20]
 800518e:	0852      	lsrs	r2, r2, #1
 8005190:	3a01      	subs	r2, #1
 8005192:	0652      	lsls	r2, r2, #25
 8005194:	430a      	orrs	r2, r1
 8005196:	4916      	ldr	r1, [pc, #88]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005198:	4313      	orrs	r3, r2
 800519a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a8:	f7fc ff50 	bl	800204c <HAL_GetTick>
 80051ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ae:	e009      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b0:	f7fc ff4c 	bl	800204c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d902      	bls.n	80051c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	73fb      	strb	r3, [r7, #15]
          break;
 80051c2:	e005      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ef      	beq.n	80051b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	4904      	ldr	r1, [pc, #16]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000

080051f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005202:	4b6a      	ldr	r3, [pc, #424]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d018      	beq.n	8005240 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800520e:	4b67      	ldr	r3, [pc, #412]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0203 	and.w	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d10d      	bne.n	800523a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
       ||
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005226:	4b61      	ldr	r3, [pc, #388]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
       ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d047      	beq.n	80052ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
 800523e:	e044      	b.n	80052ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d018      	beq.n	800527a <RCCEx_PLLSAI2_Config+0x86>
 8005248:	2b03      	cmp	r3, #3
 800524a:	d825      	bhi.n	8005298 <RCCEx_PLLSAI2_Config+0xa4>
 800524c:	2b01      	cmp	r3, #1
 800524e:	d002      	beq.n	8005256 <RCCEx_PLLSAI2_Config+0x62>
 8005250:	2b02      	cmp	r3, #2
 8005252:	d009      	beq.n	8005268 <RCCEx_PLLSAI2_Config+0x74>
 8005254:	e020      	b.n	8005298 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005256:	4b55      	ldr	r3, [pc, #340]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11d      	bne.n	800529e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005266:	e01a      	b.n	800529e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005268:	4b50      	ldr	r3, [pc, #320]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d116      	bne.n	80052a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005278:	e013      	b.n	80052a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800527a:	4b4c      	ldr	r3, [pc, #304]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005286:	4b49      	ldr	r3, [pc, #292]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005296:	e006      	b.n	80052a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      break;
 800529c:	e004      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800529e:	bf00      	nop
 80052a0:	e002      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10d      	bne.n	80052ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052ae:	4b3f      	ldr	r3, [pc, #252]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6819      	ldr	r1, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	3b01      	subs	r3, #1
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	430b      	orrs	r3, r1
 80052c4:	4939      	ldr	r1, [pc, #228]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d167      	bne.n	80053a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052d0:	4b36      	ldr	r3, [pc, #216]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a35      	ldr	r2, [pc, #212]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052dc:	f7fc feb6 	bl	800204c <HAL_GetTick>
 80052e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052e2:	e009      	b.n	80052f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052e4:	f7fc feb2 	bl	800204c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d902      	bls.n	80052f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	73fb      	strb	r3, [r7, #15]
        break;
 80052f6:	e005      	b.n	8005304 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052f8:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1ef      	bne.n	80052e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d14a      	bne.n	80053a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d111      	bne.n	8005334 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005310:	4b26      	ldr	r3, [pc, #152]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6892      	ldr	r2, [r2, #8]
 8005320:	0211      	lsls	r1, r2, #8
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	0912      	lsrs	r2, r2, #4
 8005328:	0452      	lsls	r2, r2, #17
 800532a:	430a      	orrs	r2, r1
 800532c:	491f      	ldr	r1, [pc, #124]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800532e:	4313      	orrs	r3, r2
 8005330:	614b      	str	r3, [r1, #20]
 8005332:	e011      	b.n	8005358 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800533c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	0211      	lsls	r1, r2, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6912      	ldr	r2, [r2, #16]
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	3a01      	subs	r2, #1
 800534e:	0652      	lsls	r2, r2, #25
 8005350:	430a      	orrs	r2, r1
 8005352:	4916      	ldr	r1, [pc, #88]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005354:	4313      	orrs	r3, r2
 8005356:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005358:	4b14      	ldr	r3, [pc, #80]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a13      	ldr	r2, [pc, #76]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800535e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005362:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fc fe72 	bl	800204c <HAL_GetTick>
 8005368:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800536a:	e009      	b.n	8005380 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800536c:	f7fc fe6e 	bl	800204c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d902      	bls.n	8005380 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	73fb      	strb	r3, [r7, #15]
          break;
 800537e:	e005      	b.n	800538c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ef      	beq.n	800536c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4904      	ldr	r1, [pc, #16]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800539c:	4313      	orrs	r3, r2
 800539e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000

080053b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e095      	b.n	80054ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d2:	d009      	beq.n	80053e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
 80053da:	e005      	b.n	80053e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fc fae0 	bl	80019c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005428:	d902      	bls.n	8005430 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e002      	b.n	8005436 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005434:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800543e:	d007      	beq.n	8005450 <HAL_SPI_Init+0xa0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005448:	d002      	beq.n	8005450 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	ea42 0103 	orr.w	r1, r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	0c1b      	lsrs	r3, r3, #16
 80054ac:	f003 0204 	and.w	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054cc:	ea42 0103 	orr.w	r1, r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e049      	b.n	800559c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fc fab5 	bl	8001a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2202      	movs	r2, #2
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3304      	adds	r3, #4
 8005532:	4619      	mov	r1, r3
 8005534:	4610      	mov	r0, r2
 8005536:	f000 fb25 	bl	8005b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e047      	b.n	800564c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a23      	ldr	r2, [pc, #140]	; (8005658 <HAL_TIM_Base_Start+0xb4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <HAL_TIM_Base_Start+0x66>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d018      	beq.n	800560a <HAL_TIM_Base_Start+0x66>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1f      	ldr	r2, [pc, #124]	; (800565c <HAL_TIM_Base_Start+0xb8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_TIM_Base_Start+0x66>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1e      	ldr	r2, [pc, #120]	; (8005660 <HAL_TIM_Base_Start+0xbc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_TIM_Base_Start+0x66>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1c      	ldr	r2, [pc, #112]	; (8005664 <HAL_TIM_Base_Start+0xc0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_TIM_Base_Start+0x66>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_TIM_Base_Start+0xc4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_TIM_Base_Start+0x66>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a19      	ldr	r2, [pc, #100]	; (800566c <HAL_TIM_Base_Start+0xc8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d115      	bne.n	8005636 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	4b17      	ldr	r3, [pc, #92]	; (8005670 <HAL_TIM_Base_Start+0xcc>)
 8005612:	4013      	ands	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b06      	cmp	r3, #6
 800561a:	d015      	beq.n	8005648 <HAL_TIM_Base_Start+0xa4>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005622:	d011      	beq.n	8005648 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005634:	e008      	b.n	8005648 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e000      	b.n	800564a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005648:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40013400 	.word	0x40013400
 800566c:	40014000 	.word	0x40014000
 8005670:	00010007 	.word	0x00010007

08005674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d001      	beq.n	800568c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e04f      	b.n	800572c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a23      	ldr	r2, [pc, #140]	; (8005738 <HAL_TIM_Base_Start_IT+0xc4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x76>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b6:	d018      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x76>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1f      	ldr	r2, [pc, #124]	; (800573c <HAL_TIM_Base_Start_IT+0xc8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x76>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <HAL_TIM_Base_Start_IT+0xcc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x76>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_TIM_Base_Start_IT+0xd0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x76>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <HAL_TIM_Base_Start_IT+0xd4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x76>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_TIM_Base_Start_IT+0xd8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d115      	bne.n	8005716 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	4b17      	ldr	r3, [pc, #92]	; (8005750 <HAL_TIM_Base_Start_IT+0xdc>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b06      	cmp	r3, #6
 80056fa:	d015      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0xb4>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005702:	d011      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	e008      	b.n	8005728 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e000      	b.n	800572a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40014000 	.word	0x40014000
 8005750:	00010007 	.word	0x00010007

08005754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b02      	cmp	r3, #2
 8005768:	d122      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b02      	cmp	r3, #2
 8005776:	d11b      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0202 	mvn.w	r2, #2
 8005780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f9d5 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9c7 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f9d8 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d122      	bne.n	8005804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d11b      	bne.n	8005804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0204 	mvn.w	r2, #4
 80057d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9ab 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f99d 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f9ae 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b08      	cmp	r3, #8
 8005810:	d122      	bne.n	8005858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d11b      	bne.n	8005858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0208 	mvn.w	r2, #8
 8005828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2204      	movs	r2, #4
 800582e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f981 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f973 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f984 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b10      	cmp	r3, #16
 8005864:	d122      	bne.n	80058ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b10      	cmp	r3, #16
 8005872:	d11b      	bne.n	80058ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0210 	mvn.w	r2, #16
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2208      	movs	r2, #8
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f957 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f949 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f95a 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10e      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d107      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0201 	mvn.w	r2, #1
 80058d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f923 	bl	8005b1e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d10e      	bne.n	8005904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d107      	bne.n	8005904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fb06 	bl	8005f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	d10e      	bne.n	8005932 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d107      	bne.n	8005932 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 faf9 	bl	8005f24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d10e      	bne.n	800595e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d107      	bne.n	800595e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f908 	bl	8005b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b20      	cmp	r3, #32
 800596a:	d10e      	bne.n	800598a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b20      	cmp	r3, #32
 8005978:	d107      	bne.n	800598a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f06f 0220 	mvn.w	r2, #32
 8005982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fab9 	bl	8005efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_TIM_ConfigClockSource+0x18>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e0b5      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x184>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e6:	d03e      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0xd4>
 80059e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ec:	f200 8087 	bhi.w	8005afe <HAL_TIM_ConfigClockSource+0x16c>
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	f000 8085 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x170>
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fc:	d87f      	bhi.n	8005afe <HAL_TIM_ConfigClockSource+0x16c>
 80059fe:	2b70      	cmp	r3, #112	; 0x70
 8005a00:	d01a      	beq.n	8005a38 <HAL_TIM_ConfigClockSource+0xa6>
 8005a02:	2b70      	cmp	r3, #112	; 0x70
 8005a04:	d87b      	bhi.n	8005afe <HAL_TIM_ConfigClockSource+0x16c>
 8005a06:	2b60      	cmp	r3, #96	; 0x60
 8005a08:	d050      	beq.n	8005aac <HAL_TIM_ConfigClockSource+0x11a>
 8005a0a:	2b60      	cmp	r3, #96	; 0x60
 8005a0c:	d877      	bhi.n	8005afe <HAL_TIM_ConfigClockSource+0x16c>
 8005a0e:	2b50      	cmp	r3, #80	; 0x50
 8005a10:	d03c      	beq.n	8005a8c <HAL_TIM_ConfigClockSource+0xfa>
 8005a12:	2b50      	cmp	r3, #80	; 0x50
 8005a14:	d873      	bhi.n	8005afe <HAL_TIM_ConfigClockSource+0x16c>
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d058      	beq.n	8005acc <HAL_TIM_ConfigClockSource+0x13a>
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d86f      	bhi.n	8005afe <HAL_TIM_ConfigClockSource+0x16c>
 8005a1e:	2b30      	cmp	r3, #48	; 0x30
 8005a20:	d064      	beq.n	8005aec <HAL_TIM_ConfigClockSource+0x15a>
 8005a22:	2b30      	cmp	r3, #48	; 0x30
 8005a24:	d86b      	bhi.n	8005afe <HAL_TIM_ConfigClockSource+0x16c>
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d060      	beq.n	8005aec <HAL_TIM_ConfigClockSource+0x15a>
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d867      	bhi.n	8005afe <HAL_TIM_ConfigClockSource+0x16c>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d05c      	beq.n	8005aec <HAL_TIM_ConfigClockSource+0x15a>
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d05a      	beq.n	8005aec <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a36:	e062      	b.n	8005afe <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6899      	ldr	r1, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f000 f9b0 	bl	8005dac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	609a      	str	r2, [r3, #8]
      break;
 8005a64:	e04e      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6899      	ldr	r1, [r3, #8]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f000 f999 	bl	8005dac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a88:	609a      	str	r2, [r3, #8]
      break;
 8005a8a:	e03b      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6859      	ldr	r1, [r3, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f000 f90d 	bl	8005cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2150      	movs	r1, #80	; 0x50
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 f966 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 8005aaa:	e02b      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6859      	ldr	r1, [r3, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f000 f92c 	bl	8005d16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2160      	movs	r1, #96	; 0x60
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 f956 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 8005aca:	e01b      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6859      	ldr	r1, [r3, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f000 f8ed 	bl	8005cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2140      	movs	r1, #64	; 0x40
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f946 	bl	8005d76 <TIM_ITRx_SetConfig>
      break;
 8005aea:	e00b      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f000 f93d 	bl	8005d76 <TIM_ITRx_SetConfig>
        break;
 8005afc:	e002      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a40      	ldr	r2, [pc, #256]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba2:	d00f      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3d      	ldr	r2, [pc, #244]	; (8005c9c <TIM_Base_SetConfig+0x118>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3c      	ldr	r2, [pc, #240]	; (8005ca0 <TIM_Base_SetConfig+0x11c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3b      	ldr	r2, [pc, #236]	; (8005ca4 <TIM_Base_SetConfig+0x120>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3a      	ldr	r2, [pc, #232]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d108      	bne.n	8005bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2f      	ldr	r2, [pc, #188]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01f      	beq.n	8005c1e <TIM_Base_SetConfig+0x9a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d01b      	beq.n	8005c1e <TIM_Base_SetConfig+0x9a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2c      	ldr	r2, [pc, #176]	; (8005c9c <TIM_Base_SetConfig+0x118>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d017      	beq.n	8005c1e <TIM_Base_SetConfig+0x9a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <TIM_Base_SetConfig+0x11c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <TIM_Base_SetConfig+0x9a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <TIM_Base_SetConfig+0x120>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00f      	beq.n	8005c1e <TIM_Base_SetConfig+0x9a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <TIM_Base_SetConfig+0x9a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <TIM_Base_SetConfig+0x128>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <TIM_Base_SetConfig+0x9a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a27      	ldr	r2, [pc, #156]	; (8005cb0 <TIM_Base_SetConfig+0x12c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_Base_SetConfig+0x9a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <TIM_Base_SetConfig+0x130>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d108      	bne.n	8005c30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00f      	beq.n	8005c7c <TIM_Base_SetConfig+0xf8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a12      	ldr	r2, [pc, #72]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <TIM_Base_SetConfig+0xf8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a11      	ldr	r2, [pc, #68]	; (8005cac <TIM_Base_SetConfig+0x128>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d007      	beq.n	8005c7c <TIM_Base_SetConfig+0xf8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a10      	ldr	r2, [pc, #64]	; (8005cb0 <TIM_Base_SetConfig+0x12c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0xf8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a0f      	ldr	r2, [pc, #60]	; (8005cb4 <TIM_Base_SetConfig+0x130>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d103      	bne.n	8005c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	615a      	str	r2, [r3, #20]
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800

08005cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f023 0201 	bic.w	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 030a 	bic.w	r3, r3, #10
 8005cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0210 	bic.w	r2, r3, #16
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	031b      	lsls	r3, r3, #12
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f043 0307 	orr.w	r3, r3, #7
 8005d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	609a      	str	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	609a      	str	r2, [r3, #8]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e068      	b.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2e      	ldr	r2, [pc, #184]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2d      	ldr	r2, [pc, #180]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01d      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e76:	d018      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1a      	ldr	r2, [pc, #104]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00e      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a13      	ldr	r2, [pc, #76]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d004      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a14      	ldr	r2, [pc, #80]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40013400 	.word	0x40013400
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40000c00 	.word	0x40000c00
 8005ef8:	40014000 	.word	0x40014000

08005efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e040      	b.n	8005fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fb fdce 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa1a 	bl	80063b0 <UART_SetConfig>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e022      	b.n	8005fcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fcc8 	bl	8006924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fd4f 	bl	8006a68 <UART_CheckIdleState>
 8005fca:	4603      	mov	r3, r0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	f040 8081 	bne.w	80060f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_UART_Transmit+0x26>
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e079      	b.n	80060f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_UART_Transmit+0x38>
 8006008:	2302      	movs	r3, #2
 800600a:	e072      	b.n	80060f2 <HAL_UART_Transmit+0x11e>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2221      	movs	r2, #33	; 0x21
 800601e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006020:	f7fc f814 	bl	800204c <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	88fa      	ldrh	r2, [r7, #6]
 8006032:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603e:	d108      	bne.n	8006052 <HAL_UART_Transmit+0x7e>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e003      	b.n	800605a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006062:	e02d      	b.n	80060c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fd3f 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e039      	b.n	80060f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	881a      	ldrh	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006090:	b292      	uxth	r2, r2
 8006092:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	3302      	adds	r3, #2
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	e008      	b.n	80060ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	781a      	ldrb	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	b292      	uxth	r2, r2
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	3301      	adds	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1cb      	bne.n	8006064 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2200      	movs	r2, #0
 80060d4:	2140      	movs	r1, #64	; 0x40
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fd0b 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e005      	b.n	80060f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006122:	4013      	ands	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d113      	bne.n	8006154 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8113 	beq.w	8006370 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
      }
      return;
 8006152:	e10d      	b.n	8006370 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80d6 	beq.w	8006308 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4b85      	ldr	r3, [pc, #532]	; (8006380 <HAL_UART_IRQHandler+0x284>)
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 80cb 	beq.w	8006308 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00e      	beq.n	800619a <HAL_UART_IRQHandler+0x9e>
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2201      	movs	r2, #1
 800618c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006192:	f043 0201 	orr.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00e      	beq.n	80061c2 <HAL_UART_IRQHandler+0xc6>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2202      	movs	r2, #2
 80061b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ba:	f043 0204 	orr.w	r2, r3, #4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <HAL_UART_IRQHandler+0xee>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2204      	movs	r2, #4
 80061dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e2:	f043 0202 	orr.w	r2, r3, #2
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006204:	2b00      	cmp	r3, #0
 8006206:	d009      	beq.n	800621c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2208      	movs	r2, #8
 800620e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006214:	f043 0208 	orr.w	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <HAL_UART_IRQHandler+0x14a>
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8092 	beq.w	8006374 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006278:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d004      	beq.n	8006292 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800628e:	2b00      	cmp	r3, #0
 8006290:	d031      	beq.n	80062f6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fca8 	bl	8006be8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d123      	bne.n	80062ee <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d013      	beq.n	80062e6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c2:	4a30      	ldr	r2, [pc, #192]	; (8006384 <HAL_UART_IRQHandler+0x288>)
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fd fa98 	bl	8003800 <HAL_DMA_Abort_IT>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e4:	e00e      	b.n	8006304 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f858 	bl	800639c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	e00a      	b.n	8006304 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f854 	bl	800639c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	e006      	b.n	8006304 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f850 	bl	800639c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006302:	e037      	b.n	8006374 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	bf00      	nop
    return;
 8006306:	e035      	b.n	8006374 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <HAL_UART_IRQHandler+0x232>
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fcad 	bl	8006c86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800632c:	e025      	b.n	800637a <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	2b00      	cmp	r3, #0
 8006340:	d008      	beq.n	8006354 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
    }
    return;
 8006352:	e011      	b.n	8006378 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <HAL_UART_IRQHandler+0x27e>
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc73 	bl	8006c54 <UART_EndTransmit_IT>
    return;
 800636e:	e004      	b.n	800637a <HAL_UART_IRQHandler+0x27e>
      return;
 8006370:	bf00      	nop
 8006372:	e002      	b.n	800637a <HAL_UART_IRQHandler+0x27e>
    return;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <HAL_UART_IRQHandler+0x27e>
    return;
 8006378:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	04000120 	.word	0x04000120
 8006384:	08006c29 	.word	0x08006c29

08006388 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063b4:	b08a      	sub	sp, #40	; 0x28
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4ba4      	ldr	r3, [pc, #656]	; (8006670 <UART_SetConfig+0x2c0>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a99      	ldr	r2, [pc, #612]	; (8006674 <UART_SetConfig+0x2c4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006418:	4313      	orrs	r3, r2
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642c:	430a      	orrs	r2, r1
 800642e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a90      	ldr	r2, [pc, #576]	; (8006678 <UART_SetConfig+0x2c8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d126      	bne.n	8006488 <UART_SetConfig+0xd8>
 800643a:	4b90      	ldr	r3, [pc, #576]	; (800667c <UART_SetConfig+0x2cc>)
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	2b03      	cmp	r3, #3
 8006446:	d81b      	bhi.n	8006480 <UART_SetConfig+0xd0>
 8006448:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <UART_SetConfig+0xa0>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006461 	.word	0x08006461
 8006454:	08006471 	.word	0x08006471
 8006458:	08006469 	.word	0x08006469
 800645c:	08006479 	.word	0x08006479
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006466:	e116      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006468:	2302      	movs	r3, #2
 800646a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646e:	e112      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006470:	2304      	movs	r3, #4
 8006472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006476:	e10e      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006478:	2308      	movs	r3, #8
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800647e:	e10a      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006480:	2310      	movs	r3, #16
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006486:	e106      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a7c      	ldr	r2, [pc, #496]	; (8006680 <UART_SetConfig+0x2d0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d138      	bne.n	8006504 <UART_SetConfig+0x154>
 8006492:	4b7a      	ldr	r3, [pc, #488]	; (800667c <UART_SetConfig+0x2cc>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006498:	f003 030c 	and.w	r3, r3, #12
 800649c:	2b0c      	cmp	r3, #12
 800649e:	d82d      	bhi.n	80064fc <UART_SetConfig+0x14c>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <UART_SetConfig+0xf8>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080064fd 	.word	0x080064fd
 80064b0:	080064fd 	.word	0x080064fd
 80064b4:	080064fd 	.word	0x080064fd
 80064b8:	080064ed 	.word	0x080064ed
 80064bc:	080064fd 	.word	0x080064fd
 80064c0:	080064fd 	.word	0x080064fd
 80064c4:	080064fd 	.word	0x080064fd
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064fd 	.word	0x080064fd
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	080064f5 	.word	0x080064f5
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e2:	e0d8      	b.n	8006696 <UART_SetConfig+0x2e6>
 80064e4:	2302      	movs	r3, #2
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ea:	e0d4      	b.n	8006696 <UART_SetConfig+0x2e6>
 80064ec:	2304      	movs	r3, #4
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064f2:	e0d0      	b.n	8006696 <UART_SetConfig+0x2e6>
 80064f4:	2308      	movs	r3, #8
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064fa:	e0cc      	b.n	8006696 <UART_SetConfig+0x2e6>
 80064fc:	2310      	movs	r3, #16
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006502:	e0c8      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a5e      	ldr	r2, [pc, #376]	; (8006684 <UART_SetConfig+0x2d4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d125      	bne.n	800655a <UART_SetConfig+0x1aa>
 800650e:	4b5b      	ldr	r3, [pc, #364]	; (800667c <UART_SetConfig+0x2cc>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006514:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006518:	2b30      	cmp	r3, #48	; 0x30
 800651a:	d016      	beq.n	800654a <UART_SetConfig+0x19a>
 800651c:	2b30      	cmp	r3, #48	; 0x30
 800651e:	d818      	bhi.n	8006552 <UART_SetConfig+0x1a2>
 8006520:	2b20      	cmp	r3, #32
 8006522:	d00a      	beq.n	800653a <UART_SetConfig+0x18a>
 8006524:	2b20      	cmp	r3, #32
 8006526:	d814      	bhi.n	8006552 <UART_SetConfig+0x1a2>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <UART_SetConfig+0x182>
 800652c:	2b10      	cmp	r3, #16
 800652e:	d008      	beq.n	8006542 <UART_SetConfig+0x192>
 8006530:	e00f      	b.n	8006552 <UART_SetConfig+0x1a2>
 8006532:	2300      	movs	r3, #0
 8006534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006538:	e0ad      	b.n	8006696 <UART_SetConfig+0x2e6>
 800653a:	2302      	movs	r3, #2
 800653c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006540:	e0a9      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006542:	2304      	movs	r3, #4
 8006544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006548:	e0a5      	b.n	8006696 <UART_SetConfig+0x2e6>
 800654a:	2308      	movs	r3, #8
 800654c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006550:	e0a1      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006552:	2310      	movs	r3, #16
 8006554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006558:	e09d      	b.n	8006696 <UART_SetConfig+0x2e6>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a4a      	ldr	r2, [pc, #296]	; (8006688 <UART_SetConfig+0x2d8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d125      	bne.n	80065b0 <UART_SetConfig+0x200>
 8006564:	4b45      	ldr	r3, [pc, #276]	; (800667c <UART_SetConfig+0x2cc>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800656e:	2bc0      	cmp	r3, #192	; 0xc0
 8006570:	d016      	beq.n	80065a0 <UART_SetConfig+0x1f0>
 8006572:	2bc0      	cmp	r3, #192	; 0xc0
 8006574:	d818      	bhi.n	80065a8 <UART_SetConfig+0x1f8>
 8006576:	2b80      	cmp	r3, #128	; 0x80
 8006578:	d00a      	beq.n	8006590 <UART_SetConfig+0x1e0>
 800657a:	2b80      	cmp	r3, #128	; 0x80
 800657c:	d814      	bhi.n	80065a8 <UART_SetConfig+0x1f8>
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <UART_SetConfig+0x1d8>
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d008      	beq.n	8006598 <UART_SetConfig+0x1e8>
 8006586:	e00f      	b.n	80065a8 <UART_SetConfig+0x1f8>
 8006588:	2300      	movs	r3, #0
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800658e:	e082      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006590:	2302      	movs	r3, #2
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006596:	e07e      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659e:	e07a      	b.n	8006696 <UART_SetConfig+0x2e6>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a6:	e076      	b.n	8006696 <UART_SetConfig+0x2e6>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ae:	e072      	b.n	8006696 <UART_SetConfig+0x2e6>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a35      	ldr	r2, [pc, #212]	; (800668c <UART_SetConfig+0x2dc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d12a      	bne.n	8006610 <UART_SetConfig+0x260>
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <UART_SetConfig+0x2cc>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c8:	d01a      	beq.n	8006600 <UART_SetConfig+0x250>
 80065ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ce:	d81b      	bhi.n	8006608 <UART_SetConfig+0x258>
 80065d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d4:	d00c      	beq.n	80065f0 <UART_SetConfig+0x240>
 80065d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065da:	d815      	bhi.n	8006608 <UART_SetConfig+0x258>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <UART_SetConfig+0x238>
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e4:	d008      	beq.n	80065f8 <UART_SetConfig+0x248>
 80065e6:	e00f      	b.n	8006608 <UART_SetConfig+0x258>
 80065e8:	2300      	movs	r3, #0
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ee:	e052      	b.n	8006696 <UART_SetConfig+0x2e6>
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f6:	e04e      	b.n	8006696 <UART_SetConfig+0x2e6>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065fe:	e04a      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006606:	e046      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660e:	e042      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a17      	ldr	r2, [pc, #92]	; (8006674 <UART_SetConfig+0x2c4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d13a      	bne.n	8006690 <UART_SetConfig+0x2e0>
 800661a:	4b18      	ldr	r3, [pc, #96]	; (800667c <UART_SetConfig+0x2cc>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006620:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006624:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006628:	d01a      	beq.n	8006660 <UART_SetConfig+0x2b0>
 800662a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800662e:	d81b      	bhi.n	8006668 <UART_SetConfig+0x2b8>
 8006630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006634:	d00c      	beq.n	8006650 <UART_SetConfig+0x2a0>
 8006636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663a:	d815      	bhi.n	8006668 <UART_SetConfig+0x2b8>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <UART_SetConfig+0x298>
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	d008      	beq.n	8006658 <UART_SetConfig+0x2a8>
 8006646:	e00f      	b.n	8006668 <UART_SetConfig+0x2b8>
 8006648:	2300      	movs	r3, #0
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664e:	e022      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006650:	2302      	movs	r3, #2
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006656:	e01e      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665e:	e01a      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	e016      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666e:	e012      	b.n	8006696 <UART_SetConfig+0x2e6>
 8006670:	efff69f3 	.word	0xefff69f3
 8006674:	40008000 	.word	0x40008000
 8006678:	40013800 	.word	0x40013800
 800667c:	40021000 	.word	0x40021000
 8006680:	40004400 	.word	0x40004400
 8006684:	40004800 	.word	0x40004800
 8006688:	40004c00 	.word	0x40004c00
 800668c:	40005000 	.word	0x40005000
 8006690:	2310      	movs	r3, #16
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4aa0      	ldr	r2, [pc, #640]	; (800691c <UART_SetConfig+0x56c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d17a      	bne.n	8006796 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d824      	bhi.n	80066f2 <UART_SetConfig+0x342>
 80066a8:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x300>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066f3 	.word	0x080066f3
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066f3 	.word	0x080066f3
 80066c0:	080066e3 	.word	0x080066e3
 80066c4:	080066f3 	.word	0x080066f3
 80066c8:	080066f3 	.word	0x080066f3
 80066cc:	080066f3 	.word	0x080066f3
 80066d0:	080066eb 	.word	0x080066eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d4:	f7fe f924 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 80066d8:	61f8      	str	r0, [r7, #28]
        break;
 80066da:	e010      	b.n	80066fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066dc:	4b90      	ldr	r3, [pc, #576]	; (8006920 <UART_SetConfig+0x570>)
 80066de:	61fb      	str	r3, [r7, #28]
        break;
 80066e0:	e00d      	b.n	80066fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e2:	f7fe f885 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80066e6:	61f8      	str	r0, [r7, #28]
        break;
 80066e8:	e009      	b.n	80066fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ee:	61fb      	str	r3, [r7, #28]
        break;
 80066f0:	e005      	b.n	80066fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80fd 	beq.w	8006900 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	4413      	add	r3, r2
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	429a      	cmp	r2, r3
 8006714:	d305      	bcc.n	8006722 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	429a      	cmp	r2, r3
 8006720:	d903      	bls.n	800672a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006728:	e0ea      	b.n	8006900 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2200      	movs	r2, #0
 800672e:	461c      	mov	r4, r3
 8006730:	4615      	mov	r5, r2
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	022b      	lsls	r3, r5, #8
 800673c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006740:	0222      	lsls	r2, r4, #8
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	6849      	ldr	r1, [r1, #4]
 8006746:	0849      	lsrs	r1, r1, #1
 8006748:	2000      	movs	r0, #0
 800674a:	4688      	mov	r8, r1
 800674c:	4681      	mov	r9, r0
 800674e:	eb12 0a08 	adds.w	sl, r2, r8
 8006752:	eb43 0b09 	adc.w	fp, r3, r9
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006764:	4650      	mov	r0, sl
 8006766:	4659      	mov	r1, fp
 8006768:	f7fa fa8e 	bl	8000c88 <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4613      	mov	r3, r2
 8006772:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800677a:	d308      	bcc.n	800678e <UART_SetConfig+0x3de>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006782:	d204      	bcs.n	800678e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	60da      	str	r2, [r3, #12]
 800678c:	e0b8      	b.n	8006900 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006794:	e0b4      	b.n	8006900 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679e:	d15f      	bne.n	8006860 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80067a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d828      	bhi.n	80067fa <UART_SetConfig+0x44a>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x400>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	080067fb 	.word	0x080067fb
 80067c0:	080067eb 	.word	0x080067eb
 80067c4:	080067fb 	.word	0x080067fb
 80067c8:	080067fb 	.word	0x080067fb
 80067cc:	080067fb 	.word	0x080067fb
 80067d0:	080067f3 	.word	0x080067f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7fe f8a4 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 80067d8:	61f8      	str	r0, [r7, #28]
        break;
 80067da:	e014      	b.n	8006806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067dc:	f7fe f8b6 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 80067e0:	61f8      	str	r0, [r7, #28]
        break;
 80067e2:	e010      	b.n	8006806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e4:	4b4e      	ldr	r3, [pc, #312]	; (8006920 <UART_SetConfig+0x570>)
 80067e6:	61fb      	str	r3, [r7, #28]
        break;
 80067e8:	e00d      	b.n	8006806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ea:	f7fe f801 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80067ee:	61f8      	str	r0, [r7, #28]
        break;
 80067f0:	e009      	b.n	8006806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f6:	61fb      	str	r3, [r7, #28]
        break;
 80067f8:	e005      	b.n	8006806 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d079      	beq.n	8006900 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	005a      	lsls	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	441a      	add	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b0f      	cmp	r3, #15
 8006828:	d916      	bls.n	8006858 <UART_SetConfig+0x4a8>
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006830:	d212      	bcs.n	8006858 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f023 030f 	bic.w	r3, r3, #15
 800683a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	b29b      	uxth	r3, r3
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	b29a      	uxth	r2, r3
 8006848:	8afb      	ldrh	r3, [r7, #22]
 800684a:	4313      	orrs	r3, r2
 800684c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	8afa      	ldrh	r2, [r7, #22]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	e053      	b.n	8006900 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800685e:	e04f      	b.n	8006900 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006864:	2b08      	cmp	r3, #8
 8006866:	d828      	bhi.n	80068ba <UART_SetConfig+0x50a>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <UART_SetConfig+0x4c0>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	08006895 	.word	0x08006895
 8006874:	0800689d 	.word	0x0800689d
 8006878:	080068a5 	.word	0x080068a5
 800687c:	080068bb 	.word	0x080068bb
 8006880:	080068ab 	.word	0x080068ab
 8006884:	080068bb 	.word	0x080068bb
 8006888:	080068bb 	.word	0x080068bb
 800688c:	080068bb 	.word	0x080068bb
 8006890:	080068b3 	.word	0x080068b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006894:	f7fe f844 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8006898:	61f8      	str	r0, [r7, #28]
        break;
 800689a:	e014      	b.n	80068c6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800689c:	f7fe f856 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 80068a0:	61f8      	str	r0, [r7, #28]
        break;
 80068a2:	e010      	b.n	80068c6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a4:	4b1e      	ldr	r3, [pc, #120]	; (8006920 <UART_SetConfig+0x570>)
 80068a6:	61fb      	str	r3, [r7, #28]
        break;
 80068a8:	e00d      	b.n	80068c6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068aa:	f7fd ffa1 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80068ae:	61f8      	str	r0, [r7, #28]
        break;
 80068b0:	e009      	b.n	80068c6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b6:	61fb      	str	r3, [r7, #28]
        break;
 80068b8:	e005      	b.n	80068c6 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068c4:	bf00      	nop
    }

    if (pclk != 0U)
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d019      	beq.n	8006900 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	085a      	lsrs	r2, r3, #1
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	441a      	add	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	fbb2 f3f3 	udiv	r3, r2, r3
 80068de:	b29b      	uxth	r3, r3
 80068e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b0f      	cmp	r3, #15
 80068e6:	d908      	bls.n	80068fa <UART_SetConfig+0x54a>
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ee:	d204      	bcs.n	80068fa <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	60da      	str	r2, [r3, #12]
 80068f8:	e002      	b.n	8006900 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800690c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006910:	4618      	mov	r0, r3
 8006912:	3728      	adds	r7, #40	; 0x28
 8006914:	46bd      	mov	sp, r7
 8006916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691a:	bf00      	nop
 800691c:	40008000 	.word	0x40008000
 8006920:	00f42400 	.word	0x00f42400

08006924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01a      	beq.n	8006a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a22:	d10a      	bne.n	8006a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a76:	f7fb fae9 	bl	800204c <HAL_GetTick>
 8006a7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d10e      	bne.n	8006aa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f82a 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e020      	b.n	8006aea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d10e      	bne.n	8006ad4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f814 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e00a      	b.n	8006aea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	4613      	mov	r3, r2
 8006b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b02:	e05d      	b.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d059      	beq.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0c:	f7fb fa9e 	bl	800204c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11b      	bne.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e042      	b.n	8006be0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d02b      	beq.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b76:	d123      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e00f      	b.n	8006be0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	bf0c      	ite	eq
 8006bd0:	2301      	moveq	r3, #1
 8006bd2:	2300      	movne	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	79fb      	ldrb	r3, [r7, #7]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d092      	beq.n	8006b04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bfe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0201 	bic.w	r2, r2, #1
 8006c0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff fba8 	bl	800639c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff fb85 	bl	8006388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
	...

08006c9c <__errno>:
 8006c9c:	4b01      	ldr	r3, [pc, #4]	; (8006ca4 <__errno+0x8>)
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	2000000c 	.word	0x2000000c

08006ca8 <__libc_init_array>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	4d0d      	ldr	r5, [pc, #52]	; (8006ce0 <__libc_init_array+0x38>)
 8006cac:	4c0d      	ldr	r4, [pc, #52]	; (8006ce4 <__libc_init_array+0x3c>)
 8006cae:	1b64      	subs	r4, r4, r5
 8006cb0:	10a4      	asrs	r4, r4, #2
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	42a6      	cmp	r6, r4
 8006cb6:	d109      	bne.n	8006ccc <__libc_init_array+0x24>
 8006cb8:	4d0b      	ldr	r5, [pc, #44]	; (8006ce8 <__libc_init_array+0x40>)
 8006cba:	4c0c      	ldr	r4, [pc, #48]	; (8006cec <__libc_init_array+0x44>)
 8006cbc:	f004 fc90 	bl	800b5e0 <_init>
 8006cc0:	1b64      	subs	r4, r4, r5
 8006cc2:	10a4      	asrs	r4, r4, #2
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	d105      	bne.n	8006cd6 <__libc_init_array+0x2e>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd0:	4798      	blx	r3
 8006cd2:	3601      	adds	r6, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__libc_init_array+0xc>
 8006cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cda:	4798      	blx	r3
 8006cdc:	3601      	adds	r6, #1
 8006cde:	e7f2      	b.n	8006cc6 <__libc_init_array+0x1e>
 8006ce0:	0800baec 	.word	0x0800baec
 8006ce4:	0800baec 	.word	0x0800baec
 8006ce8:	0800baec 	.word	0x0800baec
 8006cec:	0800baf0 	.word	0x0800baf0

08006cf0 <memset>:
 8006cf0:	4402      	add	r2, r0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d100      	bne.n	8006cfa <memset+0xa>
 8006cf8:	4770      	bx	lr
 8006cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfe:	e7f9      	b.n	8006cf4 <memset+0x4>

08006d00 <__cvt>:
 8006d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	ec55 4b10 	vmov	r4, r5, d0
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	460e      	mov	r6, r1
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	462b      	mov	r3, r5
 8006d10:	bfbb      	ittet	lt
 8006d12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d16:	461d      	movlt	r5, r3
 8006d18:	2300      	movge	r3, #0
 8006d1a:	232d      	movlt	r3, #45	; 0x2d
 8006d1c:	700b      	strb	r3, [r1, #0]
 8006d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d24:	4691      	mov	r9, r2
 8006d26:	f023 0820 	bic.w	r8, r3, #32
 8006d2a:	bfbc      	itt	lt
 8006d2c:	4622      	movlt	r2, r4
 8006d2e:	4614      	movlt	r4, r2
 8006d30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d34:	d005      	beq.n	8006d42 <__cvt+0x42>
 8006d36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d3a:	d100      	bne.n	8006d3e <__cvt+0x3e>
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	2102      	movs	r1, #2
 8006d40:	e000      	b.n	8006d44 <__cvt+0x44>
 8006d42:	2103      	movs	r1, #3
 8006d44:	ab03      	add	r3, sp, #12
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	ab02      	add	r3, sp, #8
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	ec45 4b10 	vmov	d0, r4, r5
 8006d50:	4653      	mov	r3, sl
 8006d52:	4632      	mov	r2, r6
 8006d54:	f001 fdac 	bl	80088b0 <_dtoa_r>
 8006d58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	d102      	bne.n	8006d66 <__cvt+0x66>
 8006d60:	f019 0f01 	tst.w	r9, #1
 8006d64:	d022      	beq.n	8006dac <__cvt+0xac>
 8006d66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d6a:	eb07 0906 	add.w	r9, r7, r6
 8006d6e:	d110      	bne.n	8006d92 <__cvt+0x92>
 8006d70:	783b      	ldrb	r3, [r7, #0]
 8006d72:	2b30      	cmp	r3, #48	; 0x30
 8006d74:	d10a      	bne.n	8006d8c <__cvt+0x8c>
 8006d76:	2200      	movs	r2, #0
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	f7f9 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d82:	b918      	cbnz	r0, 8006d8c <__cvt+0x8c>
 8006d84:	f1c6 0601 	rsb	r6, r6, #1
 8006d88:	f8ca 6000 	str.w	r6, [sl]
 8006d8c:	f8da 3000 	ldr.w	r3, [sl]
 8006d90:	4499      	add	r9, r3
 8006d92:	2200      	movs	r2, #0
 8006d94:	2300      	movs	r3, #0
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 fe95 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d9e:	b108      	cbz	r0, 8006da4 <__cvt+0xa4>
 8006da0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006da4:	2230      	movs	r2, #48	; 0x30
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	454b      	cmp	r3, r9
 8006daa:	d307      	bcc.n	8006dbc <__cvt+0xbc>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006db0:	1bdb      	subs	r3, r3, r7
 8006db2:	4638      	mov	r0, r7
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	b004      	add	sp, #16
 8006db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbc:	1c59      	adds	r1, r3, #1
 8006dbe:	9103      	str	r1, [sp, #12]
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e7f0      	b.n	8006da6 <__cvt+0xa6>

08006dc4 <__exponent>:
 8006dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	bfb8      	it	lt
 8006dcc:	4249      	neglt	r1, r1
 8006dce:	f803 2b02 	strb.w	r2, [r3], #2
 8006dd2:	bfb4      	ite	lt
 8006dd4:	222d      	movlt	r2, #45	; 0x2d
 8006dd6:	222b      	movge	r2, #43	; 0x2b
 8006dd8:	2909      	cmp	r1, #9
 8006dda:	7042      	strb	r2, [r0, #1]
 8006ddc:	dd2a      	ble.n	8006e34 <__exponent+0x70>
 8006dde:	f10d 0407 	add.w	r4, sp, #7
 8006de2:	46a4      	mov	ip, r4
 8006de4:	270a      	movs	r7, #10
 8006de6:	46a6      	mov	lr, r4
 8006de8:	460a      	mov	r2, r1
 8006dea:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dee:	fb07 1516 	mls	r5, r7, r6, r1
 8006df2:	3530      	adds	r5, #48	; 0x30
 8006df4:	2a63      	cmp	r2, #99	; 0x63
 8006df6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006dfe:	4631      	mov	r1, r6
 8006e00:	dcf1      	bgt.n	8006de6 <__exponent+0x22>
 8006e02:	3130      	adds	r1, #48	; 0x30
 8006e04:	f1ae 0502 	sub.w	r5, lr, #2
 8006e08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e0c:	1c44      	adds	r4, r0, #1
 8006e0e:	4629      	mov	r1, r5
 8006e10:	4561      	cmp	r1, ip
 8006e12:	d30a      	bcc.n	8006e2a <__exponent+0x66>
 8006e14:	f10d 0209 	add.w	r2, sp, #9
 8006e18:	eba2 020e 	sub.w	r2, r2, lr
 8006e1c:	4565      	cmp	r5, ip
 8006e1e:	bf88      	it	hi
 8006e20:	2200      	movhi	r2, #0
 8006e22:	4413      	add	r3, r2
 8006e24:	1a18      	subs	r0, r3, r0
 8006e26:	b003      	add	sp, #12
 8006e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e32:	e7ed      	b.n	8006e10 <__exponent+0x4c>
 8006e34:	2330      	movs	r3, #48	; 0x30
 8006e36:	3130      	adds	r1, #48	; 0x30
 8006e38:	7083      	strb	r3, [r0, #2]
 8006e3a:	70c1      	strb	r1, [r0, #3]
 8006e3c:	1d03      	adds	r3, r0, #4
 8006e3e:	e7f1      	b.n	8006e24 <__exponent+0x60>

08006e40 <_printf_float>:
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	ed2d 8b02 	vpush	{d8}
 8006e48:	b08d      	sub	sp, #52	; 0x34
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e50:	4616      	mov	r6, r2
 8006e52:	461f      	mov	r7, r3
 8006e54:	4605      	mov	r5, r0
 8006e56:	f002 fe89 	bl	8009b6c <_localeconv_r>
 8006e5a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e5e:	4650      	mov	r0, sl
 8006e60:	f7f9 f9b6 	bl	80001d0 <strlen>
 8006e64:	2300      	movs	r3, #0
 8006e66:	930a      	str	r3, [sp, #40]	; 0x28
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	9305      	str	r3, [sp, #20]
 8006e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e74:	3307      	adds	r3, #7
 8006e76:	f023 0307 	bic.w	r3, r3, #7
 8006e7a:	f103 0208 	add.w	r2, r3, #8
 8006e7e:	f8c8 2000 	str.w	r2, [r8]
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e98:	ee08 0a10 	vmov	s16, r0
 8006e9c:	4b9f      	ldr	r3, [pc, #636]	; (800711c <_printf_float+0x2dc>)
 8006e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	f7f9 fe41 	bl	8000b2c <__aeabi_dcmpun>
 8006eaa:	bb88      	cbnz	r0, 8006f10 <_printf_float+0xd0>
 8006eac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb0:	4b9a      	ldr	r3, [pc, #616]	; (800711c <_printf_float+0x2dc>)
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	f7f9 fe1b 	bl	8000af0 <__aeabi_dcmple>
 8006eba:	bb48      	cbnz	r0, 8006f10 <_printf_float+0xd0>
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	f7f9 fe0a 	bl	8000adc <__aeabi_dcmplt>
 8006ec8:	b110      	cbz	r0, 8006ed0 <_printf_float+0x90>
 8006eca:	232d      	movs	r3, #45	; 0x2d
 8006ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed0:	4b93      	ldr	r3, [pc, #588]	; (8007120 <_printf_float+0x2e0>)
 8006ed2:	4894      	ldr	r0, [pc, #592]	; (8007124 <_printf_float+0x2e4>)
 8006ed4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ed8:	bf94      	ite	ls
 8006eda:	4698      	movls	r8, r3
 8006edc:	4680      	movhi	r8, r0
 8006ede:	2303      	movs	r3, #3
 8006ee0:	6123      	str	r3, [r4, #16]
 8006ee2:	9b05      	ldr	r3, [sp, #20]
 8006ee4:	f023 0204 	bic.w	r2, r3, #4
 8006ee8:	6022      	str	r2, [r4, #0]
 8006eea:	f04f 0900 	mov.w	r9, #0
 8006eee:	9700      	str	r7, [sp, #0]
 8006ef0:	4633      	mov	r3, r6
 8006ef2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 f9d8 	bl	80072ac <_printf_common>
 8006efc:	3001      	adds	r0, #1
 8006efe:	f040 8090 	bne.w	8007022 <_printf_float+0x1e2>
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	b00d      	add	sp, #52	; 0x34
 8006f08:	ecbd 8b02 	vpop	{d8}
 8006f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f10:	4642      	mov	r2, r8
 8006f12:	464b      	mov	r3, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	4649      	mov	r1, r9
 8006f18:	f7f9 fe08 	bl	8000b2c <__aeabi_dcmpun>
 8006f1c:	b140      	cbz	r0, 8006f30 <_printf_float+0xf0>
 8006f1e:	464b      	mov	r3, r9
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bfbc      	itt	lt
 8006f24:	232d      	movlt	r3, #45	; 0x2d
 8006f26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f2a:	487f      	ldr	r0, [pc, #508]	; (8007128 <_printf_float+0x2e8>)
 8006f2c:	4b7f      	ldr	r3, [pc, #508]	; (800712c <_printf_float+0x2ec>)
 8006f2e:	e7d1      	b.n	8006ed4 <_printf_float+0x94>
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f36:	9206      	str	r2, [sp, #24]
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	d13f      	bne.n	8006fbc <_printf_float+0x17c>
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	6063      	str	r3, [r4, #4]
 8006f40:	9b05      	ldr	r3, [sp, #20]
 8006f42:	6861      	ldr	r1, [r4, #4]
 8006f44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f48:	2300      	movs	r3, #0
 8006f4a:	9303      	str	r3, [sp, #12]
 8006f4c:	ab0a      	add	r3, sp, #40	; 0x28
 8006f4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f52:	ab09      	add	r3, sp, #36	; 0x24
 8006f54:	ec49 8b10 	vmov	d0, r8, r9
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	6022      	str	r2, [r4, #0]
 8006f5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f60:	4628      	mov	r0, r5
 8006f62:	f7ff fecd 	bl	8006d00 <__cvt>
 8006f66:	9b06      	ldr	r3, [sp, #24]
 8006f68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f6a:	2b47      	cmp	r3, #71	; 0x47
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	d108      	bne.n	8006f82 <_printf_float+0x142>
 8006f70:	1cc8      	adds	r0, r1, #3
 8006f72:	db02      	blt.n	8006f7a <_printf_float+0x13a>
 8006f74:	6863      	ldr	r3, [r4, #4]
 8006f76:	4299      	cmp	r1, r3
 8006f78:	dd41      	ble.n	8006ffe <_printf_float+0x1be>
 8006f7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f7e:	fa5f fb8b 	uxtb.w	fp, fp
 8006f82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f86:	d820      	bhi.n	8006fca <_printf_float+0x18a>
 8006f88:	3901      	subs	r1, #1
 8006f8a:	465a      	mov	r2, fp
 8006f8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f90:	9109      	str	r1, [sp, #36]	; 0x24
 8006f92:	f7ff ff17 	bl	8006dc4 <__exponent>
 8006f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f98:	1813      	adds	r3, r2, r0
 8006f9a:	2a01      	cmp	r2, #1
 8006f9c:	4681      	mov	r9, r0
 8006f9e:	6123      	str	r3, [r4, #16]
 8006fa0:	dc02      	bgt.n	8006fa8 <_printf_float+0x168>
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	07d2      	lsls	r2, r2, #31
 8006fa6:	d501      	bpl.n	8006fac <_printf_float+0x16c>
 8006fa8:	3301      	adds	r3, #1
 8006faa:	6123      	str	r3, [r4, #16]
 8006fac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d09c      	beq.n	8006eee <_printf_float+0xae>
 8006fb4:	232d      	movs	r3, #45	; 0x2d
 8006fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fba:	e798      	b.n	8006eee <_printf_float+0xae>
 8006fbc:	9a06      	ldr	r2, [sp, #24]
 8006fbe:	2a47      	cmp	r2, #71	; 0x47
 8006fc0:	d1be      	bne.n	8006f40 <_printf_float+0x100>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1bc      	bne.n	8006f40 <_printf_float+0x100>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e7b9      	b.n	8006f3e <_printf_float+0xfe>
 8006fca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fce:	d118      	bne.n	8007002 <_printf_float+0x1c2>
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	dd0b      	ble.n	8006fee <_printf_float+0x1ae>
 8006fd6:	6121      	str	r1, [r4, #16]
 8006fd8:	b913      	cbnz	r3, 8006fe0 <_printf_float+0x1a0>
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	07d0      	lsls	r0, r2, #31
 8006fde:	d502      	bpl.n	8006fe6 <_printf_float+0x1a6>
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	440b      	add	r3, r1
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fe8:	f04f 0900 	mov.w	r9, #0
 8006fec:	e7de      	b.n	8006fac <_printf_float+0x16c>
 8006fee:	b913      	cbnz	r3, 8006ff6 <_printf_float+0x1b6>
 8006ff0:	6822      	ldr	r2, [r4, #0]
 8006ff2:	07d2      	lsls	r2, r2, #31
 8006ff4:	d501      	bpl.n	8006ffa <_printf_float+0x1ba>
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	e7f4      	b.n	8006fe4 <_printf_float+0x1a4>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e7f2      	b.n	8006fe4 <_printf_float+0x1a4>
 8006ffe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007004:	4299      	cmp	r1, r3
 8007006:	db05      	blt.n	8007014 <_printf_float+0x1d4>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	6121      	str	r1, [r4, #16]
 800700c:	07d8      	lsls	r0, r3, #31
 800700e:	d5ea      	bpl.n	8006fe6 <_printf_float+0x1a6>
 8007010:	1c4b      	adds	r3, r1, #1
 8007012:	e7e7      	b.n	8006fe4 <_printf_float+0x1a4>
 8007014:	2900      	cmp	r1, #0
 8007016:	bfd4      	ite	le
 8007018:	f1c1 0202 	rsble	r2, r1, #2
 800701c:	2201      	movgt	r2, #1
 800701e:	4413      	add	r3, r2
 8007020:	e7e0      	b.n	8006fe4 <_printf_float+0x1a4>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	055a      	lsls	r2, r3, #21
 8007026:	d407      	bmi.n	8007038 <_printf_float+0x1f8>
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	4642      	mov	r2, r8
 800702c:	4631      	mov	r1, r6
 800702e:	4628      	mov	r0, r5
 8007030:	47b8      	blx	r7
 8007032:	3001      	adds	r0, #1
 8007034:	d12c      	bne.n	8007090 <_printf_float+0x250>
 8007036:	e764      	b.n	8006f02 <_printf_float+0xc2>
 8007038:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800703c:	f240 80e0 	bls.w	8007200 <_printf_float+0x3c0>
 8007040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	f7f9 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800704c:	2800      	cmp	r0, #0
 800704e:	d034      	beq.n	80070ba <_printf_float+0x27a>
 8007050:	4a37      	ldr	r2, [pc, #220]	; (8007130 <_printf_float+0x2f0>)
 8007052:	2301      	movs	r3, #1
 8007054:	4631      	mov	r1, r6
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	f43f af51 	beq.w	8006f02 <_printf_float+0xc2>
 8007060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007064:	429a      	cmp	r2, r3
 8007066:	db02      	blt.n	800706e <_printf_float+0x22e>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	07d8      	lsls	r0, r3, #31
 800706c:	d510      	bpl.n	8007090 <_printf_float+0x250>
 800706e:	ee18 3a10 	vmov	r3, s16
 8007072:	4652      	mov	r2, sl
 8007074:	4631      	mov	r1, r6
 8007076:	4628      	mov	r0, r5
 8007078:	47b8      	blx	r7
 800707a:	3001      	adds	r0, #1
 800707c:	f43f af41 	beq.w	8006f02 <_printf_float+0xc2>
 8007080:	f04f 0800 	mov.w	r8, #0
 8007084:	f104 091a 	add.w	r9, r4, #26
 8007088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708a:	3b01      	subs	r3, #1
 800708c:	4543      	cmp	r3, r8
 800708e:	dc09      	bgt.n	80070a4 <_printf_float+0x264>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	079b      	lsls	r3, r3, #30
 8007094:	f100 8105 	bmi.w	80072a2 <_printf_float+0x462>
 8007098:	68e0      	ldr	r0, [r4, #12]
 800709a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800709c:	4298      	cmp	r0, r3
 800709e:	bfb8      	it	lt
 80070a0:	4618      	movlt	r0, r3
 80070a2:	e730      	b.n	8006f06 <_printf_float+0xc6>
 80070a4:	2301      	movs	r3, #1
 80070a6:	464a      	mov	r2, r9
 80070a8:	4631      	mov	r1, r6
 80070aa:	4628      	mov	r0, r5
 80070ac:	47b8      	blx	r7
 80070ae:	3001      	adds	r0, #1
 80070b0:	f43f af27 	beq.w	8006f02 <_printf_float+0xc2>
 80070b4:	f108 0801 	add.w	r8, r8, #1
 80070b8:	e7e6      	b.n	8007088 <_printf_float+0x248>
 80070ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dc39      	bgt.n	8007134 <_printf_float+0x2f4>
 80070c0:	4a1b      	ldr	r2, [pc, #108]	; (8007130 <_printf_float+0x2f0>)
 80070c2:	2301      	movs	r3, #1
 80070c4:	4631      	mov	r1, r6
 80070c6:	4628      	mov	r0, r5
 80070c8:	47b8      	blx	r7
 80070ca:	3001      	adds	r0, #1
 80070cc:	f43f af19 	beq.w	8006f02 <_printf_float+0xc2>
 80070d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070d4:	4313      	orrs	r3, r2
 80070d6:	d102      	bne.n	80070de <_printf_float+0x29e>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	07d9      	lsls	r1, r3, #31
 80070dc:	d5d8      	bpl.n	8007090 <_printf_float+0x250>
 80070de:	ee18 3a10 	vmov	r3, s16
 80070e2:	4652      	mov	r2, sl
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f af09 	beq.w	8006f02 <_printf_float+0xc2>
 80070f0:	f04f 0900 	mov.w	r9, #0
 80070f4:	f104 0a1a 	add.w	sl, r4, #26
 80070f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fa:	425b      	negs	r3, r3
 80070fc:	454b      	cmp	r3, r9
 80070fe:	dc01      	bgt.n	8007104 <_printf_float+0x2c4>
 8007100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007102:	e792      	b.n	800702a <_printf_float+0x1ea>
 8007104:	2301      	movs	r3, #1
 8007106:	4652      	mov	r2, sl
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	f43f aef7 	beq.w	8006f02 <_printf_float+0xc2>
 8007114:	f109 0901 	add.w	r9, r9, #1
 8007118:	e7ee      	b.n	80070f8 <_printf_float+0x2b8>
 800711a:	bf00      	nop
 800711c:	7fefffff 	.word	0x7fefffff
 8007120:	0800b644 	.word	0x0800b644
 8007124:	0800b648 	.word	0x0800b648
 8007128:	0800b650 	.word	0x0800b650
 800712c:	0800b64c 	.word	0x0800b64c
 8007130:	0800b654 	.word	0x0800b654
 8007134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007138:	429a      	cmp	r2, r3
 800713a:	bfa8      	it	ge
 800713c:	461a      	movge	r2, r3
 800713e:	2a00      	cmp	r2, #0
 8007140:	4691      	mov	r9, r2
 8007142:	dc37      	bgt.n	80071b4 <_printf_float+0x374>
 8007144:	f04f 0b00 	mov.w	fp, #0
 8007148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800714c:	f104 021a 	add.w	r2, r4, #26
 8007150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	eba3 0309 	sub.w	r3, r3, r9
 8007158:	455b      	cmp	r3, fp
 800715a:	dc33      	bgt.n	80071c4 <_printf_float+0x384>
 800715c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007160:	429a      	cmp	r2, r3
 8007162:	db3b      	blt.n	80071dc <_printf_float+0x39c>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	07da      	lsls	r2, r3, #31
 8007168:	d438      	bmi.n	80071dc <_printf_float+0x39c>
 800716a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716c:	9a05      	ldr	r2, [sp, #20]
 800716e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007170:	1a9a      	subs	r2, r3, r2
 8007172:	eba3 0901 	sub.w	r9, r3, r1
 8007176:	4591      	cmp	r9, r2
 8007178:	bfa8      	it	ge
 800717a:	4691      	movge	r9, r2
 800717c:	f1b9 0f00 	cmp.w	r9, #0
 8007180:	dc35      	bgt.n	80071ee <_printf_float+0x3ae>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800718a:	f104 0a1a 	add.w	sl, r4, #26
 800718e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	eba3 0309 	sub.w	r3, r3, r9
 8007198:	4543      	cmp	r3, r8
 800719a:	f77f af79 	ble.w	8007090 <_printf_float+0x250>
 800719e:	2301      	movs	r3, #1
 80071a0:	4652      	mov	r2, sl
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b8      	blx	r7
 80071a8:	3001      	adds	r0, #1
 80071aa:	f43f aeaa 	beq.w	8006f02 <_printf_float+0xc2>
 80071ae:	f108 0801 	add.w	r8, r8, #1
 80071b2:	e7ec      	b.n	800718e <_printf_float+0x34e>
 80071b4:	4613      	mov	r3, r2
 80071b6:	4631      	mov	r1, r6
 80071b8:	4642      	mov	r2, r8
 80071ba:	4628      	mov	r0, r5
 80071bc:	47b8      	blx	r7
 80071be:	3001      	adds	r0, #1
 80071c0:	d1c0      	bne.n	8007144 <_printf_float+0x304>
 80071c2:	e69e      	b.n	8006f02 <_printf_float+0xc2>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	9205      	str	r2, [sp, #20]
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f ae97 	beq.w	8006f02 <_printf_float+0xc2>
 80071d4:	9a05      	ldr	r2, [sp, #20]
 80071d6:	f10b 0b01 	add.w	fp, fp, #1
 80071da:	e7b9      	b.n	8007150 <_printf_float+0x310>
 80071dc:	ee18 3a10 	vmov	r3, s16
 80071e0:	4652      	mov	r2, sl
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	d1be      	bne.n	800716a <_printf_float+0x32a>
 80071ec:	e689      	b.n	8006f02 <_printf_float+0xc2>
 80071ee:	9a05      	ldr	r2, [sp, #20]
 80071f0:	464b      	mov	r3, r9
 80071f2:	4442      	add	r2, r8
 80071f4:	4631      	mov	r1, r6
 80071f6:	4628      	mov	r0, r5
 80071f8:	47b8      	blx	r7
 80071fa:	3001      	adds	r0, #1
 80071fc:	d1c1      	bne.n	8007182 <_printf_float+0x342>
 80071fe:	e680      	b.n	8006f02 <_printf_float+0xc2>
 8007200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007202:	2a01      	cmp	r2, #1
 8007204:	dc01      	bgt.n	800720a <_printf_float+0x3ca>
 8007206:	07db      	lsls	r3, r3, #31
 8007208:	d538      	bpl.n	800727c <_printf_float+0x43c>
 800720a:	2301      	movs	r3, #1
 800720c:	4642      	mov	r2, r8
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	f43f ae74 	beq.w	8006f02 <_printf_float+0xc2>
 800721a:	ee18 3a10 	vmov	r3, s16
 800721e:	4652      	mov	r2, sl
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f ae6b 	beq.w	8006f02 <_printf_float+0xc2>
 800722c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007230:	2200      	movs	r2, #0
 8007232:	2300      	movs	r3, #0
 8007234:	f7f9 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007238:	b9d8      	cbnz	r0, 8007272 <_printf_float+0x432>
 800723a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800723c:	f108 0201 	add.w	r2, r8, #1
 8007240:	3b01      	subs	r3, #1
 8007242:	4631      	mov	r1, r6
 8007244:	4628      	mov	r0, r5
 8007246:	47b8      	blx	r7
 8007248:	3001      	adds	r0, #1
 800724a:	d10e      	bne.n	800726a <_printf_float+0x42a>
 800724c:	e659      	b.n	8006f02 <_printf_float+0xc2>
 800724e:	2301      	movs	r3, #1
 8007250:	4652      	mov	r2, sl
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	f43f ae52 	beq.w	8006f02 <_printf_float+0xc2>
 800725e:	f108 0801 	add.w	r8, r8, #1
 8007262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007264:	3b01      	subs	r3, #1
 8007266:	4543      	cmp	r3, r8
 8007268:	dcf1      	bgt.n	800724e <_printf_float+0x40e>
 800726a:	464b      	mov	r3, r9
 800726c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007270:	e6dc      	b.n	800702c <_printf_float+0x1ec>
 8007272:	f04f 0800 	mov.w	r8, #0
 8007276:	f104 0a1a 	add.w	sl, r4, #26
 800727a:	e7f2      	b.n	8007262 <_printf_float+0x422>
 800727c:	2301      	movs	r3, #1
 800727e:	4642      	mov	r2, r8
 8007280:	e7df      	b.n	8007242 <_printf_float+0x402>
 8007282:	2301      	movs	r3, #1
 8007284:	464a      	mov	r2, r9
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	f43f ae38 	beq.w	8006f02 <_printf_float+0xc2>
 8007292:	f108 0801 	add.w	r8, r8, #1
 8007296:	68e3      	ldr	r3, [r4, #12]
 8007298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800729a:	1a5b      	subs	r3, r3, r1
 800729c:	4543      	cmp	r3, r8
 800729e:	dcf0      	bgt.n	8007282 <_printf_float+0x442>
 80072a0:	e6fa      	b.n	8007098 <_printf_float+0x258>
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	f104 0919 	add.w	r9, r4, #25
 80072aa:	e7f4      	b.n	8007296 <_printf_float+0x456>

080072ac <_printf_common>:
 80072ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b0:	4616      	mov	r6, r2
 80072b2:	4699      	mov	r9, r3
 80072b4:	688a      	ldr	r2, [r1, #8]
 80072b6:	690b      	ldr	r3, [r1, #16]
 80072b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072bc:	4293      	cmp	r3, r2
 80072be:	bfb8      	it	lt
 80072c0:	4613      	movlt	r3, r2
 80072c2:	6033      	str	r3, [r6, #0]
 80072c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072c8:	4607      	mov	r7, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	b10a      	cbz	r2, 80072d2 <_printf_common+0x26>
 80072ce:	3301      	adds	r3, #1
 80072d0:	6033      	str	r3, [r6, #0]
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	0699      	lsls	r1, r3, #26
 80072d6:	bf42      	ittt	mi
 80072d8:	6833      	ldrmi	r3, [r6, #0]
 80072da:	3302      	addmi	r3, #2
 80072dc:	6033      	strmi	r3, [r6, #0]
 80072de:	6825      	ldr	r5, [r4, #0]
 80072e0:	f015 0506 	ands.w	r5, r5, #6
 80072e4:	d106      	bne.n	80072f4 <_printf_common+0x48>
 80072e6:	f104 0a19 	add.w	sl, r4, #25
 80072ea:	68e3      	ldr	r3, [r4, #12]
 80072ec:	6832      	ldr	r2, [r6, #0]
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	42ab      	cmp	r3, r5
 80072f2:	dc26      	bgt.n	8007342 <_printf_common+0x96>
 80072f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072f8:	1e13      	subs	r3, r2, #0
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	bf18      	it	ne
 80072fe:	2301      	movne	r3, #1
 8007300:	0692      	lsls	r2, r2, #26
 8007302:	d42b      	bmi.n	800735c <_printf_common+0xb0>
 8007304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007308:	4649      	mov	r1, r9
 800730a:	4638      	mov	r0, r7
 800730c:	47c0      	blx	r8
 800730e:	3001      	adds	r0, #1
 8007310:	d01e      	beq.n	8007350 <_printf_common+0xa4>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	68e5      	ldr	r5, [r4, #12]
 8007316:	6832      	ldr	r2, [r6, #0]
 8007318:	f003 0306 	and.w	r3, r3, #6
 800731c:	2b04      	cmp	r3, #4
 800731e:	bf08      	it	eq
 8007320:	1aad      	subeq	r5, r5, r2
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	6922      	ldr	r2, [r4, #16]
 8007326:	bf0c      	ite	eq
 8007328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800732c:	2500      	movne	r5, #0
 800732e:	4293      	cmp	r3, r2
 8007330:	bfc4      	itt	gt
 8007332:	1a9b      	subgt	r3, r3, r2
 8007334:	18ed      	addgt	r5, r5, r3
 8007336:	2600      	movs	r6, #0
 8007338:	341a      	adds	r4, #26
 800733a:	42b5      	cmp	r5, r6
 800733c:	d11a      	bne.n	8007374 <_printf_common+0xc8>
 800733e:	2000      	movs	r0, #0
 8007340:	e008      	b.n	8007354 <_printf_common+0xa8>
 8007342:	2301      	movs	r3, #1
 8007344:	4652      	mov	r2, sl
 8007346:	4649      	mov	r1, r9
 8007348:	4638      	mov	r0, r7
 800734a:	47c0      	blx	r8
 800734c:	3001      	adds	r0, #1
 800734e:	d103      	bne.n	8007358 <_printf_common+0xac>
 8007350:	f04f 30ff 	mov.w	r0, #4294967295
 8007354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007358:	3501      	adds	r5, #1
 800735a:	e7c6      	b.n	80072ea <_printf_common+0x3e>
 800735c:	18e1      	adds	r1, r4, r3
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	2030      	movs	r0, #48	; 0x30
 8007362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007366:	4422      	add	r2, r4
 8007368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800736c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007370:	3302      	adds	r3, #2
 8007372:	e7c7      	b.n	8007304 <_printf_common+0x58>
 8007374:	2301      	movs	r3, #1
 8007376:	4622      	mov	r2, r4
 8007378:	4649      	mov	r1, r9
 800737a:	4638      	mov	r0, r7
 800737c:	47c0      	blx	r8
 800737e:	3001      	adds	r0, #1
 8007380:	d0e6      	beq.n	8007350 <_printf_common+0xa4>
 8007382:	3601      	adds	r6, #1
 8007384:	e7d9      	b.n	800733a <_printf_common+0x8e>
	...

08007388 <_printf_i>:
 8007388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	7e0f      	ldrb	r7, [r1, #24]
 800738e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007390:	2f78      	cmp	r7, #120	; 0x78
 8007392:	4691      	mov	r9, r2
 8007394:	4680      	mov	r8, r0
 8007396:	460c      	mov	r4, r1
 8007398:	469a      	mov	sl, r3
 800739a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800739e:	d807      	bhi.n	80073b0 <_printf_i+0x28>
 80073a0:	2f62      	cmp	r7, #98	; 0x62
 80073a2:	d80a      	bhi.n	80073ba <_printf_i+0x32>
 80073a4:	2f00      	cmp	r7, #0
 80073a6:	f000 80d8 	beq.w	800755a <_printf_i+0x1d2>
 80073aa:	2f58      	cmp	r7, #88	; 0x58
 80073ac:	f000 80a3 	beq.w	80074f6 <_printf_i+0x16e>
 80073b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073b8:	e03a      	b.n	8007430 <_printf_i+0xa8>
 80073ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073be:	2b15      	cmp	r3, #21
 80073c0:	d8f6      	bhi.n	80073b0 <_printf_i+0x28>
 80073c2:	a101      	add	r1, pc, #4	; (adr r1, 80073c8 <_printf_i+0x40>)
 80073c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073c8:	08007421 	.word	0x08007421
 80073cc:	08007435 	.word	0x08007435
 80073d0:	080073b1 	.word	0x080073b1
 80073d4:	080073b1 	.word	0x080073b1
 80073d8:	080073b1 	.word	0x080073b1
 80073dc:	080073b1 	.word	0x080073b1
 80073e0:	08007435 	.word	0x08007435
 80073e4:	080073b1 	.word	0x080073b1
 80073e8:	080073b1 	.word	0x080073b1
 80073ec:	080073b1 	.word	0x080073b1
 80073f0:	080073b1 	.word	0x080073b1
 80073f4:	08007541 	.word	0x08007541
 80073f8:	08007465 	.word	0x08007465
 80073fc:	08007523 	.word	0x08007523
 8007400:	080073b1 	.word	0x080073b1
 8007404:	080073b1 	.word	0x080073b1
 8007408:	08007563 	.word	0x08007563
 800740c:	080073b1 	.word	0x080073b1
 8007410:	08007465 	.word	0x08007465
 8007414:	080073b1 	.word	0x080073b1
 8007418:	080073b1 	.word	0x080073b1
 800741c:	0800752b 	.word	0x0800752b
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	1d1a      	adds	r2, r3, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	602a      	str	r2, [r5, #0]
 8007428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800742c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007430:	2301      	movs	r3, #1
 8007432:	e0a3      	b.n	800757c <_printf_i+0x1f4>
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	6829      	ldr	r1, [r5, #0]
 8007438:	0606      	lsls	r6, r0, #24
 800743a:	f101 0304 	add.w	r3, r1, #4
 800743e:	d50a      	bpl.n	8007456 <_printf_i+0xce>
 8007440:	680e      	ldr	r6, [r1, #0]
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	2e00      	cmp	r6, #0
 8007446:	da03      	bge.n	8007450 <_printf_i+0xc8>
 8007448:	232d      	movs	r3, #45	; 0x2d
 800744a:	4276      	negs	r6, r6
 800744c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007450:	485e      	ldr	r0, [pc, #376]	; (80075cc <_printf_i+0x244>)
 8007452:	230a      	movs	r3, #10
 8007454:	e019      	b.n	800748a <_printf_i+0x102>
 8007456:	680e      	ldr	r6, [r1, #0]
 8007458:	602b      	str	r3, [r5, #0]
 800745a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800745e:	bf18      	it	ne
 8007460:	b236      	sxthne	r6, r6
 8007462:	e7ef      	b.n	8007444 <_printf_i+0xbc>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	6820      	ldr	r0, [r4, #0]
 8007468:	1d19      	adds	r1, r3, #4
 800746a:	6029      	str	r1, [r5, #0]
 800746c:	0601      	lsls	r1, r0, #24
 800746e:	d501      	bpl.n	8007474 <_printf_i+0xec>
 8007470:	681e      	ldr	r6, [r3, #0]
 8007472:	e002      	b.n	800747a <_printf_i+0xf2>
 8007474:	0646      	lsls	r6, r0, #25
 8007476:	d5fb      	bpl.n	8007470 <_printf_i+0xe8>
 8007478:	881e      	ldrh	r6, [r3, #0]
 800747a:	4854      	ldr	r0, [pc, #336]	; (80075cc <_printf_i+0x244>)
 800747c:	2f6f      	cmp	r7, #111	; 0x6f
 800747e:	bf0c      	ite	eq
 8007480:	2308      	moveq	r3, #8
 8007482:	230a      	movne	r3, #10
 8007484:	2100      	movs	r1, #0
 8007486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800748a:	6865      	ldr	r5, [r4, #4]
 800748c:	60a5      	str	r5, [r4, #8]
 800748e:	2d00      	cmp	r5, #0
 8007490:	bfa2      	ittt	ge
 8007492:	6821      	ldrge	r1, [r4, #0]
 8007494:	f021 0104 	bicge.w	r1, r1, #4
 8007498:	6021      	strge	r1, [r4, #0]
 800749a:	b90e      	cbnz	r6, 80074a0 <_printf_i+0x118>
 800749c:	2d00      	cmp	r5, #0
 800749e:	d04d      	beq.n	800753c <_printf_i+0x1b4>
 80074a0:	4615      	mov	r5, r2
 80074a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80074a6:	fb03 6711 	mls	r7, r3, r1, r6
 80074aa:	5dc7      	ldrb	r7, [r0, r7]
 80074ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074b0:	4637      	mov	r7, r6
 80074b2:	42bb      	cmp	r3, r7
 80074b4:	460e      	mov	r6, r1
 80074b6:	d9f4      	bls.n	80074a2 <_printf_i+0x11a>
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d10b      	bne.n	80074d4 <_printf_i+0x14c>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	07de      	lsls	r6, r3, #31
 80074c0:	d508      	bpl.n	80074d4 <_printf_i+0x14c>
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	6861      	ldr	r1, [r4, #4]
 80074c6:	4299      	cmp	r1, r3
 80074c8:	bfde      	ittt	le
 80074ca:	2330      	movle	r3, #48	; 0x30
 80074cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074d4:	1b52      	subs	r2, r2, r5
 80074d6:	6122      	str	r2, [r4, #16]
 80074d8:	f8cd a000 	str.w	sl, [sp]
 80074dc:	464b      	mov	r3, r9
 80074de:	aa03      	add	r2, sp, #12
 80074e0:	4621      	mov	r1, r4
 80074e2:	4640      	mov	r0, r8
 80074e4:	f7ff fee2 	bl	80072ac <_printf_common>
 80074e8:	3001      	adds	r0, #1
 80074ea:	d14c      	bne.n	8007586 <_printf_i+0x1fe>
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	b004      	add	sp, #16
 80074f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f6:	4835      	ldr	r0, [pc, #212]	; (80075cc <_printf_i+0x244>)
 80074f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074fc:	6829      	ldr	r1, [r5, #0]
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	f851 6b04 	ldr.w	r6, [r1], #4
 8007504:	6029      	str	r1, [r5, #0]
 8007506:	061d      	lsls	r5, r3, #24
 8007508:	d514      	bpl.n	8007534 <_printf_i+0x1ac>
 800750a:	07df      	lsls	r7, r3, #31
 800750c:	bf44      	itt	mi
 800750e:	f043 0320 	orrmi.w	r3, r3, #32
 8007512:	6023      	strmi	r3, [r4, #0]
 8007514:	b91e      	cbnz	r6, 800751e <_printf_i+0x196>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	f023 0320 	bic.w	r3, r3, #32
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	2310      	movs	r3, #16
 8007520:	e7b0      	b.n	8007484 <_printf_i+0xfc>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	f043 0320 	orr.w	r3, r3, #32
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	2378      	movs	r3, #120	; 0x78
 800752c:	4828      	ldr	r0, [pc, #160]	; (80075d0 <_printf_i+0x248>)
 800752e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007532:	e7e3      	b.n	80074fc <_printf_i+0x174>
 8007534:	0659      	lsls	r1, r3, #25
 8007536:	bf48      	it	mi
 8007538:	b2b6      	uxthmi	r6, r6
 800753a:	e7e6      	b.n	800750a <_printf_i+0x182>
 800753c:	4615      	mov	r5, r2
 800753e:	e7bb      	b.n	80074b8 <_printf_i+0x130>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	6826      	ldr	r6, [r4, #0]
 8007544:	6961      	ldr	r1, [r4, #20]
 8007546:	1d18      	adds	r0, r3, #4
 8007548:	6028      	str	r0, [r5, #0]
 800754a:	0635      	lsls	r5, r6, #24
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	d501      	bpl.n	8007554 <_printf_i+0x1cc>
 8007550:	6019      	str	r1, [r3, #0]
 8007552:	e002      	b.n	800755a <_printf_i+0x1d2>
 8007554:	0670      	lsls	r0, r6, #25
 8007556:	d5fb      	bpl.n	8007550 <_printf_i+0x1c8>
 8007558:	8019      	strh	r1, [r3, #0]
 800755a:	2300      	movs	r3, #0
 800755c:	6123      	str	r3, [r4, #16]
 800755e:	4615      	mov	r5, r2
 8007560:	e7ba      	b.n	80074d8 <_printf_i+0x150>
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	602a      	str	r2, [r5, #0]
 8007568:	681d      	ldr	r5, [r3, #0]
 800756a:	6862      	ldr	r2, [r4, #4]
 800756c:	2100      	movs	r1, #0
 800756e:	4628      	mov	r0, r5
 8007570:	f7f8 fe36 	bl	80001e0 <memchr>
 8007574:	b108      	cbz	r0, 800757a <_printf_i+0x1f2>
 8007576:	1b40      	subs	r0, r0, r5
 8007578:	6060      	str	r0, [r4, #4]
 800757a:	6863      	ldr	r3, [r4, #4]
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	2300      	movs	r3, #0
 8007580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007584:	e7a8      	b.n	80074d8 <_printf_i+0x150>
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	462a      	mov	r2, r5
 800758a:	4649      	mov	r1, r9
 800758c:	4640      	mov	r0, r8
 800758e:	47d0      	blx	sl
 8007590:	3001      	adds	r0, #1
 8007592:	d0ab      	beq.n	80074ec <_printf_i+0x164>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	079b      	lsls	r3, r3, #30
 8007598:	d413      	bmi.n	80075c2 <_printf_i+0x23a>
 800759a:	68e0      	ldr	r0, [r4, #12]
 800759c:	9b03      	ldr	r3, [sp, #12]
 800759e:	4298      	cmp	r0, r3
 80075a0:	bfb8      	it	lt
 80075a2:	4618      	movlt	r0, r3
 80075a4:	e7a4      	b.n	80074f0 <_printf_i+0x168>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4632      	mov	r2, r6
 80075aa:	4649      	mov	r1, r9
 80075ac:	4640      	mov	r0, r8
 80075ae:	47d0      	blx	sl
 80075b0:	3001      	adds	r0, #1
 80075b2:	d09b      	beq.n	80074ec <_printf_i+0x164>
 80075b4:	3501      	adds	r5, #1
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	9903      	ldr	r1, [sp, #12]
 80075ba:	1a5b      	subs	r3, r3, r1
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dcf2      	bgt.n	80075a6 <_printf_i+0x21e>
 80075c0:	e7eb      	b.n	800759a <_printf_i+0x212>
 80075c2:	2500      	movs	r5, #0
 80075c4:	f104 0619 	add.w	r6, r4, #25
 80075c8:	e7f5      	b.n	80075b6 <_printf_i+0x22e>
 80075ca:	bf00      	nop
 80075cc:	0800b656 	.word	0x0800b656
 80075d0:	0800b667 	.word	0x0800b667

080075d4 <_scanf_float>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	b087      	sub	sp, #28
 80075da:	4617      	mov	r7, r2
 80075dc:	9303      	str	r3, [sp, #12]
 80075de:	688b      	ldr	r3, [r1, #8]
 80075e0:	1e5a      	subs	r2, r3, #1
 80075e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80075e6:	bf83      	ittte	hi
 80075e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075ec:	195b      	addhi	r3, r3, r5
 80075ee:	9302      	strhi	r3, [sp, #8]
 80075f0:	2300      	movls	r3, #0
 80075f2:	bf86      	itte	hi
 80075f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075f8:	608b      	strhi	r3, [r1, #8]
 80075fa:	9302      	strls	r3, [sp, #8]
 80075fc:	680b      	ldr	r3, [r1, #0]
 80075fe:	468b      	mov	fp, r1
 8007600:	2500      	movs	r5, #0
 8007602:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007606:	f84b 3b1c 	str.w	r3, [fp], #28
 800760a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800760e:	4680      	mov	r8, r0
 8007610:	460c      	mov	r4, r1
 8007612:	465e      	mov	r6, fp
 8007614:	46aa      	mov	sl, r5
 8007616:	46a9      	mov	r9, r5
 8007618:	9501      	str	r5, [sp, #4]
 800761a:	68a2      	ldr	r2, [r4, #8]
 800761c:	b152      	cbz	r2, 8007634 <_scanf_float+0x60>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b4e      	cmp	r3, #78	; 0x4e
 8007624:	d864      	bhi.n	80076f0 <_scanf_float+0x11c>
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d83c      	bhi.n	80076a4 <_scanf_float+0xd0>
 800762a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800762e:	b2c8      	uxtb	r0, r1
 8007630:	280e      	cmp	r0, #14
 8007632:	d93a      	bls.n	80076aa <_scanf_float+0xd6>
 8007634:	f1b9 0f00 	cmp.w	r9, #0
 8007638:	d003      	beq.n	8007642 <_scanf_float+0x6e>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007646:	f1ba 0f01 	cmp.w	sl, #1
 800764a:	f200 8113 	bhi.w	8007874 <_scanf_float+0x2a0>
 800764e:	455e      	cmp	r6, fp
 8007650:	f200 8105 	bhi.w	800785e <_scanf_float+0x28a>
 8007654:	2501      	movs	r5, #1
 8007656:	4628      	mov	r0, r5
 8007658:	b007      	add	sp, #28
 800765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007662:	2a0d      	cmp	r2, #13
 8007664:	d8e6      	bhi.n	8007634 <_scanf_float+0x60>
 8007666:	a101      	add	r1, pc, #4	; (adr r1, 800766c <_scanf_float+0x98>)
 8007668:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800766c:	080077ab 	.word	0x080077ab
 8007670:	08007635 	.word	0x08007635
 8007674:	08007635 	.word	0x08007635
 8007678:	08007635 	.word	0x08007635
 800767c:	0800780b 	.word	0x0800780b
 8007680:	080077e3 	.word	0x080077e3
 8007684:	08007635 	.word	0x08007635
 8007688:	08007635 	.word	0x08007635
 800768c:	080077b9 	.word	0x080077b9
 8007690:	08007635 	.word	0x08007635
 8007694:	08007635 	.word	0x08007635
 8007698:	08007635 	.word	0x08007635
 800769c:	08007635 	.word	0x08007635
 80076a0:	08007771 	.word	0x08007771
 80076a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80076a8:	e7db      	b.n	8007662 <_scanf_float+0x8e>
 80076aa:	290e      	cmp	r1, #14
 80076ac:	d8c2      	bhi.n	8007634 <_scanf_float+0x60>
 80076ae:	a001      	add	r0, pc, #4	; (adr r0, 80076b4 <_scanf_float+0xe0>)
 80076b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076b4:	08007763 	.word	0x08007763
 80076b8:	08007635 	.word	0x08007635
 80076bc:	08007763 	.word	0x08007763
 80076c0:	080077f7 	.word	0x080077f7
 80076c4:	08007635 	.word	0x08007635
 80076c8:	08007711 	.word	0x08007711
 80076cc:	0800774d 	.word	0x0800774d
 80076d0:	0800774d 	.word	0x0800774d
 80076d4:	0800774d 	.word	0x0800774d
 80076d8:	0800774d 	.word	0x0800774d
 80076dc:	0800774d 	.word	0x0800774d
 80076e0:	0800774d 	.word	0x0800774d
 80076e4:	0800774d 	.word	0x0800774d
 80076e8:	0800774d 	.word	0x0800774d
 80076ec:	0800774d 	.word	0x0800774d
 80076f0:	2b6e      	cmp	r3, #110	; 0x6e
 80076f2:	d809      	bhi.n	8007708 <_scanf_float+0x134>
 80076f4:	2b60      	cmp	r3, #96	; 0x60
 80076f6:	d8b2      	bhi.n	800765e <_scanf_float+0x8a>
 80076f8:	2b54      	cmp	r3, #84	; 0x54
 80076fa:	d077      	beq.n	80077ec <_scanf_float+0x218>
 80076fc:	2b59      	cmp	r3, #89	; 0x59
 80076fe:	d199      	bne.n	8007634 <_scanf_float+0x60>
 8007700:	2d07      	cmp	r5, #7
 8007702:	d197      	bne.n	8007634 <_scanf_float+0x60>
 8007704:	2508      	movs	r5, #8
 8007706:	e029      	b.n	800775c <_scanf_float+0x188>
 8007708:	2b74      	cmp	r3, #116	; 0x74
 800770a:	d06f      	beq.n	80077ec <_scanf_float+0x218>
 800770c:	2b79      	cmp	r3, #121	; 0x79
 800770e:	e7f6      	b.n	80076fe <_scanf_float+0x12a>
 8007710:	6821      	ldr	r1, [r4, #0]
 8007712:	05c8      	lsls	r0, r1, #23
 8007714:	d51a      	bpl.n	800774c <_scanf_float+0x178>
 8007716:	9b02      	ldr	r3, [sp, #8]
 8007718:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800771c:	6021      	str	r1, [r4, #0]
 800771e:	f109 0901 	add.w	r9, r9, #1
 8007722:	b11b      	cbz	r3, 800772c <_scanf_float+0x158>
 8007724:	3b01      	subs	r3, #1
 8007726:	3201      	adds	r2, #1
 8007728:	9302      	str	r3, [sp, #8]
 800772a:	60a2      	str	r2, [r4, #8]
 800772c:	68a3      	ldr	r3, [r4, #8]
 800772e:	3b01      	subs	r3, #1
 8007730:	60a3      	str	r3, [r4, #8]
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	3301      	adds	r3, #1
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3b01      	subs	r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	607b      	str	r3, [r7, #4]
 8007740:	f340 8084 	ble.w	800784c <_scanf_float+0x278>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	e766      	b.n	800761a <_scanf_float+0x46>
 800774c:	eb1a 0f05 	cmn.w	sl, r5
 8007750:	f47f af70 	bne.w	8007634 <_scanf_float+0x60>
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800775a:	6022      	str	r2, [r4, #0]
 800775c:	f806 3b01 	strb.w	r3, [r6], #1
 8007760:	e7e4      	b.n	800772c <_scanf_float+0x158>
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	0610      	lsls	r0, r2, #24
 8007766:	f57f af65 	bpl.w	8007634 <_scanf_float+0x60>
 800776a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800776e:	e7f4      	b.n	800775a <_scanf_float+0x186>
 8007770:	f1ba 0f00 	cmp.w	sl, #0
 8007774:	d10e      	bne.n	8007794 <_scanf_float+0x1c0>
 8007776:	f1b9 0f00 	cmp.w	r9, #0
 800777a:	d10e      	bne.n	800779a <_scanf_float+0x1c6>
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007782:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007786:	d108      	bne.n	800779a <_scanf_float+0x1c6>
 8007788:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	f04f 0a01 	mov.w	sl, #1
 8007792:	e7e3      	b.n	800775c <_scanf_float+0x188>
 8007794:	f1ba 0f02 	cmp.w	sl, #2
 8007798:	d055      	beq.n	8007846 <_scanf_float+0x272>
 800779a:	2d01      	cmp	r5, #1
 800779c:	d002      	beq.n	80077a4 <_scanf_float+0x1d0>
 800779e:	2d04      	cmp	r5, #4
 80077a0:	f47f af48 	bne.w	8007634 <_scanf_float+0x60>
 80077a4:	3501      	adds	r5, #1
 80077a6:	b2ed      	uxtb	r5, r5
 80077a8:	e7d8      	b.n	800775c <_scanf_float+0x188>
 80077aa:	f1ba 0f01 	cmp.w	sl, #1
 80077ae:	f47f af41 	bne.w	8007634 <_scanf_float+0x60>
 80077b2:	f04f 0a02 	mov.w	sl, #2
 80077b6:	e7d1      	b.n	800775c <_scanf_float+0x188>
 80077b8:	b97d      	cbnz	r5, 80077da <_scanf_float+0x206>
 80077ba:	f1b9 0f00 	cmp.w	r9, #0
 80077be:	f47f af3c 	bne.w	800763a <_scanf_float+0x66>
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077cc:	f47f af39 	bne.w	8007642 <_scanf_float+0x6e>
 80077d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077d4:	6022      	str	r2, [r4, #0]
 80077d6:	2501      	movs	r5, #1
 80077d8:	e7c0      	b.n	800775c <_scanf_float+0x188>
 80077da:	2d03      	cmp	r5, #3
 80077dc:	d0e2      	beq.n	80077a4 <_scanf_float+0x1d0>
 80077de:	2d05      	cmp	r5, #5
 80077e0:	e7de      	b.n	80077a0 <_scanf_float+0x1cc>
 80077e2:	2d02      	cmp	r5, #2
 80077e4:	f47f af26 	bne.w	8007634 <_scanf_float+0x60>
 80077e8:	2503      	movs	r5, #3
 80077ea:	e7b7      	b.n	800775c <_scanf_float+0x188>
 80077ec:	2d06      	cmp	r5, #6
 80077ee:	f47f af21 	bne.w	8007634 <_scanf_float+0x60>
 80077f2:	2507      	movs	r5, #7
 80077f4:	e7b2      	b.n	800775c <_scanf_float+0x188>
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	0591      	lsls	r1, r2, #22
 80077fa:	f57f af1b 	bpl.w	8007634 <_scanf_float+0x60>
 80077fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007802:	6022      	str	r2, [r4, #0]
 8007804:	f8cd 9004 	str.w	r9, [sp, #4]
 8007808:	e7a8      	b.n	800775c <_scanf_float+0x188>
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007810:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007814:	d006      	beq.n	8007824 <_scanf_float+0x250>
 8007816:	0550      	lsls	r0, r2, #21
 8007818:	f57f af0c 	bpl.w	8007634 <_scanf_float+0x60>
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	f43f af0f 	beq.w	8007642 <_scanf_float+0x6e>
 8007824:	0591      	lsls	r1, r2, #22
 8007826:	bf58      	it	pl
 8007828:	9901      	ldrpl	r1, [sp, #4]
 800782a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800782e:	bf58      	it	pl
 8007830:	eba9 0101 	subpl.w	r1, r9, r1
 8007834:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007838:	bf58      	it	pl
 800783a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800783e:	6022      	str	r2, [r4, #0]
 8007840:	f04f 0900 	mov.w	r9, #0
 8007844:	e78a      	b.n	800775c <_scanf_float+0x188>
 8007846:	f04f 0a03 	mov.w	sl, #3
 800784a:	e787      	b.n	800775c <_scanf_float+0x188>
 800784c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007850:	4639      	mov	r1, r7
 8007852:	4640      	mov	r0, r8
 8007854:	4798      	blx	r3
 8007856:	2800      	cmp	r0, #0
 8007858:	f43f aedf 	beq.w	800761a <_scanf_float+0x46>
 800785c:	e6ea      	b.n	8007634 <_scanf_float+0x60>
 800785e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007866:	463a      	mov	r2, r7
 8007868:	4640      	mov	r0, r8
 800786a:	4798      	blx	r3
 800786c:	6923      	ldr	r3, [r4, #16]
 800786e:	3b01      	subs	r3, #1
 8007870:	6123      	str	r3, [r4, #16]
 8007872:	e6ec      	b.n	800764e <_scanf_float+0x7a>
 8007874:	1e6b      	subs	r3, r5, #1
 8007876:	2b06      	cmp	r3, #6
 8007878:	d825      	bhi.n	80078c6 <_scanf_float+0x2f2>
 800787a:	2d02      	cmp	r5, #2
 800787c:	d836      	bhi.n	80078ec <_scanf_float+0x318>
 800787e:	455e      	cmp	r6, fp
 8007880:	f67f aee8 	bls.w	8007654 <_scanf_float+0x80>
 8007884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007888:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800788c:	463a      	mov	r2, r7
 800788e:	4640      	mov	r0, r8
 8007890:	4798      	blx	r3
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	3b01      	subs	r3, #1
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	e7f1      	b.n	800787e <_scanf_float+0x2aa>
 800789a:	9802      	ldr	r0, [sp, #8]
 800789c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80078a4:	9002      	str	r0, [sp, #8]
 80078a6:	463a      	mov	r2, r7
 80078a8:	4640      	mov	r0, r8
 80078aa:	4798      	blx	r3
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	6123      	str	r3, [r4, #16]
 80078b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078b6:	fa5f fa8a 	uxtb.w	sl, sl
 80078ba:	f1ba 0f02 	cmp.w	sl, #2
 80078be:	d1ec      	bne.n	800789a <_scanf_float+0x2c6>
 80078c0:	3d03      	subs	r5, #3
 80078c2:	b2ed      	uxtb	r5, r5
 80078c4:	1b76      	subs	r6, r6, r5
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	05da      	lsls	r2, r3, #23
 80078ca:	d52f      	bpl.n	800792c <_scanf_float+0x358>
 80078cc:	055b      	lsls	r3, r3, #21
 80078ce:	d510      	bpl.n	80078f2 <_scanf_float+0x31e>
 80078d0:	455e      	cmp	r6, fp
 80078d2:	f67f aebf 	bls.w	8007654 <_scanf_float+0x80>
 80078d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078de:	463a      	mov	r2, r7
 80078e0:	4640      	mov	r0, r8
 80078e2:	4798      	blx	r3
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	e7f1      	b.n	80078d0 <_scanf_float+0x2fc>
 80078ec:	46aa      	mov	sl, r5
 80078ee:	9602      	str	r6, [sp, #8]
 80078f0:	e7df      	b.n	80078b2 <_scanf_float+0x2de>
 80078f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80078f6:	6923      	ldr	r3, [r4, #16]
 80078f8:	2965      	cmp	r1, #101	; 0x65
 80078fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80078fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007902:	6123      	str	r3, [r4, #16]
 8007904:	d00c      	beq.n	8007920 <_scanf_float+0x34c>
 8007906:	2945      	cmp	r1, #69	; 0x45
 8007908:	d00a      	beq.n	8007920 <_scanf_float+0x34c>
 800790a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800790e:	463a      	mov	r2, r7
 8007910:	4640      	mov	r0, r8
 8007912:	4798      	blx	r3
 8007914:	6923      	ldr	r3, [r4, #16]
 8007916:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800791a:	3b01      	subs	r3, #1
 800791c:	1eb5      	subs	r5, r6, #2
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007924:	463a      	mov	r2, r7
 8007926:	4640      	mov	r0, r8
 8007928:	4798      	blx	r3
 800792a:	462e      	mov	r6, r5
 800792c:	6825      	ldr	r5, [r4, #0]
 800792e:	f015 0510 	ands.w	r5, r5, #16
 8007932:	d159      	bne.n	80079e8 <_scanf_float+0x414>
 8007934:	7035      	strb	r5, [r6, #0]
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800793c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007940:	d11b      	bne.n	800797a <_scanf_float+0x3a6>
 8007942:	9b01      	ldr	r3, [sp, #4]
 8007944:	454b      	cmp	r3, r9
 8007946:	eba3 0209 	sub.w	r2, r3, r9
 800794a:	d123      	bne.n	8007994 <_scanf_float+0x3c0>
 800794c:	2200      	movs	r2, #0
 800794e:	4659      	mov	r1, fp
 8007950:	4640      	mov	r0, r8
 8007952:	f000 fe97 	bl	8008684 <_strtod_r>
 8007956:	6822      	ldr	r2, [r4, #0]
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	f012 0f02 	tst.w	r2, #2
 800795e:	ec57 6b10 	vmov	r6, r7, d0
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	d021      	beq.n	80079aa <_scanf_float+0x3d6>
 8007966:	9903      	ldr	r1, [sp, #12]
 8007968:	1d1a      	adds	r2, r3, #4
 800796a:	600a      	str	r2, [r1, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	e9c3 6700 	strd	r6, r7, [r3]
 8007972:	68e3      	ldr	r3, [r4, #12]
 8007974:	3301      	adds	r3, #1
 8007976:	60e3      	str	r3, [r4, #12]
 8007978:	e66d      	b.n	8007656 <_scanf_float+0x82>
 800797a:	9b04      	ldr	r3, [sp, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0e5      	beq.n	800794c <_scanf_float+0x378>
 8007980:	9905      	ldr	r1, [sp, #20]
 8007982:	230a      	movs	r3, #10
 8007984:	462a      	mov	r2, r5
 8007986:	3101      	adds	r1, #1
 8007988:	4640      	mov	r0, r8
 800798a:	f000 ff03 	bl	8008794 <_strtol_r>
 800798e:	9b04      	ldr	r3, [sp, #16]
 8007990:	9e05      	ldr	r6, [sp, #20]
 8007992:	1ac2      	subs	r2, r0, r3
 8007994:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007998:	429e      	cmp	r6, r3
 800799a:	bf28      	it	cs
 800799c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80079a0:	4912      	ldr	r1, [pc, #72]	; (80079ec <_scanf_float+0x418>)
 80079a2:	4630      	mov	r0, r6
 80079a4:	f000 f82c 	bl	8007a00 <siprintf>
 80079a8:	e7d0      	b.n	800794c <_scanf_float+0x378>
 80079aa:	9903      	ldr	r1, [sp, #12]
 80079ac:	f012 0f04 	tst.w	r2, #4
 80079b0:	f103 0204 	add.w	r2, r3, #4
 80079b4:	600a      	str	r2, [r1, #0]
 80079b6:	d1d9      	bne.n	800796c <_scanf_float+0x398>
 80079b8:	f8d3 8000 	ldr.w	r8, [r3]
 80079bc:	ee10 2a10 	vmov	r2, s0
 80079c0:	ee10 0a10 	vmov	r0, s0
 80079c4:	463b      	mov	r3, r7
 80079c6:	4639      	mov	r1, r7
 80079c8:	f7f9 f8b0 	bl	8000b2c <__aeabi_dcmpun>
 80079cc:	b128      	cbz	r0, 80079da <_scanf_float+0x406>
 80079ce:	4808      	ldr	r0, [pc, #32]	; (80079f0 <_scanf_float+0x41c>)
 80079d0:	f000 f810 	bl	80079f4 <nanf>
 80079d4:	ed88 0a00 	vstr	s0, [r8]
 80079d8:	e7cb      	b.n	8007972 <_scanf_float+0x39e>
 80079da:	4630      	mov	r0, r6
 80079dc:	4639      	mov	r1, r7
 80079de:	f7f9 f903 	bl	8000be8 <__aeabi_d2f>
 80079e2:	f8c8 0000 	str.w	r0, [r8]
 80079e6:	e7c4      	b.n	8007972 <_scanf_float+0x39e>
 80079e8:	2500      	movs	r5, #0
 80079ea:	e634      	b.n	8007656 <_scanf_float+0x82>
 80079ec:	0800b678 	.word	0x0800b678
 80079f0:	0800ba80 	.word	0x0800ba80

080079f4 <nanf>:
 80079f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079fc <nanf+0x8>
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	7fc00000 	.word	0x7fc00000

08007a00 <siprintf>:
 8007a00:	b40e      	push	{r1, r2, r3}
 8007a02:	b500      	push	{lr}
 8007a04:	b09c      	sub	sp, #112	; 0x70
 8007a06:	ab1d      	add	r3, sp, #116	; 0x74
 8007a08:	9002      	str	r0, [sp, #8]
 8007a0a:	9006      	str	r0, [sp, #24]
 8007a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a10:	4809      	ldr	r0, [pc, #36]	; (8007a38 <siprintf+0x38>)
 8007a12:	9107      	str	r1, [sp, #28]
 8007a14:	9104      	str	r1, [sp, #16]
 8007a16:	4909      	ldr	r1, [pc, #36]	; (8007a3c <siprintf+0x3c>)
 8007a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a1c:	9105      	str	r1, [sp, #20]
 8007a1e:	6800      	ldr	r0, [r0, #0]
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	a902      	add	r1, sp, #8
 8007a24:	f002 fee2 	bl	800a7ec <_svfiprintf_r>
 8007a28:	9b02      	ldr	r3, [sp, #8]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	b01c      	add	sp, #112	; 0x70
 8007a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a34:	b003      	add	sp, #12
 8007a36:	4770      	bx	lr
 8007a38:	2000000c 	.word	0x2000000c
 8007a3c:	ffff0208 	.word	0xffff0208

08007a40 <sulp>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4604      	mov	r4, r0
 8007a44:	460d      	mov	r5, r1
 8007a46:	ec45 4b10 	vmov	d0, r4, r5
 8007a4a:	4616      	mov	r6, r2
 8007a4c:	f002 fc2c 	bl	800a2a8 <__ulp>
 8007a50:	ec51 0b10 	vmov	r0, r1, d0
 8007a54:	b17e      	cbz	r6, 8007a76 <sulp+0x36>
 8007a56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dd09      	ble.n	8007a76 <sulp+0x36>
 8007a62:	051b      	lsls	r3, r3, #20
 8007a64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a68:	2400      	movs	r4, #0
 8007a6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	f7f8 fdc1 	bl	80005f8 <__aeabi_dmul>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}

08007a78 <_strtod_l>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	ed2d 8b02 	vpush	{d8}
 8007a80:	b09d      	sub	sp, #116	; 0x74
 8007a82:	461f      	mov	r7, r3
 8007a84:	2300      	movs	r3, #0
 8007a86:	9318      	str	r3, [sp, #96]	; 0x60
 8007a88:	4ba2      	ldr	r3, [pc, #648]	; (8007d14 <_strtod_l+0x29c>)
 8007a8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	9305      	str	r3, [sp, #20]
 8007a90:	4604      	mov	r4, r0
 8007a92:	4618      	mov	r0, r3
 8007a94:	4688      	mov	r8, r1
 8007a96:	f7f8 fb9b 	bl	80001d0 <strlen>
 8007a9a:	f04f 0a00 	mov.w	sl, #0
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	f04f 0b00 	mov.w	fp, #0
 8007aa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	2a2b      	cmp	r2, #43	; 0x2b
 8007aae:	d04e      	beq.n	8007b4e <_strtod_l+0xd6>
 8007ab0:	d83b      	bhi.n	8007b2a <_strtod_l+0xb2>
 8007ab2:	2a0d      	cmp	r2, #13
 8007ab4:	d834      	bhi.n	8007b20 <_strtod_l+0xa8>
 8007ab6:	2a08      	cmp	r2, #8
 8007ab8:	d834      	bhi.n	8007b24 <_strtod_l+0xac>
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d03e      	beq.n	8007b3c <_strtod_l+0xc4>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ac2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007ac4:	7833      	ldrb	r3, [r6, #0]
 8007ac6:	2b30      	cmp	r3, #48	; 0x30
 8007ac8:	f040 80b0 	bne.w	8007c2c <_strtod_l+0x1b4>
 8007acc:	7873      	ldrb	r3, [r6, #1]
 8007ace:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ad2:	2b58      	cmp	r3, #88	; 0x58
 8007ad4:	d168      	bne.n	8007ba8 <_strtod_l+0x130>
 8007ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	ab18      	add	r3, sp, #96	; 0x60
 8007adc:	9702      	str	r7, [sp, #8]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	4a8d      	ldr	r2, [pc, #564]	; (8007d18 <_strtod_l+0x2a0>)
 8007ae2:	ab19      	add	r3, sp, #100	; 0x64
 8007ae4:	a917      	add	r1, sp, #92	; 0x5c
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f001 fd38 	bl	800955c <__gethex>
 8007aec:	f010 0707 	ands.w	r7, r0, #7
 8007af0:	4605      	mov	r5, r0
 8007af2:	d005      	beq.n	8007b00 <_strtod_l+0x88>
 8007af4:	2f06      	cmp	r7, #6
 8007af6:	d12c      	bne.n	8007b52 <_strtod_l+0xda>
 8007af8:	3601      	adds	r6, #1
 8007afa:	2300      	movs	r3, #0
 8007afc:	9617      	str	r6, [sp, #92]	; 0x5c
 8007afe:	930a      	str	r3, [sp, #40]	; 0x28
 8007b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f040 8590 	bne.w	8008628 <_strtod_l+0xbb0>
 8007b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0a:	b1eb      	cbz	r3, 8007b48 <_strtod_l+0xd0>
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b12:	ec43 2b10 	vmov	d0, r2, r3
 8007b16:	b01d      	add	sp, #116	; 0x74
 8007b18:	ecbd 8b02 	vpop	{d8}
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b20:	2a20      	cmp	r2, #32
 8007b22:	d1cc      	bne.n	8007abe <_strtod_l+0x46>
 8007b24:	3301      	adds	r3, #1
 8007b26:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b28:	e7be      	b.n	8007aa8 <_strtod_l+0x30>
 8007b2a:	2a2d      	cmp	r2, #45	; 0x2d
 8007b2c:	d1c7      	bne.n	8007abe <_strtod_l+0x46>
 8007b2e:	2201      	movs	r2, #1
 8007b30:	920a      	str	r2, [sp, #40]	; 0x28
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1c2      	bne.n	8007ac2 <_strtod_l+0x4a>
 8007b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 856e 	bne.w	8008624 <_strtod_l+0xbac>
 8007b48:	4652      	mov	r2, sl
 8007b4a:	465b      	mov	r3, fp
 8007b4c:	e7e1      	b.n	8007b12 <_strtod_l+0x9a>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	e7ee      	b.n	8007b30 <_strtod_l+0xb8>
 8007b52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b54:	b13a      	cbz	r2, 8007b66 <_strtod_l+0xee>
 8007b56:	2135      	movs	r1, #53	; 0x35
 8007b58:	a81a      	add	r0, sp, #104	; 0x68
 8007b5a:	f002 fcb0 	bl	800a4be <__copybits>
 8007b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b60:	4620      	mov	r0, r4
 8007b62:	f002 f86f 	bl	8009c44 <_Bfree>
 8007b66:	3f01      	subs	r7, #1
 8007b68:	2f04      	cmp	r7, #4
 8007b6a:	d806      	bhi.n	8007b7a <_strtod_l+0x102>
 8007b6c:	e8df f007 	tbb	[pc, r7]
 8007b70:	1714030a 	.word	0x1714030a
 8007b74:	0a          	.byte	0x0a
 8007b75:	00          	.byte	0x00
 8007b76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007b7a:	0728      	lsls	r0, r5, #28
 8007b7c:	d5c0      	bpl.n	8007b00 <_strtod_l+0x88>
 8007b7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b82:	e7bd      	b.n	8007b00 <_strtod_l+0x88>
 8007b84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b96:	e7f0      	b.n	8007b7a <_strtod_l+0x102>
 8007b98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007d1c <_strtod_l+0x2a4>
 8007b9c:	e7ed      	b.n	8007b7a <_strtod_l+0x102>
 8007b9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007ba2:	f04f 3aff 	mov.w	sl, #4294967295
 8007ba6:	e7e8      	b.n	8007b7a <_strtod_l+0x102>
 8007ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	2b30      	cmp	r3, #48	; 0x30
 8007bb2:	d0f9      	beq.n	8007ba8 <_strtod_l+0x130>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0a3      	beq.n	8007b00 <_strtod_l+0x88>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f04f 0900 	mov.w	r9, #0
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bc2:	9308      	str	r3, [sp, #32]
 8007bc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8007bc8:	464f      	mov	r7, r9
 8007bca:	220a      	movs	r2, #10
 8007bcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007bce:	7806      	ldrb	r6, [r0, #0]
 8007bd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007bd4:	b2d9      	uxtb	r1, r3
 8007bd6:	2909      	cmp	r1, #9
 8007bd8:	d92a      	bls.n	8007c30 <_strtod_l+0x1b8>
 8007bda:	9905      	ldr	r1, [sp, #20]
 8007bdc:	462a      	mov	r2, r5
 8007bde:	f002 ff1f 	bl	800aa20 <strncmp>
 8007be2:	b398      	cbz	r0, 8007c4c <_strtod_l+0x1d4>
 8007be4:	2000      	movs	r0, #0
 8007be6:	4632      	mov	r2, r6
 8007be8:	463d      	mov	r5, r7
 8007bea:	9005      	str	r0, [sp, #20]
 8007bec:	4603      	mov	r3, r0
 8007bee:	2a65      	cmp	r2, #101	; 0x65
 8007bf0:	d001      	beq.n	8007bf6 <_strtod_l+0x17e>
 8007bf2:	2a45      	cmp	r2, #69	; 0x45
 8007bf4:	d118      	bne.n	8007c28 <_strtod_l+0x1b0>
 8007bf6:	b91d      	cbnz	r5, 8007c00 <_strtod_l+0x188>
 8007bf8:	9a04      	ldr	r2, [sp, #16]
 8007bfa:	4302      	orrs	r2, r0
 8007bfc:	d09e      	beq.n	8007b3c <_strtod_l+0xc4>
 8007bfe:	2500      	movs	r5, #0
 8007c00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007c04:	f108 0201 	add.w	r2, r8, #1
 8007c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007c0e:	2a2b      	cmp	r2, #43	; 0x2b
 8007c10:	d075      	beq.n	8007cfe <_strtod_l+0x286>
 8007c12:	2a2d      	cmp	r2, #45	; 0x2d
 8007c14:	d07b      	beq.n	8007d0e <_strtod_l+0x296>
 8007c16:	f04f 0c00 	mov.w	ip, #0
 8007c1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c1e:	2909      	cmp	r1, #9
 8007c20:	f240 8082 	bls.w	8007d28 <_strtod_l+0x2b0>
 8007c24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c28:	2600      	movs	r6, #0
 8007c2a:	e09d      	b.n	8007d68 <_strtod_l+0x2f0>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e7c4      	b.n	8007bba <_strtod_l+0x142>
 8007c30:	2f08      	cmp	r7, #8
 8007c32:	bfd8      	it	le
 8007c34:	9907      	ldrle	r1, [sp, #28]
 8007c36:	f100 0001 	add.w	r0, r0, #1
 8007c3a:	bfda      	itte	le
 8007c3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c40:	9307      	strle	r3, [sp, #28]
 8007c42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007c46:	3701      	adds	r7, #1
 8007c48:	9017      	str	r0, [sp, #92]	; 0x5c
 8007c4a:	e7bf      	b.n	8007bcc <_strtod_l+0x154>
 8007c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c4e:	195a      	adds	r2, r3, r5
 8007c50:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c52:	5d5a      	ldrb	r2, [r3, r5]
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	d037      	beq.n	8007cc8 <_strtod_l+0x250>
 8007c58:	9005      	str	r0, [sp, #20]
 8007c5a:	463d      	mov	r5, r7
 8007c5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c60:	2b09      	cmp	r3, #9
 8007c62:	d912      	bls.n	8007c8a <_strtod_l+0x212>
 8007c64:	2301      	movs	r3, #1
 8007c66:	e7c2      	b.n	8007bee <_strtod_l+0x176>
 8007c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c6e:	785a      	ldrb	r2, [r3, #1]
 8007c70:	3001      	adds	r0, #1
 8007c72:	2a30      	cmp	r2, #48	; 0x30
 8007c74:	d0f8      	beq.n	8007c68 <_strtod_l+0x1f0>
 8007c76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c7a:	2b08      	cmp	r3, #8
 8007c7c:	f200 84d9 	bhi.w	8008632 <_strtod_l+0xbba>
 8007c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c82:	9005      	str	r0, [sp, #20]
 8007c84:	2000      	movs	r0, #0
 8007c86:	9308      	str	r3, [sp, #32]
 8007c88:	4605      	mov	r5, r0
 8007c8a:	3a30      	subs	r2, #48	; 0x30
 8007c8c:	f100 0301 	add.w	r3, r0, #1
 8007c90:	d014      	beq.n	8007cbc <_strtod_l+0x244>
 8007c92:	9905      	ldr	r1, [sp, #20]
 8007c94:	4419      	add	r1, r3
 8007c96:	9105      	str	r1, [sp, #20]
 8007c98:	462b      	mov	r3, r5
 8007c9a:	eb00 0e05 	add.w	lr, r0, r5
 8007c9e:	210a      	movs	r1, #10
 8007ca0:	4573      	cmp	r3, lr
 8007ca2:	d113      	bne.n	8007ccc <_strtod_l+0x254>
 8007ca4:	182b      	adds	r3, r5, r0
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	f105 0501 	add.w	r5, r5, #1
 8007cac:	4405      	add	r5, r0
 8007cae:	dc1c      	bgt.n	8007cea <_strtod_l+0x272>
 8007cb0:	9907      	ldr	r1, [sp, #28]
 8007cb2:	230a      	movs	r3, #10
 8007cb4:	fb03 2301 	mla	r3, r3, r1, r2
 8007cb8:	9307      	str	r3, [sp, #28]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cbe:	1c51      	adds	r1, r2, #1
 8007cc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cc2:	7852      	ldrb	r2, [r2, #1]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	e7c9      	b.n	8007c5c <_strtod_l+0x1e4>
 8007cc8:	4638      	mov	r0, r7
 8007cca:	e7d2      	b.n	8007c72 <_strtod_l+0x1fa>
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	dc04      	bgt.n	8007cda <_strtod_l+0x262>
 8007cd0:	9e07      	ldr	r6, [sp, #28]
 8007cd2:	434e      	muls	r6, r1
 8007cd4:	9607      	str	r6, [sp, #28]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	e7e2      	b.n	8007ca0 <_strtod_l+0x228>
 8007cda:	f103 0c01 	add.w	ip, r3, #1
 8007cde:	f1bc 0f10 	cmp.w	ip, #16
 8007ce2:	bfd8      	it	le
 8007ce4:	fb01 f909 	mulle.w	r9, r1, r9
 8007ce8:	e7f5      	b.n	8007cd6 <_strtod_l+0x25e>
 8007cea:	2d10      	cmp	r5, #16
 8007cec:	bfdc      	itt	le
 8007cee:	230a      	movle	r3, #10
 8007cf0:	fb03 2909 	mlale	r9, r3, r9, r2
 8007cf4:	e7e1      	b.n	8007cba <_strtod_l+0x242>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e77c      	b.n	8007bf8 <_strtod_l+0x180>
 8007cfe:	f04f 0c00 	mov.w	ip, #0
 8007d02:	f108 0202 	add.w	r2, r8, #2
 8007d06:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007d0c:	e785      	b.n	8007c1a <_strtod_l+0x1a2>
 8007d0e:	f04f 0c01 	mov.w	ip, #1
 8007d12:	e7f6      	b.n	8007d02 <_strtod_l+0x28a>
 8007d14:	0800b8c8 	.word	0x0800b8c8
 8007d18:	0800b680 	.word	0x0800b680
 8007d1c:	7ff00000 	.word	0x7ff00000
 8007d20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d22:	1c51      	adds	r1, r2, #1
 8007d24:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d26:	7852      	ldrb	r2, [r2, #1]
 8007d28:	2a30      	cmp	r2, #48	; 0x30
 8007d2a:	d0f9      	beq.n	8007d20 <_strtod_l+0x2a8>
 8007d2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d30:	2908      	cmp	r1, #8
 8007d32:	f63f af79 	bhi.w	8007c28 <_strtod_l+0x1b0>
 8007d36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007d3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d3c:	9206      	str	r2, [sp, #24]
 8007d3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d40:	1c51      	adds	r1, r2, #1
 8007d42:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d44:	7852      	ldrb	r2, [r2, #1]
 8007d46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007d4a:	2e09      	cmp	r6, #9
 8007d4c:	d937      	bls.n	8007dbe <_strtod_l+0x346>
 8007d4e:	9e06      	ldr	r6, [sp, #24]
 8007d50:	1b89      	subs	r1, r1, r6
 8007d52:	2908      	cmp	r1, #8
 8007d54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007d58:	dc02      	bgt.n	8007d60 <_strtod_l+0x2e8>
 8007d5a:	4576      	cmp	r6, lr
 8007d5c:	bfa8      	it	ge
 8007d5e:	4676      	movge	r6, lr
 8007d60:	f1bc 0f00 	cmp.w	ip, #0
 8007d64:	d000      	beq.n	8007d68 <_strtod_l+0x2f0>
 8007d66:	4276      	negs	r6, r6
 8007d68:	2d00      	cmp	r5, #0
 8007d6a:	d14d      	bne.n	8007e08 <_strtod_l+0x390>
 8007d6c:	9904      	ldr	r1, [sp, #16]
 8007d6e:	4301      	orrs	r1, r0
 8007d70:	f47f aec6 	bne.w	8007b00 <_strtod_l+0x88>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f aee1 	bne.w	8007b3c <_strtod_l+0xc4>
 8007d7a:	2a69      	cmp	r2, #105	; 0x69
 8007d7c:	d027      	beq.n	8007dce <_strtod_l+0x356>
 8007d7e:	dc24      	bgt.n	8007dca <_strtod_l+0x352>
 8007d80:	2a49      	cmp	r2, #73	; 0x49
 8007d82:	d024      	beq.n	8007dce <_strtod_l+0x356>
 8007d84:	2a4e      	cmp	r2, #78	; 0x4e
 8007d86:	f47f aed9 	bne.w	8007b3c <_strtod_l+0xc4>
 8007d8a:	499f      	ldr	r1, [pc, #636]	; (8008008 <_strtod_l+0x590>)
 8007d8c:	a817      	add	r0, sp, #92	; 0x5c
 8007d8e:	f001 fe3d 	bl	8009a0c <__match>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f aed2 	beq.w	8007b3c <_strtod_l+0xc4>
 8007d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b28      	cmp	r3, #40	; 0x28
 8007d9e:	d12d      	bne.n	8007dfc <_strtod_l+0x384>
 8007da0:	499a      	ldr	r1, [pc, #616]	; (800800c <_strtod_l+0x594>)
 8007da2:	aa1a      	add	r2, sp, #104	; 0x68
 8007da4:	a817      	add	r0, sp, #92	; 0x5c
 8007da6:	f001 fe45 	bl	8009a34 <__hexnan>
 8007daa:	2805      	cmp	r0, #5
 8007dac:	d126      	bne.n	8007dfc <_strtod_l+0x384>
 8007dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007db0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007db4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007db8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007dbc:	e6a0      	b.n	8007b00 <_strtod_l+0x88>
 8007dbe:	210a      	movs	r1, #10
 8007dc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007dc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007dc8:	e7b9      	b.n	8007d3e <_strtod_l+0x2c6>
 8007dca:	2a6e      	cmp	r2, #110	; 0x6e
 8007dcc:	e7db      	b.n	8007d86 <_strtod_l+0x30e>
 8007dce:	4990      	ldr	r1, [pc, #576]	; (8008010 <_strtod_l+0x598>)
 8007dd0:	a817      	add	r0, sp, #92	; 0x5c
 8007dd2:	f001 fe1b 	bl	8009a0c <__match>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	f43f aeb0 	beq.w	8007b3c <_strtod_l+0xc4>
 8007ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dde:	498d      	ldr	r1, [pc, #564]	; (8008014 <_strtod_l+0x59c>)
 8007de0:	3b01      	subs	r3, #1
 8007de2:	a817      	add	r0, sp, #92	; 0x5c
 8007de4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007de6:	f001 fe11 	bl	8009a0c <__match>
 8007dea:	b910      	cbnz	r0, 8007df2 <_strtod_l+0x37a>
 8007dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dee:	3301      	adds	r3, #1
 8007df0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007df2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008024 <_strtod_l+0x5ac>
 8007df6:	f04f 0a00 	mov.w	sl, #0
 8007dfa:	e681      	b.n	8007b00 <_strtod_l+0x88>
 8007dfc:	4886      	ldr	r0, [pc, #536]	; (8008018 <_strtod_l+0x5a0>)
 8007dfe:	f002 fdf7 	bl	800a9f0 <nan>
 8007e02:	ec5b ab10 	vmov	sl, fp, d0
 8007e06:	e67b      	b.n	8007b00 <_strtod_l+0x88>
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	9807      	ldr	r0, [sp, #28]
 8007e0c:	1af3      	subs	r3, r6, r3
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	bf08      	it	eq
 8007e12:	462f      	moveq	r7, r5
 8007e14:	2d10      	cmp	r5, #16
 8007e16:	9306      	str	r3, [sp, #24]
 8007e18:	46a8      	mov	r8, r5
 8007e1a:	bfa8      	it	ge
 8007e1c:	f04f 0810 	movge.w	r8, #16
 8007e20:	f7f8 fb70 	bl	8000504 <__aeabi_ui2d>
 8007e24:	2d09      	cmp	r5, #9
 8007e26:	4682      	mov	sl, r0
 8007e28:	468b      	mov	fp, r1
 8007e2a:	dd13      	ble.n	8007e54 <_strtod_l+0x3dc>
 8007e2c:	4b7b      	ldr	r3, [pc, #492]	; (800801c <_strtod_l+0x5a4>)
 8007e2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e36:	f7f8 fbdf 	bl	80005f8 <__aeabi_dmul>
 8007e3a:	4682      	mov	sl, r0
 8007e3c:	4648      	mov	r0, r9
 8007e3e:	468b      	mov	fp, r1
 8007e40:	f7f8 fb60 	bl	8000504 <__aeabi_ui2d>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4650      	mov	r0, sl
 8007e4a:	4659      	mov	r1, fp
 8007e4c:	f7f8 fa1e 	bl	800028c <__adddf3>
 8007e50:	4682      	mov	sl, r0
 8007e52:	468b      	mov	fp, r1
 8007e54:	2d0f      	cmp	r5, #15
 8007e56:	dc38      	bgt.n	8007eca <_strtod_l+0x452>
 8007e58:	9b06      	ldr	r3, [sp, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f43f ae50 	beq.w	8007b00 <_strtod_l+0x88>
 8007e60:	dd24      	ble.n	8007eac <_strtod_l+0x434>
 8007e62:	2b16      	cmp	r3, #22
 8007e64:	dc0b      	bgt.n	8007e7e <_strtod_l+0x406>
 8007e66:	496d      	ldr	r1, [pc, #436]	; (800801c <_strtod_l+0x5a4>)
 8007e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e70:	4652      	mov	r2, sl
 8007e72:	465b      	mov	r3, fp
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	4682      	mov	sl, r0
 8007e7a:	468b      	mov	fp, r1
 8007e7c:	e640      	b.n	8007b00 <_strtod_l+0x88>
 8007e7e:	9a06      	ldr	r2, [sp, #24]
 8007e80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e84:	4293      	cmp	r3, r2
 8007e86:	db20      	blt.n	8007eca <_strtod_l+0x452>
 8007e88:	4c64      	ldr	r4, [pc, #400]	; (800801c <_strtod_l+0x5a4>)
 8007e8a:	f1c5 050f 	rsb	r5, r5, #15
 8007e8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e92:	4652      	mov	r2, sl
 8007e94:	465b      	mov	r3, fp
 8007e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e9a:	f7f8 fbad 	bl	80005f8 <__aeabi_dmul>
 8007e9e:	9b06      	ldr	r3, [sp, #24]
 8007ea0:	1b5d      	subs	r5, r3, r5
 8007ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007eaa:	e7e3      	b.n	8007e74 <_strtod_l+0x3fc>
 8007eac:	9b06      	ldr	r3, [sp, #24]
 8007eae:	3316      	adds	r3, #22
 8007eb0:	db0b      	blt.n	8007eca <_strtod_l+0x452>
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	1b9e      	subs	r6, r3, r6
 8007eb6:	4b59      	ldr	r3, [pc, #356]	; (800801c <_strtod_l+0x5a4>)
 8007eb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	f7f8 fcc2 	bl	800084c <__aeabi_ddiv>
 8007ec8:	e7d6      	b.n	8007e78 <_strtod_l+0x400>
 8007eca:	9b06      	ldr	r3, [sp, #24]
 8007ecc:	eba5 0808 	sub.w	r8, r5, r8
 8007ed0:	4498      	add	r8, r3
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	dd74      	ble.n	8007fc2 <_strtod_l+0x54a>
 8007ed8:	f018 030f 	ands.w	r3, r8, #15
 8007edc:	d00a      	beq.n	8007ef4 <_strtod_l+0x47c>
 8007ede:	494f      	ldr	r1, [pc, #316]	; (800801c <_strtod_l+0x5a4>)
 8007ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ee4:	4652      	mov	r2, sl
 8007ee6:	465b      	mov	r3, fp
 8007ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eec:	f7f8 fb84 	bl	80005f8 <__aeabi_dmul>
 8007ef0:	4682      	mov	sl, r0
 8007ef2:	468b      	mov	fp, r1
 8007ef4:	f038 080f 	bics.w	r8, r8, #15
 8007ef8:	d04f      	beq.n	8007f9a <_strtod_l+0x522>
 8007efa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007efe:	dd22      	ble.n	8007f46 <_strtod_l+0x4ce>
 8007f00:	2500      	movs	r5, #0
 8007f02:	462e      	mov	r6, r5
 8007f04:	9507      	str	r5, [sp, #28]
 8007f06:	9505      	str	r5, [sp, #20]
 8007f08:	2322      	movs	r3, #34	; 0x22
 8007f0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008024 <_strtod_l+0x5ac>
 8007f0e:	6023      	str	r3, [r4, #0]
 8007f10:	f04f 0a00 	mov.w	sl, #0
 8007f14:	9b07      	ldr	r3, [sp, #28]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f43f adf2 	beq.w	8007b00 <_strtod_l+0x88>
 8007f1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f001 fe90 	bl	8009c44 <_Bfree>
 8007f24:	9905      	ldr	r1, [sp, #20]
 8007f26:	4620      	mov	r0, r4
 8007f28:	f001 fe8c 	bl	8009c44 <_Bfree>
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f001 fe88 	bl	8009c44 <_Bfree>
 8007f34:	9907      	ldr	r1, [sp, #28]
 8007f36:	4620      	mov	r0, r4
 8007f38:	f001 fe84 	bl	8009c44 <_Bfree>
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f001 fe80 	bl	8009c44 <_Bfree>
 8007f44:	e5dc      	b.n	8007b00 <_strtod_l+0x88>
 8007f46:	4b36      	ldr	r3, [pc, #216]	; (8008020 <_strtod_l+0x5a8>)
 8007f48:	9304      	str	r3, [sp, #16]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007f50:	4650      	mov	r0, sl
 8007f52:	4659      	mov	r1, fp
 8007f54:	4699      	mov	r9, r3
 8007f56:	f1b8 0f01 	cmp.w	r8, #1
 8007f5a:	dc21      	bgt.n	8007fa0 <_strtod_l+0x528>
 8007f5c:	b10b      	cbz	r3, 8007f62 <_strtod_l+0x4ea>
 8007f5e:	4682      	mov	sl, r0
 8007f60:	468b      	mov	fp, r1
 8007f62:	4b2f      	ldr	r3, [pc, #188]	; (8008020 <_strtod_l+0x5a8>)
 8007f64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f6c:	4652      	mov	r2, sl
 8007f6e:	465b      	mov	r3, fp
 8007f70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f74:	f7f8 fb40 	bl	80005f8 <__aeabi_dmul>
 8007f78:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <_strtod_l+0x5ac>)
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	400b      	ands	r3, r1
 8007f7e:	492a      	ldr	r1, [pc, #168]	; (8008028 <_strtod_l+0x5b0>)
 8007f80:	428b      	cmp	r3, r1
 8007f82:	4682      	mov	sl, r0
 8007f84:	d8bc      	bhi.n	8007f00 <_strtod_l+0x488>
 8007f86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f8a:	428b      	cmp	r3, r1
 8007f8c:	bf86      	itte	hi
 8007f8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800802c <_strtod_l+0x5b4>
 8007f92:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	e084      	b.n	80080aa <_strtod_l+0x632>
 8007fa0:	f018 0f01 	tst.w	r8, #1
 8007fa4:	d005      	beq.n	8007fb2 <_strtod_l+0x53a>
 8007fa6:	9b04      	ldr	r3, [sp, #16]
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 fb24 	bl	80005f8 <__aeabi_dmul>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	9a04      	ldr	r2, [sp, #16]
 8007fb4:	3208      	adds	r2, #8
 8007fb6:	f109 0901 	add.w	r9, r9, #1
 8007fba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007fbe:	9204      	str	r2, [sp, #16]
 8007fc0:	e7c9      	b.n	8007f56 <_strtod_l+0x4de>
 8007fc2:	d0ea      	beq.n	8007f9a <_strtod_l+0x522>
 8007fc4:	f1c8 0800 	rsb	r8, r8, #0
 8007fc8:	f018 020f 	ands.w	r2, r8, #15
 8007fcc:	d00a      	beq.n	8007fe4 <_strtod_l+0x56c>
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <_strtod_l+0x5a4>)
 8007fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	4659      	mov	r1, fp
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 fc36 	bl	800084c <__aeabi_ddiv>
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	468b      	mov	fp, r1
 8007fe4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007fe8:	d0d7      	beq.n	8007f9a <_strtod_l+0x522>
 8007fea:	f1b8 0f1f 	cmp.w	r8, #31
 8007fee:	dd1f      	ble.n	8008030 <_strtod_l+0x5b8>
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	462e      	mov	r6, r5
 8007ff4:	9507      	str	r5, [sp, #28]
 8007ff6:	9505      	str	r5, [sp, #20]
 8007ff8:	2322      	movs	r3, #34	; 0x22
 8007ffa:	f04f 0a00 	mov.w	sl, #0
 8007ffe:	f04f 0b00 	mov.w	fp, #0
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	e786      	b.n	8007f14 <_strtod_l+0x49c>
 8008006:	bf00      	nop
 8008008:	0800b651 	.word	0x0800b651
 800800c:	0800b694 	.word	0x0800b694
 8008010:	0800b649 	.word	0x0800b649
 8008014:	0800b7d4 	.word	0x0800b7d4
 8008018:	0800ba80 	.word	0x0800ba80
 800801c:	0800b960 	.word	0x0800b960
 8008020:	0800b938 	.word	0x0800b938
 8008024:	7ff00000 	.word	0x7ff00000
 8008028:	7ca00000 	.word	0x7ca00000
 800802c:	7fefffff 	.word	0x7fefffff
 8008030:	f018 0310 	ands.w	r3, r8, #16
 8008034:	bf18      	it	ne
 8008036:	236a      	movne	r3, #106	; 0x6a
 8008038:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80083e8 <_strtod_l+0x970>
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	4650      	mov	r0, sl
 8008040:	4659      	mov	r1, fp
 8008042:	2300      	movs	r3, #0
 8008044:	f018 0f01 	tst.w	r8, #1
 8008048:	d004      	beq.n	8008054 <_strtod_l+0x5dc>
 800804a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800804e:	f7f8 fad3 	bl	80005f8 <__aeabi_dmul>
 8008052:	2301      	movs	r3, #1
 8008054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008058:	f109 0908 	add.w	r9, r9, #8
 800805c:	d1f2      	bne.n	8008044 <_strtod_l+0x5cc>
 800805e:	b10b      	cbz	r3, 8008064 <_strtod_l+0x5ec>
 8008060:	4682      	mov	sl, r0
 8008062:	468b      	mov	fp, r1
 8008064:	9b04      	ldr	r3, [sp, #16]
 8008066:	b1c3      	cbz	r3, 800809a <_strtod_l+0x622>
 8008068:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800806c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008070:	2b00      	cmp	r3, #0
 8008072:	4659      	mov	r1, fp
 8008074:	dd11      	ble.n	800809a <_strtod_l+0x622>
 8008076:	2b1f      	cmp	r3, #31
 8008078:	f340 8124 	ble.w	80082c4 <_strtod_l+0x84c>
 800807c:	2b34      	cmp	r3, #52	; 0x34
 800807e:	bfde      	ittt	le
 8008080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008084:	f04f 33ff 	movle.w	r3, #4294967295
 8008088:	fa03 f202 	lslle.w	r2, r3, r2
 800808c:	f04f 0a00 	mov.w	sl, #0
 8008090:	bfcc      	ite	gt
 8008092:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008096:	ea02 0b01 	andle.w	fp, r2, r1
 800809a:	2200      	movs	r2, #0
 800809c:	2300      	movs	r3, #0
 800809e:	4650      	mov	r0, sl
 80080a0:	4659      	mov	r1, fp
 80080a2:	f7f8 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d1a2      	bne.n	8007ff0 <_strtod_l+0x578>
 80080aa:	9b07      	ldr	r3, [sp, #28]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	9908      	ldr	r1, [sp, #32]
 80080b0:	462b      	mov	r3, r5
 80080b2:	463a      	mov	r2, r7
 80080b4:	4620      	mov	r0, r4
 80080b6:	f001 fe2d 	bl	8009d14 <__s2b>
 80080ba:	9007      	str	r0, [sp, #28]
 80080bc:	2800      	cmp	r0, #0
 80080be:	f43f af1f 	beq.w	8007f00 <_strtod_l+0x488>
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	1b9e      	subs	r6, r3, r6
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bfb4      	ite	lt
 80080cc:	4633      	movlt	r3, r6
 80080ce:	2300      	movge	r3, #0
 80080d0:	930c      	str	r3, [sp, #48]	; 0x30
 80080d2:	9b06      	ldr	r3, [sp, #24]
 80080d4:	2500      	movs	r5, #0
 80080d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80080da:	9312      	str	r3, [sp, #72]	; 0x48
 80080dc:	462e      	mov	r6, r5
 80080de:	9b07      	ldr	r3, [sp, #28]
 80080e0:	4620      	mov	r0, r4
 80080e2:	6859      	ldr	r1, [r3, #4]
 80080e4:	f001 fd6e 	bl	8009bc4 <_Balloc>
 80080e8:	9005      	str	r0, [sp, #20]
 80080ea:	2800      	cmp	r0, #0
 80080ec:	f43f af0c 	beq.w	8007f08 <_strtod_l+0x490>
 80080f0:	9b07      	ldr	r3, [sp, #28]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	3202      	adds	r2, #2
 80080f6:	f103 010c 	add.w	r1, r3, #12
 80080fa:	0092      	lsls	r2, r2, #2
 80080fc:	300c      	adds	r0, #12
 80080fe:	f001 fd53 	bl	8009ba8 <memcpy>
 8008102:	ec4b ab10 	vmov	d0, sl, fp
 8008106:	aa1a      	add	r2, sp, #104	; 0x68
 8008108:	a919      	add	r1, sp, #100	; 0x64
 800810a:	4620      	mov	r0, r4
 800810c:	f002 f948 	bl	800a3a0 <__d2b>
 8008110:	ec4b ab18 	vmov	d8, sl, fp
 8008114:	9018      	str	r0, [sp, #96]	; 0x60
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f aef6 	beq.w	8007f08 <_strtod_l+0x490>
 800811c:	2101      	movs	r1, #1
 800811e:	4620      	mov	r0, r4
 8008120:	f001 fe92 	bl	8009e48 <__i2b>
 8008124:	4606      	mov	r6, r0
 8008126:	2800      	cmp	r0, #0
 8008128:	f43f aeee 	beq.w	8007f08 <_strtod_l+0x490>
 800812c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800812e:	9904      	ldr	r1, [sp, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	bfab      	itete	ge
 8008134:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008136:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008138:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800813a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800813e:	bfac      	ite	ge
 8008140:	eb03 0902 	addge.w	r9, r3, r2
 8008144:	1ad7      	sublt	r7, r2, r3
 8008146:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008148:	eba3 0801 	sub.w	r8, r3, r1
 800814c:	4490      	add	r8, r2
 800814e:	4ba1      	ldr	r3, [pc, #644]	; (80083d4 <_strtod_l+0x95c>)
 8008150:	f108 38ff 	add.w	r8, r8, #4294967295
 8008154:	4598      	cmp	r8, r3
 8008156:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800815a:	f280 80c7 	bge.w	80082ec <_strtod_l+0x874>
 800815e:	eba3 0308 	sub.w	r3, r3, r8
 8008162:	2b1f      	cmp	r3, #31
 8008164:	eba2 0203 	sub.w	r2, r2, r3
 8008168:	f04f 0101 	mov.w	r1, #1
 800816c:	f300 80b1 	bgt.w	80082d2 <_strtod_l+0x85a>
 8008170:	fa01 f303 	lsl.w	r3, r1, r3
 8008174:	930d      	str	r3, [sp, #52]	; 0x34
 8008176:	2300      	movs	r3, #0
 8008178:	9308      	str	r3, [sp, #32]
 800817a:	eb09 0802 	add.w	r8, r9, r2
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	45c1      	cmp	r9, r8
 8008182:	4417      	add	r7, r2
 8008184:	441f      	add	r7, r3
 8008186:	464b      	mov	r3, r9
 8008188:	bfa8      	it	ge
 800818a:	4643      	movge	r3, r8
 800818c:	42bb      	cmp	r3, r7
 800818e:	bfa8      	it	ge
 8008190:	463b      	movge	r3, r7
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfc2      	ittt	gt
 8008196:	eba8 0803 	subgt.w	r8, r8, r3
 800819a:	1aff      	subgt	r7, r7, r3
 800819c:	eba9 0903 	subgt.w	r9, r9, r3
 80081a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	dd17      	ble.n	80081d6 <_strtod_l+0x75e>
 80081a6:	4631      	mov	r1, r6
 80081a8:	461a      	mov	r2, r3
 80081aa:	4620      	mov	r0, r4
 80081ac:	f001 ff0c 	bl	8009fc8 <__pow5mult>
 80081b0:	4606      	mov	r6, r0
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f43f aea8 	beq.w	8007f08 <_strtod_l+0x490>
 80081b8:	4601      	mov	r1, r0
 80081ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081bc:	4620      	mov	r0, r4
 80081be:	f001 fe59 	bl	8009e74 <__multiply>
 80081c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f43f ae9f 	beq.w	8007f08 <_strtod_l+0x490>
 80081ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081cc:	4620      	mov	r0, r4
 80081ce:	f001 fd39 	bl	8009c44 <_Bfree>
 80081d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d4:	9318      	str	r3, [sp, #96]	; 0x60
 80081d6:	f1b8 0f00 	cmp.w	r8, #0
 80081da:	f300 808c 	bgt.w	80082f6 <_strtod_l+0x87e>
 80081de:	9b06      	ldr	r3, [sp, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	dd08      	ble.n	80081f6 <_strtod_l+0x77e>
 80081e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081e6:	9905      	ldr	r1, [sp, #20]
 80081e8:	4620      	mov	r0, r4
 80081ea:	f001 feed 	bl	8009fc8 <__pow5mult>
 80081ee:	9005      	str	r0, [sp, #20]
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f43f ae89 	beq.w	8007f08 <_strtod_l+0x490>
 80081f6:	2f00      	cmp	r7, #0
 80081f8:	dd08      	ble.n	800820c <_strtod_l+0x794>
 80081fa:	9905      	ldr	r1, [sp, #20]
 80081fc:	463a      	mov	r2, r7
 80081fe:	4620      	mov	r0, r4
 8008200:	f001 ff3c 	bl	800a07c <__lshift>
 8008204:	9005      	str	r0, [sp, #20]
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f ae7e 	beq.w	8007f08 <_strtod_l+0x490>
 800820c:	f1b9 0f00 	cmp.w	r9, #0
 8008210:	dd08      	ble.n	8008224 <_strtod_l+0x7ac>
 8008212:	4631      	mov	r1, r6
 8008214:	464a      	mov	r2, r9
 8008216:	4620      	mov	r0, r4
 8008218:	f001 ff30 	bl	800a07c <__lshift>
 800821c:	4606      	mov	r6, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f ae72 	beq.w	8007f08 <_strtod_l+0x490>
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008228:	4620      	mov	r0, r4
 800822a:	f001 ffb3 	bl	800a194 <__mdiff>
 800822e:	4605      	mov	r5, r0
 8008230:	2800      	cmp	r0, #0
 8008232:	f43f ae69 	beq.w	8007f08 <_strtod_l+0x490>
 8008236:	68c3      	ldr	r3, [r0, #12]
 8008238:	930b      	str	r3, [sp, #44]	; 0x2c
 800823a:	2300      	movs	r3, #0
 800823c:	60c3      	str	r3, [r0, #12]
 800823e:	4631      	mov	r1, r6
 8008240:	f001 ff8c 	bl	800a15c <__mcmp>
 8008244:	2800      	cmp	r0, #0
 8008246:	da60      	bge.n	800830a <_strtod_l+0x892>
 8008248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824a:	ea53 030a 	orrs.w	r3, r3, sl
 800824e:	f040 8082 	bne.w	8008356 <_strtod_l+0x8de>
 8008252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008256:	2b00      	cmp	r3, #0
 8008258:	d17d      	bne.n	8008356 <_strtod_l+0x8de>
 800825a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800825e:	0d1b      	lsrs	r3, r3, #20
 8008260:	051b      	lsls	r3, r3, #20
 8008262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008266:	d976      	bls.n	8008356 <_strtod_l+0x8de>
 8008268:	696b      	ldr	r3, [r5, #20]
 800826a:	b913      	cbnz	r3, 8008272 <_strtod_l+0x7fa>
 800826c:	692b      	ldr	r3, [r5, #16]
 800826e:	2b01      	cmp	r3, #1
 8008270:	dd71      	ble.n	8008356 <_strtod_l+0x8de>
 8008272:	4629      	mov	r1, r5
 8008274:	2201      	movs	r2, #1
 8008276:	4620      	mov	r0, r4
 8008278:	f001 ff00 	bl	800a07c <__lshift>
 800827c:	4631      	mov	r1, r6
 800827e:	4605      	mov	r5, r0
 8008280:	f001 ff6c 	bl	800a15c <__mcmp>
 8008284:	2800      	cmp	r0, #0
 8008286:	dd66      	ble.n	8008356 <_strtod_l+0x8de>
 8008288:	9904      	ldr	r1, [sp, #16]
 800828a:	4a53      	ldr	r2, [pc, #332]	; (80083d8 <_strtod_l+0x960>)
 800828c:	465b      	mov	r3, fp
 800828e:	2900      	cmp	r1, #0
 8008290:	f000 8081 	beq.w	8008396 <_strtod_l+0x91e>
 8008294:	ea02 010b 	and.w	r1, r2, fp
 8008298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800829c:	dc7b      	bgt.n	8008396 <_strtod_l+0x91e>
 800829e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082a2:	f77f aea9 	ble.w	8007ff8 <_strtod_l+0x580>
 80082a6:	4b4d      	ldr	r3, [pc, #308]	; (80083dc <_strtod_l+0x964>)
 80082a8:	4650      	mov	r0, sl
 80082aa:	4659      	mov	r1, fp
 80082ac:	2200      	movs	r2, #0
 80082ae:	f7f8 f9a3 	bl	80005f8 <__aeabi_dmul>
 80082b2:	460b      	mov	r3, r1
 80082b4:	4303      	orrs	r3, r0
 80082b6:	bf08      	it	eq
 80082b8:	2322      	moveq	r3, #34	; 0x22
 80082ba:	4682      	mov	sl, r0
 80082bc:	468b      	mov	fp, r1
 80082be:	bf08      	it	eq
 80082c0:	6023      	streq	r3, [r4, #0]
 80082c2:	e62b      	b.n	8007f1c <_strtod_l+0x4a4>
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	ea03 0a0a 	and.w	sl, r3, sl
 80082d0:	e6e3      	b.n	800809a <_strtod_l+0x622>
 80082d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80082d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80082da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80082de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80082e2:	fa01 f308 	lsl.w	r3, r1, r8
 80082e6:	9308      	str	r3, [sp, #32]
 80082e8:	910d      	str	r1, [sp, #52]	; 0x34
 80082ea:	e746      	b.n	800817a <_strtod_l+0x702>
 80082ec:	2300      	movs	r3, #0
 80082ee:	9308      	str	r3, [sp, #32]
 80082f0:	2301      	movs	r3, #1
 80082f2:	930d      	str	r3, [sp, #52]	; 0x34
 80082f4:	e741      	b.n	800817a <_strtod_l+0x702>
 80082f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082f8:	4642      	mov	r2, r8
 80082fa:	4620      	mov	r0, r4
 80082fc:	f001 febe 	bl	800a07c <__lshift>
 8008300:	9018      	str	r0, [sp, #96]	; 0x60
 8008302:	2800      	cmp	r0, #0
 8008304:	f47f af6b 	bne.w	80081de <_strtod_l+0x766>
 8008308:	e5fe      	b.n	8007f08 <_strtod_l+0x490>
 800830a:	465f      	mov	r7, fp
 800830c:	d16e      	bne.n	80083ec <_strtod_l+0x974>
 800830e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008314:	b342      	cbz	r2, 8008368 <_strtod_l+0x8f0>
 8008316:	4a32      	ldr	r2, [pc, #200]	; (80083e0 <_strtod_l+0x968>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d128      	bne.n	800836e <_strtod_l+0x8f6>
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	4651      	mov	r1, sl
 8008320:	b1eb      	cbz	r3, 800835e <_strtod_l+0x8e6>
 8008322:	4b2d      	ldr	r3, [pc, #180]	; (80083d8 <_strtod_l+0x960>)
 8008324:	403b      	ands	r3, r7
 8008326:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800832a:	f04f 32ff 	mov.w	r2, #4294967295
 800832e:	d819      	bhi.n	8008364 <_strtod_l+0x8ec>
 8008330:	0d1b      	lsrs	r3, r3, #20
 8008332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	4299      	cmp	r1, r3
 800833c:	d117      	bne.n	800836e <_strtod_l+0x8f6>
 800833e:	4b29      	ldr	r3, [pc, #164]	; (80083e4 <_strtod_l+0x96c>)
 8008340:	429f      	cmp	r7, r3
 8008342:	d102      	bne.n	800834a <_strtod_l+0x8d2>
 8008344:	3101      	adds	r1, #1
 8008346:	f43f addf 	beq.w	8007f08 <_strtod_l+0x490>
 800834a:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <_strtod_l+0x960>)
 800834c:	403b      	ands	r3, r7
 800834e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008352:	f04f 0a00 	mov.w	sl, #0
 8008356:	9b04      	ldr	r3, [sp, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1a4      	bne.n	80082a6 <_strtod_l+0x82e>
 800835c:	e5de      	b.n	8007f1c <_strtod_l+0x4a4>
 800835e:	f04f 33ff 	mov.w	r3, #4294967295
 8008362:	e7ea      	b.n	800833a <_strtod_l+0x8c2>
 8008364:	4613      	mov	r3, r2
 8008366:	e7e8      	b.n	800833a <_strtod_l+0x8c2>
 8008368:	ea53 030a 	orrs.w	r3, r3, sl
 800836c:	d08c      	beq.n	8008288 <_strtod_l+0x810>
 800836e:	9b08      	ldr	r3, [sp, #32]
 8008370:	b1db      	cbz	r3, 80083aa <_strtod_l+0x932>
 8008372:	423b      	tst	r3, r7
 8008374:	d0ef      	beq.n	8008356 <_strtod_l+0x8de>
 8008376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008378:	9a04      	ldr	r2, [sp, #16]
 800837a:	4650      	mov	r0, sl
 800837c:	4659      	mov	r1, fp
 800837e:	b1c3      	cbz	r3, 80083b2 <_strtod_l+0x93a>
 8008380:	f7ff fb5e 	bl	8007a40 <sulp>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	ec51 0b18 	vmov	r0, r1, d8
 800838c:	f7f7 ff7e 	bl	800028c <__adddf3>
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	e7df      	b.n	8008356 <_strtod_l+0x8de>
 8008396:	4013      	ands	r3, r2
 8008398:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800839c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083a4:	f04f 3aff 	mov.w	sl, #4294967295
 80083a8:	e7d5      	b.n	8008356 <_strtod_l+0x8de>
 80083aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ac:	ea13 0f0a 	tst.w	r3, sl
 80083b0:	e7e0      	b.n	8008374 <_strtod_l+0x8fc>
 80083b2:	f7ff fb45 	bl	8007a40 <sulp>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	ec51 0b18 	vmov	r0, r1, d8
 80083be:	f7f7 ff63 	bl	8000288 <__aeabi_dsub>
 80083c2:	2200      	movs	r2, #0
 80083c4:	2300      	movs	r3, #0
 80083c6:	4682      	mov	sl, r0
 80083c8:	468b      	mov	fp, r1
 80083ca:	f7f8 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d0c1      	beq.n	8008356 <_strtod_l+0x8de>
 80083d2:	e611      	b.n	8007ff8 <_strtod_l+0x580>
 80083d4:	fffffc02 	.word	0xfffffc02
 80083d8:	7ff00000 	.word	0x7ff00000
 80083dc:	39500000 	.word	0x39500000
 80083e0:	000fffff 	.word	0x000fffff
 80083e4:	7fefffff 	.word	0x7fefffff
 80083e8:	0800b6a8 	.word	0x0800b6a8
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	f002 f832 	bl	800a458 <__ratio>
 80083f4:	ec59 8b10 	vmov	r8, r9, d0
 80083f8:	ee10 0a10 	vmov	r0, s0
 80083fc:	2200      	movs	r2, #0
 80083fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 fb74 	bl	8000af0 <__aeabi_dcmple>
 8008408:	2800      	cmp	r0, #0
 800840a:	d07a      	beq.n	8008502 <_strtod_l+0xa8a>
 800840c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04a      	beq.n	80084a8 <_strtod_l+0xa30>
 8008412:	4b95      	ldr	r3, [pc, #596]	; (8008668 <_strtod_l+0xbf0>)
 8008414:	2200      	movs	r2, #0
 8008416:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800841a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008668 <_strtod_l+0xbf0>
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	4b92      	ldr	r3, [pc, #584]	; (800866c <_strtod_l+0xbf4>)
 8008424:	403b      	ands	r3, r7
 8008426:	930d      	str	r3, [sp, #52]	; 0x34
 8008428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800842a:	4b91      	ldr	r3, [pc, #580]	; (8008670 <_strtod_l+0xbf8>)
 800842c:	429a      	cmp	r2, r3
 800842e:	f040 80b0 	bne.w	8008592 <_strtod_l+0xb1a>
 8008432:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008436:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800843a:	ec4b ab10 	vmov	d0, sl, fp
 800843e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008442:	f001 ff31 	bl	800a2a8 <__ulp>
 8008446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800844a:	ec53 2b10 	vmov	r2, r3, d0
 800844e:	f7f8 f8d3 	bl	80005f8 <__aeabi_dmul>
 8008452:	4652      	mov	r2, sl
 8008454:	465b      	mov	r3, fp
 8008456:	f7f7 ff19 	bl	800028c <__adddf3>
 800845a:	460b      	mov	r3, r1
 800845c:	4983      	ldr	r1, [pc, #524]	; (800866c <_strtod_l+0xbf4>)
 800845e:	4a85      	ldr	r2, [pc, #532]	; (8008674 <_strtod_l+0xbfc>)
 8008460:	4019      	ands	r1, r3
 8008462:	4291      	cmp	r1, r2
 8008464:	4682      	mov	sl, r0
 8008466:	d960      	bls.n	800852a <_strtod_l+0xab2>
 8008468:	ee18 3a90 	vmov	r3, s17
 800846c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008470:	4293      	cmp	r3, r2
 8008472:	d104      	bne.n	800847e <_strtod_l+0xa06>
 8008474:	ee18 3a10 	vmov	r3, s16
 8008478:	3301      	adds	r3, #1
 800847a:	f43f ad45 	beq.w	8007f08 <_strtod_l+0x490>
 800847e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008680 <_strtod_l+0xc08>
 8008482:	f04f 3aff 	mov.w	sl, #4294967295
 8008486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008488:	4620      	mov	r0, r4
 800848a:	f001 fbdb 	bl	8009c44 <_Bfree>
 800848e:	9905      	ldr	r1, [sp, #20]
 8008490:	4620      	mov	r0, r4
 8008492:	f001 fbd7 	bl	8009c44 <_Bfree>
 8008496:	4631      	mov	r1, r6
 8008498:	4620      	mov	r0, r4
 800849a:	f001 fbd3 	bl	8009c44 <_Bfree>
 800849e:	4629      	mov	r1, r5
 80084a0:	4620      	mov	r0, r4
 80084a2:	f001 fbcf 	bl	8009c44 <_Bfree>
 80084a6:	e61a      	b.n	80080de <_strtod_l+0x666>
 80084a8:	f1ba 0f00 	cmp.w	sl, #0
 80084ac:	d11b      	bne.n	80084e6 <_strtod_l+0xa6e>
 80084ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084b2:	b9f3      	cbnz	r3, 80084f2 <_strtod_l+0xa7a>
 80084b4:	4b6c      	ldr	r3, [pc, #432]	; (8008668 <_strtod_l+0xbf0>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f8 fb0e 	bl	8000adc <__aeabi_dcmplt>
 80084c0:	b9d0      	cbnz	r0, 80084f8 <_strtod_l+0xa80>
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	4b6c      	ldr	r3, [pc, #432]	; (8008678 <_strtod_l+0xc00>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	f7f8 f895 	bl	80005f8 <__aeabi_dmul>
 80084ce:	4680      	mov	r8, r0
 80084d0:	4689      	mov	r9, r1
 80084d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80084d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80084da:	9315      	str	r3, [sp, #84]	; 0x54
 80084dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80084e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80084e4:	e79d      	b.n	8008422 <_strtod_l+0x9aa>
 80084e6:	f1ba 0f01 	cmp.w	sl, #1
 80084ea:	d102      	bne.n	80084f2 <_strtod_l+0xa7a>
 80084ec:	2f00      	cmp	r7, #0
 80084ee:	f43f ad83 	beq.w	8007ff8 <_strtod_l+0x580>
 80084f2:	4b62      	ldr	r3, [pc, #392]	; (800867c <_strtod_l+0xc04>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	e78e      	b.n	8008416 <_strtod_l+0x99e>
 80084f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008678 <_strtod_l+0xc00>
 80084fc:	f04f 0800 	mov.w	r8, #0
 8008500:	e7e7      	b.n	80084d2 <_strtod_l+0xa5a>
 8008502:	4b5d      	ldr	r3, [pc, #372]	; (8008678 <_strtod_l+0xc00>)
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	2200      	movs	r2, #0
 800850a:	f7f8 f875 	bl	80005f8 <__aeabi_dmul>
 800850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008510:	4680      	mov	r8, r0
 8008512:	4689      	mov	r9, r1
 8008514:	b933      	cbnz	r3, 8008524 <_strtod_l+0xaac>
 8008516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800851a:	900e      	str	r0, [sp, #56]	; 0x38
 800851c:	930f      	str	r3, [sp, #60]	; 0x3c
 800851e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008522:	e7dd      	b.n	80084e0 <_strtod_l+0xa68>
 8008524:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008528:	e7f9      	b.n	800851e <_strtod_l+0xaa6>
 800852a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1a8      	bne.n	8008486 <_strtod_l+0xa0e>
 8008534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800853a:	0d1b      	lsrs	r3, r3, #20
 800853c:	051b      	lsls	r3, r3, #20
 800853e:	429a      	cmp	r2, r3
 8008540:	d1a1      	bne.n	8008486 <_strtod_l+0xa0e>
 8008542:	4640      	mov	r0, r8
 8008544:	4649      	mov	r1, r9
 8008546:	f7f8 fbb7 	bl	8000cb8 <__aeabi_d2lz>
 800854a:	f7f8 f827 	bl	800059c <__aeabi_l2d>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4640      	mov	r0, r8
 8008554:	4649      	mov	r1, r9
 8008556:	f7f7 fe97 	bl	8000288 <__aeabi_dsub>
 800855a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800855c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008560:	ea43 030a 	orr.w	r3, r3, sl
 8008564:	4313      	orrs	r3, r2
 8008566:	4680      	mov	r8, r0
 8008568:	4689      	mov	r9, r1
 800856a:	d055      	beq.n	8008618 <_strtod_l+0xba0>
 800856c:	a336      	add	r3, pc, #216	; (adr r3, 8008648 <_strtod_l+0xbd0>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f8 fab3 	bl	8000adc <__aeabi_dcmplt>
 8008576:	2800      	cmp	r0, #0
 8008578:	f47f acd0 	bne.w	8007f1c <_strtod_l+0x4a4>
 800857c:	a334      	add	r3, pc, #208	; (adr r3, 8008650 <_strtod_l+0xbd8>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	4640      	mov	r0, r8
 8008584:	4649      	mov	r1, r9
 8008586:	f7f8 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800858a:	2800      	cmp	r0, #0
 800858c:	f43f af7b 	beq.w	8008486 <_strtod_l+0xa0e>
 8008590:	e4c4      	b.n	8007f1c <_strtod_l+0x4a4>
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	b333      	cbz	r3, 80085e4 <_strtod_l+0xb6c>
 8008596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008598:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800859c:	d822      	bhi.n	80085e4 <_strtod_l+0xb6c>
 800859e:	a32e      	add	r3, pc, #184	; (adr r3, 8008658 <_strtod_l+0xbe0>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	4640      	mov	r0, r8
 80085a6:	4649      	mov	r1, r9
 80085a8:	f7f8 faa2 	bl	8000af0 <__aeabi_dcmple>
 80085ac:	b1a0      	cbz	r0, 80085d8 <_strtod_l+0xb60>
 80085ae:	4649      	mov	r1, r9
 80085b0:	4640      	mov	r0, r8
 80085b2:	f7f8 faf9 	bl	8000ba8 <__aeabi_d2uiz>
 80085b6:	2801      	cmp	r0, #1
 80085b8:	bf38      	it	cc
 80085ba:	2001      	movcc	r0, #1
 80085bc:	f7f7 ffa2 	bl	8000504 <__aeabi_ui2d>
 80085c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c2:	4680      	mov	r8, r0
 80085c4:	4689      	mov	r9, r1
 80085c6:	bb23      	cbnz	r3, 8008612 <_strtod_l+0xb9a>
 80085c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085cc:	9010      	str	r0, [sp, #64]	; 0x40
 80085ce:	9311      	str	r3, [sp, #68]	; 0x44
 80085d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80085e0:	1a9b      	subs	r3, r3, r2
 80085e2:	9309      	str	r3, [sp, #36]	; 0x24
 80085e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085e8:	eeb0 0a48 	vmov.f32	s0, s16
 80085ec:	eef0 0a68 	vmov.f32	s1, s17
 80085f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085f4:	f001 fe58 	bl	800a2a8 <__ulp>
 80085f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085fc:	ec53 2b10 	vmov	r2, r3, d0
 8008600:	f7f7 fffa 	bl	80005f8 <__aeabi_dmul>
 8008604:	ec53 2b18 	vmov	r2, r3, d8
 8008608:	f7f7 fe40 	bl	800028c <__adddf3>
 800860c:	4682      	mov	sl, r0
 800860e:	468b      	mov	fp, r1
 8008610:	e78d      	b.n	800852e <_strtod_l+0xab6>
 8008612:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008616:	e7db      	b.n	80085d0 <_strtod_l+0xb58>
 8008618:	a311      	add	r3, pc, #68	; (adr r3, 8008660 <_strtod_l+0xbe8>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f8 fa5d 	bl	8000adc <__aeabi_dcmplt>
 8008622:	e7b2      	b.n	800858a <_strtod_l+0xb12>
 8008624:	2300      	movs	r3, #0
 8008626:	930a      	str	r3, [sp, #40]	; 0x28
 8008628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800862a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	f7ff ba6b 	b.w	8007b08 <_strtod_l+0x90>
 8008632:	2a65      	cmp	r2, #101	; 0x65
 8008634:	f43f ab5f 	beq.w	8007cf6 <_strtod_l+0x27e>
 8008638:	2a45      	cmp	r2, #69	; 0x45
 800863a:	f43f ab5c 	beq.w	8007cf6 <_strtod_l+0x27e>
 800863e:	2301      	movs	r3, #1
 8008640:	f7ff bb94 	b.w	8007d6c <_strtod_l+0x2f4>
 8008644:	f3af 8000 	nop.w
 8008648:	94a03595 	.word	0x94a03595
 800864c:	3fdfffff 	.word	0x3fdfffff
 8008650:	35afe535 	.word	0x35afe535
 8008654:	3fe00000 	.word	0x3fe00000
 8008658:	ffc00000 	.word	0xffc00000
 800865c:	41dfffff 	.word	0x41dfffff
 8008660:	94a03595 	.word	0x94a03595
 8008664:	3fcfffff 	.word	0x3fcfffff
 8008668:	3ff00000 	.word	0x3ff00000
 800866c:	7ff00000 	.word	0x7ff00000
 8008670:	7fe00000 	.word	0x7fe00000
 8008674:	7c9fffff 	.word	0x7c9fffff
 8008678:	3fe00000 	.word	0x3fe00000
 800867c:	bff00000 	.word	0xbff00000
 8008680:	7fefffff 	.word	0x7fefffff

08008684 <_strtod_r>:
 8008684:	4b01      	ldr	r3, [pc, #4]	; (800868c <_strtod_r+0x8>)
 8008686:	f7ff b9f7 	b.w	8007a78 <_strtod_l>
 800868a:	bf00      	nop
 800868c:	20000074 	.word	0x20000074

08008690 <_strtol_l.constprop.0>:
 8008690:	2b01      	cmp	r3, #1
 8008692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008696:	d001      	beq.n	800869c <_strtol_l.constprop.0+0xc>
 8008698:	2b24      	cmp	r3, #36	; 0x24
 800869a:	d906      	bls.n	80086aa <_strtol_l.constprop.0+0x1a>
 800869c:	f7fe fafe 	bl	8006c9c <__errno>
 80086a0:	2316      	movs	r3, #22
 80086a2:	6003      	str	r3, [r0, #0]
 80086a4:	2000      	movs	r0, #0
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008790 <_strtol_l.constprop.0+0x100>
 80086ae:	460d      	mov	r5, r1
 80086b0:	462e      	mov	r6, r5
 80086b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80086ba:	f017 0708 	ands.w	r7, r7, #8
 80086be:	d1f7      	bne.n	80086b0 <_strtol_l.constprop.0+0x20>
 80086c0:	2c2d      	cmp	r4, #45	; 0x2d
 80086c2:	d132      	bne.n	800872a <_strtol_l.constprop.0+0x9a>
 80086c4:	782c      	ldrb	r4, [r5, #0]
 80086c6:	2701      	movs	r7, #1
 80086c8:	1cb5      	adds	r5, r6, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d05b      	beq.n	8008786 <_strtol_l.constprop.0+0xf6>
 80086ce:	2b10      	cmp	r3, #16
 80086d0:	d109      	bne.n	80086e6 <_strtol_l.constprop.0+0x56>
 80086d2:	2c30      	cmp	r4, #48	; 0x30
 80086d4:	d107      	bne.n	80086e6 <_strtol_l.constprop.0+0x56>
 80086d6:	782c      	ldrb	r4, [r5, #0]
 80086d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80086dc:	2c58      	cmp	r4, #88	; 0x58
 80086de:	d14d      	bne.n	800877c <_strtol_l.constprop.0+0xec>
 80086e0:	786c      	ldrb	r4, [r5, #1]
 80086e2:	2310      	movs	r3, #16
 80086e4:	3502      	adds	r5, #2
 80086e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80086ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80086ee:	f04f 0c00 	mov.w	ip, #0
 80086f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80086f6:	4666      	mov	r6, ip
 80086f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80086fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008700:	f1be 0f09 	cmp.w	lr, #9
 8008704:	d816      	bhi.n	8008734 <_strtol_l.constprop.0+0xa4>
 8008706:	4674      	mov	r4, lr
 8008708:	42a3      	cmp	r3, r4
 800870a:	dd24      	ble.n	8008756 <_strtol_l.constprop.0+0xc6>
 800870c:	f1bc 0f00 	cmp.w	ip, #0
 8008710:	db1e      	blt.n	8008750 <_strtol_l.constprop.0+0xc0>
 8008712:	45b1      	cmp	r9, r6
 8008714:	d31c      	bcc.n	8008750 <_strtol_l.constprop.0+0xc0>
 8008716:	d101      	bne.n	800871c <_strtol_l.constprop.0+0x8c>
 8008718:	45a2      	cmp	sl, r4
 800871a:	db19      	blt.n	8008750 <_strtol_l.constprop.0+0xc0>
 800871c:	fb06 4603 	mla	r6, r6, r3, r4
 8008720:	f04f 0c01 	mov.w	ip, #1
 8008724:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008728:	e7e8      	b.n	80086fc <_strtol_l.constprop.0+0x6c>
 800872a:	2c2b      	cmp	r4, #43	; 0x2b
 800872c:	bf04      	itt	eq
 800872e:	782c      	ldrbeq	r4, [r5, #0]
 8008730:	1cb5      	addeq	r5, r6, #2
 8008732:	e7ca      	b.n	80086ca <_strtol_l.constprop.0+0x3a>
 8008734:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008738:	f1be 0f19 	cmp.w	lr, #25
 800873c:	d801      	bhi.n	8008742 <_strtol_l.constprop.0+0xb2>
 800873e:	3c37      	subs	r4, #55	; 0x37
 8008740:	e7e2      	b.n	8008708 <_strtol_l.constprop.0+0x78>
 8008742:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008746:	f1be 0f19 	cmp.w	lr, #25
 800874a:	d804      	bhi.n	8008756 <_strtol_l.constprop.0+0xc6>
 800874c:	3c57      	subs	r4, #87	; 0x57
 800874e:	e7db      	b.n	8008708 <_strtol_l.constprop.0+0x78>
 8008750:	f04f 3cff 	mov.w	ip, #4294967295
 8008754:	e7e6      	b.n	8008724 <_strtol_l.constprop.0+0x94>
 8008756:	f1bc 0f00 	cmp.w	ip, #0
 800875a:	da05      	bge.n	8008768 <_strtol_l.constprop.0+0xd8>
 800875c:	2322      	movs	r3, #34	; 0x22
 800875e:	6003      	str	r3, [r0, #0]
 8008760:	4646      	mov	r6, r8
 8008762:	b942      	cbnz	r2, 8008776 <_strtol_l.constprop.0+0xe6>
 8008764:	4630      	mov	r0, r6
 8008766:	e79e      	b.n	80086a6 <_strtol_l.constprop.0+0x16>
 8008768:	b107      	cbz	r7, 800876c <_strtol_l.constprop.0+0xdc>
 800876a:	4276      	negs	r6, r6
 800876c:	2a00      	cmp	r2, #0
 800876e:	d0f9      	beq.n	8008764 <_strtol_l.constprop.0+0xd4>
 8008770:	f1bc 0f00 	cmp.w	ip, #0
 8008774:	d000      	beq.n	8008778 <_strtol_l.constprop.0+0xe8>
 8008776:	1e69      	subs	r1, r5, #1
 8008778:	6011      	str	r1, [r2, #0]
 800877a:	e7f3      	b.n	8008764 <_strtol_l.constprop.0+0xd4>
 800877c:	2430      	movs	r4, #48	; 0x30
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1b1      	bne.n	80086e6 <_strtol_l.constprop.0+0x56>
 8008782:	2308      	movs	r3, #8
 8008784:	e7af      	b.n	80086e6 <_strtol_l.constprop.0+0x56>
 8008786:	2c30      	cmp	r4, #48	; 0x30
 8008788:	d0a5      	beq.n	80086d6 <_strtol_l.constprop.0+0x46>
 800878a:	230a      	movs	r3, #10
 800878c:	e7ab      	b.n	80086e6 <_strtol_l.constprop.0+0x56>
 800878e:	bf00      	nop
 8008790:	0800b6d1 	.word	0x0800b6d1

08008794 <_strtol_r>:
 8008794:	f7ff bf7c 	b.w	8008690 <_strtol_l.constprop.0>

08008798 <quorem>:
 8008798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	6903      	ldr	r3, [r0, #16]
 800879e:	690c      	ldr	r4, [r1, #16]
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	4607      	mov	r7, r0
 80087a4:	f2c0 8081 	blt.w	80088aa <quorem+0x112>
 80087a8:	3c01      	subs	r4, #1
 80087aa:	f101 0814 	add.w	r8, r1, #20
 80087ae:	f100 0514 	add.w	r5, r0, #20
 80087b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087b6:	9301      	str	r3, [sp, #4]
 80087b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087c0:	3301      	adds	r3, #1
 80087c2:	429a      	cmp	r2, r3
 80087c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80087d0:	d331      	bcc.n	8008836 <quorem+0x9e>
 80087d2:	f04f 0e00 	mov.w	lr, #0
 80087d6:	4640      	mov	r0, r8
 80087d8:	46ac      	mov	ip, r5
 80087da:	46f2      	mov	sl, lr
 80087dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80087e0:	b293      	uxth	r3, r2
 80087e2:	fb06 e303 	mla	r3, r6, r3, lr
 80087e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	ebaa 0303 	sub.w	r3, sl, r3
 80087f0:	f8dc a000 	ldr.w	sl, [ip]
 80087f4:	0c12      	lsrs	r2, r2, #16
 80087f6:	fa13 f38a 	uxtah	r3, r3, sl
 80087fa:	fb06 e202 	mla	r2, r6, r2, lr
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	9b00      	ldr	r3, [sp, #0]
 8008802:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008806:	b292      	uxth	r2, r2
 8008808:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800880c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008810:	f8bd 3000 	ldrh.w	r3, [sp]
 8008814:	4581      	cmp	r9, r0
 8008816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800881a:	f84c 3b04 	str.w	r3, [ip], #4
 800881e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008822:	d2db      	bcs.n	80087dc <quorem+0x44>
 8008824:	f855 300b 	ldr.w	r3, [r5, fp]
 8008828:	b92b      	cbnz	r3, 8008836 <quorem+0x9e>
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	3b04      	subs	r3, #4
 800882e:	429d      	cmp	r5, r3
 8008830:	461a      	mov	r2, r3
 8008832:	d32e      	bcc.n	8008892 <quorem+0xfa>
 8008834:	613c      	str	r4, [r7, #16]
 8008836:	4638      	mov	r0, r7
 8008838:	f001 fc90 	bl	800a15c <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	db24      	blt.n	800888a <quorem+0xf2>
 8008840:	3601      	adds	r6, #1
 8008842:	4628      	mov	r0, r5
 8008844:	f04f 0c00 	mov.w	ip, #0
 8008848:	f858 2b04 	ldr.w	r2, [r8], #4
 800884c:	f8d0 e000 	ldr.w	lr, [r0]
 8008850:	b293      	uxth	r3, r2
 8008852:	ebac 0303 	sub.w	r3, ip, r3
 8008856:	0c12      	lsrs	r2, r2, #16
 8008858:	fa13 f38e 	uxtah	r3, r3, lr
 800885c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008864:	b29b      	uxth	r3, r3
 8008866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800886a:	45c1      	cmp	r9, r8
 800886c:	f840 3b04 	str.w	r3, [r0], #4
 8008870:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008874:	d2e8      	bcs.n	8008848 <quorem+0xb0>
 8008876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800887a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800887e:	b922      	cbnz	r2, 800888a <quorem+0xf2>
 8008880:	3b04      	subs	r3, #4
 8008882:	429d      	cmp	r5, r3
 8008884:	461a      	mov	r2, r3
 8008886:	d30a      	bcc.n	800889e <quorem+0x106>
 8008888:	613c      	str	r4, [r7, #16]
 800888a:	4630      	mov	r0, r6
 800888c:	b003      	add	sp, #12
 800888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	3b04      	subs	r3, #4
 8008896:	2a00      	cmp	r2, #0
 8008898:	d1cc      	bne.n	8008834 <quorem+0x9c>
 800889a:	3c01      	subs	r4, #1
 800889c:	e7c7      	b.n	800882e <quorem+0x96>
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	d1f0      	bne.n	8008888 <quorem+0xf0>
 80088a6:	3c01      	subs	r4, #1
 80088a8:	e7eb      	b.n	8008882 <quorem+0xea>
 80088aa:	2000      	movs	r0, #0
 80088ac:	e7ee      	b.n	800888c <quorem+0xf4>
	...

080088b0 <_dtoa_r>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	ed2d 8b04 	vpush	{d8-d9}
 80088b8:	ec57 6b10 	vmov	r6, r7, d0
 80088bc:	b093      	sub	sp, #76	; 0x4c
 80088be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088c4:	9106      	str	r1, [sp, #24]
 80088c6:	ee10 aa10 	vmov	sl, s0
 80088ca:	4604      	mov	r4, r0
 80088cc:	9209      	str	r2, [sp, #36]	; 0x24
 80088ce:	930c      	str	r3, [sp, #48]	; 0x30
 80088d0:	46bb      	mov	fp, r7
 80088d2:	b975      	cbnz	r5, 80088f2 <_dtoa_r+0x42>
 80088d4:	2010      	movs	r0, #16
 80088d6:	f001 f94d 	bl	8009b74 <malloc>
 80088da:	4602      	mov	r2, r0
 80088dc:	6260      	str	r0, [r4, #36]	; 0x24
 80088de:	b920      	cbnz	r0, 80088ea <_dtoa_r+0x3a>
 80088e0:	4ba7      	ldr	r3, [pc, #668]	; (8008b80 <_dtoa_r+0x2d0>)
 80088e2:	21ea      	movs	r1, #234	; 0xea
 80088e4:	48a7      	ldr	r0, [pc, #668]	; (8008b84 <_dtoa_r+0x2d4>)
 80088e6:	f002 f8bd 	bl	800aa64 <__assert_func>
 80088ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088ee:	6005      	str	r5, [r0, #0]
 80088f0:	60c5      	str	r5, [r0, #12]
 80088f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088f4:	6819      	ldr	r1, [r3, #0]
 80088f6:	b151      	cbz	r1, 800890e <_dtoa_r+0x5e>
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	604a      	str	r2, [r1, #4]
 80088fc:	2301      	movs	r3, #1
 80088fe:	4093      	lsls	r3, r2
 8008900:	608b      	str	r3, [r1, #8]
 8008902:	4620      	mov	r0, r4
 8008904:	f001 f99e 	bl	8009c44 <_Bfree>
 8008908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	1e3b      	subs	r3, r7, #0
 8008910:	bfaa      	itet	ge
 8008912:	2300      	movge	r3, #0
 8008914:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008918:	f8c8 3000 	strge.w	r3, [r8]
 800891c:	4b9a      	ldr	r3, [pc, #616]	; (8008b88 <_dtoa_r+0x2d8>)
 800891e:	bfbc      	itt	lt
 8008920:	2201      	movlt	r2, #1
 8008922:	f8c8 2000 	strlt.w	r2, [r8]
 8008926:	ea33 030b 	bics.w	r3, r3, fp
 800892a:	d11b      	bne.n	8008964 <_dtoa_r+0xb4>
 800892c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800892e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008938:	4333      	orrs	r3, r6
 800893a:	f000 8592 	beq.w	8009462 <_dtoa_r+0xbb2>
 800893e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008940:	b963      	cbnz	r3, 800895c <_dtoa_r+0xac>
 8008942:	4b92      	ldr	r3, [pc, #584]	; (8008b8c <_dtoa_r+0x2dc>)
 8008944:	e022      	b.n	800898c <_dtoa_r+0xdc>
 8008946:	4b92      	ldr	r3, [pc, #584]	; (8008b90 <_dtoa_r+0x2e0>)
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	3308      	adds	r3, #8
 800894c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	9801      	ldr	r0, [sp, #4]
 8008952:	b013      	add	sp, #76	; 0x4c
 8008954:	ecbd 8b04 	vpop	{d8-d9}
 8008958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895c:	4b8b      	ldr	r3, [pc, #556]	; (8008b8c <_dtoa_r+0x2dc>)
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	3303      	adds	r3, #3
 8008962:	e7f3      	b.n	800894c <_dtoa_r+0x9c>
 8008964:	2200      	movs	r2, #0
 8008966:	2300      	movs	r3, #0
 8008968:	4650      	mov	r0, sl
 800896a:	4659      	mov	r1, fp
 800896c:	f7f8 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008970:	ec4b ab19 	vmov	d9, sl, fp
 8008974:	4680      	mov	r8, r0
 8008976:	b158      	cbz	r0, 8008990 <_dtoa_r+0xe0>
 8008978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800897a:	2301      	movs	r3, #1
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 856b 	beq.w	800945c <_dtoa_r+0xbac>
 8008986:	4883      	ldr	r0, [pc, #524]	; (8008b94 <_dtoa_r+0x2e4>)
 8008988:	6018      	str	r0, [r3, #0]
 800898a:	1e43      	subs	r3, r0, #1
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	e7df      	b.n	8008950 <_dtoa_r+0xa0>
 8008990:	ec4b ab10 	vmov	d0, sl, fp
 8008994:	aa10      	add	r2, sp, #64	; 0x40
 8008996:	a911      	add	r1, sp, #68	; 0x44
 8008998:	4620      	mov	r0, r4
 800899a:	f001 fd01 	bl	800a3a0 <__d2b>
 800899e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80089a2:	ee08 0a10 	vmov	s16, r0
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	f000 8084 	beq.w	8008ab4 <_dtoa_r+0x204>
 80089ac:	ee19 3a90 	vmov	r3, s19
 80089b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80089b8:	4656      	mov	r6, sl
 80089ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80089be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80089c6:	4b74      	ldr	r3, [pc, #464]	; (8008b98 <_dtoa_r+0x2e8>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	4630      	mov	r0, r6
 80089cc:	4639      	mov	r1, r7
 80089ce:	f7f7 fc5b 	bl	8000288 <__aeabi_dsub>
 80089d2:	a365      	add	r3, pc, #404	; (adr r3, 8008b68 <_dtoa_r+0x2b8>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fe0e 	bl	80005f8 <__aeabi_dmul>
 80089dc:	a364      	add	r3, pc, #400	; (adr r3, 8008b70 <_dtoa_r+0x2c0>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f7f7 fc53 	bl	800028c <__adddf3>
 80089e6:	4606      	mov	r6, r0
 80089e8:	4628      	mov	r0, r5
 80089ea:	460f      	mov	r7, r1
 80089ec:	f7f7 fd9a 	bl	8000524 <__aeabi_i2d>
 80089f0:	a361      	add	r3, pc, #388	; (adr r3, 8008b78 <_dtoa_r+0x2c8>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4630      	mov	r0, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7f7 fc43 	bl	800028c <__adddf3>
 8008a06:	4606      	mov	r6, r0
 8008a08:	460f      	mov	r7, r1
 8008a0a:	f7f8 f8a5 	bl	8000b58 <__aeabi_d2iz>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	9000      	str	r0, [sp, #0]
 8008a12:	2300      	movs	r3, #0
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7f8 f860 	bl	8000adc <__aeabi_dcmplt>
 8008a1c:	b150      	cbz	r0, 8008a34 <_dtoa_r+0x184>
 8008a1e:	9800      	ldr	r0, [sp, #0]
 8008a20:	f7f7 fd80 	bl	8000524 <__aeabi_i2d>
 8008a24:	4632      	mov	r2, r6
 8008a26:	463b      	mov	r3, r7
 8008a28:	f7f8 f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a2c:	b910      	cbnz	r0, 8008a34 <_dtoa_r+0x184>
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	2b16      	cmp	r3, #22
 8008a38:	d85a      	bhi.n	8008af0 <_dtoa_r+0x240>
 8008a3a:	9a00      	ldr	r2, [sp, #0]
 8008a3c:	4b57      	ldr	r3, [pc, #348]	; (8008b9c <_dtoa_r+0x2ec>)
 8008a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	ec51 0b19 	vmov	r0, r1, d9
 8008a4a:	f7f8 f847 	bl	8000adc <__aeabi_dcmplt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d050      	beq.n	8008af4 <_dtoa_r+0x244>
 8008a52:	9b00      	ldr	r3, [sp, #0]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a5e:	1b5d      	subs	r5, r3, r5
 8008a60:	1e6b      	subs	r3, r5, #1
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	bf45      	ittet	mi
 8008a66:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a6a:	9304      	strmi	r3, [sp, #16]
 8008a6c:	2300      	movpl	r3, #0
 8008a6e:	2300      	movmi	r3, #0
 8008a70:	bf4c      	ite	mi
 8008a72:	9305      	strmi	r3, [sp, #20]
 8008a74:	9304      	strpl	r3, [sp, #16]
 8008a76:	9b00      	ldr	r3, [sp, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	db3d      	blt.n	8008af8 <_dtoa_r+0x248>
 8008a7c:	9b05      	ldr	r3, [sp, #20]
 8008a7e:	9a00      	ldr	r2, [sp, #0]
 8008a80:	920a      	str	r2, [sp, #40]	; 0x28
 8008a82:	4413      	add	r3, r2
 8008a84:	9305      	str	r3, [sp, #20]
 8008a86:	2300      	movs	r3, #0
 8008a88:	9307      	str	r3, [sp, #28]
 8008a8a:	9b06      	ldr	r3, [sp, #24]
 8008a8c:	2b09      	cmp	r3, #9
 8008a8e:	f200 8089 	bhi.w	8008ba4 <_dtoa_r+0x2f4>
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	bfc4      	itt	gt
 8008a96:	3b04      	subgt	r3, #4
 8008a98:	9306      	strgt	r3, [sp, #24]
 8008a9a:	9b06      	ldr	r3, [sp, #24]
 8008a9c:	f1a3 0302 	sub.w	r3, r3, #2
 8008aa0:	bfcc      	ite	gt
 8008aa2:	2500      	movgt	r5, #0
 8008aa4:	2501      	movle	r5, #1
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	f200 8087 	bhi.w	8008bba <_dtoa_r+0x30a>
 8008aac:	e8df f003 	tbb	[pc, r3]
 8008ab0:	59383a2d 	.word	0x59383a2d
 8008ab4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ab8:	441d      	add	r5, r3
 8008aba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	bfc1      	itttt	gt
 8008ac2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ac6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008aca:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ace:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ad2:	bfda      	itte	le
 8008ad4:	f1c3 0320 	rsble	r3, r3, #32
 8008ad8:	fa06 f003 	lslle.w	r0, r6, r3
 8008adc:	4318      	orrgt	r0, r3
 8008ade:	f7f7 fd11 	bl	8000504 <__aeabi_ui2d>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008aea:	3d01      	subs	r5, #1
 8008aec:	930e      	str	r3, [sp, #56]	; 0x38
 8008aee:	e76a      	b.n	80089c6 <_dtoa_r+0x116>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e7b2      	b.n	8008a5a <_dtoa_r+0x1aa>
 8008af4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008af6:	e7b1      	b.n	8008a5c <_dtoa_r+0x1ac>
 8008af8:	9b04      	ldr	r3, [sp, #16]
 8008afa:	9a00      	ldr	r2, [sp, #0]
 8008afc:	1a9b      	subs	r3, r3, r2
 8008afe:	9304      	str	r3, [sp, #16]
 8008b00:	4253      	negs	r3, r2
 8008b02:	9307      	str	r3, [sp, #28]
 8008b04:	2300      	movs	r3, #0
 8008b06:	930a      	str	r3, [sp, #40]	; 0x28
 8008b08:	e7bf      	b.n	8008a8a <_dtoa_r+0x1da>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9308      	str	r3, [sp, #32]
 8008b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dc55      	bgt.n	8008bc0 <_dtoa_r+0x310>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b1e:	e00c      	b.n	8008b3a <_dtoa_r+0x28a>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e7f3      	b.n	8008b0c <_dtoa_r+0x25c>
 8008b24:	2300      	movs	r3, #0
 8008b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b28:	9308      	str	r3, [sp, #32]
 8008b2a:	9b00      	ldr	r3, [sp, #0]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	9302      	str	r3, [sp, #8]
 8008b30:	3301      	adds	r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	9303      	str	r3, [sp, #12]
 8008b36:	bfb8      	it	lt
 8008b38:	2301      	movlt	r3, #1
 8008b3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	6042      	str	r2, [r0, #4]
 8008b40:	2204      	movs	r2, #4
 8008b42:	f102 0614 	add.w	r6, r2, #20
 8008b46:	429e      	cmp	r6, r3
 8008b48:	6841      	ldr	r1, [r0, #4]
 8008b4a:	d93d      	bls.n	8008bc8 <_dtoa_r+0x318>
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f001 f839 	bl	8009bc4 <_Balloc>
 8008b52:	9001      	str	r0, [sp, #4]
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d13b      	bne.n	8008bd0 <_dtoa_r+0x320>
 8008b58:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <_dtoa_r+0x2f0>)
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b60:	e6c0      	b.n	80088e4 <_dtoa_r+0x34>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e7df      	b.n	8008b26 <_dtoa_r+0x276>
 8008b66:	bf00      	nop
 8008b68:	636f4361 	.word	0x636f4361
 8008b6c:	3fd287a7 	.word	0x3fd287a7
 8008b70:	8b60c8b3 	.word	0x8b60c8b3
 8008b74:	3fc68a28 	.word	0x3fc68a28
 8008b78:	509f79fb 	.word	0x509f79fb
 8008b7c:	3fd34413 	.word	0x3fd34413
 8008b80:	0800b7de 	.word	0x0800b7de
 8008b84:	0800b7f5 	.word	0x0800b7f5
 8008b88:	7ff00000 	.word	0x7ff00000
 8008b8c:	0800b7da 	.word	0x0800b7da
 8008b90:	0800b7d1 	.word	0x0800b7d1
 8008b94:	0800b655 	.word	0x0800b655
 8008b98:	3ff80000 	.word	0x3ff80000
 8008b9c:	0800b960 	.word	0x0800b960
 8008ba0:	0800b850 	.word	0x0800b850
 8008ba4:	2501      	movs	r5, #1
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9306      	str	r3, [sp, #24]
 8008baa:	9508      	str	r5, [sp, #32]
 8008bac:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2312      	movs	r3, #18
 8008bb8:	e7b0      	b.n	8008b1c <_dtoa_r+0x26c>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	9308      	str	r3, [sp, #32]
 8008bbe:	e7f5      	b.n	8008bac <_dtoa_r+0x2fc>
 8008bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bc6:	e7b8      	b.n	8008b3a <_dtoa_r+0x28a>
 8008bc8:	3101      	adds	r1, #1
 8008bca:	6041      	str	r1, [r0, #4]
 8008bcc:	0052      	lsls	r2, r2, #1
 8008bce:	e7b8      	b.n	8008b42 <_dtoa_r+0x292>
 8008bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bd2:	9a01      	ldr	r2, [sp, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	2b0e      	cmp	r3, #14
 8008bda:	f200 809d 	bhi.w	8008d18 <_dtoa_r+0x468>
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	f000 809a 	beq.w	8008d18 <_dtoa_r+0x468>
 8008be4:	9b00      	ldr	r3, [sp, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	dd32      	ble.n	8008c50 <_dtoa_r+0x3a0>
 8008bea:	4ab7      	ldr	r2, [pc, #732]	; (8008ec8 <_dtoa_r+0x618>)
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bf8:	9b00      	ldr	r3, [sp, #0]
 8008bfa:	05d8      	lsls	r0, r3, #23
 8008bfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008c00:	d516      	bpl.n	8008c30 <_dtoa_r+0x380>
 8008c02:	4bb2      	ldr	r3, [pc, #712]	; (8008ecc <_dtoa_r+0x61c>)
 8008c04:	ec51 0b19 	vmov	r0, r1, d9
 8008c08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c0c:	f7f7 fe1e 	bl	800084c <__aeabi_ddiv>
 8008c10:	f007 070f 	and.w	r7, r7, #15
 8008c14:	4682      	mov	sl, r0
 8008c16:	468b      	mov	fp, r1
 8008c18:	2503      	movs	r5, #3
 8008c1a:	4eac      	ldr	r6, [pc, #688]	; (8008ecc <_dtoa_r+0x61c>)
 8008c1c:	b957      	cbnz	r7, 8008c34 <_dtoa_r+0x384>
 8008c1e:	4642      	mov	r2, r8
 8008c20:	464b      	mov	r3, r9
 8008c22:	4650      	mov	r0, sl
 8008c24:	4659      	mov	r1, fp
 8008c26:	f7f7 fe11 	bl	800084c <__aeabi_ddiv>
 8008c2a:	4682      	mov	sl, r0
 8008c2c:	468b      	mov	fp, r1
 8008c2e:	e028      	b.n	8008c82 <_dtoa_r+0x3d2>
 8008c30:	2502      	movs	r5, #2
 8008c32:	e7f2      	b.n	8008c1a <_dtoa_r+0x36a>
 8008c34:	07f9      	lsls	r1, r7, #31
 8008c36:	d508      	bpl.n	8008c4a <_dtoa_r+0x39a>
 8008c38:	4640      	mov	r0, r8
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c40:	f7f7 fcda 	bl	80005f8 <__aeabi_dmul>
 8008c44:	3501      	adds	r5, #1
 8008c46:	4680      	mov	r8, r0
 8008c48:	4689      	mov	r9, r1
 8008c4a:	107f      	asrs	r7, r7, #1
 8008c4c:	3608      	adds	r6, #8
 8008c4e:	e7e5      	b.n	8008c1c <_dtoa_r+0x36c>
 8008c50:	f000 809b 	beq.w	8008d8a <_dtoa_r+0x4da>
 8008c54:	9b00      	ldr	r3, [sp, #0]
 8008c56:	4f9d      	ldr	r7, [pc, #628]	; (8008ecc <_dtoa_r+0x61c>)
 8008c58:	425e      	negs	r6, r3
 8008c5a:	4b9b      	ldr	r3, [pc, #620]	; (8008ec8 <_dtoa_r+0x618>)
 8008c5c:	f006 020f 	and.w	r2, r6, #15
 8008c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	ec51 0b19 	vmov	r0, r1, d9
 8008c6c:	f7f7 fcc4 	bl	80005f8 <__aeabi_dmul>
 8008c70:	1136      	asrs	r6, r6, #4
 8008c72:	4682      	mov	sl, r0
 8008c74:	468b      	mov	fp, r1
 8008c76:	2300      	movs	r3, #0
 8008c78:	2502      	movs	r5, #2
 8008c7a:	2e00      	cmp	r6, #0
 8008c7c:	d17a      	bne.n	8008d74 <_dtoa_r+0x4c4>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1d3      	bne.n	8008c2a <_dtoa_r+0x37a>
 8008c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 8082 	beq.w	8008d8e <_dtoa_r+0x4de>
 8008c8a:	4b91      	ldr	r3, [pc, #580]	; (8008ed0 <_dtoa_r+0x620>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4650      	mov	r0, sl
 8008c90:	4659      	mov	r1, fp
 8008c92:	f7f7 ff23 	bl	8000adc <__aeabi_dcmplt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d079      	beq.n	8008d8e <_dtoa_r+0x4de>
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d076      	beq.n	8008d8e <_dtoa_r+0x4de>
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dd36      	ble.n	8008d14 <_dtoa_r+0x464>
 8008ca6:	9b00      	ldr	r3, [sp, #0]
 8008ca8:	4650      	mov	r0, sl
 8008caa:	4659      	mov	r1, fp
 8008cac:	1e5f      	subs	r7, r3, #1
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4b88      	ldr	r3, [pc, #544]	; (8008ed4 <_dtoa_r+0x624>)
 8008cb2:	f7f7 fca1 	bl	80005f8 <__aeabi_dmul>
 8008cb6:	9e02      	ldr	r6, [sp, #8]
 8008cb8:	4682      	mov	sl, r0
 8008cba:	468b      	mov	fp, r1
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7f7 fc30 	bl	8000524 <__aeabi_i2d>
 8008cc4:	4652      	mov	r2, sl
 8008cc6:	465b      	mov	r3, fp
 8008cc8:	f7f7 fc96 	bl	80005f8 <__aeabi_dmul>
 8008ccc:	4b82      	ldr	r3, [pc, #520]	; (8008ed8 <_dtoa_r+0x628>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f7f7 fadc 	bl	800028c <__adddf3>
 8008cd4:	46d0      	mov	r8, sl
 8008cd6:	46d9      	mov	r9, fp
 8008cd8:	4682      	mov	sl, r0
 8008cda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	d158      	bne.n	8008d94 <_dtoa_r+0x4e4>
 8008ce2:	4b7e      	ldr	r3, [pc, #504]	; (8008edc <_dtoa_r+0x62c>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4649      	mov	r1, r9
 8008cea:	f7f7 facd 	bl	8000288 <__aeabi_dsub>
 8008cee:	4652      	mov	r2, sl
 8008cf0:	465b      	mov	r3, fp
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4689      	mov	r9, r1
 8008cf6:	f7f7 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f040 8295 	bne.w	800922a <_dtoa_r+0x97a>
 8008d00:	4652      	mov	r2, sl
 8008d02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d06:	4640      	mov	r0, r8
 8008d08:	4649      	mov	r1, r9
 8008d0a:	f7f7 fee7 	bl	8000adc <__aeabi_dcmplt>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f040 8289 	bne.w	8009226 <_dtoa_r+0x976>
 8008d14:	ec5b ab19 	vmov	sl, fp, d9
 8008d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f2c0 8148 	blt.w	8008fb0 <_dtoa_r+0x700>
 8008d20:	9a00      	ldr	r2, [sp, #0]
 8008d22:	2a0e      	cmp	r2, #14
 8008d24:	f300 8144 	bgt.w	8008fb0 <_dtoa_r+0x700>
 8008d28:	4b67      	ldr	r3, [pc, #412]	; (8008ec8 <_dtoa_r+0x618>)
 8008d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f280 80d5 	bge.w	8008ee4 <_dtoa_r+0x634>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f300 80d1 	bgt.w	8008ee4 <_dtoa_r+0x634>
 8008d42:	f040 826f 	bne.w	8009224 <_dtoa_r+0x974>
 8008d46:	4b65      	ldr	r3, [pc, #404]	; (8008edc <_dtoa_r+0x62c>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fc53 	bl	80005f8 <__aeabi_dmul>
 8008d52:	4652      	mov	r2, sl
 8008d54:	465b      	mov	r3, fp
 8008d56:	f7f7 fed5 	bl	8000b04 <__aeabi_dcmpge>
 8008d5a:	9e03      	ldr	r6, [sp, #12]
 8008d5c:	4637      	mov	r7, r6
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f040 8245 	bne.w	80091ee <_dtoa_r+0x93e>
 8008d64:	9d01      	ldr	r5, [sp, #4]
 8008d66:	2331      	movs	r3, #49	; 0x31
 8008d68:	f805 3b01 	strb.w	r3, [r5], #1
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	e240      	b.n	80091f6 <_dtoa_r+0x946>
 8008d74:	07f2      	lsls	r2, r6, #31
 8008d76:	d505      	bpl.n	8008d84 <_dtoa_r+0x4d4>
 8008d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7c:	f7f7 fc3c 	bl	80005f8 <__aeabi_dmul>
 8008d80:	3501      	adds	r5, #1
 8008d82:	2301      	movs	r3, #1
 8008d84:	1076      	asrs	r6, r6, #1
 8008d86:	3708      	adds	r7, #8
 8008d88:	e777      	b.n	8008c7a <_dtoa_r+0x3ca>
 8008d8a:	2502      	movs	r5, #2
 8008d8c:	e779      	b.n	8008c82 <_dtoa_r+0x3d2>
 8008d8e:	9f00      	ldr	r7, [sp, #0]
 8008d90:	9e03      	ldr	r6, [sp, #12]
 8008d92:	e794      	b.n	8008cbe <_dtoa_r+0x40e>
 8008d94:	9901      	ldr	r1, [sp, #4]
 8008d96:	4b4c      	ldr	r3, [pc, #304]	; (8008ec8 <_dtoa_r+0x618>)
 8008d98:	4431      	add	r1, r6
 8008d9a:	910d      	str	r1, [sp, #52]	; 0x34
 8008d9c:	9908      	ldr	r1, [sp, #32]
 8008d9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008da2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008da6:	2900      	cmp	r1, #0
 8008da8:	d043      	beq.n	8008e32 <_dtoa_r+0x582>
 8008daa:	494d      	ldr	r1, [pc, #308]	; (8008ee0 <_dtoa_r+0x630>)
 8008dac:	2000      	movs	r0, #0
 8008dae:	f7f7 fd4d 	bl	800084c <__aeabi_ddiv>
 8008db2:	4652      	mov	r2, sl
 8008db4:	465b      	mov	r3, fp
 8008db6:	f7f7 fa67 	bl	8000288 <__aeabi_dsub>
 8008dba:	9d01      	ldr	r5, [sp, #4]
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	468b      	mov	fp, r1
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	f7f7 fec8 	bl	8000b58 <__aeabi_d2iz>
 8008dc8:	4606      	mov	r6, r0
 8008dca:	f7f7 fbab 	bl	8000524 <__aeabi_i2d>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	f7f7 fa57 	bl	8000288 <__aeabi_dsub>
 8008dda:	3630      	adds	r6, #48	; 0x30
 8008ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8008de0:	4652      	mov	r2, sl
 8008de2:	465b      	mov	r3, fp
 8008de4:	4680      	mov	r8, r0
 8008de6:	4689      	mov	r9, r1
 8008de8:	f7f7 fe78 	bl	8000adc <__aeabi_dcmplt>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d163      	bne.n	8008eb8 <_dtoa_r+0x608>
 8008df0:	4642      	mov	r2, r8
 8008df2:	464b      	mov	r3, r9
 8008df4:	4936      	ldr	r1, [pc, #216]	; (8008ed0 <_dtoa_r+0x620>)
 8008df6:	2000      	movs	r0, #0
 8008df8:	f7f7 fa46 	bl	8000288 <__aeabi_dsub>
 8008dfc:	4652      	mov	r2, sl
 8008dfe:	465b      	mov	r3, fp
 8008e00:	f7f7 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f040 80b5 	bne.w	8008f74 <_dtoa_r+0x6c4>
 8008e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e0c:	429d      	cmp	r5, r3
 8008e0e:	d081      	beq.n	8008d14 <_dtoa_r+0x464>
 8008e10:	4b30      	ldr	r3, [pc, #192]	; (8008ed4 <_dtoa_r+0x624>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	4650      	mov	r0, sl
 8008e16:	4659      	mov	r1, fp
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	4b2d      	ldr	r3, [pc, #180]	; (8008ed4 <_dtoa_r+0x624>)
 8008e1e:	4682      	mov	sl, r0
 8008e20:	468b      	mov	fp, r1
 8008e22:	4640      	mov	r0, r8
 8008e24:	4649      	mov	r1, r9
 8008e26:	2200      	movs	r2, #0
 8008e28:	f7f7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8008e2c:	4680      	mov	r8, r0
 8008e2e:	4689      	mov	r9, r1
 8008e30:	e7c6      	b.n	8008dc0 <_dtoa_r+0x510>
 8008e32:	4650      	mov	r0, sl
 8008e34:	4659      	mov	r1, fp
 8008e36:	f7f7 fbdf 	bl	80005f8 <__aeabi_dmul>
 8008e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e3c:	9d01      	ldr	r5, [sp, #4]
 8008e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e40:	4682      	mov	sl, r0
 8008e42:	468b      	mov	fp, r1
 8008e44:	4649      	mov	r1, r9
 8008e46:	4640      	mov	r0, r8
 8008e48:	f7f7 fe86 	bl	8000b58 <__aeabi_d2iz>
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	f7f7 fb69 	bl	8000524 <__aeabi_i2d>
 8008e52:	3630      	adds	r6, #48	; 0x30
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	f7f7 fa14 	bl	8000288 <__aeabi_dsub>
 8008e60:	f805 6b01 	strb.w	r6, [r5], #1
 8008e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e66:	429d      	cmp	r5, r3
 8008e68:	4680      	mov	r8, r0
 8008e6a:	4689      	mov	r9, r1
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	d124      	bne.n	8008ebc <_dtoa_r+0x60c>
 8008e72:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <_dtoa_r+0x630>)
 8008e74:	4650      	mov	r0, sl
 8008e76:	4659      	mov	r1, fp
 8008e78:	f7f7 fa08 	bl	800028c <__adddf3>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4640      	mov	r0, r8
 8008e82:	4649      	mov	r1, r9
 8008e84:	f7f7 fe48 	bl	8000b18 <__aeabi_dcmpgt>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d173      	bne.n	8008f74 <_dtoa_r+0x6c4>
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	465b      	mov	r3, fp
 8008e90:	4913      	ldr	r1, [pc, #76]	; (8008ee0 <_dtoa_r+0x630>)
 8008e92:	2000      	movs	r0, #0
 8008e94:	f7f7 f9f8 	bl	8000288 <__aeabi_dsub>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	f7f7 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f43f af35 	beq.w	8008d14 <_dtoa_r+0x464>
 8008eaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008eac:	1e6b      	subs	r3, r5, #1
 8008eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008eb4:	2b30      	cmp	r3, #48	; 0x30
 8008eb6:	d0f8      	beq.n	8008eaa <_dtoa_r+0x5fa>
 8008eb8:	9700      	str	r7, [sp, #0]
 8008eba:	e049      	b.n	8008f50 <_dtoa_r+0x6a0>
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <_dtoa_r+0x624>)
 8008ebe:	f7f7 fb9b 	bl	80005f8 <__aeabi_dmul>
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	4689      	mov	r9, r1
 8008ec6:	e7bd      	b.n	8008e44 <_dtoa_r+0x594>
 8008ec8:	0800b960 	.word	0x0800b960
 8008ecc:	0800b938 	.word	0x0800b938
 8008ed0:	3ff00000 	.word	0x3ff00000
 8008ed4:	40240000 	.word	0x40240000
 8008ed8:	401c0000 	.word	0x401c0000
 8008edc:	40140000 	.word	0x40140000
 8008ee0:	3fe00000 	.word	0x3fe00000
 8008ee4:	9d01      	ldr	r5, [sp, #4]
 8008ee6:	4656      	mov	r6, sl
 8008ee8:	465f      	mov	r7, fp
 8008eea:	4642      	mov	r2, r8
 8008eec:	464b      	mov	r3, r9
 8008eee:	4630      	mov	r0, r6
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	f7f7 fcab 	bl	800084c <__aeabi_ddiv>
 8008ef6:	f7f7 fe2f 	bl	8000b58 <__aeabi_d2iz>
 8008efa:	4682      	mov	sl, r0
 8008efc:	f7f7 fb12 	bl	8000524 <__aeabi_i2d>
 8008f00:	4642      	mov	r2, r8
 8008f02:	464b      	mov	r3, r9
 8008f04:	f7f7 fb78 	bl	80005f8 <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008f14:	f7f7 f9b8 	bl	8000288 <__aeabi_dsub>
 8008f18:	f805 6b01 	strb.w	r6, [r5], #1
 8008f1c:	9e01      	ldr	r6, [sp, #4]
 8008f1e:	9f03      	ldr	r7, [sp, #12]
 8008f20:	1bae      	subs	r6, r5, r6
 8008f22:	42b7      	cmp	r7, r6
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	d135      	bne.n	8008f96 <_dtoa_r+0x6e6>
 8008f2a:	f7f7 f9af 	bl	800028c <__adddf3>
 8008f2e:	4642      	mov	r2, r8
 8008f30:	464b      	mov	r3, r9
 8008f32:	4606      	mov	r6, r0
 8008f34:	460f      	mov	r7, r1
 8008f36:	f7f7 fdef 	bl	8000b18 <__aeabi_dcmpgt>
 8008f3a:	b9d0      	cbnz	r0, 8008f72 <_dtoa_r+0x6c2>
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	464b      	mov	r3, r9
 8008f40:	4630      	mov	r0, r6
 8008f42:	4639      	mov	r1, r7
 8008f44:	f7f7 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f48:	b110      	cbz	r0, 8008f50 <_dtoa_r+0x6a0>
 8008f4a:	f01a 0f01 	tst.w	sl, #1
 8008f4e:	d110      	bne.n	8008f72 <_dtoa_r+0x6c2>
 8008f50:	4620      	mov	r0, r4
 8008f52:	ee18 1a10 	vmov	r1, s16
 8008f56:	f000 fe75 	bl	8009c44 <_Bfree>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	9800      	ldr	r0, [sp, #0]
 8008f5e:	702b      	strb	r3, [r5, #0]
 8008f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f62:	3001      	adds	r0, #1
 8008f64:	6018      	str	r0, [r3, #0]
 8008f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f43f acf1 	beq.w	8008950 <_dtoa_r+0xa0>
 8008f6e:	601d      	str	r5, [r3, #0]
 8008f70:	e4ee      	b.n	8008950 <_dtoa_r+0xa0>
 8008f72:	9f00      	ldr	r7, [sp, #0]
 8008f74:	462b      	mov	r3, r5
 8008f76:	461d      	mov	r5, r3
 8008f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f7c:	2a39      	cmp	r2, #57	; 0x39
 8008f7e:	d106      	bne.n	8008f8e <_dtoa_r+0x6de>
 8008f80:	9a01      	ldr	r2, [sp, #4]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d1f7      	bne.n	8008f76 <_dtoa_r+0x6c6>
 8008f86:	9901      	ldr	r1, [sp, #4]
 8008f88:	2230      	movs	r2, #48	; 0x30
 8008f8a:	3701      	adds	r7, #1
 8008f8c:	700a      	strb	r2, [r1, #0]
 8008f8e:	781a      	ldrb	r2, [r3, #0]
 8008f90:	3201      	adds	r2, #1
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	e790      	b.n	8008eb8 <_dtoa_r+0x608>
 8008f96:	4ba6      	ldr	r3, [pc, #664]	; (8009230 <_dtoa_r+0x980>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7f7 fb2d 	bl	80005f8 <__aeabi_dmul>
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	460f      	mov	r7, r1
 8008fa6:	f7f7 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d09d      	beq.n	8008eea <_dtoa_r+0x63a>
 8008fae:	e7cf      	b.n	8008f50 <_dtoa_r+0x6a0>
 8008fb0:	9a08      	ldr	r2, [sp, #32]
 8008fb2:	2a00      	cmp	r2, #0
 8008fb4:	f000 80d7 	beq.w	8009166 <_dtoa_r+0x8b6>
 8008fb8:	9a06      	ldr	r2, [sp, #24]
 8008fba:	2a01      	cmp	r2, #1
 8008fbc:	f300 80ba 	bgt.w	8009134 <_dtoa_r+0x884>
 8008fc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	f000 80b2 	beq.w	800912c <_dtoa_r+0x87c>
 8008fc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fcc:	9e07      	ldr	r6, [sp, #28]
 8008fce:	9d04      	ldr	r5, [sp, #16]
 8008fd0:	9a04      	ldr	r2, [sp, #16]
 8008fd2:	441a      	add	r2, r3
 8008fd4:	9204      	str	r2, [sp, #16]
 8008fd6:	9a05      	ldr	r2, [sp, #20]
 8008fd8:	2101      	movs	r1, #1
 8008fda:	441a      	add	r2, r3
 8008fdc:	4620      	mov	r0, r4
 8008fde:	9205      	str	r2, [sp, #20]
 8008fe0:	f000 ff32 	bl	8009e48 <__i2b>
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	dd0c      	ble.n	8009004 <_dtoa_r+0x754>
 8008fea:	9b05      	ldr	r3, [sp, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dd09      	ble.n	8009004 <_dtoa_r+0x754>
 8008ff0:	42ab      	cmp	r3, r5
 8008ff2:	9a04      	ldr	r2, [sp, #16]
 8008ff4:	bfa8      	it	ge
 8008ff6:	462b      	movge	r3, r5
 8008ff8:	1ad2      	subs	r2, r2, r3
 8008ffa:	9204      	str	r2, [sp, #16]
 8008ffc:	9a05      	ldr	r2, [sp, #20]
 8008ffe:	1aed      	subs	r5, r5, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	9b07      	ldr	r3, [sp, #28]
 8009006:	b31b      	cbz	r3, 8009050 <_dtoa_r+0x7a0>
 8009008:	9b08      	ldr	r3, [sp, #32]
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80af 	beq.w	800916e <_dtoa_r+0x8be>
 8009010:	2e00      	cmp	r6, #0
 8009012:	dd13      	ble.n	800903c <_dtoa_r+0x78c>
 8009014:	4639      	mov	r1, r7
 8009016:	4632      	mov	r2, r6
 8009018:	4620      	mov	r0, r4
 800901a:	f000 ffd5 	bl	8009fc8 <__pow5mult>
 800901e:	ee18 2a10 	vmov	r2, s16
 8009022:	4601      	mov	r1, r0
 8009024:	4607      	mov	r7, r0
 8009026:	4620      	mov	r0, r4
 8009028:	f000 ff24 	bl	8009e74 <__multiply>
 800902c:	ee18 1a10 	vmov	r1, s16
 8009030:	4680      	mov	r8, r0
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fe06 	bl	8009c44 <_Bfree>
 8009038:	ee08 8a10 	vmov	s16, r8
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	1b9a      	subs	r2, r3, r6
 8009040:	d006      	beq.n	8009050 <_dtoa_r+0x7a0>
 8009042:	ee18 1a10 	vmov	r1, s16
 8009046:	4620      	mov	r0, r4
 8009048:	f000 ffbe 	bl	8009fc8 <__pow5mult>
 800904c:	ee08 0a10 	vmov	s16, r0
 8009050:	2101      	movs	r1, #1
 8009052:	4620      	mov	r0, r4
 8009054:	f000 fef8 	bl	8009e48 <__i2b>
 8009058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800905a:	2b00      	cmp	r3, #0
 800905c:	4606      	mov	r6, r0
 800905e:	f340 8088 	ble.w	8009172 <_dtoa_r+0x8c2>
 8009062:	461a      	mov	r2, r3
 8009064:	4601      	mov	r1, r0
 8009066:	4620      	mov	r0, r4
 8009068:	f000 ffae 	bl	8009fc8 <__pow5mult>
 800906c:	9b06      	ldr	r3, [sp, #24]
 800906e:	2b01      	cmp	r3, #1
 8009070:	4606      	mov	r6, r0
 8009072:	f340 8081 	ble.w	8009178 <_dtoa_r+0x8c8>
 8009076:	f04f 0800 	mov.w	r8, #0
 800907a:	6933      	ldr	r3, [r6, #16]
 800907c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009080:	6918      	ldr	r0, [r3, #16]
 8009082:	f000 fe91 	bl	8009da8 <__hi0bits>
 8009086:	f1c0 0020 	rsb	r0, r0, #32
 800908a:	9b05      	ldr	r3, [sp, #20]
 800908c:	4418      	add	r0, r3
 800908e:	f010 001f 	ands.w	r0, r0, #31
 8009092:	f000 8092 	beq.w	80091ba <_dtoa_r+0x90a>
 8009096:	f1c0 0320 	rsb	r3, r0, #32
 800909a:	2b04      	cmp	r3, #4
 800909c:	f340 808a 	ble.w	80091b4 <_dtoa_r+0x904>
 80090a0:	f1c0 001c 	rsb	r0, r0, #28
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	4403      	add	r3, r0
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	4403      	add	r3, r0
 80090ae:	4405      	add	r5, r0
 80090b0:	9305      	str	r3, [sp, #20]
 80090b2:	9b04      	ldr	r3, [sp, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dd07      	ble.n	80090c8 <_dtoa_r+0x818>
 80090b8:	ee18 1a10 	vmov	r1, s16
 80090bc:	461a      	mov	r2, r3
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 ffdc 	bl	800a07c <__lshift>
 80090c4:	ee08 0a10 	vmov	s16, r0
 80090c8:	9b05      	ldr	r3, [sp, #20]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dd05      	ble.n	80090da <_dtoa_r+0x82a>
 80090ce:	4631      	mov	r1, r6
 80090d0:	461a      	mov	r2, r3
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 ffd2 	bl	800a07c <__lshift>
 80090d8:	4606      	mov	r6, r0
 80090da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d06e      	beq.n	80091be <_dtoa_r+0x90e>
 80090e0:	ee18 0a10 	vmov	r0, s16
 80090e4:	4631      	mov	r1, r6
 80090e6:	f001 f839 	bl	800a15c <__mcmp>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	da67      	bge.n	80091be <_dtoa_r+0x90e>
 80090ee:	9b00      	ldr	r3, [sp, #0]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	ee18 1a10 	vmov	r1, s16
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	220a      	movs	r2, #10
 80090fa:	2300      	movs	r3, #0
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fdc3 	bl	8009c88 <__multadd>
 8009102:	9b08      	ldr	r3, [sp, #32]
 8009104:	ee08 0a10 	vmov	s16, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 81b1 	beq.w	8009470 <_dtoa_r+0xbc0>
 800910e:	2300      	movs	r3, #0
 8009110:	4639      	mov	r1, r7
 8009112:	220a      	movs	r2, #10
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fdb7 	bl	8009c88 <__multadd>
 800911a:	9b02      	ldr	r3, [sp, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	4607      	mov	r7, r0
 8009120:	f300 808e 	bgt.w	8009240 <_dtoa_r+0x990>
 8009124:	9b06      	ldr	r3, [sp, #24]
 8009126:	2b02      	cmp	r3, #2
 8009128:	dc51      	bgt.n	80091ce <_dtoa_r+0x91e>
 800912a:	e089      	b.n	8009240 <_dtoa_r+0x990>
 800912c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800912e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009132:	e74b      	b.n	8008fcc <_dtoa_r+0x71c>
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	1e5e      	subs	r6, r3, #1
 8009138:	9b07      	ldr	r3, [sp, #28]
 800913a:	42b3      	cmp	r3, r6
 800913c:	bfbf      	itttt	lt
 800913e:	9b07      	ldrlt	r3, [sp, #28]
 8009140:	9607      	strlt	r6, [sp, #28]
 8009142:	1af2      	sublt	r2, r6, r3
 8009144:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009146:	bfb6      	itet	lt
 8009148:	189b      	addlt	r3, r3, r2
 800914a:	1b9e      	subge	r6, r3, r6
 800914c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	bfb8      	it	lt
 8009152:	2600      	movlt	r6, #0
 8009154:	2b00      	cmp	r3, #0
 8009156:	bfb7      	itett	lt
 8009158:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800915c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009160:	1a9d      	sublt	r5, r3, r2
 8009162:	2300      	movlt	r3, #0
 8009164:	e734      	b.n	8008fd0 <_dtoa_r+0x720>
 8009166:	9e07      	ldr	r6, [sp, #28]
 8009168:	9d04      	ldr	r5, [sp, #16]
 800916a:	9f08      	ldr	r7, [sp, #32]
 800916c:	e73b      	b.n	8008fe6 <_dtoa_r+0x736>
 800916e:	9a07      	ldr	r2, [sp, #28]
 8009170:	e767      	b.n	8009042 <_dtoa_r+0x792>
 8009172:	9b06      	ldr	r3, [sp, #24]
 8009174:	2b01      	cmp	r3, #1
 8009176:	dc18      	bgt.n	80091aa <_dtoa_r+0x8fa>
 8009178:	f1ba 0f00 	cmp.w	sl, #0
 800917c:	d115      	bne.n	80091aa <_dtoa_r+0x8fa>
 800917e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009182:	b993      	cbnz	r3, 80091aa <_dtoa_r+0x8fa>
 8009184:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009188:	0d1b      	lsrs	r3, r3, #20
 800918a:	051b      	lsls	r3, r3, #20
 800918c:	b183      	cbz	r3, 80091b0 <_dtoa_r+0x900>
 800918e:	9b04      	ldr	r3, [sp, #16]
 8009190:	3301      	adds	r3, #1
 8009192:	9304      	str	r3, [sp, #16]
 8009194:	9b05      	ldr	r3, [sp, #20]
 8009196:	3301      	adds	r3, #1
 8009198:	9305      	str	r3, [sp, #20]
 800919a:	f04f 0801 	mov.w	r8, #1
 800919e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f47f af6a 	bne.w	800907a <_dtoa_r+0x7ca>
 80091a6:	2001      	movs	r0, #1
 80091a8:	e76f      	b.n	800908a <_dtoa_r+0x7da>
 80091aa:	f04f 0800 	mov.w	r8, #0
 80091ae:	e7f6      	b.n	800919e <_dtoa_r+0x8ee>
 80091b0:	4698      	mov	r8, r3
 80091b2:	e7f4      	b.n	800919e <_dtoa_r+0x8ee>
 80091b4:	f43f af7d 	beq.w	80090b2 <_dtoa_r+0x802>
 80091b8:	4618      	mov	r0, r3
 80091ba:	301c      	adds	r0, #28
 80091bc:	e772      	b.n	80090a4 <_dtoa_r+0x7f4>
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dc37      	bgt.n	8009234 <_dtoa_r+0x984>
 80091c4:	9b06      	ldr	r3, [sp, #24]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	dd34      	ble.n	8009234 <_dtoa_r+0x984>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	9b02      	ldr	r3, [sp, #8]
 80091d0:	b96b      	cbnz	r3, 80091ee <_dtoa_r+0x93e>
 80091d2:	4631      	mov	r1, r6
 80091d4:	2205      	movs	r2, #5
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 fd56 	bl	8009c88 <__multadd>
 80091dc:	4601      	mov	r1, r0
 80091de:	4606      	mov	r6, r0
 80091e0:	ee18 0a10 	vmov	r0, s16
 80091e4:	f000 ffba 	bl	800a15c <__mcmp>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	f73f adbb 	bgt.w	8008d64 <_dtoa_r+0x4b4>
 80091ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f0:	9d01      	ldr	r5, [sp, #4]
 80091f2:	43db      	mvns	r3, r3
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	f04f 0800 	mov.w	r8, #0
 80091fa:	4631      	mov	r1, r6
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 fd21 	bl	8009c44 <_Bfree>
 8009202:	2f00      	cmp	r7, #0
 8009204:	f43f aea4 	beq.w	8008f50 <_dtoa_r+0x6a0>
 8009208:	f1b8 0f00 	cmp.w	r8, #0
 800920c:	d005      	beq.n	800921a <_dtoa_r+0x96a>
 800920e:	45b8      	cmp	r8, r7
 8009210:	d003      	beq.n	800921a <_dtoa_r+0x96a>
 8009212:	4641      	mov	r1, r8
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fd15 	bl	8009c44 <_Bfree>
 800921a:	4639      	mov	r1, r7
 800921c:	4620      	mov	r0, r4
 800921e:	f000 fd11 	bl	8009c44 <_Bfree>
 8009222:	e695      	b.n	8008f50 <_dtoa_r+0x6a0>
 8009224:	2600      	movs	r6, #0
 8009226:	4637      	mov	r7, r6
 8009228:	e7e1      	b.n	80091ee <_dtoa_r+0x93e>
 800922a:	9700      	str	r7, [sp, #0]
 800922c:	4637      	mov	r7, r6
 800922e:	e599      	b.n	8008d64 <_dtoa_r+0x4b4>
 8009230:	40240000 	.word	0x40240000
 8009234:	9b08      	ldr	r3, [sp, #32]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 80ca 	beq.w	80093d0 <_dtoa_r+0xb20>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	9302      	str	r3, [sp, #8]
 8009240:	2d00      	cmp	r5, #0
 8009242:	dd05      	ble.n	8009250 <_dtoa_r+0x9a0>
 8009244:	4639      	mov	r1, r7
 8009246:	462a      	mov	r2, r5
 8009248:	4620      	mov	r0, r4
 800924a:	f000 ff17 	bl	800a07c <__lshift>
 800924e:	4607      	mov	r7, r0
 8009250:	f1b8 0f00 	cmp.w	r8, #0
 8009254:	d05b      	beq.n	800930e <_dtoa_r+0xa5e>
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fcb3 	bl	8009bc4 <_Balloc>
 800925e:	4605      	mov	r5, r0
 8009260:	b928      	cbnz	r0, 800926e <_dtoa_r+0x9be>
 8009262:	4b87      	ldr	r3, [pc, #540]	; (8009480 <_dtoa_r+0xbd0>)
 8009264:	4602      	mov	r2, r0
 8009266:	f240 21ea 	movw	r1, #746	; 0x2ea
 800926a:	f7ff bb3b 	b.w	80088e4 <_dtoa_r+0x34>
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	3202      	adds	r2, #2
 8009272:	0092      	lsls	r2, r2, #2
 8009274:	f107 010c 	add.w	r1, r7, #12
 8009278:	300c      	adds	r0, #12
 800927a:	f000 fc95 	bl	8009ba8 <memcpy>
 800927e:	2201      	movs	r2, #1
 8009280:	4629      	mov	r1, r5
 8009282:	4620      	mov	r0, r4
 8009284:	f000 fefa 	bl	800a07c <__lshift>
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	f103 0901 	add.w	r9, r3, #1
 800928e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009292:	4413      	add	r3, r2
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	f00a 0301 	and.w	r3, sl, #1
 800929a:	46b8      	mov	r8, r7
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	4607      	mov	r7, r0
 80092a0:	4631      	mov	r1, r6
 80092a2:	ee18 0a10 	vmov	r0, s16
 80092a6:	f7ff fa77 	bl	8008798 <quorem>
 80092aa:	4641      	mov	r1, r8
 80092ac:	9002      	str	r0, [sp, #8]
 80092ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80092b2:	ee18 0a10 	vmov	r0, s16
 80092b6:	f000 ff51 	bl	800a15c <__mcmp>
 80092ba:	463a      	mov	r2, r7
 80092bc:	9003      	str	r0, [sp, #12]
 80092be:	4631      	mov	r1, r6
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 ff67 	bl	800a194 <__mdiff>
 80092c6:	68c2      	ldr	r2, [r0, #12]
 80092c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80092cc:	4605      	mov	r5, r0
 80092ce:	bb02      	cbnz	r2, 8009312 <_dtoa_r+0xa62>
 80092d0:	4601      	mov	r1, r0
 80092d2:	ee18 0a10 	vmov	r0, s16
 80092d6:	f000 ff41 	bl	800a15c <__mcmp>
 80092da:	4602      	mov	r2, r0
 80092dc:	4629      	mov	r1, r5
 80092de:	4620      	mov	r0, r4
 80092e0:	9207      	str	r2, [sp, #28]
 80092e2:	f000 fcaf 	bl	8009c44 <_Bfree>
 80092e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80092ea:	ea43 0102 	orr.w	r1, r3, r2
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	430b      	orrs	r3, r1
 80092f2:	464d      	mov	r5, r9
 80092f4:	d10f      	bne.n	8009316 <_dtoa_r+0xa66>
 80092f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092fa:	d02a      	beq.n	8009352 <_dtoa_r+0xaa2>
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd02      	ble.n	8009308 <_dtoa_r+0xa58>
 8009302:	9b02      	ldr	r3, [sp, #8]
 8009304:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009308:	f88b a000 	strb.w	sl, [fp]
 800930c:	e775      	b.n	80091fa <_dtoa_r+0x94a>
 800930e:	4638      	mov	r0, r7
 8009310:	e7ba      	b.n	8009288 <_dtoa_r+0x9d8>
 8009312:	2201      	movs	r2, #1
 8009314:	e7e2      	b.n	80092dc <_dtoa_r+0xa2c>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	db04      	blt.n	8009326 <_dtoa_r+0xa76>
 800931c:	9906      	ldr	r1, [sp, #24]
 800931e:	430b      	orrs	r3, r1
 8009320:	9904      	ldr	r1, [sp, #16]
 8009322:	430b      	orrs	r3, r1
 8009324:	d122      	bne.n	800936c <_dtoa_r+0xabc>
 8009326:	2a00      	cmp	r2, #0
 8009328:	ddee      	ble.n	8009308 <_dtoa_r+0xa58>
 800932a:	ee18 1a10 	vmov	r1, s16
 800932e:	2201      	movs	r2, #1
 8009330:	4620      	mov	r0, r4
 8009332:	f000 fea3 	bl	800a07c <__lshift>
 8009336:	4631      	mov	r1, r6
 8009338:	ee08 0a10 	vmov	s16, r0
 800933c:	f000 ff0e 	bl	800a15c <__mcmp>
 8009340:	2800      	cmp	r0, #0
 8009342:	dc03      	bgt.n	800934c <_dtoa_r+0xa9c>
 8009344:	d1e0      	bne.n	8009308 <_dtoa_r+0xa58>
 8009346:	f01a 0f01 	tst.w	sl, #1
 800934a:	d0dd      	beq.n	8009308 <_dtoa_r+0xa58>
 800934c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009350:	d1d7      	bne.n	8009302 <_dtoa_r+0xa52>
 8009352:	2339      	movs	r3, #57	; 0x39
 8009354:	f88b 3000 	strb.w	r3, [fp]
 8009358:	462b      	mov	r3, r5
 800935a:	461d      	mov	r5, r3
 800935c:	3b01      	subs	r3, #1
 800935e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009362:	2a39      	cmp	r2, #57	; 0x39
 8009364:	d071      	beq.n	800944a <_dtoa_r+0xb9a>
 8009366:	3201      	adds	r2, #1
 8009368:	701a      	strb	r2, [r3, #0]
 800936a:	e746      	b.n	80091fa <_dtoa_r+0x94a>
 800936c:	2a00      	cmp	r2, #0
 800936e:	dd07      	ble.n	8009380 <_dtoa_r+0xad0>
 8009370:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009374:	d0ed      	beq.n	8009352 <_dtoa_r+0xaa2>
 8009376:	f10a 0301 	add.w	r3, sl, #1
 800937a:	f88b 3000 	strb.w	r3, [fp]
 800937e:	e73c      	b.n	80091fa <_dtoa_r+0x94a>
 8009380:	9b05      	ldr	r3, [sp, #20]
 8009382:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009386:	4599      	cmp	r9, r3
 8009388:	d047      	beq.n	800941a <_dtoa_r+0xb6a>
 800938a:	ee18 1a10 	vmov	r1, s16
 800938e:	2300      	movs	r3, #0
 8009390:	220a      	movs	r2, #10
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fc78 	bl	8009c88 <__multadd>
 8009398:	45b8      	cmp	r8, r7
 800939a:	ee08 0a10 	vmov	s16, r0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	f04f 020a 	mov.w	r2, #10
 80093a6:	4641      	mov	r1, r8
 80093a8:	4620      	mov	r0, r4
 80093aa:	d106      	bne.n	80093ba <_dtoa_r+0xb0a>
 80093ac:	f000 fc6c 	bl	8009c88 <__multadd>
 80093b0:	4680      	mov	r8, r0
 80093b2:	4607      	mov	r7, r0
 80093b4:	f109 0901 	add.w	r9, r9, #1
 80093b8:	e772      	b.n	80092a0 <_dtoa_r+0x9f0>
 80093ba:	f000 fc65 	bl	8009c88 <__multadd>
 80093be:	4639      	mov	r1, r7
 80093c0:	4680      	mov	r8, r0
 80093c2:	2300      	movs	r3, #0
 80093c4:	220a      	movs	r2, #10
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fc5e 	bl	8009c88 <__multadd>
 80093cc:	4607      	mov	r7, r0
 80093ce:	e7f1      	b.n	80093b4 <_dtoa_r+0xb04>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	9302      	str	r3, [sp, #8]
 80093d4:	9d01      	ldr	r5, [sp, #4]
 80093d6:	ee18 0a10 	vmov	r0, s16
 80093da:	4631      	mov	r1, r6
 80093dc:	f7ff f9dc 	bl	8008798 <quorem>
 80093e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	f805 ab01 	strb.w	sl, [r5], #1
 80093ea:	1aea      	subs	r2, r5, r3
 80093ec:	9b02      	ldr	r3, [sp, #8]
 80093ee:	4293      	cmp	r3, r2
 80093f0:	dd09      	ble.n	8009406 <_dtoa_r+0xb56>
 80093f2:	ee18 1a10 	vmov	r1, s16
 80093f6:	2300      	movs	r3, #0
 80093f8:	220a      	movs	r2, #10
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 fc44 	bl	8009c88 <__multadd>
 8009400:	ee08 0a10 	vmov	s16, r0
 8009404:	e7e7      	b.n	80093d6 <_dtoa_r+0xb26>
 8009406:	9b02      	ldr	r3, [sp, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bfc8      	it	gt
 800940c:	461d      	movgt	r5, r3
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	bfd8      	it	le
 8009412:	2501      	movle	r5, #1
 8009414:	441d      	add	r5, r3
 8009416:	f04f 0800 	mov.w	r8, #0
 800941a:	ee18 1a10 	vmov	r1, s16
 800941e:	2201      	movs	r2, #1
 8009420:	4620      	mov	r0, r4
 8009422:	f000 fe2b 	bl	800a07c <__lshift>
 8009426:	4631      	mov	r1, r6
 8009428:	ee08 0a10 	vmov	s16, r0
 800942c:	f000 fe96 	bl	800a15c <__mcmp>
 8009430:	2800      	cmp	r0, #0
 8009432:	dc91      	bgt.n	8009358 <_dtoa_r+0xaa8>
 8009434:	d102      	bne.n	800943c <_dtoa_r+0xb8c>
 8009436:	f01a 0f01 	tst.w	sl, #1
 800943a:	d18d      	bne.n	8009358 <_dtoa_r+0xaa8>
 800943c:	462b      	mov	r3, r5
 800943e:	461d      	mov	r5, r3
 8009440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009444:	2a30      	cmp	r2, #48	; 0x30
 8009446:	d0fa      	beq.n	800943e <_dtoa_r+0xb8e>
 8009448:	e6d7      	b.n	80091fa <_dtoa_r+0x94a>
 800944a:	9a01      	ldr	r2, [sp, #4]
 800944c:	429a      	cmp	r2, r3
 800944e:	d184      	bne.n	800935a <_dtoa_r+0xaaa>
 8009450:	9b00      	ldr	r3, [sp, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	2331      	movs	r3, #49	; 0x31
 8009458:	7013      	strb	r3, [r2, #0]
 800945a:	e6ce      	b.n	80091fa <_dtoa_r+0x94a>
 800945c:	4b09      	ldr	r3, [pc, #36]	; (8009484 <_dtoa_r+0xbd4>)
 800945e:	f7ff ba95 	b.w	800898c <_dtoa_r+0xdc>
 8009462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009464:	2b00      	cmp	r3, #0
 8009466:	f47f aa6e 	bne.w	8008946 <_dtoa_r+0x96>
 800946a:	4b07      	ldr	r3, [pc, #28]	; (8009488 <_dtoa_r+0xbd8>)
 800946c:	f7ff ba8e 	b.w	800898c <_dtoa_r+0xdc>
 8009470:	9b02      	ldr	r3, [sp, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	dcae      	bgt.n	80093d4 <_dtoa_r+0xb24>
 8009476:	9b06      	ldr	r3, [sp, #24]
 8009478:	2b02      	cmp	r3, #2
 800947a:	f73f aea8 	bgt.w	80091ce <_dtoa_r+0x91e>
 800947e:	e7a9      	b.n	80093d4 <_dtoa_r+0xb24>
 8009480:	0800b850 	.word	0x0800b850
 8009484:	0800b654 	.word	0x0800b654
 8009488:	0800b7d1 	.word	0x0800b7d1

0800948c <rshift>:
 800948c:	6903      	ldr	r3, [r0, #16]
 800948e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009496:	ea4f 1261 	mov.w	r2, r1, asr #5
 800949a:	f100 0414 	add.w	r4, r0, #20
 800949e:	dd45      	ble.n	800952c <rshift+0xa0>
 80094a0:	f011 011f 	ands.w	r1, r1, #31
 80094a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094ac:	d10c      	bne.n	80094c8 <rshift+0x3c>
 80094ae:	f100 0710 	add.w	r7, r0, #16
 80094b2:	4629      	mov	r1, r5
 80094b4:	42b1      	cmp	r1, r6
 80094b6:	d334      	bcc.n	8009522 <rshift+0x96>
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	1eea      	subs	r2, r5, #3
 80094be:	4296      	cmp	r6, r2
 80094c0:	bf38      	it	cc
 80094c2:	2300      	movcc	r3, #0
 80094c4:	4423      	add	r3, r4
 80094c6:	e015      	b.n	80094f4 <rshift+0x68>
 80094c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094cc:	f1c1 0820 	rsb	r8, r1, #32
 80094d0:	40cf      	lsrs	r7, r1
 80094d2:	f105 0e04 	add.w	lr, r5, #4
 80094d6:	46a1      	mov	r9, r4
 80094d8:	4576      	cmp	r6, lr
 80094da:	46f4      	mov	ip, lr
 80094dc:	d815      	bhi.n	800950a <rshift+0x7e>
 80094de:	1a9a      	subs	r2, r3, r2
 80094e0:	0092      	lsls	r2, r2, #2
 80094e2:	3a04      	subs	r2, #4
 80094e4:	3501      	adds	r5, #1
 80094e6:	42ae      	cmp	r6, r5
 80094e8:	bf38      	it	cc
 80094ea:	2200      	movcc	r2, #0
 80094ec:	18a3      	adds	r3, r4, r2
 80094ee:	50a7      	str	r7, [r4, r2]
 80094f0:	b107      	cbz	r7, 80094f4 <rshift+0x68>
 80094f2:	3304      	adds	r3, #4
 80094f4:	1b1a      	subs	r2, r3, r4
 80094f6:	42a3      	cmp	r3, r4
 80094f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094fc:	bf08      	it	eq
 80094fe:	2300      	moveq	r3, #0
 8009500:	6102      	str	r2, [r0, #16]
 8009502:	bf08      	it	eq
 8009504:	6143      	streq	r3, [r0, #20]
 8009506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800950a:	f8dc c000 	ldr.w	ip, [ip]
 800950e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009512:	ea4c 0707 	orr.w	r7, ip, r7
 8009516:	f849 7b04 	str.w	r7, [r9], #4
 800951a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800951e:	40cf      	lsrs	r7, r1
 8009520:	e7da      	b.n	80094d8 <rshift+0x4c>
 8009522:	f851 cb04 	ldr.w	ip, [r1], #4
 8009526:	f847 cf04 	str.w	ip, [r7, #4]!
 800952a:	e7c3      	b.n	80094b4 <rshift+0x28>
 800952c:	4623      	mov	r3, r4
 800952e:	e7e1      	b.n	80094f4 <rshift+0x68>

08009530 <__hexdig_fun>:
 8009530:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009534:	2b09      	cmp	r3, #9
 8009536:	d802      	bhi.n	800953e <__hexdig_fun+0xe>
 8009538:	3820      	subs	r0, #32
 800953a:	b2c0      	uxtb	r0, r0
 800953c:	4770      	bx	lr
 800953e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009542:	2b05      	cmp	r3, #5
 8009544:	d801      	bhi.n	800954a <__hexdig_fun+0x1a>
 8009546:	3847      	subs	r0, #71	; 0x47
 8009548:	e7f7      	b.n	800953a <__hexdig_fun+0xa>
 800954a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800954e:	2b05      	cmp	r3, #5
 8009550:	d801      	bhi.n	8009556 <__hexdig_fun+0x26>
 8009552:	3827      	subs	r0, #39	; 0x27
 8009554:	e7f1      	b.n	800953a <__hexdig_fun+0xa>
 8009556:	2000      	movs	r0, #0
 8009558:	4770      	bx	lr
	...

0800955c <__gethex>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	ed2d 8b02 	vpush	{d8}
 8009564:	b089      	sub	sp, #36	; 0x24
 8009566:	ee08 0a10 	vmov	s16, r0
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	4bb4      	ldr	r3, [pc, #720]	; (8009840 <__gethex+0x2e4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	4618      	mov	r0, r3
 8009574:	468b      	mov	fp, r1
 8009576:	4690      	mov	r8, r2
 8009578:	f7f6 fe2a 	bl	80001d0 <strlen>
 800957c:	9b01      	ldr	r3, [sp, #4]
 800957e:	f8db 2000 	ldr.w	r2, [fp]
 8009582:	4403      	add	r3, r0
 8009584:	4682      	mov	sl, r0
 8009586:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800958a:	9305      	str	r3, [sp, #20]
 800958c:	1c93      	adds	r3, r2, #2
 800958e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009592:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009596:	32fe      	adds	r2, #254	; 0xfe
 8009598:	18d1      	adds	r1, r2, r3
 800959a:	461f      	mov	r7, r3
 800959c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095a0:	9100      	str	r1, [sp, #0]
 80095a2:	2830      	cmp	r0, #48	; 0x30
 80095a4:	d0f8      	beq.n	8009598 <__gethex+0x3c>
 80095a6:	f7ff ffc3 	bl	8009530 <__hexdig_fun>
 80095aa:	4604      	mov	r4, r0
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d13a      	bne.n	8009626 <__gethex+0xca>
 80095b0:	9901      	ldr	r1, [sp, #4]
 80095b2:	4652      	mov	r2, sl
 80095b4:	4638      	mov	r0, r7
 80095b6:	f001 fa33 	bl	800aa20 <strncmp>
 80095ba:	4605      	mov	r5, r0
 80095bc:	2800      	cmp	r0, #0
 80095be:	d168      	bne.n	8009692 <__gethex+0x136>
 80095c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80095c4:	eb07 060a 	add.w	r6, r7, sl
 80095c8:	f7ff ffb2 	bl	8009530 <__hexdig_fun>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d062      	beq.n	8009696 <__gethex+0x13a>
 80095d0:	4633      	mov	r3, r6
 80095d2:	7818      	ldrb	r0, [r3, #0]
 80095d4:	2830      	cmp	r0, #48	; 0x30
 80095d6:	461f      	mov	r7, r3
 80095d8:	f103 0301 	add.w	r3, r3, #1
 80095dc:	d0f9      	beq.n	80095d2 <__gethex+0x76>
 80095de:	f7ff ffa7 	bl	8009530 <__hexdig_fun>
 80095e2:	2301      	movs	r3, #1
 80095e4:	fab0 f480 	clz	r4, r0
 80095e8:	0964      	lsrs	r4, r4, #5
 80095ea:	4635      	mov	r5, r6
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	463a      	mov	r2, r7
 80095f0:	4616      	mov	r6, r2
 80095f2:	3201      	adds	r2, #1
 80095f4:	7830      	ldrb	r0, [r6, #0]
 80095f6:	f7ff ff9b 	bl	8009530 <__hexdig_fun>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d1f8      	bne.n	80095f0 <__gethex+0x94>
 80095fe:	9901      	ldr	r1, [sp, #4]
 8009600:	4652      	mov	r2, sl
 8009602:	4630      	mov	r0, r6
 8009604:	f001 fa0c 	bl	800aa20 <strncmp>
 8009608:	b980      	cbnz	r0, 800962c <__gethex+0xd0>
 800960a:	b94d      	cbnz	r5, 8009620 <__gethex+0xc4>
 800960c:	eb06 050a 	add.w	r5, r6, sl
 8009610:	462a      	mov	r2, r5
 8009612:	4616      	mov	r6, r2
 8009614:	3201      	adds	r2, #1
 8009616:	7830      	ldrb	r0, [r6, #0]
 8009618:	f7ff ff8a 	bl	8009530 <__hexdig_fun>
 800961c:	2800      	cmp	r0, #0
 800961e:	d1f8      	bne.n	8009612 <__gethex+0xb6>
 8009620:	1bad      	subs	r5, r5, r6
 8009622:	00ad      	lsls	r5, r5, #2
 8009624:	e004      	b.n	8009630 <__gethex+0xd4>
 8009626:	2400      	movs	r4, #0
 8009628:	4625      	mov	r5, r4
 800962a:	e7e0      	b.n	80095ee <__gethex+0x92>
 800962c:	2d00      	cmp	r5, #0
 800962e:	d1f7      	bne.n	8009620 <__gethex+0xc4>
 8009630:	7833      	ldrb	r3, [r6, #0]
 8009632:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009636:	2b50      	cmp	r3, #80	; 0x50
 8009638:	d13b      	bne.n	80096b2 <__gethex+0x156>
 800963a:	7873      	ldrb	r3, [r6, #1]
 800963c:	2b2b      	cmp	r3, #43	; 0x2b
 800963e:	d02c      	beq.n	800969a <__gethex+0x13e>
 8009640:	2b2d      	cmp	r3, #45	; 0x2d
 8009642:	d02e      	beq.n	80096a2 <__gethex+0x146>
 8009644:	1c71      	adds	r1, r6, #1
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	7808      	ldrb	r0, [r1, #0]
 800964c:	f7ff ff70 	bl	8009530 <__hexdig_fun>
 8009650:	1e43      	subs	r3, r0, #1
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b18      	cmp	r3, #24
 8009656:	d82c      	bhi.n	80096b2 <__gethex+0x156>
 8009658:	f1a0 0210 	sub.w	r2, r0, #16
 800965c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009660:	f7ff ff66 	bl	8009530 <__hexdig_fun>
 8009664:	1e43      	subs	r3, r0, #1
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b18      	cmp	r3, #24
 800966a:	d91d      	bls.n	80096a8 <__gethex+0x14c>
 800966c:	f1b9 0f00 	cmp.w	r9, #0
 8009670:	d000      	beq.n	8009674 <__gethex+0x118>
 8009672:	4252      	negs	r2, r2
 8009674:	4415      	add	r5, r2
 8009676:	f8cb 1000 	str.w	r1, [fp]
 800967a:	b1e4      	cbz	r4, 80096b6 <__gethex+0x15a>
 800967c:	9b00      	ldr	r3, [sp, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2700      	movne	r7, #0
 8009684:	2706      	moveq	r7, #6
 8009686:	4638      	mov	r0, r7
 8009688:	b009      	add	sp, #36	; 0x24
 800968a:	ecbd 8b02 	vpop	{d8}
 800968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009692:	463e      	mov	r6, r7
 8009694:	4625      	mov	r5, r4
 8009696:	2401      	movs	r4, #1
 8009698:	e7ca      	b.n	8009630 <__gethex+0xd4>
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	1cb1      	adds	r1, r6, #2
 80096a0:	e7d3      	b.n	800964a <__gethex+0xee>
 80096a2:	f04f 0901 	mov.w	r9, #1
 80096a6:	e7fa      	b.n	800969e <__gethex+0x142>
 80096a8:	230a      	movs	r3, #10
 80096aa:	fb03 0202 	mla	r2, r3, r2, r0
 80096ae:	3a10      	subs	r2, #16
 80096b0:	e7d4      	b.n	800965c <__gethex+0x100>
 80096b2:	4631      	mov	r1, r6
 80096b4:	e7df      	b.n	8009676 <__gethex+0x11a>
 80096b6:	1bf3      	subs	r3, r6, r7
 80096b8:	3b01      	subs	r3, #1
 80096ba:	4621      	mov	r1, r4
 80096bc:	2b07      	cmp	r3, #7
 80096be:	dc0b      	bgt.n	80096d8 <__gethex+0x17c>
 80096c0:	ee18 0a10 	vmov	r0, s16
 80096c4:	f000 fa7e 	bl	8009bc4 <_Balloc>
 80096c8:	4604      	mov	r4, r0
 80096ca:	b940      	cbnz	r0, 80096de <__gethex+0x182>
 80096cc:	4b5d      	ldr	r3, [pc, #372]	; (8009844 <__gethex+0x2e8>)
 80096ce:	4602      	mov	r2, r0
 80096d0:	21de      	movs	r1, #222	; 0xde
 80096d2:	485d      	ldr	r0, [pc, #372]	; (8009848 <__gethex+0x2ec>)
 80096d4:	f001 f9c6 	bl	800aa64 <__assert_func>
 80096d8:	3101      	adds	r1, #1
 80096da:	105b      	asrs	r3, r3, #1
 80096dc:	e7ee      	b.n	80096bc <__gethex+0x160>
 80096de:	f100 0914 	add.w	r9, r0, #20
 80096e2:	f04f 0b00 	mov.w	fp, #0
 80096e6:	f1ca 0301 	rsb	r3, sl, #1
 80096ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80096ee:	f8cd b000 	str.w	fp, [sp]
 80096f2:	9306      	str	r3, [sp, #24]
 80096f4:	42b7      	cmp	r7, r6
 80096f6:	d340      	bcc.n	800977a <__gethex+0x21e>
 80096f8:	9802      	ldr	r0, [sp, #8]
 80096fa:	9b00      	ldr	r3, [sp, #0]
 80096fc:	f840 3b04 	str.w	r3, [r0], #4
 8009700:	eba0 0009 	sub.w	r0, r0, r9
 8009704:	1080      	asrs	r0, r0, #2
 8009706:	0146      	lsls	r6, r0, #5
 8009708:	6120      	str	r0, [r4, #16]
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fb4c 	bl	8009da8 <__hi0bits>
 8009710:	1a30      	subs	r0, r6, r0
 8009712:	f8d8 6000 	ldr.w	r6, [r8]
 8009716:	42b0      	cmp	r0, r6
 8009718:	dd63      	ble.n	80097e2 <__gethex+0x286>
 800971a:	1b87      	subs	r7, r0, r6
 800971c:	4639      	mov	r1, r7
 800971e:	4620      	mov	r0, r4
 8009720:	f000 fef0 	bl	800a504 <__any_on>
 8009724:	4682      	mov	sl, r0
 8009726:	b1a8      	cbz	r0, 8009754 <__gethex+0x1f8>
 8009728:	1e7b      	subs	r3, r7, #1
 800972a:	1159      	asrs	r1, r3, #5
 800972c:	f003 021f 	and.w	r2, r3, #31
 8009730:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009734:	f04f 0a01 	mov.w	sl, #1
 8009738:	fa0a f202 	lsl.w	r2, sl, r2
 800973c:	420a      	tst	r2, r1
 800973e:	d009      	beq.n	8009754 <__gethex+0x1f8>
 8009740:	4553      	cmp	r3, sl
 8009742:	dd05      	ble.n	8009750 <__gethex+0x1f4>
 8009744:	1eb9      	subs	r1, r7, #2
 8009746:	4620      	mov	r0, r4
 8009748:	f000 fedc 	bl	800a504 <__any_on>
 800974c:	2800      	cmp	r0, #0
 800974e:	d145      	bne.n	80097dc <__gethex+0x280>
 8009750:	f04f 0a02 	mov.w	sl, #2
 8009754:	4639      	mov	r1, r7
 8009756:	4620      	mov	r0, r4
 8009758:	f7ff fe98 	bl	800948c <rshift>
 800975c:	443d      	add	r5, r7
 800975e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009762:	42ab      	cmp	r3, r5
 8009764:	da4c      	bge.n	8009800 <__gethex+0x2a4>
 8009766:	ee18 0a10 	vmov	r0, s16
 800976a:	4621      	mov	r1, r4
 800976c:	f000 fa6a 	bl	8009c44 <_Bfree>
 8009770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009772:	2300      	movs	r3, #0
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	27a3      	movs	r7, #163	; 0xa3
 8009778:	e785      	b.n	8009686 <__gethex+0x12a>
 800977a:	1e73      	subs	r3, r6, #1
 800977c:	9a05      	ldr	r2, [sp, #20]
 800977e:	9303      	str	r3, [sp, #12]
 8009780:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009784:	4293      	cmp	r3, r2
 8009786:	d019      	beq.n	80097bc <__gethex+0x260>
 8009788:	f1bb 0f20 	cmp.w	fp, #32
 800978c:	d107      	bne.n	800979e <__gethex+0x242>
 800978e:	9b02      	ldr	r3, [sp, #8]
 8009790:	9a00      	ldr	r2, [sp, #0]
 8009792:	f843 2b04 	str.w	r2, [r3], #4
 8009796:	9302      	str	r3, [sp, #8]
 8009798:	2300      	movs	r3, #0
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	469b      	mov	fp, r3
 800979e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80097a2:	f7ff fec5 	bl	8009530 <__hexdig_fun>
 80097a6:	9b00      	ldr	r3, [sp, #0]
 80097a8:	f000 000f 	and.w	r0, r0, #15
 80097ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80097b0:	4303      	orrs	r3, r0
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	f10b 0b04 	add.w	fp, fp, #4
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	e00d      	b.n	80097d8 <__gethex+0x27c>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	9a06      	ldr	r2, [sp, #24]
 80097c0:	4413      	add	r3, r2
 80097c2:	42bb      	cmp	r3, r7
 80097c4:	d3e0      	bcc.n	8009788 <__gethex+0x22c>
 80097c6:	4618      	mov	r0, r3
 80097c8:	9901      	ldr	r1, [sp, #4]
 80097ca:	9307      	str	r3, [sp, #28]
 80097cc:	4652      	mov	r2, sl
 80097ce:	f001 f927 	bl	800aa20 <strncmp>
 80097d2:	9b07      	ldr	r3, [sp, #28]
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d1d7      	bne.n	8009788 <__gethex+0x22c>
 80097d8:	461e      	mov	r6, r3
 80097da:	e78b      	b.n	80096f4 <__gethex+0x198>
 80097dc:	f04f 0a03 	mov.w	sl, #3
 80097e0:	e7b8      	b.n	8009754 <__gethex+0x1f8>
 80097e2:	da0a      	bge.n	80097fa <__gethex+0x29e>
 80097e4:	1a37      	subs	r7, r6, r0
 80097e6:	4621      	mov	r1, r4
 80097e8:	ee18 0a10 	vmov	r0, s16
 80097ec:	463a      	mov	r2, r7
 80097ee:	f000 fc45 	bl	800a07c <__lshift>
 80097f2:	1bed      	subs	r5, r5, r7
 80097f4:	4604      	mov	r4, r0
 80097f6:	f100 0914 	add.w	r9, r0, #20
 80097fa:	f04f 0a00 	mov.w	sl, #0
 80097fe:	e7ae      	b.n	800975e <__gethex+0x202>
 8009800:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009804:	42a8      	cmp	r0, r5
 8009806:	dd72      	ble.n	80098ee <__gethex+0x392>
 8009808:	1b45      	subs	r5, r0, r5
 800980a:	42ae      	cmp	r6, r5
 800980c:	dc36      	bgt.n	800987c <__gethex+0x320>
 800980e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009812:	2b02      	cmp	r3, #2
 8009814:	d02a      	beq.n	800986c <__gethex+0x310>
 8009816:	2b03      	cmp	r3, #3
 8009818:	d02c      	beq.n	8009874 <__gethex+0x318>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d11c      	bne.n	8009858 <__gethex+0x2fc>
 800981e:	42ae      	cmp	r6, r5
 8009820:	d11a      	bne.n	8009858 <__gethex+0x2fc>
 8009822:	2e01      	cmp	r6, #1
 8009824:	d112      	bne.n	800984c <__gethex+0x2f0>
 8009826:	9a04      	ldr	r2, [sp, #16]
 8009828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	2301      	movs	r3, #1
 8009830:	6123      	str	r3, [r4, #16]
 8009832:	f8c9 3000 	str.w	r3, [r9]
 8009836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009838:	2762      	movs	r7, #98	; 0x62
 800983a:	601c      	str	r4, [r3, #0]
 800983c:	e723      	b.n	8009686 <__gethex+0x12a>
 800983e:	bf00      	nop
 8009840:	0800b8c8 	.word	0x0800b8c8
 8009844:	0800b850 	.word	0x0800b850
 8009848:	0800b861 	.word	0x0800b861
 800984c:	1e71      	subs	r1, r6, #1
 800984e:	4620      	mov	r0, r4
 8009850:	f000 fe58 	bl	800a504 <__any_on>
 8009854:	2800      	cmp	r0, #0
 8009856:	d1e6      	bne.n	8009826 <__gethex+0x2ca>
 8009858:	ee18 0a10 	vmov	r0, s16
 800985c:	4621      	mov	r1, r4
 800985e:	f000 f9f1 	bl	8009c44 <_Bfree>
 8009862:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009864:	2300      	movs	r3, #0
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	2750      	movs	r7, #80	; 0x50
 800986a:	e70c      	b.n	8009686 <__gethex+0x12a>
 800986c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1f2      	bne.n	8009858 <__gethex+0x2fc>
 8009872:	e7d8      	b.n	8009826 <__gethex+0x2ca>
 8009874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1d5      	bne.n	8009826 <__gethex+0x2ca>
 800987a:	e7ed      	b.n	8009858 <__gethex+0x2fc>
 800987c:	1e6f      	subs	r7, r5, #1
 800987e:	f1ba 0f00 	cmp.w	sl, #0
 8009882:	d131      	bne.n	80098e8 <__gethex+0x38c>
 8009884:	b127      	cbz	r7, 8009890 <__gethex+0x334>
 8009886:	4639      	mov	r1, r7
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fe3b 	bl	800a504 <__any_on>
 800988e:	4682      	mov	sl, r0
 8009890:	117b      	asrs	r3, r7, #5
 8009892:	2101      	movs	r1, #1
 8009894:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009898:	f007 071f 	and.w	r7, r7, #31
 800989c:	fa01 f707 	lsl.w	r7, r1, r7
 80098a0:	421f      	tst	r7, r3
 80098a2:	4629      	mov	r1, r5
 80098a4:	4620      	mov	r0, r4
 80098a6:	bf18      	it	ne
 80098a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80098ac:	1b76      	subs	r6, r6, r5
 80098ae:	f7ff fded 	bl	800948c <rshift>
 80098b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098b6:	2702      	movs	r7, #2
 80098b8:	f1ba 0f00 	cmp.w	sl, #0
 80098bc:	d048      	beq.n	8009950 <__gethex+0x3f4>
 80098be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d015      	beq.n	80098f2 <__gethex+0x396>
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d017      	beq.n	80098fa <__gethex+0x39e>
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d109      	bne.n	80098e2 <__gethex+0x386>
 80098ce:	f01a 0f02 	tst.w	sl, #2
 80098d2:	d006      	beq.n	80098e2 <__gethex+0x386>
 80098d4:	f8d9 0000 	ldr.w	r0, [r9]
 80098d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80098dc:	f01a 0f01 	tst.w	sl, #1
 80098e0:	d10e      	bne.n	8009900 <__gethex+0x3a4>
 80098e2:	f047 0710 	orr.w	r7, r7, #16
 80098e6:	e033      	b.n	8009950 <__gethex+0x3f4>
 80098e8:	f04f 0a01 	mov.w	sl, #1
 80098ec:	e7d0      	b.n	8009890 <__gethex+0x334>
 80098ee:	2701      	movs	r7, #1
 80098f0:	e7e2      	b.n	80098b8 <__gethex+0x35c>
 80098f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098f4:	f1c3 0301 	rsb	r3, r3, #1
 80098f8:	9315      	str	r3, [sp, #84]	; 0x54
 80098fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0f0      	beq.n	80098e2 <__gethex+0x386>
 8009900:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009904:	f104 0314 	add.w	r3, r4, #20
 8009908:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800990c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009910:	f04f 0c00 	mov.w	ip, #0
 8009914:	4618      	mov	r0, r3
 8009916:	f853 2b04 	ldr.w	r2, [r3], #4
 800991a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800991e:	d01c      	beq.n	800995a <__gethex+0x3fe>
 8009920:	3201      	adds	r2, #1
 8009922:	6002      	str	r2, [r0, #0]
 8009924:	2f02      	cmp	r7, #2
 8009926:	f104 0314 	add.w	r3, r4, #20
 800992a:	d13f      	bne.n	80099ac <__gethex+0x450>
 800992c:	f8d8 2000 	ldr.w	r2, [r8]
 8009930:	3a01      	subs	r2, #1
 8009932:	42b2      	cmp	r2, r6
 8009934:	d10a      	bne.n	800994c <__gethex+0x3f0>
 8009936:	1171      	asrs	r1, r6, #5
 8009938:	2201      	movs	r2, #1
 800993a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800993e:	f006 061f 	and.w	r6, r6, #31
 8009942:	fa02 f606 	lsl.w	r6, r2, r6
 8009946:	421e      	tst	r6, r3
 8009948:	bf18      	it	ne
 800994a:	4617      	movne	r7, r2
 800994c:	f047 0720 	orr.w	r7, r7, #32
 8009950:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009952:	601c      	str	r4, [r3, #0]
 8009954:	9b04      	ldr	r3, [sp, #16]
 8009956:	601d      	str	r5, [r3, #0]
 8009958:	e695      	b.n	8009686 <__gethex+0x12a>
 800995a:	4299      	cmp	r1, r3
 800995c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009960:	d8d8      	bhi.n	8009914 <__gethex+0x3b8>
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	459b      	cmp	fp, r3
 8009966:	db19      	blt.n	800999c <__gethex+0x440>
 8009968:	6861      	ldr	r1, [r4, #4]
 800996a:	ee18 0a10 	vmov	r0, s16
 800996e:	3101      	adds	r1, #1
 8009970:	f000 f928 	bl	8009bc4 <_Balloc>
 8009974:	4681      	mov	r9, r0
 8009976:	b918      	cbnz	r0, 8009980 <__gethex+0x424>
 8009978:	4b1a      	ldr	r3, [pc, #104]	; (80099e4 <__gethex+0x488>)
 800997a:	4602      	mov	r2, r0
 800997c:	2184      	movs	r1, #132	; 0x84
 800997e:	e6a8      	b.n	80096d2 <__gethex+0x176>
 8009980:	6922      	ldr	r2, [r4, #16]
 8009982:	3202      	adds	r2, #2
 8009984:	f104 010c 	add.w	r1, r4, #12
 8009988:	0092      	lsls	r2, r2, #2
 800998a:	300c      	adds	r0, #12
 800998c:	f000 f90c 	bl	8009ba8 <memcpy>
 8009990:	4621      	mov	r1, r4
 8009992:	ee18 0a10 	vmov	r0, s16
 8009996:	f000 f955 	bl	8009c44 <_Bfree>
 800999a:	464c      	mov	r4, r9
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099a4:	6122      	str	r2, [r4, #16]
 80099a6:	2201      	movs	r2, #1
 80099a8:	615a      	str	r2, [r3, #20]
 80099aa:	e7bb      	b.n	8009924 <__gethex+0x3c8>
 80099ac:	6922      	ldr	r2, [r4, #16]
 80099ae:	455a      	cmp	r2, fp
 80099b0:	dd0b      	ble.n	80099ca <__gethex+0x46e>
 80099b2:	2101      	movs	r1, #1
 80099b4:	4620      	mov	r0, r4
 80099b6:	f7ff fd69 	bl	800948c <rshift>
 80099ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099be:	3501      	adds	r5, #1
 80099c0:	42ab      	cmp	r3, r5
 80099c2:	f6ff aed0 	blt.w	8009766 <__gethex+0x20a>
 80099c6:	2701      	movs	r7, #1
 80099c8:	e7c0      	b.n	800994c <__gethex+0x3f0>
 80099ca:	f016 061f 	ands.w	r6, r6, #31
 80099ce:	d0fa      	beq.n	80099c6 <__gethex+0x46a>
 80099d0:	4453      	add	r3, sl
 80099d2:	f1c6 0620 	rsb	r6, r6, #32
 80099d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80099da:	f000 f9e5 	bl	8009da8 <__hi0bits>
 80099de:	42b0      	cmp	r0, r6
 80099e0:	dbe7      	blt.n	80099b2 <__gethex+0x456>
 80099e2:	e7f0      	b.n	80099c6 <__gethex+0x46a>
 80099e4:	0800b850 	.word	0x0800b850

080099e8 <L_shift>:
 80099e8:	f1c2 0208 	rsb	r2, r2, #8
 80099ec:	0092      	lsls	r2, r2, #2
 80099ee:	b570      	push	{r4, r5, r6, lr}
 80099f0:	f1c2 0620 	rsb	r6, r2, #32
 80099f4:	6843      	ldr	r3, [r0, #4]
 80099f6:	6804      	ldr	r4, [r0, #0]
 80099f8:	fa03 f506 	lsl.w	r5, r3, r6
 80099fc:	432c      	orrs	r4, r5
 80099fe:	40d3      	lsrs	r3, r2
 8009a00:	6004      	str	r4, [r0, #0]
 8009a02:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a06:	4288      	cmp	r0, r1
 8009a08:	d3f4      	bcc.n	80099f4 <L_shift+0xc>
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}

08009a0c <__match>:
 8009a0c:	b530      	push	{r4, r5, lr}
 8009a0e:	6803      	ldr	r3, [r0, #0]
 8009a10:	3301      	adds	r3, #1
 8009a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a16:	b914      	cbnz	r4, 8009a1e <__match+0x12>
 8009a18:	6003      	str	r3, [r0, #0]
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	bd30      	pop	{r4, r5, pc}
 8009a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009a26:	2d19      	cmp	r5, #25
 8009a28:	bf98      	it	ls
 8009a2a:	3220      	addls	r2, #32
 8009a2c:	42a2      	cmp	r2, r4
 8009a2e:	d0f0      	beq.n	8009a12 <__match+0x6>
 8009a30:	2000      	movs	r0, #0
 8009a32:	e7f3      	b.n	8009a1c <__match+0x10>

08009a34 <__hexnan>:
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	680b      	ldr	r3, [r1, #0]
 8009a3a:	115e      	asrs	r6, r3, #5
 8009a3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a40:	f013 031f 	ands.w	r3, r3, #31
 8009a44:	b087      	sub	sp, #28
 8009a46:	bf18      	it	ne
 8009a48:	3604      	addne	r6, #4
 8009a4a:	2500      	movs	r5, #0
 8009a4c:	1f37      	subs	r7, r6, #4
 8009a4e:	4690      	mov	r8, r2
 8009a50:	6802      	ldr	r2, [r0, #0]
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	4682      	mov	sl, r0
 8009a56:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a5a:	46b9      	mov	r9, r7
 8009a5c:	463c      	mov	r4, r7
 8009a5e:	9502      	str	r5, [sp, #8]
 8009a60:	46ab      	mov	fp, r5
 8009a62:	7851      	ldrb	r1, [r2, #1]
 8009a64:	1c53      	adds	r3, r2, #1
 8009a66:	9303      	str	r3, [sp, #12]
 8009a68:	b341      	cbz	r1, 8009abc <__hexnan+0x88>
 8009a6a:	4608      	mov	r0, r1
 8009a6c:	9205      	str	r2, [sp, #20]
 8009a6e:	9104      	str	r1, [sp, #16]
 8009a70:	f7ff fd5e 	bl	8009530 <__hexdig_fun>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d14f      	bne.n	8009b18 <__hexnan+0xe4>
 8009a78:	9904      	ldr	r1, [sp, #16]
 8009a7a:	9a05      	ldr	r2, [sp, #20]
 8009a7c:	2920      	cmp	r1, #32
 8009a7e:	d818      	bhi.n	8009ab2 <__hexnan+0x7e>
 8009a80:	9b02      	ldr	r3, [sp, #8]
 8009a82:	459b      	cmp	fp, r3
 8009a84:	dd13      	ble.n	8009aae <__hexnan+0x7a>
 8009a86:	454c      	cmp	r4, r9
 8009a88:	d206      	bcs.n	8009a98 <__hexnan+0x64>
 8009a8a:	2d07      	cmp	r5, #7
 8009a8c:	dc04      	bgt.n	8009a98 <__hexnan+0x64>
 8009a8e:	462a      	mov	r2, r5
 8009a90:	4649      	mov	r1, r9
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7ff ffa8 	bl	80099e8 <L_shift>
 8009a98:	4544      	cmp	r4, r8
 8009a9a:	d950      	bls.n	8009b3e <__hexnan+0x10a>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f1a4 0904 	sub.w	r9, r4, #4
 8009aa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009aa6:	f8cd b008 	str.w	fp, [sp, #8]
 8009aaa:	464c      	mov	r4, r9
 8009aac:	461d      	mov	r5, r3
 8009aae:	9a03      	ldr	r2, [sp, #12]
 8009ab0:	e7d7      	b.n	8009a62 <__hexnan+0x2e>
 8009ab2:	2929      	cmp	r1, #41	; 0x29
 8009ab4:	d156      	bne.n	8009b64 <__hexnan+0x130>
 8009ab6:	3202      	adds	r2, #2
 8009ab8:	f8ca 2000 	str.w	r2, [sl]
 8009abc:	f1bb 0f00 	cmp.w	fp, #0
 8009ac0:	d050      	beq.n	8009b64 <__hexnan+0x130>
 8009ac2:	454c      	cmp	r4, r9
 8009ac4:	d206      	bcs.n	8009ad4 <__hexnan+0xa0>
 8009ac6:	2d07      	cmp	r5, #7
 8009ac8:	dc04      	bgt.n	8009ad4 <__hexnan+0xa0>
 8009aca:	462a      	mov	r2, r5
 8009acc:	4649      	mov	r1, r9
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f7ff ff8a 	bl	80099e8 <L_shift>
 8009ad4:	4544      	cmp	r4, r8
 8009ad6:	d934      	bls.n	8009b42 <__hexnan+0x10e>
 8009ad8:	f1a8 0204 	sub.w	r2, r8, #4
 8009adc:	4623      	mov	r3, r4
 8009ade:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ae2:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ae6:	429f      	cmp	r7, r3
 8009ae8:	d2f9      	bcs.n	8009ade <__hexnan+0xaa>
 8009aea:	1b3b      	subs	r3, r7, r4
 8009aec:	f023 0303 	bic.w	r3, r3, #3
 8009af0:	3304      	adds	r3, #4
 8009af2:	3401      	adds	r4, #1
 8009af4:	3e03      	subs	r6, #3
 8009af6:	42b4      	cmp	r4, r6
 8009af8:	bf88      	it	hi
 8009afa:	2304      	movhi	r3, #4
 8009afc:	4443      	add	r3, r8
 8009afe:	2200      	movs	r2, #0
 8009b00:	f843 2b04 	str.w	r2, [r3], #4
 8009b04:	429f      	cmp	r7, r3
 8009b06:	d2fb      	bcs.n	8009b00 <__hexnan+0xcc>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	b91b      	cbnz	r3, 8009b14 <__hexnan+0xe0>
 8009b0c:	4547      	cmp	r7, r8
 8009b0e:	d127      	bne.n	8009b60 <__hexnan+0x12c>
 8009b10:	2301      	movs	r3, #1
 8009b12:	603b      	str	r3, [r7, #0]
 8009b14:	2005      	movs	r0, #5
 8009b16:	e026      	b.n	8009b66 <__hexnan+0x132>
 8009b18:	3501      	adds	r5, #1
 8009b1a:	2d08      	cmp	r5, #8
 8009b1c:	f10b 0b01 	add.w	fp, fp, #1
 8009b20:	dd06      	ble.n	8009b30 <__hexnan+0xfc>
 8009b22:	4544      	cmp	r4, r8
 8009b24:	d9c3      	bls.n	8009aae <__hexnan+0x7a>
 8009b26:	2300      	movs	r3, #0
 8009b28:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b2c:	2501      	movs	r5, #1
 8009b2e:	3c04      	subs	r4, #4
 8009b30:	6822      	ldr	r2, [r4, #0]
 8009b32:	f000 000f 	and.w	r0, r0, #15
 8009b36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009b3a:	6022      	str	r2, [r4, #0]
 8009b3c:	e7b7      	b.n	8009aae <__hexnan+0x7a>
 8009b3e:	2508      	movs	r5, #8
 8009b40:	e7b5      	b.n	8009aae <__hexnan+0x7a>
 8009b42:	9b01      	ldr	r3, [sp, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0df      	beq.n	8009b08 <__hexnan+0xd4>
 8009b48:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4c:	f1c3 0320 	rsb	r3, r3, #32
 8009b50:	fa22 f303 	lsr.w	r3, r2, r3
 8009b54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b58:	401a      	ands	r2, r3
 8009b5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8009b5e:	e7d3      	b.n	8009b08 <__hexnan+0xd4>
 8009b60:	3f04      	subs	r7, #4
 8009b62:	e7d1      	b.n	8009b08 <__hexnan+0xd4>
 8009b64:	2004      	movs	r0, #4
 8009b66:	b007      	add	sp, #28
 8009b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b6c <_localeconv_r>:
 8009b6c:	4800      	ldr	r0, [pc, #0]	; (8009b70 <_localeconv_r+0x4>)
 8009b6e:	4770      	bx	lr
 8009b70:	20000164 	.word	0x20000164

08009b74 <malloc>:
 8009b74:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <malloc+0xc>)
 8009b76:	4601      	mov	r1, r0
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	f000 bd67 	b.w	800a64c <_malloc_r>
 8009b7e:	bf00      	nop
 8009b80:	2000000c 	.word	0x2000000c

08009b84 <__ascii_mbtowc>:
 8009b84:	b082      	sub	sp, #8
 8009b86:	b901      	cbnz	r1, 8009b8a <__ascii_mbtowc+0x6>
 8009b88:	a901      	add	r1, sp, #4
 8009b8a:	b142      	cbz	r2, 8009b9e <__ascii_mbtowc+0x1a>
 8009b8c:	b14b      	cbz	r3, 8009ba2 <__ascii_mbtowc+0x1e>
 8009b8e:	7813      	ldrb	r3, [r2, #0]
 8009b90:	600b      	str	r3, [r1, #0]
 8009b92:	7812      	ldrb	r2, [r2, #0]
 8009b94:	1e10      	subs	r0, r2, #0
 8009b96:	bf18      	it	ne
 8009b98:	2001      	movne	r0, #1
 8009b9a:	b002      	add	sp, #8
 8009b9c:	4770      	bx	lr
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	e7fb      	b.n	8009b9a <__ascii_mbtowc+0x16>
 8009ba2:	f06f 0001 	mvn.w	r0, #1
 8009ba6:	e7f8      	b.n	8009b9a <__ascii_mbtowc+0x16>

08009ba8 <memcpy>:
 8009ba8:	440a      	add	r2, r1
 8009baa:	4291      	cmp	r1, r2
 8009bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bb0:	d100      	bne.n	8009bb4 <memcpy+0xc>
 8009bb2:	4770      	bx	lr
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bbe:	4291      	cmp	r1, r2
 8009bc0:	d1f9      	bne.n	8009bb6 <memcpy+0xe>
 8009bc2:	bd10      	pop	{r4, pc}

08009bc4 <_Balloc>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bc8:	4604      	mov	r4, r0
 8009bca:	460d      	mov	r5, r1
 8009bcc:	b976      	cbnz	r6, 8009bec <_Balloc+0x28>
 8009bce:	2010      	movs	r0, #16
 8009bd0:	f7ff ffd0 	bl	8009b74 <malloc>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	6260      	str	r0, [r4, #36]	; 0x24
 8009bd8:	b920      	cbnz	r0, 8009be4 <_Balloc+0x20>
 8009bda:	4b18      	ldr	r3, [pc, #96]	; (8009c3c <_Balloc+0x78>)
 8009bdc:	4818      	ldr	r0, [pc, #96]	; (8009c40 <_Balloc+0x7c>)
 8009bde:	2166      	movs	r1, #102	; 0x66
 8009be0:	f000 ff40 	bl	800aa64 <__assert_func>
 8009be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009be8:	6006      	str	r6, [r0, #0]
 8009bea:	60c6      	str	r6, [r0, #12]
 8009bec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bee:	68f3      	ldr	r3, [r6, #12]
 8009bf0:	b183      	cbz	r3, 8009c14 <_Balloc+0x50>
 8009bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bfa:	b9b8      	cbnz	r0, 8009c2c <_Balloc+0x68>
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	fa01 f605 	lsl.w	r6, r1, r5
 8009c02:	1d72      	adds	r2, r6, #5
 8009c04:	0092      	lsls	r2, r2, #2
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 fc9d 	bl	800a546 <_calloc_r>
 8009c0c:	b160      	cbz	r0, 8009c28 <_Balloc+0x64>
 8009c0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c12:	e00e      	b.n	8009c32 <_Balloc+0x6e>
 8009c14:	2221      	movs	r2, #33	; 0x21
 8009c16:	2104      	movs	r1, #4
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 fc94 	bl	800a546 <_calloc_r>
 8009c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c20:	60f0      	str	r0, [r6, #12]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e4      	bne.n	8009bf2 <_Balloc+0x2e>
 8009c28:	2000      	movs	r0, #0
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}
 8009c2c:	6802      	ldr	r2, [r0, #0]
 8009c2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c32:	2300      	movs	r3, #0
 8009c34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c38:	e7f7      	b.n	8009c2a <_Balloc+0x66>
 8009c3a:	bf00      	nop
 8009c3c:	0800b7de 	.word	0x0800b7de
 8009c40:	0800b8dc 	.word	0x0800b8dc

08009c44 <_Bfree>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c48:	4605      	mov	r5, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	b976      	cbnz	r6, 8009c6c <_Bfree+0x28>
 8009c4e:	2010      	movs	r0, #16
 8009c50:	f7ff ff90 	bl	8009b74 <malloc>
 8009c54:	4602      	mov	r2, r0
 8009c56:	6268      	str	r0, [r5, #36]	; 0x24
 8009c58:	b920      	cbnz	r0, 8009c64 <_Bfree+0x20>
 8009c5a:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <_Bfree+0x3c>)
 8009c5c:	4809      	ldr	r0, [pc, #36]	; (8009c84 <_Bfree+0x40>)
 8009c5e:	218a      	movs	r1, #138	; 0x8a
 8009c60:	f000 ff00 	bl	800aa64 <__assert_func>
 8009c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c68:	6006      	str	r6, [r0, #0]
 8009c6a:	60c6      	str	r6, [r0, #12]
 8009c6c:	b13c      	cbz	r4, 8009c7e <_Bfree+0x3a>
 8009c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c70:	6862      	ldr	r2, [r4, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c78:	6021      	str	r1, [r4, #0]
 8009c7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}
 8009c80:	0800b7de 	.word	0x0800b7de
 8009c84:	0800b8dc 	.word	0x0800b8dc

08009c88 <__multadd>:
 8009c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8c:	690d      	ldr	r5, [r1, #16]
 8009c8e:	4607      	mov	r7, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	461e      	mov	r6, r3
 8009c94:	f101 0c14 	add.w	ip, r1, #20
 8009c98:	2000      	movs	r0, #0
 8009c9a:	f8dc 3000 	ldr.w	r3, [ip]
 8009c9e:	b299      	uxth	r1, r3
 8009ca0:	fb02 6101 	mla	r1, r2, r1, r6
 8009ca4:	0c1e      	lsrs	r6, r3, #16
 8009ca6:	0c0b      	lsrs	r3, r1, #16
 8009ca8:	fb02 3306 	mla	r3, r2, r6, r3
 8009cac:	b289      	uxth	r1, r1
 8009cae:	3001      	adds	r0, #1
 8009cb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009cb4:	4285      	cmp	r5, r0
 8009cb6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009cbe:	dcec      	bgt.n	8009c9a <__multadd+0x12>
 8009cc0:	b30e      	cbz	r6, 8009d06 <__multadd+0x7e>
 8009cc2:	68a3      	ldr	r3, [r4, #8]
 8009cc4:	42ab      	cmp	r3, r5
 8009cc6:	dc19      	bgt.n	8009cfc <__multadd+0x74>
 8009cc8:	6861      	ldr	r1, [r4, #4]
 8009cca:	4638      	mov	r0, r7
 8009ccc:	3101      	adds	r1, #1
 8009cce:	f7ff ff79 	bl	8009bc4 <_Balloc>
 8009cd2:	4680      	mov	r8, r0
 8009cd4:	b928      	cbnz	r0, 8009ce2 <__multadd+0x5a>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <__multadd+0x84>)
 8009cda:	480d      	ldr	r0, [pc, #52]	; (8009d10 <__multadd+0x88>)
 8009cdc:	21b5      	movs	r1, #181	; 0xb5
 8009cde:	f000 fec1 	bl	800aa64 <__assert_func>
 8009ce2:	6922      	ldr	r2, [r4, #16]
 8009ce4:	3202      	adds	r2, #2
 8009ce6:	f104 010c 	add.w	r1, r4, #12
 8009cea:	0092      	lsls	r2, r2, #2
 8009cec:	300c      	adds	r0, #12
 8009cee:	f7ff ff5b 	bl	8009ba8 <memcpy>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	f7ff ffa5 	bl	8009c44 <_Bfree>
 8009cfa:	4644      	mov	r4, r8
 8009cfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d00:	3501      	adds	r5, #1
 8009d02:	615e      	str	r6, [r3, #20]
 8009d04:	6125      	str	r5, [r4, #16]
 8009d06:	4620      	mov	r0, r4
 8009d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d0c:	0800b850 	.word	0x0800b850
 8009d10:	0800b8dc 	.word	0x0800b8dc

08009d14 <__s2b>:
 8009d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d18:	460c      	mov	r4, r1
 8009d1a:	4615      	mov	r5, r2
 8009d1c:	461f      	mov	r7, r3
 8009d1e:	2209      	movs	r2, #9
 8009d20:	3308      	adds	r3, #8
 8009d22:	4606      	mov	r6, r0
 8009d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d28:	2100      	movs	r1, #0
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	db09      	blt.n	8009d44 <__s2b+0x30>
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff ff47 	bl	8009bc4 <_Balloc>
 8009d36:	b940      	cbnz	r0, 8009d4a <__s2b+0x36>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4b19      	ldr	r3, [pc, #100]	; (8009da0 <__s2b+0x8c>)
 8009d3c:	4819      	ldr	r0, [pc, #100]	; (8009da4 <__s2b+0x90>)
 8009d3e:	21ce      	movs	r1, #206	; 0xce
 8009d40:	f000 fe90 	bl	800aa64 <__assert_func>
 8009d44:	0052      	lsls	r2, r2, #1
 8009d46:	3101      	adds	r1, #1
 8009d48:	e7f0      	b.n	8009d2c <__s2b+0x18>
 8009d4a:	9b08      	ldr	r3, [sp, #32]
 8009d4c:	6143      	str	r3, [r0, #20]
 8009d4e:	2d09      	cmp	r5, #9
 8009d50:	f04f 0301 	mov.w	r3, #1
 8009d54:	6103      	str	r3, [r0, #16]
 8009d56:	dd16      	ble.n	8009d86 <__s2b+0x72>
 8009d58:	f104 0909 	add.w	r9, r4, #9
 8009d5c:	46c8      	mov	r8, r9
 8009d5e:	442c      	add	r4, r5
 8009d60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d64:	4601      	mov	r1, r0
 8009d66:	3b30      	subs	r3, #48	; 0x30
 8009d68:	220a      	movs	r2, #10
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7ff ff8c 	bl	8009c88 <__multadd>
 8009d70:	45a0      	cmp	r8, r4
 8009d72:	d1f5      	bne.n	8009d60 <__s2b+0x4c>
 8009d74:	f1a5 0408 	sub.w	r4, r5, #8
 8009d78:	444c      	add	r4, r9
 8009d7a:	1b2d      	subs	r5, r5, r4
 8009d7c:	1963      	adds	r3, r4, r5
 8009d7e:	42bb      	cmp	r3, r7
 8009d80:	db04      	blt.n	8009d8c <__s2b+0x78>
 8009d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d86:	340a      	adds	r4, #10
 8009d88:	2509      	movs	r5, #9
 8009d8a:	e7f6      	b.n	8009d7a <__s2b+0x66>
 8009d8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d90:	4601      	mov	r1, r0
 8009d92:	3b30      	subs	r3, #48	; 0x30
 8009d94:	220a      	movs	r2, #10
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ff76 	bl	8009c88 <__multadd>
 8009d9c:	e7ee      	b.n	8009d7c <__s2b+0x68>
 8009d9e:	bf00      	nop
 8009da0:	0800b850 	.word	0x0800b850
 8009da4:	0800b8dc 	.word	0x0800b8dc

08009da8 <__hi0bits>:
 8009da8:	0c03      	lsrs	r3, r0, #16
 8009daa:	041b      	lsls	r3, r3, #16
 8009dac:	b9d3      	cbnz	r3, 8009de4 <__hi0bits+0x3c>
 8009dae:	0400      	lsls	r0, r0, #16
 8009db0:	2310      	movs	r3, #16
 8009db2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009db6:	bf04      	itt	eq
 8009db8:	0200      	lsleq	r0, r0, #8
 8009dba:	3308      	addeq	r3, #8
 8009dbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dc0:	bf04      	itt	eq
 8009dc2:	0100      	lsleq	r0, r0, #4
 8009dc4:	3304      	addeq	r3, #4
 8009dc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009dca:	bf04      	itt	eq
 8009dcc:	0080      	lsleq	r0, r0, #2
 8009dce:	3302      	addeq	r3, #2
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	db05      	blt.n	8009de0 <__hi0bits+0x38>
 8009dd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009dd8:	f103 0301 	add.w	r3, r3, #1
 8009ddc:	bf08      	it	eq
 8009dde:	2320      	moveq	r3, #32
 8009de0:	4618      	mov	r0, r3
 8009de2:	4770      	bx	lr
 8009de4:	2300      	movs	r3, #0
 8009de6:	e7e4      	b.n	8009db2 <__hi0bits+0xa>

08009de8 <__lo0bits>:
 8009de8:	6803      	ldr	r3, [r0, #0]
 8009dea:	f013 0207 	ands.w	r2, r3, #7
 8009dee:	4601      	mov	r1, r0
 8009df0:	d00b      	beq.n	8009e0a <__lo0bits+0x22>
 8009df2:	07da      	lsls	r2, r3, #31
 8009df4:	d423      	bmi.n	8009e3e <__lo0bits+0x56>
 8009df6:	0798      	lsls	r0, r3, #30
 8009df8:	bf49      	itett	mi
 8009dfa:	085b      	lsrmi	r3, r3, #1
 8009dfc:	089b      	lsrpl	r3, r3, #2
 8009dfe:	2001      	movmi	r0, #1
 8009e00:	600b      	strmi	r3, [r1, #0]
 8009e02:	bf5c      	itt	pl
 8009e04:	600b      	strpl	r3, [r1, #0]
 8009e06:	2002      	movpl	r0, #2
 8009e08:	4770      	bx	lr
 8009e0a:	b298      	uxth	r0, r3
 8009e0c:	b9a8      	cbnz	r0, 8009e3a <__lo0bits+0x52>
 8009e0e:	0c1b      	lsrs	r3, r3, #16
 8009e10:	2010      	movs	r0, #16
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	b90a      	cbnz	r2, 8009e1a <__lo0bits+0x32>
 8009e16:	3008      	adds	r0, #8
 8009e18:	0a1b      	lsrs	r3, r3, #8
 8009e1a:	071a      	lsls	r2, r3, #28
 8009e1c:	bf04      	itt	eq
 8009e1e:	091b      	lsreq	r3, r3, #4
 8009e20:	3004      	addeq	r0, #4
 8009e22:	079a      	lsls	r2, r3, #30
 8009e24:	bf04      	itt	eq
 8009e26:	089b      	lsreq	r3, r3, #2
 8009e28:	3002      	addeq	r0, #2
 8009e2a:	07da      	lsls	r2, r3, #31
 8009e2c:	d403      	bmi.n	8009e36 <__lo0bits+0x4e>
 8009e2e:	085b      	lsrs	r3, r3, #1
 8009e30:	f100 0001 	add.w	r0, r0, #1
 8009e34:	d005      	beq.n	8009e42 <__lo0bits+0x5a>
 8009e36:	600b      	str	r3, [r1, #0]
 8009e38:	4770      	bx	lr
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	e7e9      	b.n	8009e12 <__lo0bits+0x2a>
 8009e3e:	2000      	movs	r0, #0
 8009e40:	4770      	bx	lr
 8009e42:	2020      	movs	r0, #32
 8009e44:	4770      	bx	lr
	...

08009e48 <__i2b>:
 8009e48:	b510      	push	{r4, lr}
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	f7ff feb9 	bl	8009bc4 <_Balloc>
 8009e52:	4602      	mov	r2, r0
 8009e54:	b928      	cbnz	r0, 8009e62 <__i2b+0x1a>
 8009e56:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <__i2b+0x24>)
 8009e58:	4805      	ldr	r0, [pc, #20]	; (8009e70 <__i2b+0x28>)
 8009e5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e5e:	f000 fe01 	bl	800aa64 <__assert_func>
 8009e62:	2301      	movs	r3, #1
 8009e64:	6144      	str	r4, [r0, #20]
 8009e66:	6103      	str	r3, [r0, #16]
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0800b850 	.word	0x0800b850
 8009e70:	0800b8dc 	.word	0x0800b8dc

08009e74 <__multiply>:
 8009e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	4691      	mov	r9, r2
 8009e7a:	690a      	ldr	r2, [r1, #16]
 8009e7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	bfb8      	it	lt
 8009e84:	460b      	movlt	r3, r1
 8009e86:	460c      	mov	r4, r1
 8009e88:	bfbc      	itt	lt
 8009e8a:	464c      	movlt	r4, r9
 8009e8c:	4699      	movlt	r9, r3
 8009e8e:	6927      	ldr	r7, [r4, #16]
 8009e90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e94:	68a3      	ldr	r3, [r4, #8]
 8009e96:	6861      	ldr	r1, [r4, #4]
 8009e98:	eb07 060a 	add.w	r6, r7, sl
 8009e9c:	42b3      	cmp	r3, r6
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	bfb8      	it	lt
 8009ea2:	3101      	addlt	r1, #1
 8009ea4:	f7ff fe8e 	bl	8009bc4 <_Balloc>
 8009ea8:	b930      	cbnz	r0, 8009eb8 <__multiply+0x44>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	4b44      	ldr	r3, [pc, #272]	; (8009fc0 <__multiply+0x14c>)
 8009eae:	4845      	ldr	r0, [pc, #276]	; (8009fc4 <__multiply+0x150>)
 8009eb0:	f240 115d 	movw	r1, #349	; 0x15d
 8009eb4:	f000 fdd6 	bl	800aa64 <__assert_func>
 8009eb8:	f100 0514 	add.w	r5, r0, #20
 8009ebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4543      	cmp	r3, r8
 8009ec6:	d321      	bcc.n	8009f0c <__multiply+0x98>
 8009ec8:	f104 0314 	add.w	r3, r4, #20
 8009ecc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ed0:	f109 0314 	add.w	r3, r9, #20
 8009ed4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ed8:	9202      	str	r2, [sp, #8]
 8009eda:	1b3a      	subs	r2, r7, r4
 8009edc:	3a15      	subs	r2, #21
 8009ede:	f022 0203 	bic.w	r2, r2, #3
 8009ee2:	3204      	adds	r2, #4
 8009ee4:	f104 0115 	add.w	r1, r4, #21
 8009ee8:	428f      	cmp	r7, r1
 8009eea:	bf38      	it	cc
 8009eec:	2204      	movcc	r2, #4
 8009eee:	9201      	str	r2, [sp, #4]
 8009ef0:	9a02      	ldr	r2, [sp, #8]
 8009ef2:	9303      	str	r3, [sp, #12]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d80c      	bhi.n	8009f12 <__multiply+0x9e>
 8009ef8:	2e00      	cmp	r6, #0
 8009efa:	dd03      	ble.n	8009f04 <__multiply+0x90>
 8009efc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d05a      	beq.n	8009fba <__multiply+0x146>
 8009f04:	6106      	str	r6, [r0, #16]
 8009f06:	b005      	add	sp, #20
 8009f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0c:	f843 2b04 	str.w	r2, [r3], #4
 8009f10:	e7d8      	b.n	8009ec4 <__multiply+0x50>
 8009f12:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f16:	f1ba 0f00 	cmp.w	sl, #0
 8009f1a:	d024      	beq.n	8009f66 <__multiply+0xf2>
 8009f1c:	f104 0e14 	add.w	lr, r4, #20
 8009f20:	46a9      	mov	r9, r5
 8009f22:	f04f 0c00 	mov.w	ip, #0
 8009f26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f2a:	f8d9 1000 	ldr.w	r1, [r9]
 8009f2e:	fa1f fb82 	uxth.w	fp, r2
 8009f32:	b289      	uxth	r1, r1
 8009f34:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8009f40:	4461      	add	r1, ip
 8009f42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f46:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f4e:	b289      	uxth	r1, r1
 8009f50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f54:	4577      	cmp	r7, lr
 8009f56:	f849 1b04 	str.w	r1, [r9], #4
 8009f5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f5e:	d8e2      	bhi.n	8009f26 <__multiply+0xb2>
 8009f60:	9a01      	ldr	r2, [sp, #4]
 8009f62:	f845 c002 	str.w	ip, [r5, r2]
 8009f66:	9a03      	ldr	r2, [sp, #12]
 8009f68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	f1b9 0f00 	cmp.w	r9, #0
 8009f72:	d020      	beq.n	8009fb6 <__multiply+0x142>
 8009f74:	6829      	ldr	r1, [r5, #0]
 8009f76:	f104 0c14 	add.w	ip, r4, #20
 8009f7a:	46ae      	mov	lr, r5
 8009f7c:	f04f 0a00 	mov.w	sl, #0
 8009f80:	f8bc b000 	ldrh.w	fp, [ip]
 8009f84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f88:	fb09 220b 	mla	r2, r9, fp, r2
 8009f8c:	4492      	add	sl, r2
 8009f8e:	b289      	uxth	r1, r1
 8009f90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f94:	f84e 1b04 	str.w	r1, [lr], #4
 8009f98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f9c:	f8be 1000 	ldrh.w	r1, [lr]
 8009fa0:	0c12      	lsrs	r2, r2, #16
 8009fa2:	fb09 1102 	mla	r1, r9, r2, r1
 8009fa6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009faa:	4567      	cmp	r7, ip
 8009fac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fb0:	d8e6      	bhi.n	8009f80 <__multiply+0x10c>
 8009fb2:	9a01      	ldr	r2, [sp, #4]
 8009fb4:	50a9      	str	r1, [r5, r2]
 8009fb6:	3504      	adds	r5, #4
 8009fb8:	e79a      	b.n	8009ef0 <__multiply+0x7c>
 8009fba:	3e01      	subs	r6, #1
 8009fbc:	e79c      	b.n	8009ef8 <__multiply+0x84>
 8009fbe:	bf00      	nop
 8009fc0:	0800b850 	.word	0x0800b850
 8009fc4:	0800b8dc 	.word	0x0800b8dc

08009fc8 <__pow5mult>:
 8009fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fcc:	4615      	mov	r5, r2
 8009fce:	f012 0203 	ands.w	r2, r2, #3
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460f      	mov	r7, r1
 8009fd6:	d007      	beq.n	8009fe8 <__pow5mult+0x20>
 8009fd8:	4c25      	ldr	r4, [pc, #148]	; (800a070 <__pow5mult+0xa8>)
 8009fda:	3a01      	subs	r2, #1
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fe2:	f7ff fe51 	bl	8009c88 <__multadd>
 8009fe6:	4607      	mov	r7, r0
 8009fe8:	10ad      	asrs	r5, r5, #2
 8009fea:	d03d      	beq.n	800a068 <__pow5mult+0xa0>
 8009fec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fee:	b97c      	cbnz	r4, 800a010 <__pow5mult+0x48>
 8009ff0:	2010      	movs	r0, #16
 8009ff2:	f7ff fdbf 	bl	8009b74 <malloc>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	6270      	str	r0, [r6, #36]	; 0x24
 8009ffa:	b928      	cbnz	r0, 800a008 <__pow5mult+0x40>
 8009ffc:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <__pow5mult+0xac>)
 8009ffe:	481e      	ldr	r0, [pc, #120]	; (800a078 <__pow5mult+0xb0>)
 800a000:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a004:	f000 fd2e 	bl	800aa64 <__assert_func>
 800a008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a00c:	6004      	str	r4, [r0, #0]
 800a00e:	60c4      	str	r4, [r0, #12]
 800a010:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a018:	b94c      	cbnz	r4, 800a02e <__pow5mult+0x66>
 800a01a:	f240 2171 	movw	r1, #625	; 0x271
 800a01e:	4630      	mov	r0, r6
 800a020:	f7ff ff12 	bl	8009e48 <__i2b>
 800a024:	2300      	movs	r3, #0
 800a026:	f8c8 0008 	str.w	r0, [r8, #8]
 800a02a:	4604      	mov	r4, r0
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	f04f 0900 	mov.w	r9, #0
 800a032:	07eb      	lsls	r3, r5, #31
 800a034:	d50a      	bpl.n	800a04c <__pow5mult+0x84>
 800a036:	4639      	mov	r1, r7
 800a038:	4622      	mov	r2, r4
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ff1a 	bl	8009e74 <__multiply>
 800a040:	4639      	mov	r1, r7
 800a042:	4680      	mov	r8, r0
 800a044:	4630      	mov	r0, r6
 800a046:	f7ff fdfd 	bl	8009c44 <_Bfree>
 800a04a:	4647      	mov	r7, r8
 800a04c:	106d      	asrs	r5, r5, #1
 800a04e:	d00b      	beq.n	800a068 <__pow5mult+0xa0>
 800a050:	6820      	ldr	r0, [r4, #0]
 800a052:	b938      	cbnz	r0, 800a064 <__pow5mult+0x9c>
 800a054:	4622      	mov	r2, r4
 800a056:	4621      	mov	r1, r4
 800a058:	4630      	mov	r0, r6
 800a05a:	f7ff ff0b 	bl	8009e74 <__multiply>
 800a05e:	6020      	str	r0, [r4, #0]
 800a060:	f8c0 9000 	str.w	r9, [r0]
 800a064:	4604      	mov	r4, r0
 800a066:	e7e4      	b.n	800a032 <__pow5mult+0x6a>
 800a068:	4638      	mov	r0, r7
 800a06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a06e:	bf00      	nop
 800a070:	0800ba28 	.word	0x0800ba28
 800a074:	0800b7de 	.word	0x0800b7de
 800a078:	0800b8dc 	.word	0x0800b8dc

0800a07c <__lshift>:
 800a07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a080:	460c      	mov	r4, r1
 800a082:	6849      	ldr	r1, [r1, #4]
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a08a:	68a3      	ldr	r3, [r4, #8]
 800a08c:	4607      	mov	r7, r0
 800a08e:	4691      	mov	r9, r2
 800a090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a094:	f108 0601 	add.w	r6, r8, #1
 800a098:	42b3      	cmp	r3, r6
 800a09a:	db0b      	blt.n	800a0b4 <__lshift+0x38>
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7ff fd91 	bl	8009bc4 <_Balloc>
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	b948      	cbnz	r0, 800a0ba <__lshift+0x3e>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	4b2a      	ldr	r3, [pc, #168]	; (800a154 <__lshift+0xd8>)
 800a0aa:	482b      	ldr	r0, [pc, #172]	; (800a158 <__lshift+0xdc>)
 800a0ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0b0:	f000 fcd8 	bl	800aa64 <__assert_func>
 800a0b4:	3101      	adds	r1, #1
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	e7ee      	b.n	800a098 <__lshift+0x1c>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f100 0114 	add.w	r1, r0, #20
 800a0c0:	f100 0210 	add.w	r2, r0, #16
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	4553      	cmp	r3, sl
 800a0c8:	db37      	blt.n	800a13a <__lshift+0xbe>
 800a0ca:	6920      	ldr	r0, [r4, #16]
 800a0cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0d0:	f104 0314 	add.w	r3, r4, #20
 800a0d4:	f019 091f 	ands.w	r9, r9, #31
 800a0d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0e0:	d02f      	beq.n	800a142 <__lshift+0xc6>
 800a0e2:	f1c9 0e20 	rsb	lr, r9, #32
 800a0e6:	468a      	mov	sl, r1
 800a0e8:	f04f 0c00 	mov.w	ip, #0
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	fa02 f209 	lsl.w	r2, r2, r9
 800a0f2:	ea42 020c 	orr.w	r2, r2, ip
 800a0f6:	f84a 2b04 	str.w	r2, [sl], #4
 800a0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0fe:	4298      	cmp	r0, r3
 800a100:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a104:	d8f2      	bhi.n	800a0ec <__lshift+0x70>
 800a106:	1b03      	subs	r3, r0, r4
 800a108:	3b15      	subs	r3, #21
 800a10a:	f023 0303 	bic.w	r3, r3, #3
 800a10e:	3304      	adds	r3, #4
 800a110:	f104 0215 	add.w	r2, r4, #21
 800a114:	4290      	cmp	r0, r2
 800a116:	bf38      	it	cc
 800a118:	2304      	movcc	r3, #4
 800a11a:	f841 c003 	str.w	ip, [r1, r3]
 800a11e:	f1bc 0f00 	cmp.w	ip, #0
 800a122:	d001      	beq.n	800a128 <__lshift+0xac>
 800a124:	f108 0602 	add.w	r6, r8, #2
 800a128:	3e01      	subs	r6, #1
 800a12a:	4638      	mov	r0, r7
 800a12c:	612e      	str	r6, [r5, #16]
 800a12e:	4621      	mov	r1, r4
 800a130:	f7ff fd88 	bl	8009c44 <_Bfree>
 800a134:	4628      	mov	r0, r5
 800a136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a13a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a13e:	3301      	adds	r3, #1
 800a140:	e7c1      	b.n	800a0c6 <__lshift+0x4a>
 800a142:	3904      	subs	r1, #4
 800a144:	f853 2b04 	ldr.w	r2, [r3], #4
 800a148:	f841 2f04 	str.w	r2, [r1, #4]!
 800a14c:	4298      	cmp	r0, r3
 800a14e:	d8f9      	bhi.n	800a144 <__lshift+0xc8>
 800a150:	e7ea      	b.n	800a128 <__lshift+0xac>
 800a152:	bf00      	nop
 800a154:	0800b850 	.word	0x0800b850
 800a158:	0800b8dc 	.word	0x0800b8dc

0800a15c <__mcmp>:
 800a15c:	b530      	push	{r4, r5, lr}
 800a15e:	6902      	ldr	r2, [r0, #16]
 800a160:	690c      	ldr	r4, [r1, #16]
 800a162:	1b12      	subs	r2, r2, r4
 800a164:	d10e      	bne.n	800a184 <__mcmp+0x28>
 800a166:	f100 0314 	add.w	r3, r0, #20
 800a16a:	3114      	adds	r1, #20
 800a16c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a17c:	42a5      	cmp	r5, r4
 800a17e:	d003      	beq.n	800a188 <__mcmp+0x2c>
 800a180:	d305      	bcc.n	800a18e <__mcmp+0x32>
 800a182:	2201      	movs	r2, #1
 800a184:	4610      	mov	r0, r2
 800a186:	bd30      	pop	{r4, r5, pc}
 800a188:	4283      	cmp	r3, r0
 800a18a:	d3f3      	bcc.n	800a174 <__mcmp+0x18>
 800a18c:	e7fa      	b.n	800a184 <__mcmp+0x28>
 800a18e:	f04f 32ff 	mov.w	r2, #4294967295
 800a192:	e7f7      	b.n	800a184 <__mcmp+0x28>

0800a194 <__mdiff>:
 800a194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	4606      	mov	r6, r0
 800a19c:	4611      	mov	r1, r2
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4690      	mov	r8, r2
 800a1a2:	f7ff ffdb 	bl	800a15c <__mcmp>
 800a1a6:	1e05      	subs	r5, r0, #0
 800a1a8:	d110      	bne.n	800a1cc <__mdiff+0x38>
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fd09 	bl	8009bc4 <_Balloc>
 800a1b2:	b930      	cbnz	r0, 800a1c2 <__mdiff+0x2e>
 800a1b4:	4b3a      	ldr	r3, [pc, #232]	; (800a2a0 <__mdiff+0x10c>)
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	f240 2132 	movw	r1, #562	; 0x232
 800a1bc:	4839      	ldr	r0, [pc, #228]	; (800a2a4 <__mdiff+0x110>)
 800a1be:	f000 fc51 	bl	800aa64 <__assert_func>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	bfa4      	itt	ge
 800a1ce:	4643      	movge	r3, r8
 800a1d0:	46a0      	movge	r8, r4
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1d8:	bfa6      	itte	ge
 800a1da:	461c      	movge	r4, r3
 800a1dc:	2500      	movge	r5, #0
 800a1de:	2501      	movlt	r5, #1
 800a1e0:	f7ff fcf0 	bl	8009bc4 <_Balloc>
 800a1e4:	b920      	cbnz	r0, 800a1f0 <__mdiff+0x5c>
 800a1e6:	4b2e      	ldr	r3, [pc, #184]	; (800a2a0 <__mdiff+0x10c>)
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a1ee:	e7e5      	b.n	800a1bc <__mdiff+0x28>
 800a1f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1f4:	6926      	ldr	r6, [r4, #16]
 800a1f6:	60c5      	str	r5, [r0, #12]
 800a1f8:	f104 0914 	add.w	r9, r4, #20
 800a1fc:	f108 0514 	add.w	r5, r8, #20
 800a200:	f100 0e14 	add.w	lr, r0, #20
 800a204:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a20c:	f108 0210 	add.w	r2, r8, #16
 800a210:	46f2      	mov	sl, lr
 800a212:	2100      	movs	r1, #0
 800a214:	f859 3b04 	ldr.w	r3, [r9], #4
 800a218:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a21c:	fa1f f883 	uxth.w	r8, r3
 800a220:	fa11 f18b 	uxtah	r1, r1, fp
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	eba1 0808 	sub.w	r8, r1, r8
 800a22a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a22e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a232:	fa1f f888 	uxth.w	r8, r8
 800a236:	1419      	asrs	r1, r3, #16
 800a238:	454e      	cmp	r6, r9
 800a23a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a23e:	f84a 3b04 	str.w	r3, [sl], #4
 800a242:	d8e7      	bhi.n	800a214 <__mdiff+0x80>
 800a244:	1b33      	subs	r3, r6, r4
 800a246:	3b15      	subs	r3, #21
 800a248:	f023 0303 	bic.w	r3, r3, #3
 800a24c:	3304      	adds	r3, #4
 800a24e:	3415      	adds	r4, #21
 800a250:	42a6      	cmp	r6, r4
 800a252:	bf38      	it	cc
 800a254:	2304      	movcc	r3, #4
 800a256:	441d      	add	r5, r3
 800a258:	4473      	add	r3, lr
 800a25a:	469e      	mov	lr, r3
 800a25c:	462e      	mov	r6, r5
 800a25e:	4566      	cmp	r6, ip
 800a260:	d30e      	bcc.n	800a280 <__mdiff+0xec>
 800a262:	f10c 0203 	add.w	r2, ip, #3
 800a266:	1b52      	subs	r2, r2, r5
 800a268:	f022 0203 	bic.w	r2, r2, #3
 800a26c:	3d03      	subs	r5, #3
 800a26e:	45ac      	cmp	ip, r5
 800a270:	bf38      	it	cc
 800a272:	2200      	movcc	r2, #0
 800a274:	441a      	add	r2, r3
 800a276:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a27a:	b17b      	cbz	r3, 800a29c <__mdiff+0x108>
 800a27c:	6107      	str	r7, [r0, #16]
 800a27e:	e7a3      	b.n	800a1c8 <__mdiff+0x34>
 800a280:	f856 8b04 	ldr.w	r8, [r6], #4
 800a284:	fa11 f288 	uxtah	r2, r1, r8
 800a288:	1414      	asrs	r4, r2, #16
 800a28a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a28e:	b292      	uxth	r2, r2
 800a290:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a294:	f84e 2b04 	str.w	r2, [lr], #4
 800a298:	1421      	asrs	r1, r4, #16
 800a29a:	e7e0      	b.n	800a25e <__mdiff+0xca>
 800a29c:	3f01      	subs	r7, #1
 800a29e:	e7ea      	b.n	800a276 <__mdiff+0xe2>
 800a2a0:	0800b850 	.word	0x0800b850
 800a2a4:	0800b8dc 	.word	0x0800b8dc

0800a2a8 <__ulp>:
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	ed8d 0b00 	vstr	d0, [sp]
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	4912      	ldr	r1, [pc, #72]	; (800a2fc <__ulp+0x54>)
 800a2b2:	4019      	ands	r1, r3
 800a2b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	dd05      	ble.n	800a2c8 <__ulp+0x20>
 800a2bc:	2200      	movs	r2, #0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	ec43 2b10 	vmov	d0, r2, r3
 800a2c4:	b002      	add	sp, #8
 800a2c6:	4770      	bx	lr
 800a2c8:	4249      	negs	r1, r1
 800a2ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a2ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a2d2:	f04f 0200 	mov.w	r2, #0
 800a2d6:	f04f 0300 	mov.w	r3, #0
 800a2da:	da04      	bge.n	800a2e6 <__ulp+0x3e>
 800a2dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a2e0:	fa41 f300 	asr.w	r3, r1, r0
 800a2e4:	e7ec      	b.n	800a2c0 <__ulp+0x18>
 800a2e6:	f1a0 0114 	sub.w	r1, r0, #20
 800a2ea:	291e      	cmp	r1, #30
 800a2ec:	bfda      	itte	le
 800a2ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a2f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a2f6:	2101      	movgt	r1, #1
 800a2f8:	460a      	mov	r2, r1
 800a2fa:	e7e1      	b.n	800a2c0 <__ulp+0x18>
 800a2fc:	7ff00000 	.word	0x7ff00000

0800a300 <__b2d>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	6905      	ldr	r5, [r0, #16]
 800a304:	f100 0714 	add.w	r7, r0, #20
 800a308:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a30c:	1f2e      	subs	r6, r5, #4
 800a30e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a312:	4620      	mov	r0, r4
 800a314:	f7ff fd48 	bl	8009da8 <__hi0bits>
 800a318:	f1c0 0320 	rsb	r3, r0, #32
 800a31c:	280a      	cmp	r0, #10
 800a31e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a39c <__b2d+0x9c>
 800a322:	600b      	str	r3, [r1, #0]
 800a324:	dc14      	bgt.n	800a350 <__b2d+0x50>
 800a326:	f1c0 0e0b 	rsb	lr, r0, #11
 800a32a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a32e:	42b7      	cmp	r7, r6
 800a330:	ea41 030c 	orr.w	r3, r1, ip
 800a334:	bf34      	ite	cc
 800a336:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a33a:	2100      	movcs	r1, #0
 800a33c:	3015      	adds	r0, #21
 800a33e:	fa04 f000 	lsl.w	r0, r4, r0
 800a342:	fa21 f10e 	lsr.w	r1, r1, lr
 800a346:	ea40 0201 	orr.w	r2, r0, r1
 800a34a:	ec43 2b10 	vmov	d0, r2, r3
 800a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a350:	42b7      	cmp	r7, r6
 800a352:	bf3a      	itte	cc
 800a354:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a358:	f1a5 0608 	subcc.w	r6, r5, #8
 800a35c:	2100      	movcs	r1, #0
 800a35e:	380b      	subs	r0, #11
 800a360:	d017      	beq.n	800a392 <__b2d+0x92>
 800a362:	f1c0 0c20 	rsb	ip, r0, #32
 800a366:	fa04 f500 	lsl.w	r5, r4, r0
 800a36a:	42be      	cmp	r6, r7
 800a36c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a370:	ea45 0504 	orr.w	r5, r5, r4
 800a374:	bf8c      	ite	hi
 800a376:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a37a:	2400      	movls	r4, #0
 800a37c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a380:	fa01 f000 	lsl.w	r0, r1, r0
 800a384:	fa24 f40c 	lsr.w	r4, r4, ip
 800a388:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a38c:	ea40 0204 	orr.w	r2, r0, r4
 800a390:	e7db      	b.n	800a34a <__b2d+0x4a>
 800a392:	ea44 030c 	orr.w	r3, r4, ip
 800a396:	460a      	mov	r2, r1
 800a398:	e7d7      	b.n	800a34a <__b2d+0x4a>
 800a39a:	bf00      	nop
 800a39c:	3ff00000 	.word	0x3ff00000

0800a3a0 <__d2b>:
 800a3a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3a4:	4689      	mov	r9, r1
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	ec57 6b10 	vmov	r6, r7, d0
 800a3ac:	4690      	mov	r8, r2
 800a3ae:	f7ff fc09 	bl	8009bc4 <_Balloc>
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	b930      	cbnz	r0, 800a3c4 <__d2b+0x24>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	4b25      	ldr	r3, [pc, #148]	; (800a450 <__d2b+0xb0>)
 800a3ba:	4826      	ldr	r0, [pc, #152]	; (800a454 <__d2b+0xb4>)
 800a3bc:	f240 310a 	movw	r1, #778	; 0x30a
 800a3c0:	f000 fb50 	bl	800aa64 <__assert_func>
 800a3c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3cc:	bb35      	cbnz	r5, 800a41c <__d2b+0x7c>
 800a3ce:	2e00      	cmp	r6, #0
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	d028      	beq.n	800a426 <__d2b+0x86>
 800a3d4:	4668      	mov	r0, sp
 800a3d6:	9600      	str	r6, [sp, #0]
 800a3d8:	f7ff fd06 	bl	8009de8 <__lo0bits>
 800a3dc:	9900      	ldr	r1, [sp, #0]
 800a3de:	b300      	cbz	r0, 800a422 <__d2b+0x82>
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	f1c0 0320 	rsb	r3, r0, #32
 800a3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ea:	430b      	orrs	r3, r1
 800a3ec:	40c2      	lsrs	r2, r0
 800a3ee:	6163      	str	r3, [r4, #20]
 800a3f0:	9201      	str	r2, [sp, #4]
 800a3f2:	9b01      	ldr	r3, [sp, #4]
 800a3f4:	61a3      	str	r3, [r4, #24]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bf14      	ite	ne
 800a3fa:	2202      	movne	r2, #2
 800a3fc:	2201      	moveq	r2, #1
 800a3fe:	6122      	str	r2, [r4, #16]
 800a400:	b1d5      	cbz	r5, 800a438 <__d2b+0x98>
 800a402:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a406:	4405      	add	r5, r0
 800a408:	f8c9 5000 	str.w	r5, [r9]
 800a40c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a410:	f8c8 0000 	str.w	r0, [r8]
 800a414:	4620      	mov	r0, r4
 800a416:	b003      	add	sp, #12
 800a418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a41c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a420:	e7d5      	b.n	800a3ce <__d2b+0x2e>
 800a422:	6161      	str	r1, [r4, #20]
 800a424:	e7e5      	b.n	800a3f2 <__d2b+0x52>
 800a426:	a801      	add	r0, sp, #4
 800a428:	f7ff fcde 	bl	8009de8 <__lo0bits>
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	6163      	str	r3, [r4, #20]
 800a430:	2201      	movs	r2, #1
 800a432:	6122      	str	r2, [r4, #16]
 800a434:	3020      	adds	r0, #32
 800a436:	e7e3      	b.n	800a400 <__d2b+0x60>
 800a438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a43c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a440:	f8c9 0000 	str.w	r0, [r9]
 800a444:	6918      	ldr	r0, [r3, #16]
 800a446:	f7ff fcaf 	bl	8009da8 <__hi0bits>
 800a44a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a44e:	e7df      	b.n	800a410 <__d2b+0x70>
 800a450:	0800b850 	.word	0x0800b850
 800a454:	0800b8dc 	.word	0x0800b8dc

0800a458 <__ratio>:
 800a458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	4688      	mov	r8, r1
 800a45e:	4669      	mov	r1, sp
 800a460:	4681      	mov	r9, r0
 800a462:	f7ff ff4d 	bl	800a300 <__b2d>
 800a466:	a901      	add	r1, sp, #4
 800a468:	4640      	mov	r0, r8
 800a46a:	ec55 4b10 	vmov	r4, r5, d0
 800a46e:	f7ff ff47 	bl	800a300 <__b2d>
 800a472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a476:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a47a:	eba3 0c02 	sub.w	ip, r3, r2
 800a47e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a482:	1a9b      	subs	r3, r3, r2
 800a484:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a488:	ec51 0b10 	vmov	r0, r1, d0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfd6      	itet	le
 800a490:	460a      	movle	r2, r1
 800a492:	462a      	movgt	r2, r5
 800a494:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a498:	468b      	mov	fp, r1
 800a49a:	462f      	mov	r7, r5
 800a49c:	bfd4      	ite	le
 800a49e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a4a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	ee10 2a10 	vmov	r2, s0
 800a4ac:	465b      	mov	r3, fp
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 f9cc 	bl	800084c <__aeabi_ddiv>
 800a4b4:	ec41 0b10 	vmov	d0, r0, r1
 800a4b8:	b003      	add	sp, #12
 800a4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4be <__copybits>:
 800a4be:	3901      	subs	r1, #1
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	1149      	asrs	r1, r1, #5
 800a4c4:	6914      	ldr	r4, [r2, #16]
 800a4c6:	3101      	adds	r1, #1
 800a4c8:	f102 0314 	add.w	r3, r2, #20
 800a4cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a4d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a4d4:	1f05      	subs	r5, r0, #4
 800a4d6:	42a3      	cmp	r3, r4
 800a4d8:	d30c      	bcc.n	800a4f4 <__copybits+0x36>
 800a4da:	1aa3      	subs	r3, r4, r2
 800a4dc:	3b11      	subs	r3, #17
 800a4de:	f023 0303 	bic.w	r3, r3, #3
 800a4e2:	3211      	adds	r2, #17
 800a4e4:	42a2      	cmp	r2, r4
 800a4e6:	bf88      	it	hi
 800a4e8:	2300      	movhi	r3, #0
 800a4ea:	4418      	add	r0, r3
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4288      	cmp	r0, r1
 800a4f0:	d305      	bcc.n	800a4fe <__copybits+0x40>
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a4f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a4fc:	e7eb      	b.n	800a4d6 <__copybits+0x18>
 800a4fe:	f840 3b04 	str.w	r3, [r0], #4
 800a502:	e7f4      	b.n	800a4ee <__copybits+0x30>

0800a504 <__any_on>:
 800a504:	f100 0214 	add.w	r2, r0, #20
 800a508:	6900      	ldr	r0, [r0, #16]
 800a50a:	114b      	asrs	r3, r1, #5
 800a50c:	4298      	cmp	r0, r3
 800a50e:	b510      	push	{r4, lr}
 800a510:	db11      	blt.n	800a536 <__any_on+0x32>
 800a512:	dd0a      	ble.n	800a52a <__any_on+0x26>
 800a514:	f011 011f 	ands.w	r1, r1, #31
 800a518:	d007      	beq.n	800a52a <__any_on+0x26>
 800a51a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a51e:	fa24 f001 	lsr.w	r0, r4, r1
 800a522:	fa00 f101 	lsl.w	r1, r0, r1
 800a526:	428c      	cmp	r4, r1
 800a528:	d10b      	bne.n	800a542 <__any_on+0x3e>
 800a52a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a52e:	4293      	cmp	r3, r2
 800a530:	d803      	bhi.n	800a53a <__any_on+0x36>
 800a532:	2000      	movs	r0, #0
 800a534:	bd10      	pop	{r4, pc}
 800a536:	4603      	mov	r3, r0
 800a538:	e7f7      	b.n	800a52a <__any_on+0x26>
 800a53a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a53e:	2900      	cmp	r1, #0
 800a540:	d0f5      	beq.n	800a52e <__any_on+0x2a>
 800a542:	2001      	movs	r0, #1
 800a544:	e7f6      	b.n	800a534 <__any_on+0x30>

0800a546 <_calloc_r>:
 800a546:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a548:	fba1 2402 	umull	r2, r4, r1, r2
 800a54c:	b94c      	cbnz	r4, 800a562 <_calloc_r+0x1c>
 800a54e:	4611      	mov	r1, r2
 800a550:	9201      	str	r2, [sp, #4]
 800a552:	f000 f87b 	bl	800a64c <_malloc_r>
 800a556:	9a01      	ldr	r2, [sp, #4]
 800a558:	4605      	mov	r5, r0
 800a55a:	b930      	cbnz	r0, 800a56a <_calloc_r+0x24>
 800a55c:	4628      	mov	r0, r5
 800a55e:	b003      	add	sp, #12
 800a560:	bd30      	pop	{r4, r5, pc}
 800a562:	220c      	movs	r2, #12
 800a564:	6002      	str	r2, [r0, #0]
 800a566:	2500      	movs	r5, #0
 800a568:	e7f8      	b.n	800a55c <_calloc_r+0x16>
 800a56a:	4621      	mov	r1, r4
 800a56c:	f7fc fbc0 	bl	8006cf0 <memset>
 800a570:	e7f4      	b.n	800a55c <_calloc_r+0x16>
	...

0800a574 <_free_r>:
 800a574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a576:	2900      	cmp	r1, #0
 800a578:	d044      	beq.n	800a604 <_free_r+0x90>
 800a57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a57e:	9001      	str	r0, [sp, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	f1a1 0404 	sub.w	r4, r1, #4
 800a586:	bfb8      	it	lt
 800a588:	18e4      	addlt	r4, r4, r3
 800a58a:	f000 fab5 	bl	800aaf8 <__malloc_lock>
 800a58e:	4a1e      	ldr	r2, [pc, #120]	; (800a608 <_free_r+0x94>)
 800a590:	9801      	ldr	r0, [sp, #4]
 800a592:	6813      	ldr	r3, [r2, #0]
 800a594:	b933      	cbnz	r3, 800a5a4 <_free_r+0x30>
 800a596:	6063      	str	r3, [r4, #4]
 800a598:	6014      	str	r4, [r2, #0]
 800a59a:	b003      	add	sp, #12
 800a59c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5a0:	f000 bab0 	b.w	800ab04 <__malloc_unlock>
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d908      	bls.n	800a5ba <_free_r+0x46>
 800a5a8:	6825      	ldr	r5, [r4, #0]
 800a5aa:	1961      	adds	r1, r4, r5
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf01      	itttt	eq
 800a5b0:	6819      	ldreq	r1, [r3, #0]
 800a5b2:	685b      	ldreq	r3, [r3, #4]
 800a5b4:	1949      	addeq	r1, r1, r5
 800a5b6:	6021      	streq	r1, [r4, #0]
 800a5b8:	e7ed      	b.n	800a596 <_free_r+0x22>
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	b10b      	cbz	r3, 800a5c4 <_free_r+0x50>
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	d9fa      	bls.n	800a5ba <_free_r+0x46>
 800a5c4:	6811      	ldr	r1, [r2, #0]
 800a5c6:	1855      	adds	r5, r2, r1
 800a5c8:	42a5      	cmp	r5, r4
 800a5ca:	d10b      	bne.n	800a5e4 <_free_r+0x70>
 800a5cc:	6824      	ldr	r4, [r4, #0]
 800a5ce:	4421      	add	r1, r4
 800a5d0:	1854      	adds	r4, r2, r1
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	6011      	str	r1, [r2, #0]
 800a5d6:	d1e0      	bne.n	800a59a <_free_r+0x26>
 800a5d8:	681c      	ldr	r4, [r3, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	6053      	str	r3, [r2, #4]
 800a5de:	4421      	add	r1, r4
 800a5e0:	6011      	str	r1, [r2, #0]
 800a5e2:	e7da      	b.n	800a59a <_free_r+0x26>
 800a5e4:	d902      	bls.n	800a5ec <_free_r+0x78>
 800a5e6:	230c      	movs	r3, #12
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	e7d6      	b.n	800a59a <_free_r+0x26>
 800a5ec:	6825      	ldr	r5, [r4, #0]
 800a5ee:	1961      	adds	r1, r4, r5
 800a5f0:	428b      	cmp	r3, r1
 800a5f2:	bf04      	itt	eq
 800a5f4:	6819      	ldreq	r1, [r3, #0]
 800a5f6:	685b      	ldreq	r3, [r3, #4]
 800a5f8:	6063      	str	r3, [r4, #4]
 800a5fa:	bf04      	itt	eq
 800a5fc:	1949      	addeq	r1, r1, r5
 800a5fe:	6021      	streq	r1, [r4, #0]
 800a600:	6054      	str	r4, [r2, #4]
 800a602:	e7ca      	b.n	800a59a <_free_r+0x26>
 800a604:	b003      	add	sp, #12
 800a606:	bd30      	pop	{r4, r5, pc}
 800a608:	2000050c 	.word	0x2000050c

0800a60c <sbrk_aligned>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	4e0e      	ldr	r6, [pc, #56]	; (800a648 <sbrk_aligned+0x3c>)
 800a610:	460c      	mov	r4, r1
 800a612:	6831      	ldr	r1, [r6, #0]
 800a614:	4605      	mov	r5, r0
 800a616:	b911      	cbnz	r1, 800a61e <sbrk_aligned+0x12>
 800a618:	f000 f9f2 	bl	800aa00 <_sbrk_r>
 800a61c:	6030      	str	r0, [r6, #0]
 800a61e:	4621      	mov	r1, r4
 800a620:	4628      	mov	r0, r5
 800a622:	f000 f9ed 	bl	800aa00 <_sbrk_r>
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	d00a      	beq.n	800a640 <sbrk_aligned+0x34>
 800a62a:	1cc4      	adds	r4, r0, #3
 800a62c:	f024 0403 	bic.w	r4, r4, #3
 800a630:	42a0      	cmp	r0, r4
 800a632:	d007      	beq.n	800a644 <sbrk_aligned+0x38>
 800a634:	1a21      	subs	r1, r4, r0
 800a636:	4628      	mov	r0, r5
 800a638:	f000 f9e2 	bl	800aa00 <_sbrk_r>
 800a63c:	3001      	adds	r0, #1
 800a63e:	d101      	bne.n	800a644 <sbrk_aligned+0x38>
 800a640:	f04f 34ff 	mov.w	r4, #4294967295
 800a644:	4620      	mov	r0, r4
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	20000510 	.word	0x20000510

0800a64c <_malloc_r>:
 800a64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a650:	1ccd      	adds	r5, r1, #3
 800a652:	f025 0503 	bic.w	r5, r5, #3
 800a656:	3508      	adds	r5, #8
 800a658:	2d0c      	cmp	r5, #12
 800a65a:	bf38      	it	cc
 800a65c:	250c      	movcc	r5, #12
 800a65e:	2d00      	cmp	r5, #0
 800a660:	4607      	mov	r7, r0
 800a662:	db01      	blt.n	800a668 <_malloc_r+0x1c>
 800a664:	42a9      	cmp	r1, r5
 800a666:	d905      	bls.n	800a674 <_malloc_r+0x28>
 800a668:	230c      	movs	r3, #12
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	2600      	movs	r6, #0
 800a66e:	4630      	mov	r0, r6
 800a670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a674:	4e2e      	ldr	r6, [pc, #184]	; (800a730 <_malloc_r+0xe4>)
 800a676:	f000 fa3f 	bl	800aaf8 <__malloc_lock>
 800a67a:	6833      	ldr	r3, [r6, #0]
 800a67c:	461c      	mov	r4, r3
 800a67e:	bb34      	cbnz	r4, 800a6ce <_malloc_r+0x82>
 800a680:	4629      	mov	r1, r5
 800a682:	4638      	mov	r0, r7
 800a684:	f7ff ffc2 	bl	800a60c <sbrk_aligned>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	4604      	mov	r4, r0
 800a68c:	d14d      	bne.n	800a72a <_malloc_r+0xde>
 800a68e:	6834      	ldr	r4, [r6, #0]
 800a690:	4626      	mov	r6, r4
 800a692:	2e00      	cmp	r6, #0
 800a694:	d140      	bne.n	800a718 <_malloc_r+0xcc>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	4631      	mov	r1, r6
 800a69a:	4638      	mov	r0, r7
 800a69c:	eb04 0803 	add.w	r8, r4, r3
 800a6a0:	f000 f9ae 	bl	800aa00 <_sbrk_r>
 800a6a4:	4580      	cmp	r8, r0
 800a6a6:	d13a      	bne.n	800a71e <_malloc_r+0xd2>
 800a6a8:	6821      	ldr	r1, [r4, #0]
 800a6aa:	3503      	adds	r5, #3
 800a6ac:	1a6d      	subs	r5, r5, r1
 800a6ae:	f025 0503 	bic.w	r5, r5, #3
 800a6b2:	3508      	adds	r5, #8
 800a6b4:	2d0c      	cmp	r5, #12
 800a6b6:	bf38      	it	cc
 800a6b8:	250c      	movcc	r5, #12
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f7ff ffa5 	bl	800a60c <sbrk_aligned>
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	d02b      	beq.n	800a71e <_malloc_r+0xd2>
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	442b      	add	r3, r5
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	e00e      	b.n	800a6ec <_malloc_r+0xa0>
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	1b52      	subs	r2, r2, r5
 800a6d2:	d41e      	bmi.n	800a712 <_malloc_r+0xc6>
 800a6d4:	2a0b      	cmp	r2, #11
 800a6d6:	d916      	bls.n	800a706 <_malloc_r+0xba>
 800a6d8:	1961      	adds	r1, r4, r5
 800a6da:	42a3      	cmp	r3, r4
 800a6dc:	6025      	str	r5, [r4, #0]
 800a6de:	bf18      	it	ne
 800a6e0:	6059      	strne	r1, [r3, #4]
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	bf08      	it	eq
 800a6e6:	6031      	streq	r1, [r6, #0]
 800a6e8:	5162      	str	r2, [r4, r5]
 800a6ea:	604b      	str	r3, [r1, #4]
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	f104 060b 	add.w	r6, r4, #11
 800a6f2:	f000 fa07 	bl	800ab04 <__malloc_unlock>
 800a6f6:	f026 0607 	bic.w	r6, r6, #7
 800a6fa:	1d23      	adds	r3, r4, #4
 800a6fc:	1af2      	subs	r2, r6, r3
 800a6fe:	d0b6      	beq.n	800a66e <_malloc_r+0x22>
 800a700:	1b9b      	subs	r3, r3, r6
 800a702:	50a3      	str	r3, [r4, r2]
 800a704:	e7b3      	b.n	800a66e <_malloc_r+0x22>
 800a706:	6862      	ldr	r2, [r4, #4]
 800a708:	42a3      	cmp	r3, r4
 800a70a:	bf0c      	ite	eq
 800a70c:	6032      	streq	r2, [r6, #0]
 800a70e:	605a      	strne	r2, [r3, #4]
 800a710:	e7ec      	b.n	800a6ec <_malloc_r+0xa0>
 800a712:	4623      	mov	r3, r4
 800a714:	6864      	ldr	r4, [r4, #4]
 800a716:	e7b2      	b.n	800a67e <_malloc_r+0x32>
 800a718:	4634      	mov	r4, r6
 800a71a:	6876      	ldr	r6, [r6, #4]
 800a71c:	e7b9      	b.n	800a692 <_malloc_r+0x46>
 800a71e:	230c      	movs	r3, #12
 800a720:	603b      	str	r3, [r7, #0]
 800a722:	4638      	mov	r0, r7
 800a724:	f000 f9ee 	bl	800ab04 <__malloc_unlock>
 800a728:	e7a1      	b.n	800a66e <_malloc_r+0x22>
 800a72a:	6025      	str	r5, [r4, #0]
 800a72c:	e7de      	b.n	800a6ec <_malloc_r+0xa0>
 800a72e:	bf00      	nop
 800a730:	2000050c 	.word	0x2000050c

0800a734 <__ssputs_r>:
 800a734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a738:	688e      	ldr	r6, [r1, #8]
 800a73a:	429e      	cmp	r6, r3
 800a73c:	4682      	mov	sl, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	4690      	mov	r8, r2
 800a742:	461f      	mov	r7, r3
 800a744:	d838      	bhi.n	800a7b8 <__ssputs_r+0x84>
 800a746:	898a      	ldrh	r2, [r1, #12]
 800a748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a74c:	d032      	beq.n	800a7b4 <__ssputs_r+0x80>
 800a74e:	6825      	ldr	r5, [r4, #0]
 800a750:	6909      	ldr	r1, [r1, #16]
 800a752:	eba5 0901 	sub.w	r9, r5, r1
 800a756:	6965      	ldr	r5, [r4, #20]
 800a758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a75c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a760:	3301      	adds	r3, #1
 800a762:	444b      	add	r3, r9
 800a764:	106d      	asrs	r5, r5, #1
 800a766:	429d      	cmp	r5, r3
 800a768:	bf38      	it	cc
 800a76a:	461d      	movcc	r5, r3
 800a76c:	0553      	lsls	r3, r2, #21
 800a76e:	d531      	bpl.n	800a7d4 <__ssputs_r+0xa0>
 800a770:	4629      	mov	r1, r5
 800a772:	f7ff ff6b 	bl	800a64c <_malloc_r>
 800a776:	4606      	mov	r6, r0
 800a778:	b950      	cbnz	r0, 800a790 <__ssputs_r+0x5c>
 800a77a:	230c      	movs	r3, #12
 800a77c:	f8ca 3000 	str.w	r3, [sl]
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a786:	81a3      	strh	r3, [r4, #12]
 800a788:	f04f 30ff 	mov.w	r0, #4294967295
 800a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a790:	6921      	ldr	r1, [r4, #16]
 800a792:	464a      	mov	r2, r9
 800a794:	f7ff fa08 	bl	8009ba8 <memcpy>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	6126      	str	r6, [r4, #16]
 800a7a6:	6165      	str	r5, [r4, #20]
 800a7a8:	444e      	add	r6, r9
 800a7aa:	eba5 0509 	sub.w	r5, r5, r9
 800a7ae:	6026      	str	r6, [r4, #0]
 800a7b0:	60a5      	str	r5, [r4, #8]
 800a7b2:	463e      	mov	r6, r7
 800a7b4:	42be      	cmp	r6, r7
 800a7b6:	d900      	bls.n	800a7ba <__ssputs_r+0x86>
 800a7b8:	463e      	mov	r6, r7
 800a7ba:	6820      	ldr	r0, [r4, #0]
 800a7bc:	4632      	mov	r2, r6
 800a7be:	4641      	mov	r1, r8
 800a7c0:	f000 f980 	bl	800aac4 <memmove>
 800a7c4:	68a3      	ldr	r3, [r4, #8]
 800a7c6:	1b9b      	subs	r3, r3, r6
 800a7c8:	60a3      	str	r3, [r4, #8]
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	4433      	add	r3, r6
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e7db      	b.n	800a78c <__ssputs_r+0x58>
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	f000 f99b 	bl	800ab10 <_realloc_r>
 800a7da:	4606      	mov	r6, r0
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d1e1      	bne.n	800a7a4 <__ssputs_r+0x70>
 800a7e0:	6921      	ldr	r1, [r4, #16]
 800a7e2:	4650      	mov	r0, sl
 800a7e4:	f7ff fec6 	bl	800a574 <_free_r>
 800a7e8:	e7c7      	b.n	800a77a <__ssputs_r+0x46>
	...

0800a7ec <_svfiprintf_r>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	4698      	mov	r8, r3
 800a7f2:	898b      	ldrh	r3, [r1, #12]
 800a7f4:	061b      	lsls	r3, r3, #24
 800a7f6:	b09d      	sub	sp, #116	; 0x74
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	460d      	mov	r5, r1
 800a7fc:	4614      	mov	r4, r2
 800a7fe:	d50e      	bpl.n	800a81e <_svfiprintf_r+0x32>
 800a800:	690b      	ldr	r3, [r1, #16]
 800a802:	b963      	cbnz	r3, 800a81e <_svfiprintf_r+0x32>
 800a804:	2140      	movs	r1, #64	; 0x40
 800a806:	f7ff ff21 	bl	800a64c <_malloc_r>
 800a80a:	6028      	str	r0, [r5, #0]
 800a80c:	6128      	str	r0, [r5, #16]
 800a80e:	b920      	cbnz	r0, 800a81a <_svfiprintf_r+0x2e>
 800a810:	230c      	movs	r3, #12
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	e0d1      	b.n	800a9be <_svfiprintf_r+0x1d2>
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	616b      	str	r3, [r5, #20]
 800a81e:	2300      	movs	r3, #0
 800a820:	9309      	str	r3, [sp, #36]	; 0x24
 800a822:	2320      	movs	r3, #32
 800a824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a828:	f8cd 800c 	str.w	r8, [sp, #12]
 800a82c:	2330      	movs	r3, #48	; 0x30
 800a82e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a9d8 <_svfiprintf_r+0x1ec>
 800a832:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a836:	f04f 0901 	mov.w	r9, #1
 800a83a:	4623      	mov	r3, r4
 800a83c:	469a      	mov	sl, r3
 800a83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a842:	b10a      	cbz	r2, 800a848 <_svfiprintf_r+0x5c>
 800a844:	2a25      	cmp	r2, #37	; 0x25
 800a846:	d1f9      	bne.n	800a83c <_svfiprintf_r+0x50>
 800a848:	ebba 0b04 	subs.w	fp, sl, r4
 800a84c:	d00b      	beq.n	800a866 <_svfiprintf_r+0x7a>
 800a84e:	465b      	mov	r3, fp
 800a850:	4622      	mov	r2, r4
 800a852:	4629      	mov	r1, r5
 800a854:	4638      	mov	r0, r7
 800a856:	f7ff ff6d 	bl	800a734 <__ssputs_r>
 800a85a:	3001      	adds	r0, #1
 800a85c:	f000 80aa 	beq.w	800a9b4 <_svfiprintf_r+0x1c8>
 800a860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a862:	445a      	add	r2, fp
 800a864:	9209      	str	r2, [sp, #36]	; 0x24
 800a866:	f89a 3000 	ldrb.w	r3, [sl]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 80a2 	beq.w	800a9b4 <_svfiprintf_r+0x1c8>
 800a870:	2300      	movs	r3, #0
 800a872:	f04f 32ff 	mov.w	r2, #4294967295
 800a876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a87a:	f10a 0a01 	add.w	sl, sl, #1
 800a87e:	9304      	str	r3, [sp, #16]
 800a880:	9307      	str	r3, [sp, #28]
 800a882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a886:	931a      	str	r3, [sp, #104]	; 0x68
 800a888:	4654      	mov	r4, sl
 800a88a:	2205      	movs	r2, #5
 800a88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a890:	4851      	ldr	r0, [pc, #324]	; (800a9d8 <_svfiprintf_r+0x1ec>)
 800a892:	f7f5 fca5 	bl	80001e0 <memchr>
 800a896:	9a04      	ldr	r2, [sp, #16]
 800a898:	b9d8      	cbnz	r0, 800a8d2 <_svfiprintf_r+0xe6>
 800a89a:	06d0      	lsls	r0, r2, #27
 800a89c:	bf44      	itt	mi
 800a89e:	2320      	movmi	r3, #32
 800a8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8a4:	0711      	lsls	r1, r2, #28
 800a8a6:	bf44      	itt	mi
 800a8a8:	232b      	movmi	r3, #43	; 0x2b
 800a8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8b4:	d015      	beq.n	800a8e2 <_svfiprintf_r+0xf6>
 800a8b6:	9a07      	ldr	r2, [sp, #28]
 800a8b8:	4654      	mov	r4, sl
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	f04f 0c0a 	mov.w	ip, #10
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8c6:	3b30      	subs	r3, #48	; 0x30
 800a8c8:	2b09      	cmp	r3, #9
 800a8ca:	d94e      	bls.n	800a96a <_svfiprintf_r+0x17e>
 800a8cc:	b1b0      	cbz	r0, 800a8fc <_svfiprintf_r+0x110>
 800a8ce:	9207      	str	r2, [sp, #28]
 800a8d0:	e014      	b.n	800a8fc <_svfiprintf_r+0x110>
 800a8d2:	eba0 0308 	sub.w	r3, r0, r8
 800a8d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	9304      	str	r3, [sp, #16]
 800a8de:	46a2      	mov	sl, r4
 800a8e0:	e7d2      	b.n	800a888 <_svfiprintf_r+0x9c>
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	1d19      	adds	r1, r3, #4
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	9103      	str	r1, [sp, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	bfbb      	ittet	lt
 800a8ee:	425b      	neglt	r3, r3
 800a8f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a8f4:	9307      	strge	r3, [sp, #28]
 800a8f6:	9307      	strlt	r3, [sp, #28]
 800a8f8:	bfb8      	it	lt
 800a8fa:	9204      	strlt	r2, [sp, #16]
 800a8fc:	7823      	ldrb	r3, [r4, #0]
 800a8fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a900:	d10c      	bne.n	800a91c <_svfiprintf_r+0x130>
 800a902:	7863      	ldrb	r3, [r4, #1]
 800a904:	2b2a      	cmp	r3, #42	; 0x2a
 800a906:	d135      	bne.n	800a974 <_svfiprintf_r+0x188>
 800a908:	9b03      	ldr	r3, [sp, #12]
 800a90a:	1d1a      	adds	r2, r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	9203      	str	r2, [sp, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	bfb8      	it	lt
 800a914:	f04f 33ff 	movlt.w	r3, #4294967295
 800a918:	3402      	adds	r4, #2
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9e8 <_svfiprintf_r+0x1fc>
 800a920:	7821      	ldrb	r1, [r4, #0]
 800a922:	2203      	movs	r2, #3
 800a924:	4650      	mov	r0, sl
 800a926:	f7f5 fc5b 	bl	80001e0 <memchr>
 800a92a:	b140      	cbz	r0, 800a93e <_svfiprintf_r+0x152>
 800a92c:	2340      	movs	r3, #64	; 0x40
 800a92e:	eba0 000a 	sub.w	r0, r0, sl
 800a932:	fa03 f000 	lsl.w	r0, r3, r0
 800a936:	9b04      	ldr	r3, [sp, #16]
 800a938:	4303      	orrs	r3, r0
 800a93a:	3401      	adds	r4, #1
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a942:	4826      	ldr	r0, [pc, #152]	; (800a9dc <_svfiprintf_r+0x1f0>)
 800a944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a948:	2206      	movs	r2, #6
 800a94a:	f7f5 fc49 	bl	80001e0 <memchr>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d038      	beq.n	800a9c4 <_svfiprintf_r+0x1d8>
 800a952:	4b23      	ldr	r3, [pc, #140]	; (800a9e0 <_svfiprintf_r+0x1f4>)
 800a954:	bb1b      	cbnz	r3, 800a99e <_svfiprintf_r+0x1b2>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	3307      	adds	r3, #7
 800a95a:	f023 0307 	bic.w	r3, r3, #7
 800a95e:	3308      	adds	r3, #8
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a964:	4433      	add	r3, r6
 800a966:	9309      	str	r3, [sp, #36]	; 0x24
 800a968:	e767      	b.n	800a83a <_svfiprintf_r+0x4e>
 800a96a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a96e:	460c      	mov	r4, r1
 800a970:	2001      	movs	r0, #1
 800a972:	e7a5      	b.n	800a8c0 <_svfiprintf_r+0xd4>
 800a974:	2300      	movs	r3, #0
 800a976:	3401      	adds	r4, #1
 800a978:	9305      	str	r3, [sp, #20]
 800a97a:	4619      	mov	r1, r3
 800a97c:	f04f 0c0a 	mov.w	ip, #10
 800a980:	4620      	mov	r0, r4
 800a982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a986:	3a30      	subs	r2, #48	; 0x30
 800a988:	2a09      	cmp	r2, #9
 800a98a:	d903      	bls.n	800a994 <_svfiprintf_r+0x1a8>
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0c5      	beq.n	800a91c <_svfiprintf_r+0x130>
 800a990:	9105      	str	r1, [sp, #20]
 800a992:	e7c3      	b.n	800a91c <_svfiprintf_r+0x130>
 800a994:	fb0c 2101 	mla	r1, ip, r1, r2
 800a998:	4604      	mov	r4, r0
 800a99a:	2301      	movs	r3, #1
 800a99c:	e7f0      	b.n	800a980 <_svfiprintf_r+0x194>
 800a99e:	ab03      	add	r3, sp, #12
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	4b0f      	ldr	r3, [pc, #60]	; (800a9e4 <_svfiprintf_r+0x1f8>)
 800a9a6:	a904      	add	r1, sp, #16
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f7fc fa49 	bl	8006e40 <_printf_float>
 800a9ae:	1c42      	adds	r2, r0, #1
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	d1d6      	bne.n	800a962 <_svfiprintf_r+0x176>
 800a9b4:	89ab      	ldrh	r3, [r5, #12]
 800a9b6:	065b      	lsls	r3, r3, #25
 800a9b8:	f53f af2c 	bmi.w	800a814 <_svfiprintf_r+0x28>
 800a9bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9be:	b01d      	add	sp, #116	; 0x74
 800a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4b06      	ldr	r3, [pc, #24]	; (800a9e4 <_svfiprintf_r+0x1f8>)
 800a9cc:	a904      	add	r1, sp, #16
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f7fc fcda 	bl	8007388 <_printf_i>
 800a9d4:	e7eb      	b.n	800a9ae <_svfiprintf_r+0x1c2>
 800a9d6:	bf00      	nop
 800a9d8:	0800ba34 	.word	0x0800ba34
 800a9dc:	0800ba3e 	.word	0x0800ba3e
 800a9e0:	08006e41 	.word	0x08006e41
 800a9e4:	0800a735 	.word	0x0800a735
 800a9e8:	0800ba3a 	.word	0x0800ba3a
 800a9ec:	00000000 	.word	0x00000000

0800a9f0 <nan>:
 800a9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9f8 <nan+0x8>
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	00000000 	.word	0x00000000
 800a9fc:	7ff80000 	.word	0x7ff80000

0800aa00 <_sbrk_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4d06      	ldr	r5, [pc, #24]	; (800aa1c <_sbrk_r+0x1c>)
 800aa04:	2300      	movs	r3, #0
 800aa06:	4604      	mov	r4, r0
 800aa08:	4608      	mov	r0, r1
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	f7f7 fa18 	bl	8001e40 <_sbrk>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	d102      	bne.n	800aa1a <_sbrk_r+0x1a>
 800aa14:	682b      	ldr	r3, [r5, #0]
 800aa16:	b103      	cbz	r3, 800aa1a <_sbrk_r+0x1a>
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	20000514 	.word	0x20000514

0800aa20 <strncmp>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	b17a      	cbz	r2, 800aa44 <strncmp+0x24>
 800aa24:	4603      	mov	r3, r0
 800aa26:	3901      	subs	r1, #1
 800aa28:	1884      	adds	r4, r0, r2
 800aa2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa32:	4290      	cmp	r0, r2
 800aa34:	d101      	bne.n	800aa3a <strncmp+0x1a>
 800aa36:	42a3      	cmp	r3, r4
 800aa38:	d101      	bne.n	800aa3e <strncmp+0x1e>
 800aa3a:	1a80      	subs	r0, r0, r2
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d1f3      	bne.n	800aa2a <strncmp+0xa>
 800aa42:	e7fa      	b.n	800aa3a <strncmp+0x1a>
 800aa44:	4610      	mov	r0, r2
 800aa46:	e7f9      	b.n	800aa3c <strncmp+0x1c>

0800aa48 <__ascii_wctomb>:
 800aa48:	b149      	cbz	r1, 800aa5e <__ascii_wctomb+0x16>
 800aa4a:	2aff      	cmp	r2, #255	; 0xff
 800aa4c:	bf85      	ittet	hi
 800aa4e:	238a      	movhi	r3, #138	; 0x8a
 800aa50:	6003      	strhi	r3, [r0, #0]
 800aa52:	700a      	strbls	r2, [r1, #0]
 800aa54:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa58:	bf98      	it	ls
 800aa5a:	2001      	movls	r0, #1
 800aa5c:	4770      	bx	lr
 800aa5e:	4608      	mov	r0, r1
 800aa60:	4770      	bx	lr
	...

0800aa64 <__assert_func>:
 800aa64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa66:	4614      	mov	r4, r2
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4b09      	ldr	r3, [pc, #36]	; (800aa90 <__assert_func+0x2c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4605      	mov	r5, r0
 800aa70:	68d8      	ldr	r0, [r3, #12]
 800aa72:	b14c      	cbz	r4, 800aa88 <__assert_func+0x24>
 800aa74:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <__assert_func+0x30>)
 800aa76:	9100      	str	r1, [sp, #0]
 800aa78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa7c:	4906      	ldr	r1, [pc, #24]	; (800aa98 <__assert_func+0x34>)
 800aa7e:	462b      	mov	r3, r5
 800aa80:	f000 f80e 	bl	800aaa0 <fiprintf>
 800aa84:	f000 fa8c 	bl	800afa0 <abort>
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <__assert_func+0x38>)
 800aa8a:	461c      	mov	r4, r3
 800aa8c:	e7f3      	b.n	800aa76 <__assert_func+0x12>
 800aa8e:	bf00      	nop
 800aa90:	2000000c 	.word	0x2000000c
 800aa94:	0800ba45 	.word	0x0800ba45
 800aa98:	0800ba52 	.word	0x0800ba52
 800aa9c:	0800ba80 	.word	0x0800ba80

0800aaa0 <fiprintf>:
 800aaa0:	b40e      	push	{r1, r2, r3}
 800aaa2:	b503      	push	{r0, r1, lr}
 800aaa4:	4601      	mov	r1, r0
 800aaa6:	ab03      	add	r3, sp, #12
 800aaa8:	4805      	ldr	r0, [pc, #20]	; (800aac0 <fiprintf+0x20>)
 800aaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaae:	6800      	ldr	r0, [r0, #0]
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	f000 f885 	bl	800abc0 <_vfiprintf_r>
 800aab6:	b002      	add	sp, #8
 800aab8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aabc:	b003      	add	sp, #12
 800aabe:	4770      	bx	lr
 800aac0:	2000000c 	.word	0x2000000c

0800aac4 <memmove>:
 800aac4:	4288      	cmp	r0, r1
 800aac6:	b510      	push	{r4, lr}
 800aac8:	eb01 0402 	add.w	r4, r1, r2
 800aacc:	d902      	bls.n	800aad4 <memmove+0x10>
 800aace:	4284      	cmp	r4, r0
 800aad0:	4623      	mov	r3, r4
 800aad2:	d807      	bhi.n	800aae4 <memmove+0x20>
 800aad4:	1e43      	subs	r3, r0, #1
 800aad6:	42a1      	cmp	r1, r4
 800aad8:	d008      	beq.n	800aaec <memmove+0x28>
 800aada:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aade:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aae2:	e7f8      	b.n	800aad6 <memmove+0x12>
 800aae4:	4402      	add	r2, r0
 800aae6:	4601      	mov	r1, r0
 800aae8:	428a      	cmp	r2, r1
 800aaea:	d100      	bne.n	800aaee <memmove+0x2a>
 800aaec:	bd10      	pop	{r4, pc}
 800aaee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaf6:	e7f7      	b.n	800aae8 <memmove+0x24>

0800aaf8 <__malloc_lock>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <__malloc_lock+0x8>)
 800aafa:	f000 bc11 	b.w	800b320 <__retarget_lock_acquire_recursive>
 800aafe:	bf00      	nop
 800ab00:	20000518 	.word	0x20000518

0800ab04 <__malloc_unlock>:
 800ab04:	4801      	ldr	r0, [pc, #4]	; (800ab0c <__malloc_unlock+0x8>)
 800ab06:	f000 bc0c 	b.w	800b322 <__retarget_lock_release_recursive>
 800ab0a:	bf00      	nop
 800ab0c:	20000518 	.word	0x20000518

0800ab10 <_realloc_r>:
 800ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab14:	4680      	mov	r8, r0
 800ab16:	4614      	mov	r4, r2
 800ab18:	460e      	mov	r6, r1
 800ab1a:	b921      	cbnz	r1, 800ab26 <_realloc_r+0x16>
 800ab1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab20:	4611      	mov	r1, r2
 800ab22:	f7ff bd93 	b.w	800a64c <_malloc_r>
 800ab26:	b92a      	cbnz	r2, 800ab34 <_realloc_r+0x24>
 800ab28:	f7ff fd24 	bl	800a574 <_free_r>
 800ab2c:	4625      	mov	r5, r4
 800ab2e:	4628      	mov	r0, r5
 800ab30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab34:	f000 fc5c 	bl	800b3f0 <_malloc_usable_size_r>
 800ab38:	4284      	cmp	r4, r0
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	d802      	bhi.n	800ab44 <_realloc_r+0x34>
 800ab3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab42:	d812      	bhi.n	800ab6a <_realloc_r+0x5a>
 800ab44:	4621      	mov	r1, r4
 800ab46:	4640      	mov	r0, r8
 800ab48:	f7ff fd80 	bl	800a64c <_malloc_r>
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d0ed      	beq.n	800ab2e <_realloc_r+0x1e>
 800ab52:	42bc      	cmp	r4, r7
 800ab54:	4622      	mov	r2, r4
 800ab56:	4631      	mov	r1, r6
 800ab58:	bf28      	it	cs
 800ab5a:	463a      	movcs	r2, r7
 800ab5c:	f7ff f824 	bl	8009ba8 <memcpy>
 800ab60:	4631      	mov	r1, r6
 800ab62:	4640      	mov	r0, r8
 800ab64:	f7ff fd06 	bl	800a574 <_free_r>
 800ab68:	e7e1      	b.n	800ab2e <_realloc_r+0x1e>
 800ab6a:	4635      	mov	r5, r6
 800ab6c:	e7df      	b.n	800ab2e <_realloc_r+0x1e>

0800ab6e <__sfputc_r>:
 800ab6e:	6893      	ldr	r3, [r2, #8]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	b410      	push	{r4}
 800ab76:	6093      	str	r3, [r2, #8]
 800ab78:	da08      	bge.n	800ab8c <__sfputc_r+0x1e>
 800ab7a:	6994      	ldr	r4, [r2, #24]
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	db01      	blt.n	800ab84 <__sfputc_r+0x16>
 800ab80:	290a      	cmp	r1, #10
 800ab82:	d103      	bne.n	800ab8c <__sfputc_r+0x1e>
 800ab84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab88:	f000 b94a 	b.w	800ae20 <__swbuf_r>
 800ab8c:	6813      	ldr	r3, [r2, #0]
 800ab8e:	1c58      	adds	r0, r3, #1
 800ab90:	6010      	str	r0, [r2, #0]
 800ab92:	7019      	strb	r1, [r3, #0]
 800ab94:	4608      	mov	r0, r1
 800ab96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <__sfputs_r>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	4606      	mov	r6, r0
 800aba0:	460f      	mov	r7, r1
 800aba2:	4614      	mov	r4, r2
 800aba4:	18d5      	adds	r5, r2, r3
 800aba6:	42ac      	cmp	r4, r5
 800aba8:	d101      	bne.n	800abae <__sfputs_r+0x12>
 800abaa:	2000      	movs	r0, #0
 800abac:	e007      	b.n	800abbe <__sfputs_r+0x22>
 800abae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb2:	463a      	mov	r2, r7
 800abb4:	4630      	mov	r0, r6
 800abb6:	f7ff ffda 	bl	800ab6e <__sfputc_r>
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	d1f3      	bne.n	800aba6 <__sfputs_r+0xa>
 800abbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abc0 <_vfiprintf_r>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	460d      	mov	r5, r1
 800abc6:	b09d      	sub	sp, #116	; 0x74
 800abc8:	4614      	mov	r4, r2
 800abca:	4698      	mov	r8, r3
 800abcc:	4606      	mov	r6, r0
 800abce:	b118      	cbz	r0, 800abd8 <_vfiprintf_r+0x18>
 800abd0:	6983      	ldr	r3, [r0, #24]
 800abd2:	b90b      	cbnz	r3, 800abd8 <_vfiprintf_r+0x18>
 800abd4:	f000 fb06 	bl	800b1e4 <__sinit>
 800abd8:	4b89      	ldr	r3, [pc, #548]	; (800ae00 <_vfiprintf_r+0x240>)
 800abda:	429d      	cmp	r5, r3
 800abdc:	d11b      	bne.n	800ac16 <_vfiprintf_r+0x56>
 800abde:	6875      	ldr	r5, [r6, #4]
 800abe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe2:	07d9      	lsls	r1, r3, #31
 800abe4:	d405      	bmi.n	800abf2 <_vfiprintf_r+0x32>
 800abe6:	89ab      	ldrh	r3, [r5, #12]
 800abe8:	059a      	lsls	r2, r3, #22
 800abea:	d402      	bmi.n	800abf2 <_vfiprintf_r+0x32>
 800abec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abee:	f000 fb97 	bl	800b320 <__retarget_lock_acquire_recursive>
 800abf2:	89ab      	ldrh	r3, [r5, #12]
 800abf4:	071b      	lsls	r3, r3, #28
 800abf6:	d501      	bpl.n	800abfc <_vfiprintf_r+0x3c>
 800abf8:	692b      	ldr	r3, [r5, #16]
 800abfa:	b9eb      	cbnz	r3, 800ac38 <_vfiprintf_r+0x78>
 800abfc:	4629      	mov	r1, r5
 800abfe:	4630      	mov	r0, r6
 800ac00:	f000 f960 	bl	800aec4 <__swsetup_r>
 800ac04:	b1c0      	cbz	r0, 800ac38 <_vfiprintf_r+0x78>
 800ac06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac08:	07dc      	lsls	r4, r3, #31
 800ac0a:	d50e      	bpl.n	800ac2a <_vfiprintf_r+0x6a>
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	b01d      	add	sp, #116	; 0x74
 800ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac16:	4b7b      	ldr	r3, [pc, #492]	; (800ae04 <_vfiprintf_r+0x244>)
 800ac18:	429d      	cmp	r5, r3
 800ac1a:	d101      	bne.n	800ac20 <_vfiprintf_r+0x60>
 800ac1c:	68b5      	ldr	r5, [r6, #8]
 800ac1e:	e7df      	b.n	800abe0 <_vfiprintf_r+0x20>
 800ac20:	4b79      	ldr	r3, [pc, #484]	; (800ae08 <_vfiprintf_r+0x248>)
 800ac22:	429d      	cmp	r5, r3
 800ac24:	bf08      	it	eq
 800ac26:	68f5      	ldreq	r5, [r6, #12]
 800ac28:	e7da      	b.n	800abe0 <_vfiprintf_r+0x20>
 800ac2a:	89ab      	ldrh	r3, [r5, #12]
 800ac2c:	0598      	lsls	r0, r3, #22
 800ac2e:	d4ed      	bmi.n	800ac0c <_vfiprintf_r+0x4c>
 800ac30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac32:	f000 fb76 	bl	800b322 <__retarget_lock_release_recursive>
 800ac36:	e7e9      	b.n	800ac0c <_vfiprintf_r+0x4c>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3c:	2320      	movs	r3, #32
 800ac3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac46:	2330      	movs	r3, #48	; 0x30
 800ac48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae0c <_vfiprintf_r+0x24c>
 800ac4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac50:	f04f 0901 	mov.w	r9, #1
 800ac54:	4623      	mov	r3, r4
 800ac56:	469a      	mov	sl, r3
 800ac58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac5c:	b10a      	cbz	r2, 800ac62 <_vfiprintf_r+0xa2>
 800ac5e:	2a25      	cmp	r2, #37	; 0x25
 800ac60:	d1f9      	bne.n	800ac56 <_vfiprintf_r+0x96>
 800ac62:	ebba 0b04 	subs.w	fp, sl, r4
 800ac66:	d00b      	beq.n	800ac80 <_vfiprintf_r+0xc0>
 800ac68:	465b      	mov	r3, fp
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	4630      	mov	r0, r6
 800ac70:	f7ff ff94 	bl	800ab9c <__sfputs_r>
 800ac74:	3001      	adds	r0, #1
 800ac76:	f000 80aa 	beq.w	800adce <_vfiprintf_r+0x20e>
 800ac7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac7c:	445a      	add	r2, fp
 800ac7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ac80:	f89a 3000 	ldrb.w	r3, [sl]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 80a2 	beq.w	800adce <_vfiprintf_r+0x20e>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac94:	f10a 0a01 	add.w	sl, sl, #1
 800ac98:	9304      	str	r3, [sp, #16]
 800ac9a:	9307      	str	r3, [sp, #28]
 800ac9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aca0:	931a      	str	r3, [sp, #104]	; 0x68
 800aca2:	4654      	mov	r4, sl
 800aca4:	2205      	movs	r2, #5
 800aca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acaa:	4858      	ldr	r0, [pc, #352]	; (800ae0c <_vfiprintf_r+0x24c>)
 800acac:	f7f5 fa98 	bl	80001e0 <memchr>
 800acb0:	9a04      	ldr	r2, [sp, #16]
 800acb2:	b9d8      	cbnz	r0, 800acec <_vfiprintf_r+0x12c>
 800acb4:	06d1      	lsls	r1, r2, #27
 800acb6:	bf44      	itt	mi
 800acb8:	2320      	movmi	r3, #32
 800acba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acbe:	0713      	lsls	r3, r2, #28
 800acc0:	bf44      	itt	mi
 800acc2:	232b      	movmi	r3, #43	; 0x2b
 800acc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc8:	f89a 3000 	ldrb.w	r3, [sl]
 800accc:	2b2a      	cmp	r3, #42	; 0x2a
 800acce:	d015      	beq.n	800acfc <_vfiprintf_r+0x13c>
 800acd0:	9a07      	ldr	r2, [sp, #28]
 800acd2:	4654      	mov	r4, sl
 800acd4:	2000      	movs	r0, #0
 800acd6:	f04f 0c0a 	mov.w	ip, #10
 800acda:	4621      	mov	r1, r4
 800acdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ace0:	3b30      	subs	r3, #48	; 0x30
 800ace2:	2b09      	cmp	r3, #9
 800ace4:	d94e      	bls.n	800ad84 <_vfiprintf_r+0x1c4>
 800ace6:	b1b0      	cbz	r0, 800ad16 <_vfiprintf_r+0x156>
 800ace8:	9207      	str	r2, [sp, #28]
 800acea:	e014      	b.n	800ad16 <_vfiprintf_r+0x156>
 800acec:	eba0 0308 	sub.w	r3, r0, r8
 800acf0:	fa09 f303 	lsl.w	r3, r9, r3
 800acf4:	4313      	orrs	r3, r2
 800acf6:	9304      	str	r3, [sp, #16]
 800acf8:	46a2      	mov	sl, r4
 800acfa:	e7d2      	b.n	800aca2 <_vfiprintf_r+0xe2>
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	1d19      	adds	r1, r3, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	9103      	str	r1, [sp, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bfbb      	ittet	lt
 800ad08:	425b      	neglt	r3, r3
 800ad0a:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0e:	9307      	strge	r3, [sp, #28]
 800ad10:	9307      	strlt	r3, [sp, #28]
 800ad12:	bfb8      	it	lt
 800ad14:	9204      	strlt	r2, [sp, #16]
 800ad16:	7823      	ldrb	r3, [r4, #0]
 800ad18:	2b2e      	cmp	r3, #46	; 0x2e
 800ad1a:	d10c      	bne.n	800ad36 <_vfiprintf_r+0x176>
 800ad1c:	7863      	ldrb	r3, [r4, #1]
 800ad1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad20:	d135      	bne.n	800ad8e <_vfiprintf_r+0x1ce>
 800ad22:	9b03      	ldr	r3, [sp, #12]
 800ad24:	1d1a      	adds	r2, r3, #4
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	9203      	str	r2, [sp, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	bfb8      	it	lt
 800ad2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad32:	3402      	adds	r4, #2
 800ad34:	9305      	str	r3, [sp, #20]
 800ad36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae1c <_vfiprintf_r+0x25c>
 800ad3a:	7821      	ldrb	r1, [r4, #0]
 800ad3c:	2203      	movs	r2, #3
 800ad3e:	4650      	mov	r0, sl
 800ad40:	f7f5 fa4e 	bl	80001e0 <memchr>
 800ad44:	b140      	cbz	r0, 800ad58 <_vfiprintf_r+0x198>
 800ad46:	2340      	movs	r3, #64	; 0x40
 800ad48:	eba0 000a 	sub.w	r0, r0, sl
 800ad4c:	fa03 f000 	lsl.w	r0, r3, r0
 800ad50:	9b04      	ldr	r3, [sp, #16]
 800ad52:	4303      	orrs	r3, r0
 800ad54:	3401      	adds	r4, #1
 800ad56:	9304      	str	r3, [sp, #16]
 800ad58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5c:	482c      	ldr	r0, [pc, #176]	; (800ae10 <_vfiprintf_r+0x250>)
 800ad5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad62:	2206      	movs	r2, #6
 800ad64:	f7f5 fa3c 	bl	80001e0 <memchr>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d03f      	beq.n	800adec <_vfiprintf_r+0x22c>
 800ad6c:	4b29      	ldr	r3, [pc, #164]	; (800ae14 <_vfiprintf_r+0x254>)
 800ad6e:	bb1b      	cbnz	r3, 800adb8 <_vfiprintf_r+0x1f8>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	3307      	adds	r3, #7
 800ad74:	f023 0307 	bic.w	r3, r3, #7
 800ad78:	3308      	adds	r3, #8
 800ad7a:	9303      	str	r3, [sp, #12]
 800ad7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7e:	443b      	add	r3, r7
 800ad80:	9309      	str	r3, [sp, #36]	; 0x24
 800ad82:	e767      	b.n	800ac54 <_vfiprintf_r+0x94>
 800ad84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad88:	460c      	mov	r4, r1
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	e7a5      	b.n	800acda <_vfiprintf_r+0x11a>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	3401      	adds	r4, #1
 800ad92:	9305      	str	r3, [sp, #20]
 800ad94:	4619      	mov	r1, r3
 800ad96:	f04f 0c0a 	mov.w	ip, #10
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ada0:	3a30      	subs	r2, #48	; 0x30
 800ada2:	2a09      	cmp	r2, #9
 800ada4:	d903      	bls.n	800adae <_vfiprintf_r+0x1ee>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0c5      	beq.n	800ad36 <_vfiprintf_r+0x176>
 800adaa:	9105      	str	r1, [sp, #20]
 800adac:	e7c3      	b.n	800ad36 <_vfiprintf_r+0x176>
 800adae:	fb0c 2101 	mla	r1, ip, r1, r2
 800adb2:	4604      	mov	r4, r0
 800adb4:	2301      	movs	r3, #1
 800adb6:	e7f0      	b.n	800ad9a <_vfiprintf_r+0x1da>
 800adb8:	ab03      	add	r3, sp, #12
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	462a      	mov	r2, r5
 800adbe:	4b16      	ldr	r3, [pc, #88]	; (800ae18 <_vfiprintf_r+0x258>)
 800adc0:	a904      	add	r1, sp, #16
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7fc f83c 	bl	8006e40 <_printf_float>
 800adc8:	4607      	mov	r7, r0
 800adca:	1c78      	adds	r0, r7, #1
 800adcc:	d1d6      	bne.n	800ad7c <_vfiprintf_r+0x1bc>
 800adce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800add0:	07d9      	lsls	r1, r3, #31
 800add2:	d405      	bmi.n	800ade0 <_vfiprintf_r+0x220>
 800add4:	89ab      	ldrh	r3, [r5, #12]
 800add6:	059a      	lsls	r2, r3, #22
 800add8:	d402      	bmi.n	800ade0 <_vfiprintf_r+0x220>
 800adda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800addc:	f000 faa1 	bl	800b322 <__retarget_lock_release_recursive>
 800ade0:	89ab      	ldrh	r3, [r5, #12]
 800ade2:	065b      	lsls	r3, r3, #25
 800ade4:	f53f af12 	bmi.w	800ac0c <_vfiprintf_r+0x4c>
 800ade8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adea:	e711      	b.n	800ac10 <_vfiprintf_r+0x50>
 800adec:	ab03      	add	r3, sp, #12
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	462a      	mov	r2, r5
 800adf2:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <_vfiprintf_r+0x258>)
 800adf4:	a904      	add	r1, sp, #16
 800adf6:	4630      	mov	r0, r6
 800adf8:	f7fc fac6 	bl	8007388 <_printf_i>
 800adfc:	e7e4      	b.n	800adc8 <_vfiprintf_r+0x208>
 800adfe:	bf00      	nop
 800ae00:	0800baa4 	.word	0x0800baa4
 800ae04:	0800bac4 	.word	0x0800bac4
 800ae08:	0800ba84 	.word	0x0800ba84
 800ae0c:	0800ba34 	.word	0x0800ba34
 800ae10:	0800ba3e 	.word	0x0800ba3e
 800ae14:	08006e41 	.word	0x08006e41
 800ae18:	0800ab9d 	.word	0x0800ab9d
 800ae1c:	0800ba3a 	.word	0x0800ba3a

0800ae20 <__swbuf_r>:
 800ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae22:	460e      	mov	r6, r1
 800ae24:	4614      	mov	r4, r2
 800ae26:	4605      	mov	r5, r0
 800ae28:	b118      	cbz	r0, 800ae32 <__swbuf_r+0x12>
 800ae2a:	6983      	ldr	r3, [r0, #24]
 800ae2c:	b90b      	cbnz	r3, 800ae32 <__swbuf_r+0x12>
 800ae2e:	f000 f9d9 	bl	800b1e4 <__sinit>
 800ae32:	4b21      	ldr	r3, [pc, #132]	; (800aeb8 <__swbuf_r+0x98>)
 800ae34:	429c      	cmp	r4, r3
 800ae36:	d12b      	bne.n	800ae90 <__swbuf_r+0x70>
 800ae38:	686c      	ldr	r4, [r5, #4]
 800ae3a:	69a3      	ldr	r3, [r4, #24]
 800ae3c:	60a3      	str	r3, [r4, #8]
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	071a      	lsls	r2, r3, #28
 800ae42:	d52f      	bpl.n	800aea4 <__swbuf_r+0x84>
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	b36b      	cbz	r3, 800aea4 <__swbuf_r+0x84>
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	6820      	ldr	r0, [r4, #0]
 800ae4c:	1ac0      	subs	r0, r0, r3
 800ae4e:	6963      	ldr	r3, [r4, #20]
 800ae50:	b2f6      	uxtb	r6, r6
 800ae52:	4283      	cmp	r3, r0
 800ae54:	4637      	mov	r7, r6
 800ae56:	dc04      	bgt.n	800ae62 <__swbuf_r+0x42>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f000 f92e 	bl	800b0bc <_fflush_r>
 800ae60:	bb30      	cbnz	r0, 800aeb0 <__swbuf_r+0x90>
 800ae62:	68a3      	ldr	r3, [r4, #8]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	60a3      	str	r3, [r4, #8]
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	6022      	str	r2, [r4, #0]
 800ae6e:	701e      	strb	r6, [r3, #0]
 800ae70:	6963      	ldr	r3, [r4, #20]
 800ae72:	3001      	adds	r0, #1
 800ae74:	4283      	cmp	r3, r0
 800ae76:	d004      	beq.n	800ae82 <__swbuf_r+0x62>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	07db      	lsls	r3, r3, #31
 800ae7c:	d506      	bpl.n	800ae8c <__swbuf_r+0x6c>
 800ae7e:	2e0a      	cmp	r6, #10
 800ae80:	d104      	bne.n	800ae8c <__swbuf_r+0x6c>
 800ae82:	4621      	mov	r1, r4
 800ae84:	4628      	mov	r0, r5
 800ae86:	f000 f919 	bl	800b0bc <_fflush_r>
 800ae8a:	b988      	cbnz	r0, 800aeb0 <__swbuf_r+0x90>
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae90:	4b0a      	ldr	r3, [pc, #40]	; (800aebc <__swbuf_r+0x9c>)
 800ae92:	429c      	cmp	r4, r3
 800ae94:	d101      	bne.n	800ae9a <__swbuf_r+0x7a>
 800ae96:	68ac      	ldr	r4, [r5, #8]
 800ae98:	e7cf      	b.n	800ae3a <__swbuf_r+0x1a>
 800ae9a:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <__swbuf_r+0xa0>)
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	bf08      	it	eq
 800aea0:	68ec      	ldreq	r4, [r5, #12]
 800aea2:	e7ca      	b.n	800ae3a <__swbuf_r+0x1a>
 800aea4:	4621      	mov	r1, r4
 800aea6:	4628      	mov	r0, r5
 800aea8:	f000 f80c 	bl	800aec4 <__swsetup_r>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d0cb      	beq.n	800ae48 <__swbuf_r+0x28>
 800aeb0:	f04f 37ff 	mov.w	r7, #4294967295
 800aeb4:	e7ea      	b.n	800ae8c <__swbuf_r+0x6c>
 800aeb6:	bf00      	nop
 800aeb8:	0800baa4 	.word	0x0800baa4
 800aebc:	0800bac4 	.word	0x0800bac4
 800aec0:	0800ba84 	.word	0x0800ba84

0800aec4 <__swsetup_r>:
 800aec4:	4b32      	ldr	r3, [pc, #200]	; (800af90 <__swsetup_r+0xcc>)
 800aec6:	b570      	push	{r4, r5, r6, lr}
 800aec8:	681d      	ldr	r5, [r3, #0]
 800aeca:	4606      	mov	r6, r0
 800aecc:	460c      	mov	r4, r1
 800aece:	b125      	cbz	r5, 800aeda <__swsetup_r+0x16>
 800aed0:	69ab      	ldr	r3, [r5, #24]
 800aed2:	b913      	cbnz	r3, 800aeda <__swsetup_r+0x16>
 800aed4:	4628      	mov	r0, r5
 800aed6:	f000 f985 	bl	800b1e4 <__sinit>
 800aeda:	4b2e      	ldr	r3, [pc, #184]	; (800af94 <__swsetup_r+0xd0>)
 800aedc:	429c      	cmp	r4, r3
 800aede:	d10f      	bne.n	800af00 <__swsetup_r+0x3c>
 800aee0:	686c      	ldr	r4, [r5, #4]
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aee8:	0719      	lsls	r1, r3, #28
 800aeea:	d42c      	bmi.n	800af46 <__swsetup_r+0x82>
 800aeec:	06dd      	lsls	r5, r3, #27
 800aeee:	d411      	bmi.n	800af14 <__swsetup_r+0x50>
 800aef0:	2309      	movs	r3, #9
 800aef2:	6033      	str	r3, [r6, #0]
 800aef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	f04f 30ff 	mov.w	r0, #4294967295
 800aefe:	e03e      	b.n	800af7e <__swsetup_r+0xba>
 800af00:	4b25      	ldr	r3, [pc, #148]	; (800af98 <__swsetup_r+0xd4>)
 800af02:	429c      	cmp	r4, r3
 800af04:	d101      	bne.n	800af0a <__swsetup_r+0x46>
 800af06:	68ac      	ldr	r4, [r5, #8]
 800af08:	e7eb      	b.n	800aee2 <__swsetup_r+0x1e>
 800af0a:	4b24      	ldr	r3, [pc, #144]	; (800af9c <__swsetup_r+0xd8>)
 800af0c:	429c      	cmp	r4, r3
 800af0e:	bf08      	it	eq
 800af10:	68ec      	ldreq	r4, [r5, #12]
 800af12:	e7e6      	b.n	800aee2 <__swsetup_r+0x1e>
 800af14:	0758      	lsls	r0, r3, #29
 800af16:	d512      	bpl.n	800af3e <__swsetup_r+0x7a>
 800af18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af1a:	b141      	cbz	r1, 800af2e <__swsetup_r+0x6a>
 800af1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af20:	4299      	cmp	r1, r3
 800af22:	d002      	beq.n	800af2a <__swsetup_r+0x66>
 800af24:	4630      	mov	r0, r6
 800af26:	f7ff fb25 	bl	800a574 <_free_r>
 800af2a:	2300      	movs	r3, #0
 800af2c:	6363      	str	r3, [r4, #52]	; 0x34
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	2300      	movs	r3, #0
 800af38:	6063      	str	r3, [r4, #4]
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	f043 0308 	orr.w	r3, r3, #8
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	b94b      	cbnz	r3, 800af5e <__swsetup_r+0x9a>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af54:	d003      	beq.n	800af5e <__swsetup_r+0x9a>
 800af56:	4621      	mov	r1, r4
 800af58:	4630      	mov	r0, r6
 800af5a:	f000 fa09 	bl	800b370 <__smakebuf_r>
 800af5e:	89a0      	ldrh	r0, [r4, #12]
 800af60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af64:	f010 0301 	ands.w	r3, r0, #1
 800af68:	d00a      	beq.n	800af80 <__swsetup_r+0xbc>
 800af6a:	2300      	movs	r3, #0
 800af6c:	60a3      	str	r3, [r4, #8]
 800af6e:	6963      	ldr	r3, [r4, #20]
 800af70:	425b      	negs	r3, r3
 800af72:	61a3      	str	r3, [r4, #24]
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	b943      	cbnz	r3, 800af8a <__swsetup_r+0xc6>
 800af78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af7c:	d1ba      	bne.n	800aef4 <__swsetup_r+0x30>
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	0781      	lsls	r1, r0, #30
 800af82:	bf58      	it	pl
 800af84:	6963      	ldrpl	r3, [r4, #20]
 800af86:	60a3      	str	r3, [r4, #8]
 800af88:	e7f4      	b.n	800af74 <__swsetup_r+0xb0>
 800af8a:	2000      	movs	r0, #0
 800af8c:	e7f7      	b.n	800af7e <__swsetup_r+0xba>
 800af8e:	bf00      	nop
 800af90:	2000000c 	.word	0x2000000c
 800af94:	0800baa4 	.word	0x0800baa4
 800af98:	0800bac4 	.word	0x0800bac4
 800af9c:	0800ba84 	.word	0x0800ba84

0800afa0 <abort>:
 800afa0:	b508      	push	{r3, lr}
 800afa2:	2006      	movs	r0, #6
 800afa4:	f000 fa54 	bl	800b450 <raise>
 800afa8:	2001      	movs	r0, #1
 800afaa:	f7f6 feed 	bl	8001d88 <_exit>
	...

0800afb0 <__sflush_r>:
 800afb0:	898a      	ldrh	r2, [r1, #12]
 800afb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb6:	4605      	mov	r5, r0
 800afb8:	0710      	lsls	r0, r2, #28
 800afba:	460c      	mov	r4, r1
 800afbc:	d458      	bmi.n	800b070 <__sflush_r+0xc0>
 800afbe:	684b      	ldr	r3, [r1, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	dc05      	bgt.n	800afd0 <__sflush_r+0x20>
 800afc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	dc02      	bgt.n	800afd0 <__sflush_r+0x20>
 800afca:	2000      	movs	r0, #0
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	d0f9      	beq.n	800afca <__sflush_r+0x1a>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afdc:	682f      	ldr	r7, [r5, #0]
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	d032      	beq.n	800b048 <__sflush_r+0x98>
 800afe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	075a      	lsls	r2, r3, #29
 800afe8:	d505      	bpl.n	800aff6 <__sflush_r+0x46>
 800afea:	6863      	ldr	r3, [r4, #4]
 800afec:	1ac0      	subs	r0, r0, r3
 800afee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aff0:	b10b      	cbz	r3, 800aff6 <__sflush_r+0x46>
 800aff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aff4:	1ac0      	subs	r0, r0, r3
 800aff6:	2300      	movs	r3, #0
 800aff8:	4602      	mov	r2, r0
 800affa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800affc:	6a21      	ldr	r1, [r4, #32]
 800affe:	4628      	mov	r0, r5
 800b000:	47b0      	blx	r6
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	89a3      	ldrh	r3, [r4, #12]
 800b006:	d106      	bne.n	800b016 <__sflush_r+0x66>
 800b008:	6829      	ldr	r1, [r5, #0]
 800b00a:	291d      	cmp	r1, #29
 800b00c:	d82c      	bhi.n	800b068 <__sflush_r+0xb8>
 800b00e:	4a2a      	ldr	r2, [pc, #168]	; (800b0b8 <__sflush_r+0x108>)
 800b010:	40ca      	lsrs	r2, r1
 800b012:	07d6      	lsls	r6, r2, #31
 800b014:	d528      	bpl.n	800b068 <__sflush_r+0xb8>
 800b016:	2200      	movs	r2, #0
 800b018:	6062      	str	r2, [r4, #4]
 800b01a:	04d9      	lsls	r1, r3, #19
 800b01c:	6922      	ldr	r2, [r4, #16]
 800b01e:	6022      	str	r2, [r4, #0]
 800b020:	d504      	bpl.n	800b02c <__sflush_r+0x7c>
 800b022:	1c42      	adds	r2, r0, #1
 800b024:	d101      	bne.n	800b02a <__sflush_r+0x7a>
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	b903      	cbnz	r3, 800b02c <__sflush_r+0x7c>
 800b02a:	6560      	str	r0, [r4, #84]	; 0x54
 800b02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b02e:	602f      	str	r7, [r5, #0]
 800b030:	2900      	cmp	r1, #0
 800b032:	d0ca      	beq.n	800afca <__sflush_r+0x1a>
 800b034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b038:	4299      	cmp	r1, r3
 800b03a:	d002      	beq.n	800b042 <__sflush_r+0x92>
 800b03c:	4628      	mov	r0, r5
 800b03e:	f7ff fa99 	bl	800a574 <_free_r>
 800b042:	2000      	movs	r0, #0
 800b044:	6360      	str	r0, [r4, #52]	; 0x34
 800b046:	e7c1      	b.n	800afcc <__sflush_r+0x1c>
 800b048:	6a21      	ldr	r1, [r4, #32]
 800b04a:	2301      	movs	r3, #1
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b0      	blx	r6
 800b050:	1c41      	adds	r1, r0, #1
 800b052:	d1c7      	bne.n	800afe4 <__sflush_r+0x34>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0c4      	beq.n	800afe4 <__sflush_r+0x34>
 800b05a:	2b1d      	cmp	r3, #29
 800b05c:	d001      	beq.n	800b062 <__sflush_r+0xb2>
 800b05e:	2b16      	cmp	r3, #22
 800b060:	d101      	bne.n	800b066 <__sflush_r+0xb6>
 800b062:	602f      	str	r7, [r5, #0]
 800b064:	e7b1      	b.n	800afca <__sflush_r+0x1a>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	e7ad      	b.n	800afcc <__sflush_r+0x1c>
 800b070:	690f      	ldr	r7, [r1, #16]
 800b072:	2f00      	cmp	r7, #0
 800b074:	d0a9      	beq.n	800afca <__sflush_r+0x1a>
 800b076:	0793      	lsls	r3, r2, #30
 800b078:	680e      	ldr	r6, [r1, #0]
 800b07a:	bf08      	it	eq
 800b07c:	694b      	ldreq	r3, [r1, #20]
 800b07e:	600f      	str	r7, [r1, #0]
 800b080:	bf18      	it	ne
 800b082:	2300      	movne	r3, #0
 800b084:	eba6 0807 	sub.w	r8, r6, r7
 800b088:	608b      	str	r3, [r1, #8]
 800b08a:	f1b8 0f00 	cmp.w	r8, #0
 800b08e:	dd9c      	ble.n	800afca <__sflush_r+0x1a>
 800b090:	6a21      	ldr	r1, [r4, #32]
 800b092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b094:	4643      	mov	r3, r8
 800b096:	463a      	mov	r2, r7
 800b098:	4628      	mov	r0, r5
 800b09a:	47b0      	blx	r6
 800b09c:	2800      	cmp	r0, #0
 800b09e:	dc06      	bgt.n	800b0ae <__sflush_r+0xfe>
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a6:	81a3      	strh	r3, [r4, #12]
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ac:	e78e      	b.n	800afcc <__sflush_r+0x1c>
 800b0ae:	4407      	add	r7, r0
 800b0b0:	eba8 0800 	sub.w	r8, r8, r0
 800b0b4:	e7e9      	b.n	800b08a <__sflush_r+0xda>
 800b0b6:	bf00      	nop
 800b0b8:	20400001 	.word	0x20400001

0800b0bc <_fflush_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	690b      	ldr	r3, [r1, #16]
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	b913      	cbnz	r3, 800b0cc <_fflush_r+0x10>
 800b0c6:	2500      	movs	r5, #0
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	b118      	cbz	r0, 800b0d6 <_fflush_r+0x1a>
 800b0ce:	6983      	ldr	r3, [r0, #24]
 800b0d0:	b90b      	cbnz	r3, 800b0d6 <_fflush_r+0x1a>
 800b0d2:	f000 f887 	bl	800b1e4 <__sinit>
 800b0d6:	4b14      	ldr	r3, [pc, #80]	; (800b128 <_fflush_r+0x6c>)
 800b0d8:	429c      	cmp	r4, r3
 800b0da:	d11b      	bne.n	800b114 <_fflush_r+0x58>
 800b0dc:	686c      	ldr	r4, [r5, #4]
 800b0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0ef      	beq.n	800b0c6 <_fflush_r+0xa>
 800b0e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0e8:	07d0      	lsls	r0, r2, #31
 800b0ea:	d404      	bmi.n	800b0f6 <_fflush_r+0x3a>
 800b0ec:	0599      	lsls	r1, r3, #22
 800b0ee:	d402      	bmi.n	800b0f6 <_fflush_r+0x3a>
 800b0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0f2:	f000 f915 	bl	800b320 <__retarget_lock_acquire_recursive>
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	f7ff ff59 	bl	800afb0 <__sflush_r>
 800b0fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b100:	07da      	lsls	r2, r3, #31
 800b102:	4605      	mov	r5, r0
 800b104:	d4e0      	bmi.n	800b0c8 <_fflush_r+0xc>
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	059b      	lsls	r3, r3, #22
 800b10a:	d4dd      	bmi.n	800b0c8 <_fflush_r+0xc>
 800b10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b10e:	f000 f908 	bl	800b322 <__retarget_lock_release_recursive>
 800b112:	e7d9      	b.n	800b0c8 <_fflush_r+0xc>
 800b114:	4b05      	ldr	r3, [pc, #20]	; (800b12c <_fflush_r+0x70>)
 800b116:	429c      	cmp	r4, r3
 800b118:	d101      	bne.n	800b11e <_fflush_r+0x62>
 800b11a:	68ac      	ldr	r4, [r5, #8]
 800b11c:	e7df      	b.n	800b0de <_fflush_r+0x22>
 800b11e:	4b04      	ldr	r3, [pc, #16]	; (800b130 <_fflush_r+0x74>)
 800b120:	429c      	cmp	r4, r3
 800b122:	bf08      	it	eq
 800b124:	68ec      	ldreq	r4, [r5, #12]
 800b126:	e7da      	b.n	800b0de <_fflush_r+0x22>
 800b128:	0800baa4 	.word	0x0800baa4
 800b12c:	0800bac4 	.word	0x0800bac4
 800b130:	0800ba84 	.word	0x0800ba84

0800b134 <std>:
 800b134:	2300      	movs	r3, #0
 800b136:	b510      	push	{r4, lr}
 800b138:	4604      	mov	r4, r0
 800b13a:	e9c0 3300 	strd	r3, r3, [r0]
 800b13e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b142:	6083      	str	r3, [r0, #8]
 800b144:	8181      	strh	r1, [r0, #12]
 800b146:	6643      	str	r3, [r0, #100]	; 0x64
 800b148:	81c2      	strh	r2, [r0, #14]
 800b14a:	6183      	str	r3, [r0, #24]
 800b14c:	4619      	mov	r1, r3
 800b14e:	2208      	movs	r2, #8
 800b150:	305c      	adds	r0, #92	; 0x5c
 800b152:	f7fb fdcd 	bl	8006cf0 <memset>
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <std+0x38>)
 800b158:	6263      	str	r3, [r4, #36]	; 0x24
 800b15a:	4b05      	ldr	r3, [pc, #20]	; (800b170 <std+0x3c>)
 800b15c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <std+0x40>)
 800b160:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b162:	4b05      	ldr	r3, [pc, #20]	; (800b178 <std+0x44>)
 800b164:	6224      	str	r4, [r4, #32]
 800b166:	6323      	str	r3, [r4, #48]	; 0x30
 800b168:	bd10      	pop	{r4, pc}
 800b16a:	bf00      	nop
 800b16c:	0800b489 	.word	0x0800b489
 800b170:	0800b4ab 	.word	0x0800b4ab
 800b174:	0800b4e3 	.word	0x0800b4e3
 800b178:	0800b507 	.word	0x0800b507

0800b17c <_cleanup_r>:
 800b17c:	4901      	ldr	r1, [pc, #4]	; (800b184 <_cleanup_r+0x8>)
 800b17e:	f000 b8af 	b.w	800b2e0 <_fwalk_reent>
 800b182:	bf00      	nop
 800b184:	0800b0bd 	.word	0x0800b0bd

0800b188 <__sfmoreglue>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	2268      	movs	r2, #104	; 0x68
 800b18c:	1e4d      	subs	r5, r1, #1
 800b18e:	4355      	muls	r5, r2
 800b190:	460e      	mov	r6, r1
 800b192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b196:	f7ff fa59 	bl	800a64c <_malloc_r>
 800b19a:	4604      	mov	r4, r0
 800b19c:	b140      	cbz	r0, 800b1b0 <__sfmoreglue+0x28>
 800b19e:	2100      	movs	r1, #0
 800b1a0:	e9c0 1600 	strd	r1, r6, [r0]
 800b1a4:	300c      	adds	r0, #12
 800b1a6:	60a0      	str	r0, [r4, #8]
 800b1a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1ac:	f7fb fda0 	bl	8006cf0 <memset>
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	bd70      	pop	{r4, r5, r6, pc}

0800b1b4 <__sfp_lock_acquire>:
 800b1b4:	4801      	ldr	r0, [pc, #4]	; (800b1bc <__sfp_lock_acquire+0x8>)
 800b1b6:	f000 b8b3 	b.w	800b320 <__retarget_lock_acquire_recursive>
 800b1ba:	bf00      	nop
 800b1bc:	20000519 	.word	0x20000519

0800b1c0 <__sfp_lock_release>:
 800b1c0:	4801      	ldr	r0, [pc, #4]	; (800b1c8 <__sfp_lock_release+0x8>)
 800b1c2:	f000 b8ae 	b.w	800b322 <__retarget_lock_release_recursive>
 800b1c6:	bf00      	nop
 800b1c8:	20000519 	.word	0x20000519

0800b1cc <__sinit_lock_acquire>:
 800b1cc:	4801      	ldr	r0, [pc, #4]	; (800b1d4 <__sinit_lock_acquire+0x8>)
 800b1ce:	f000 b8a7 	b.w	800b320 <__retarget_lock_acquire_recursive>
 800b1d2:	bf00      	nop
 800b1d4:	2000051a 	.word	0x2000051a

0800b1d8 <__sinit_lock_release>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__sinit_lock_release+0x8>)
 800b1da:	f000 b8a2 	b.w	800b322 <__retarget_lock_release_recursive>
 800b1de:	bf00      	nop
 800b1e0:	2000051a 	.word	0x2000051a

0800b1e4 <__sinit>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	f7ff fff0 	bl	800b1cc <__sinit_lock_acquire>
 800b1ec:	69a3      	ldr	r3, [r4, #24]
 800b1ee:	b11b      	cbz	r3, 800b1f8 <__sinit+0x14>
 800b1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f4:	f7ff bff0 	b.w	800b1d8 <__sinit_lock_release>
 800b1f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1fc:	6523      	str	r3, [r4, #80]	; 0x50
 800b1fe:	4b13      	ldr	r3, [pc, #76]	; (800b24c <__sinit+0x68>)
 800b200:	4a13      	ldr	r2, [pc, #76]	; (800b250 <__sinit+0x6c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	62a2      	str	r2, [r4, #40]	; 0x28
 800b206:	42a3      	cmp	r3, r4
 800b208:	bf04      	itt	eq
 800b20a:	2301      	moveq	r3, #1
 800b20c:	61a3      	streq	r3, [r4, #24]
 800b20e:	4620      	mov	r0, r4
 800b210:	f000 f820 	bl	800b254 <__sfp>
 800b214:	6060      	str	r0, [r4, #4]
 800b216:	4620      	mov	r0, r4
 800b218:	f000 f81c 	bl	800b254 <__sfp>
 800b21c:	60a0      	str	r0, [r4, #8]
 800b21e:	4620      	mov	r0, r4
 800b220:	f000 f818 	bl	800b254 <__sfp>
 800b224:	2200      	movs	r2, #0
 800b226:	60e0      	str	r0, [r4, #12]
 800b228:	2104      	movs	r1, #4
 800b22a:	6860      	ldr	r0, [r4, #4]
 800b22c:	f7ff ff82 	bl	800b134 <std>
 800b230:	68a0      	ldr	r0, [r4, #8]
 800b232:	2201      	movs	r2, #1
 800b234:	2109      	movs	r1, #9
 800b236:	f7ff ff7d 	bl	800b134 <std>
 800b23a:	68e0      	ldr	r0, [r4, #12]
 800b23c:	2202      	movs	r2, #2
 800b23e:	2112      	movs	r1, #18
 800b240:	f7ff ff78 	bl	800b134 <std>
 800b244:	2301      	movs	r3, #1
 800b246:	61a3      	str	r3, [r4, #24]
 800b248:	e7d2      	b.n	800b1f0 <__sinit+0xc>
 800b24a:	bf00      	nop
 800b24c:	0800b640 	.word	0x0800b640
 800b250:	0800b17d 	.word	0x0800b17d

0800b254 <__sfp>:
 800b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b256:	4607      	mov	r7, r0
 800b258:	f7ff ffac 	bl	800b1b4 <__sfp_lock_acquire>
 800b25c:	4b1e      	ldr	r3, [pc, #120]	; (800b2d8 <__sfp+0x84>)
 800b25e:	681e      	ldr	r6, [r3, #0]
 800b260:	69b3      	ldr	r3, [r6, #24]
 800b262:	b913      	cbnz	r3, 800b26a <__sfp+0x16>
 800b264:	4630      	mov	r0, r6
 800b266:	f7ff ffbd 	bl	800b1e4 <__sinit>
 800b26a:	3648      	adds	r6, #72	; 0x48
 800b26c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b270:	3b01      	subs	r3, #1
 800b272:	d503      	bpl.n	800b27c <__sfp+0x28>
 800b274:	6833      	ldr	r3, [r6, #0]
 800b276:	b30b      	cbz	r3, 800b2bc <__sfp+0x68>
 800b278:	6836      	ldr	r6, [r6, #0]
 800b27a:	e7f7      	b.n	800b26c <__sfp+0x18>
 800b27c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b280:	b9d5      	cbnz	r5, 800b2b8 <__sfp+0x64>
 800b282:	4b16      	ldr	r3, [pc, #88]	; (800b2dc <__sfp+0x88>)
 800b284:	60e3      	str	r3, [r4, #12]
 800b286:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b28a:	6665      	str	r5, [r4, #100]	; 0x64
 800b28c:	f000 f847 	bl	800b31e <__retarget_lock_init_recursive>
 800b290:	f7ff ff96 	bl	800b1c0 <__sfp_lock_release>
 800b294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b29c:	6025      	str	r5, [r4, #0]
 800b29e:	61a5      	str	r5, [r4, #24]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2a8:	f7fb fd22 	bl	8006cf0 <memset>
 800b2ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b8:	3468      	adds	r4, #104	; 0x68
 800b2ba:	e7d9      	b.n	800b270 <__sfp+0x1c>
 800b2bc:	2104      	movs	r1, #4
 800b2be:	4638      	mov	r0, r7
 800b2c0:	f7ff ff62 	bl	800b188 <__sfmoreglue>
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	6030      	str	r0, [r6, #0]
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d1d5      	bne.n	800b278 <__sfp+0x24>
 800b2cc:	f7ff ff78 	bl	800b1c0 <__sfp_lock_release>
 800b2d0:	230c      	movs	r3, #12
 800b2d2:	603b      	str	r3, [r7, #0]
 800b2d4:	e7ee      	b.n	800b2b4 <__sfp+0x60>
 800b2d6:	bf00      	nop
 800b2d8:	0800b640 	.word	0x0800b640
 800b2dc:	ffff0001 	.word	0xffff0001

0800b2e0 <_fwalk_reent>:
 800b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e4:	4606      	mov	r6, r0
 800b2e6:	4688      	mov	r8, r1
 800b2e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2ec:	2700      	movs	r7, #0
 800b2ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b2f6:	d505      	bpl.n	800b304 <_fwalk_reent+0x24>
 800b2f8:	6824      	ldr	r4, [r4, #0]
 800b2fa:	2c00      	cmp	r4, #0
 800b2fc:	d1f7      	bne.n	800b2ee <_fwalk_reent+0xe>
 800b2fe:	4638      	mov	r0, r7
 800b300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b304:	89ab      	ldrh	r3, [r5, #12]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d907      	bls.n	800b31a <_fwalk_reent+0x3a>
 800b30a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b30e:	3301      	adds	r3, #1
 800b310:	d003      	beq.n	800b31a <_fwalk_reent+0x3a>
 800b312:	4629      	mov	r1, r5
 800b314:	4630      	mov	r0, r6
 800b316:	47c0      	blx	r8
 800b318:	4307      	orrs	r7, r0
 800b31a:	3568      	adds	r5, #104	; 0x68
 800b31c:	e7e9      	b.n	800b2f2 <_fwalk_reent+0x12>

0800b31e <__retarget_lock_init_recursive>:
 800b31e:	4770      	bx	lr

0800b320 <__retarget_lock_acquire_recursive>:
 800b320:	4770      	bx	lr

0800b322 <__retarget_lock_release_recursive>:
 800b322:	4770      	bx	lr

0800b324 <__swhatbuf_r>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	460e      	mov	r6, r1
 800b328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32c:	2900      	cmp	r1, #0
 800b32e:	b096      	sub	sp, #88	; 0x58
 800b330:	4614      	mov	r4, r2
 800b332:	461d      	mov	r5, r3
 800b334:	da08      	bge.n	800b348 <__swhatbuf_r+0x24>
 800b336:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	602a      	str	r2, [r5, #0]
 800b33e:	061a      	lsls	r2, r3, #24
 800b340:	d410      	bmi.n	800b364 <__swhatbuf_r+0x40>
 800b342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b346:	e00e      	b.n	800b366 <__swhatbuf_r+0x42>
 800b348:	466a      	mov	r2, sp
 800b34a:	f000 f903 	bl	800b554 <_fstat_r>
 800b34e:	2800      	cmp	r0, #0
 800b350:	dbf1      	blt.n	800b336 <__swhatbuf_r+0x12>
 800b352:	9a01      	ldr	r2, [sp, #4]
 800b354:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b358:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b35c:	425a      	negs	r2, r3
 800b35e:	415a      	adcs	r2, r3
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	e7ee      	b.n	800b342 <__swhatbuf_r+0x1e>
 800b364:	2340      	movs	r3, #64	; 0x40
 800b366:	2000      	movs	r0, #0
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	b016      	add	sp, #88	; 0x58
 800b36c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b370 <__smakebuf_r>:
 800b370:	898b      	ldrh	r3, [r1, #12]
 800b372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b374:	079d      	lsls	r5, r3, #30
 800b376:	4606      	mov	r6, r0
 800b378:	460c      	mov	r4, r1
 800b37a:	d507      	bpl.n	800b38c <__smakebuf_r+0x1c>
 800b37c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	6123      	str	r3, [r4, #16]
 800b384:	2301      	movs	r3, #1
 800b386:	6163      	str	r3, [r4, #20]
 800b388:	b002      	add	sp, #8
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	ab01      	add	r3, sp, #4
 800b38e:	466a      	mov	r2, sp
 800b390:	f7ff ffc8 	bl	800b324 <__swhatbuf_r>
 800b394:	9900      	ldr	r1, [sp, #0]
 800b396:	4605      	mov	r5, r0
 800b398:	4630      	mov	r0, r6
 800b39a:	f7ff f957 	bl	800a64c <_malloc_r>
 800b39e:	b948      	cbnz	r0, 800b3b4 <__smakebuf_r+0x44>
 800b3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a4:	059a      	lsls	r2, r3, #22
 800b3a6:	d4ef      	bmi.n	800b388 <__smakebuf_r+0x18>
 800b3a8:	f023 0303 	bic.w	r3, r3, #3
 800b3ac:	f043 0302 	orr.w	r3, r3, #2
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	e7e3      	b.n	800b37c <__smakebuf_r+0xc>
 800b3b4:	4b0d      	ldr	r3, [pc, #52]	; (800b3ec <__smakebuf_r+0x7c>)
 800b3b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	6020      	str	r0, [r4, #0]
 800b3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	9b00      	ldr	r3, [sp, #0]
 800b3c4:	6163      	str	r3, [r4, #20]
 800b3c6:	9b01      	ldr	r3, [sp, #4]
 800b3c8:	6120      	str	r0, [r4, #16]
 800b3ca:	b15b      	cbz	r3, 800b3e4 <__smakebuf_r+0x74>
 800b3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f000 f8d1 	bl	800b578 <_isatty_r>
 800b3d6:	b128      	cbz	r0, 800b3e4 <__smakebuf_r+0x74>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f023 0303 	bic.w	r3, r3, #3
 800b3de:	f043 0301 	orr.w	r3, r3, #1
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	89a0      	ldrh	r0, [r4, #12]
 800b3e6:	4305      	orrs	r5, r0
 800b3e8:	81a5      	strh	r5, [r4, #12]
 800b3ea:	e7cd      	b.n	800b388 <__smakebuf_r+0x18>
 800b3ec:	0800b17d 	.word	0x0800b17d

0800b3f0 <_malloc_usable_size_r>:
 800b3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f4:	1f18      	subs	r0, r3, #4
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	bfbc      	itt	lt
 800b3fa:	580b      	ldrlt	r3, [r1, r0]
 800b3fc:	18c0      	addlt	r0, r0, r3
 800b3fe:	4770      	bx	lr

0800b400 <_raise_r>:
 800b400:	291f      	cmp	r1, #31
 800b402:	b538      	push	{r3, r4, r5, lr}
 800b404:	4604      	mov	r4, r0
 800b406:	460d      	mov	r5, r1
 800b408:	d904      	bls.n	800b414 <_raise_r+0x14>
 800b40a:	2316      	movs	r3, #22
 800b40c:	6003      	str	r3, [r0, #0]
 800b40e:	f04f 30ff 	mov.w	r0, #4294967295
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b416:	b112      	cbz	r2, 800b41e <_raise_r+0x1e>
 800b418:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b41c:	b94b      	cbnz	r3, 800b432 <_raise_r+0x32>
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 f830 	bl	800b484 <_getpid_r>
 800b424:	462a      	mov	r2, r5
 800b426:	4601      	mov	r1, r0
 800b428:	4620      	mov	r0, r4
 800b42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b42e:	f000 b817 	b.w	800b460 <_kill_r>
 800b432:	2b01      	cmp	r3, #1
 800b434:	d00a      	beq.n	800b44c <_raise_r+0x4c>
 800b436:	1c59      	adds	r1, r3, #1
 800b438:	d103      	bne.n	800b442 <_raise_r+0x42>
 800b43a:	2316      	movs	r3, #22
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	2001      	movs	r0, #1
 800b440:	e7e7      	b.n	800b412 <_raise_r+0x12>
 800b442:	2400      	movs	r4, #0
 800b444:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b448:	4628      	mov	r0, r5
 800b44a:	4798      	blx	r3
 800b44c:	2000      	movs	r0, #0
 800b44e:	e7e0      	b.n	800b412 <_raise_r+0x12>

0800b450 <raise>:
 800b450:	4b02      	ldr	r3, [pc, #8]	; (800b45c <raise+0xc>)
 800b452:	4601      	mov	r1, r0
 800b454:	6818      	ldr	r0, [r3, #0]
 800b456:	f7ff bfd3 	b.w	800b400 <_raise_r>
 800b45a:	bf00      	nop
 800b45c:	2000000c 	.word	0x2000000c

0800b460 <_kill_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4d07      	ldr	r5, [pc, #28]	; (800b480 <_kill_r+0x20>)
 800b464:	2300      	movs	r3, #0
 800b466:	4604      	mov	r4, r0
 800b468:	4608      	mov	r0, r1
 800b46a:	4611      	mov	r1, r2
 800b46c:	602b      	str	r3, [r5, #0]
 800b46e:	f7f6 fc7b 	bl	8001d68 <_kill>
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	d102      	bne.n	800b47c <_kill_r+0x1c>
 800b476:	682b      	ldr	r3, [r5, #0]
 800b478:	b103      	cbz	r3, 800b47c <_kill_r+0x1c>
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	bd38      	pop	{r3, r4, r5, pc}
 800b47e:	bf00      	nop
 800b480:	20000514 	.word	0x20000514

0800b484 <_getpid_r>:
 800b484:	f7f6 bc68 	b.w	8001d58 <_getpid>

0800b488 <__sread>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	460c      	mov	r4, r1
 800b48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b490:	f000 f894 	bl	800b5bc <_read_r>
 800b494:	2800      	cmp	r0, #0
 800b496:	bfab      	itete	ge
 800b498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b49a:	89a3      	ldrhlt	r3, [r4, #12]
 800b49c:	181b      	addge	r3, r3, r0
 800b49e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4a2:	bfac      	ite	ge
 800b4a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4a6:	81a3      	strhlt	r3, [r4, #12]
 800b4a8:	bd10      	pop	{r4, pc}

0800b4aa <__swrite>:
 800b4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	461f      	mov	r7, r3
 800b4b0:	898b      	ldrh	r3, [r1, #12]
 800b4b2:	05db      	lsls	r3, r3, #23
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	4616      	mov	r6, r2
 800b4ba:	d505      	bpl.n	800b4c8 <__swrite+0x1e>
 800b4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f000 f868 	bl	800b598 <_lseek_r>
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4d2:	81a3      	strh	r3, [r4, #12]
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	4628      	mov	r0, r5
 800b4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4de:	f000 b817 	b.w	800b510 <_write_r>

0800b4e2 <__sseek>:
 800b4e2:	b510      	push	{r4, lr}
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ea:	f000 f855 	bl	800b598 <_lseek_r>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	bf15      	itete	ne
 800b4f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4fe:	81a3      	strheq	r3, [r4, #12]
 800b500:	bf18      	it	ne
 800b502:	81a3      	strhne	r3, [r4, #12]
 800b504:	bd10      	pop	{r4, pc}

0800b506 <__sclose>:
 800b506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b50a:	f000 b813 	b.w	800b534 <_close_r>
	...

0800b510 <_write_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d07      	ldr	r5, [pc, #28]	; (800b530 <_write_r+0x20>)
 800b514:	4604      	mov	r4, r0
 800b516:	4608      	mov	r0, r1
 800b518:	4611      	mov	r1, r2
 800b51a:	2200      	movs	r2, #0
 800b51c:	602a      	str	r2, [r5, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	f7f5 fd6a 	bl	8000ff8 <_write>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d102      	bne.n	800b52e <_write_r+0x1e>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	b103      	cbz	r3, 800b52e <_write_r+0x1e>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	20000514 	.word	0x20000514

0800b534 <_close_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d06      	ldr	r5, [pc, #24]	; (800b550 <_close_r+0x1c>)
 800b538:	2300      	movs	r3, #0
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	602b      	str	r3, [r5, #0]
 800b540:	f7f6 fc49 	bl	8001dd6 <_close>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_close_r+0x1a>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_close_r+0x1a>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	20000514 	.word	0x20000514

0800b554 <_fstat_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4d07      	ldr	r5, [pc, #28]	; (800b574 <_fstat_r+0x20>)
 800b558:	2300      	movs	r3, #0
 800b55a:	4604      	mov	r4, r0
 800b55c:	4608      	mov	r0, r1
 800b55e:	4611      	mov	r1, r2
 800b560:	602b      	str	r3, [r5, #0]
 800b562:	f7f6 fc44 	bl	8001dee <_fstat>
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	d102      	bne.n	800b570 <_fstat_r+0x1c>
 800b56a:	682b      	ldr	r3, [r5, #0]
 800b56c:	b103      	cbz	r3, 800b570 <_fstat_r+0x1c>
 800b56e:	6023      	str	r3, [r4, #0]
 800b570:	bd38      	pop	{r3, r4, r5, pc}
 800b572:	bf00      	nop
 800b574:	20000514 	.word	0x20000514

0800b578 <_isatty_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d06      	ldr	r5, [pc, #24]	; (800b594 <_isatty_r+0x1c>)
 800b57c:	2300      	movs	r3, #0
 800b57e:	4604      	mov	r4, r0
 800b580:	4608      	mov	r0, r1
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f7f6 fc43 	bl	8001e0e <_isatty>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_isatty_r+0x1a>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_isatty_r+0x1a>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	20000514 	.word	0x20000514

0800b598 <_lseek_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d07      	ldr	r5, [pc, #28]	; (800b5b8 <_lseek_r+0x20>)
 800b59c:	4604      	mov	r4, r0
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	602a      	str	r2, [r5, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f7f6 fc3c 	bl	8001e24 <_lseek>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_lseek_r+0x1e>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_lseek_r+0x1e>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	20000514 	.word	0x20000514

0800b5bc <_read_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d07      	ldr	r5, [pc, #28]	; (800b5dc <_read_r+0x20>)
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	602a      	str	r2, [r5, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f7f6 fbe6 	bl	8001d9c <_read>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_read_r+0x1e>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_read_r+0x1e>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	20000514 	.word	0x20000514

0800b5e0 <_init>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr

0800b5ec <_fini>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	bf00      	nop
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr
