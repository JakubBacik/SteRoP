
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800bfb0  0800bfb0  0001bfb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c340  0800c340  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c340  0800c340  0001c340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c348  0800c348  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c348  0800c348  0001c348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001dc  0800c52c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800c52c  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f5e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c64  00000000  00000000  0003916a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  0003bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e8  00000000  00000000  0003d410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ab00  00000000  00000000  0003e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000117ff  00000000  00000000  000693f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b5b6  00000000  00000000  0007abf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001861ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000728c  00000000  00000000  00186228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf94 	.word	0x0800bf94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800bf94 	.word	0x0800bf94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800103c:	b2db      	uxtb	r3, r3
 800103e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	480b      	ldr	r0, [pc, #44]	; (8001074 <BMP280_Read8+0x4c>)
 8001046:	f003 fae1 	bl	800460c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <BMP280_Read8+0x50>)
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	f107 020c 	add.w	r2, r7, #12
 8001052:	f107 010c 	add.w	r1, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2302      	movs	r3, #2
 800105c:	f004 fe8f 	bl	8005d7e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2102      	movs	r1, #2
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <BMP280_Read8+0x4c>)
 8001066:	f003 fad1 	bl	800460c <HAL_GPIO_WritePin>
	return tmp[1];
 800106a:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	48000800 	.word	0x48000800
 8001078:	20000228 	.word	0x20000228

0800107c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001090:	b2db      	uxtb	r3, r3
 8001092:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2102      	movs	r1, #2
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <BMP280_Read16+0x5c>)
 800109a:	f003 fab7 	bl	800460c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <BMP280_Read16+0x60>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	f107 020c 	add.w	r2, r7, #12
 80010a6:	f107 010c 	add.w	r1, r7, #12
 80010aa:	230a      	movs	r3, #10
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	f004 fe65 	bl	8005d7e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2102      	movs	r1, #2
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <BMP280_Read16+0x5c>)
 80010ba:	f003 faa7 	bl	800460c <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29b      	uxth	r3, r3
#endif
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	48000800 	.word	0x48000800
 80010dc:	20000228 	.word	0x20000228

080010e0 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffc5 	bl	800107c <BMP280_Read16>
 80010f2:	4603      	mov	r3, r0
 80010f4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21b      	sxth	r3, r3
 8001108:	b29b      	uxth	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800112e:	b2db      	uxtb	r3, r3
 8001130:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2102      	movs	r1, #2
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <BMP280_Write8+0x54>)
 800113c:	f003 fa66 	bl	800460c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <BMP280_Write8+0x58>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2302      	movs	r3, #2
 8001152:	f004 fe14 	bl	8005d7e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2102      	movs	r1, #2
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <BMP280_Write8+0x54>)
 800115c:	f003 fa56 	bl	800460c <HAL_GPIO_WritePin>
#endif
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	48000800 	.word	0x48000800
 800116c:	20000228 	.word	0x20000228

08001170 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001184:	b2db      	uxtb	r3, r3
 8001186:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2102      	movs	r1, #2
 800118c:	480e      	ldr	r0, [pc, #56]	; (80011c8 <BMP280_Read24+0x58>)
 800118e:	f003 fa3d 	bl	800460c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <BMP280_Read24+0x5c>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f107 020c 	add.w	r2, r7, #12
 800119a:	f107 010c 	add.w	r1, r7, #12
 800119e:	230a      	movs	r3, #10
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2303      	movs	r3, #3
 80011a4:	f004 fdeb 	bl	8005d7e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2102      	movs	r1, #2
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <BMP280_Read24+0x58>)
 80011ae:	f003 fa2d 	bl	800460c <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	4313      	orrs	r3, r2
#endif
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	48000800 	.word	0x48000800
 80011cc:	20000228 	.word	0x20000228

080011d0 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	4608      	mov	r0, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4603      	mov	r3, r0
 80011e0:	70fb      	strb	r3, [r7, #3]
 80011e2:	460b      	mov	r3, r1
 80011e4:	70bb      	strb	r3, [r7, #2]
 80011e6:	4613      	mov	r3, r2
 80011e8:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 80011ea:	4a4e      	ldr	r2, [pc, #312]	; (8001324 <BMP280_Init+0x154>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	484c      	ldr	r0, [pc, #304]	; (8001328 <BMP280_Init+0x158>)
 80011f6:	f003 fa09 	bl	800460c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80011fa:	2005      	movs	r0, #5
 80011fc:	f001 fb66 	bl	80028cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	4848      	ldr	r0, [pc, #288]	; (8001328 <BMP280_Init+0x158>)
 8001206:	f003 fa01 	bl	800460c <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 800120a:	787b      	ldrb	r3, [r7, #1]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d901      	bls.n	8001214 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8001210:	2303      	movs	r3, #3
 8001212:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001214:	4a45      	ldr	r2, [pc, #276]	; (800132c <BMP280_Init+0x15c>)
 8001216:	787b      	ldrb	r3, [r7, #1]
 8001218:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800121a:	787b      	ldrb	r3, [r7, #1]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8001220:	2300      	movs	r3, #0
 8001222:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d901      	bls.n	800122e <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800122a:	2305      	movs	r3, #5
 800122c:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <BMP280_Init+0x160>)
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	2b05      	cmp	r3, #5
 8001238:	d901      	bls.n	800123e <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800123a:	2305      	movs	r3, #5
 800123c:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 800123e:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <BMP280_Init+0x164>)
 8001240:	78bb      	ldrb	r3, [r7, #2]
 8001242:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001244:	bf00      	nop
 8001246:	20d0      	movs	r0, #208	; 0xd0
 8001248:	f7ff feee 	bl	8001028 <BMP280_Read8>
 800124c:	4603      	mov	r3, r0
 800124e:	2b58      	cmp	r3, #88	; 0x58
 8001250:	d1f9      	bne.n	8001246 <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001252:	2088      	movs	r0, #136	; 0x88
 8001254:	f7ff ff44 	bl	80010e0 <BMP280_Read16LE>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <BMP280_Init+0x168>)
 800125e:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001260:	208a      	movs	r0, #138	; 0x8a
 8001262:	f7ff ff3d 	bl	80010e0 <BMP280_Read16LE>
 8001266:	4603      	mov	r3, r0
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b34      	ldr	r3, [pc, #208]	; (800133c <BMP280_Init+0x16c>)
 800126c:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800126e:	208c      	movs	r0, #140	; 0x8c
 8001270:	f7ff ff36 	bl	80010e0 <BMP280_Read16LE>
 8001274:	4603      	mov	r3, r0
 8001276:	b21a      	sxth	r2, r3
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <BMP280_Init+0x170>)
 800127a:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800127c:	208e      	movs	r0, #142	; 0x8e
 800127e:	f7ff ff2f 	bl	80010e0 <BMP280_Read16LE>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <BMP280_Init+0x174>)
 8001288:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800128a:	2090      	movs	r0, #144	; 0x90
 800128c:	f7ff ff28 	bl	80010e0 <BMP280_Read16LE>
 8001290:	4603      	mov	r3, r0
 8001292:	b21a      	sxth	r2, r3
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <BMP280_Init+0x178>)
 8001296:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001298:	2092      	movs	r0, #146	; 0x92
 800129a:	f7ff ff21 	bl	80010e0 <BMP280_Read16LE>
 800129e:	4603      	mov	r3, r0
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <BMP280_Init+0x17c>)
 80012a4:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80012a6:	2094      	movs	r0, #148	; 0x94
 80012a8:	f7ff ff1a 	bl	80010e0 <BMP280_Read16LE>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <BMP280_Init+0x180>)
 80012b2:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80012b4:	2096      	movs	r0, #150	; 0x96
 80012b6:	f7ff ff13 	bl	80010e0 <BMP280_Read16LE>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b21a      	sxth	r2, r3
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <BMP280_Init+0x184>)
 80012c0:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80012c2:	2098      	movs	r0, #152	; 0x98
 80012c4:	f7ff ff0c 	bl	80010e0 <BMP280_Read16LE>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <BMP280_Init+0x188>)
 80012ce:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80012d0:	209a      	movs	r0, #154	; 0x9a
 80012d2:	f7ff ff05 	bl	80010e0 <BMP280_Read16LE>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <BMP280_Init+0x18c>)
 80012dc:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80012de:	209c      	movs	r0, #156	; 0x9c
 80012e0:	f7ff fefe 	bl	80010e0 <BMP280_Read16LE>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <BMP280_Init+0x190>)
 80012ea:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80012ec:	209e      	movs	r0, #158	; 0x9e
 80012ee:	f7ff fef7 	bl	80010e0 <BMP280_Read16LE>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <BMP280_Init+0x194>)
 80012f8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	015b      	lsls	r3, r3, #5
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	78bb      	ldrb	r3, [r7, #2]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	b25b      	sxtb	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b25a      	sxtb	r2, r3
 800130a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800130e:	4313      	orrs	r3, r2
 8001310:	b25b      	sxtb	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4619      	mov	r1, r3
 8001316:	20f4      	movs	r0, #244	; 0xf4
 8001318:	f7ff fefc 	bl	8001114 <BMP280_Write8>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000228 	.word	0x20000228
 8001328:	48000800 	.word	0x48000800
 800132c:	2000022f 	.word	0x2000022f
 8001330:	2000022e 	.word	0x2000022e
 8001334:	2000021a 	.word	0x2000021a
 8001338:	2000022c 	.word	0x2000022c
 800133c:	2000021c 	.word	0x2000021c
 8001340:	20000214 	.word	0x20000214
 8001344:	20000220 	.word	0x20000220
 8001348:	20000216 	.word	0x20000216
 800134c:	20000230 	.word	0x20000230
 8001350:	20000234 	.word	0x20000234
 8001354:	2000021e 	.word	0x2000021e
 8001358:	20000224 	.word	0x20000224
 800135c:	20000218 	.word	0x20000218
 8001360:	20000222 	.word	0x20000222
 8001364:	20000232 	.word	0x20000232

08001368 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <BMP280_ReadTemperature+0xfc>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d16d      	bne.n	8001452 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001376:	20f4      	movs	r0, #244	; 0xf4
 8001378:	f7ff fe56 	bl	8001028 <BMP280_Read8>
 800137c:	4603      	mov	r3, r0
 800137e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	f023 0303 	bic.w	r3, r3, #3
 8001386:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	4619      	mov	r1, r3
 8001394:	20f4      	movs	r0, #244	; 0xf4
 8001396:	f7ff febd 	bl	8001114 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800139a:	20f4      	movs	r0, #244	; 0xf4
 800139c:	f7ff fe44 	bl	8001028 <BMP280_Read8>
 80013a0:	4603      	mov	r3, r0
 80013a2:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80013ac:	7dbb      	ldrb	r3, [r7, #22]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d14f      	bne.n	8001452 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013b2:	20f4      	movs	r0, #244	; 0xf4
 80013b4:	f7ff fe38 	bl	8001028 <BMP280_Read8>
 80013b8:	4603      	mov	r3, r0
 80013ba:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80013bc:	7dbb      	ldrb	r3, [r7, #22]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80013c4:	7dbb      	ldrb	r3, [r7, #22]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d000      	beq.n	80013cc <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013ca:	e7f2      	b.n	80013b2 <BMP280_ReadTemperature+0x4a>
				  break;
 80013cc:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80013ce:	20fa      	movs	r0, #250	; 0xfa
 80013d0:	f7ff fece 	bl	8001170 <BMP280_Read24>
 80013d4:	4603      	mov	r3, r0
 80013d6:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	111b      	asrs	r3, r3, #4
 80013dc:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	10da      	asrs	r2, r3, #3
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <BMP280_ReadTemperature+0x100>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80013ea:	4a20      	ldr	r2, [pc, #128]	; (800146c <BMP280_ReadTemperature+0x104>)
 80013ec:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	12db      	asrs	r3, r3, #11
 80013f6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	111b      	asrs	r3, r3, #4
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <BMP280_ReadTemperature+0x100>)
 80013fe:	8812      	ldrh	r2, [r2, #0]
 8001400:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	1112      	asrs	r2, r2, #4
 8001406:	4918      	ldr	r1, [pc, #96]	; (8001468 <BMP280_ReadTemperature+0x100>)
 8001408:	8809      	ldrh	r1, [r1, #0]
 800140a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800140c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001410:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <BMP280_ReadTemperature+0x108>)
 8001414:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001418:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800141c:	139b      	asrs	r3, r3, #14
 800141e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4413      	add	r3, r2
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <BMP280_ReadTemperature+0x10c>)
 8001428:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <BMP280_ReadTemperature+0x10c>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3380      	adds	r3, #128	; 0x80
 8001436:	121b      	asrs	r3, r3, #8
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001444:	edd7 7a01 	vldr	s15, [r7, #4]
 8001448:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001478 <BMP280_ReadTemperature+0x110>
 800144c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001450:	e001      	b.n	8001456 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -1;
 8001452:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001456:	eef0 7a47 	vmov.f32	s15, s14
}
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000022f 	.word	0x2000022f
 8001468:	2000022c 	.word	0x2000022c
 800146c:	2000021c 	.word	0x2000021c
 8001470:	20000214 	.word	0x20000214
 8001474:	20000238 	.word	0x20000238
 8001478:	42c80000 	.word	0x42c80000

0800147c <BMP280_ReadPressure>:
	  return p;
}
#endif
#ifdef BMP280
int32_t BMP280_ReadPressure(void)
{
 800147c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001480:	b088      	sub	sp, #32
 8001482:	af00      	add	r7, sp, #0
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  BMP280_ReadTemperature();
 8001484:	f7ff ff70 	bl	8001368 <BMP280_ReadTemperature>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001488:	20f7      	movs	r0, #247	; 0xf7
 800148a:	f7ff fe71 	bl	8001170 <BMP280_Read24>
 800148e:	4603      	mov	r3, r0
 8001490:	61fb      	str	r3, [r7, #28]
	  adc_P >>= 4;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	111b      	asrs	r3, r3, #4
 8001496:	61fb      	str	r3, [r7, #28]

	  var1 = ((int64_t)t_fine) - 128000;
 8001498:	4b64      	ldr	r3, [pc, #400]	; (800162c <BMP280_ReadPressure+0x1b0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014a2:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80014a6:	f142 34ff 	adc.w	r4, r2, #4294967295
 80014aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var1 * var1 * (int64_t)p6;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	fb02 f203 	mul.w	r2, r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	6939      	ldr	r1, [r7, #16]
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	441a      	add	r2, r3
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fba1 3403 	umull	r3, r4, r1, r3
 80014c8:	4422      	add	r2, r4
 80014ca:	4614      	mov	r4, r2
 80014cc:	4a58      	ldr	r2, [pc, #352]	; (8001630 <BMP280_ReadPressure+0x1b4>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	b211      	sxth	r1, r2
 80014d4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014d8:	fb01 f504 	mul.w	r5, r1, r4
 80014dc:	fb03 f002 	mul.w	r0, r3, r2
 80014e0:	4428      	add	r0, r5
 80014e2:	fba3 3401 	umull	r3, r4, r3, r1
 80014e6:	1902      	adds	r2, r0, r4
 80014e8:	4614      	mov	r4, r2
 80014ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80014ee:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <BMP280_ReadPressure+0x1b8>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	fb04 f102 	mul.w	r1, r4, r2
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	fb03 f202 	mul.w	r2, r3, r2
 800150a:	1888      	adds	r0, r1, r2
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	fba2 1203 	umull	r1, r2, r2, r3
 8001512:	1883      	adds	r3, r0, r2
 8001514:	461a      	mov	r2, r3
 8001516:	f04f 0500 	mov.w	r5, #0
 800151a:	f04f 0600 	mov.w	r6, #0
 800151e:	0456      	lsls	r6, r2, #17
 8001520:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001524:	044d      	lsls	r5, r1, #17
 8001526:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800152a:	186b      	adds	r3, r5, r1
 800152c:	eb46 0402 	adc.w	r4, r6, r2
 8001530:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var2 = var2 + (((int64_t)p4)<<35);
 8001534:	4b40      	ldr	r3, [pc, #256]	; (8001638 <BMP280_ReadPressure+0x1bc>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	b219      	sxth	r1, r3
 800153c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001540:	f04f 0500 	mov.w	r5, #0
 8001544:	f04f 0600 	mov.w	r6, #0
 8001548:	00ce      	lsls	r6, r1, #3
 800154a:	2500      	movs	r5, #0
 800154c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001550:	186b      	adds	r3, r5, r1
 8001552:	eb46 0402 	adc.w	r4, r6, r2
 8001556:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	fb02 f203 	mul.w	r2, r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	6939      	ldr	r1, [r7, #16]
 8001566:	fb01 f303 	mul.w	r3, r1, r3
 800156a:	441a      	add	r2, r3
 800156c:	6939      	ldr	r1, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	fba1 3403 	umull	r3, r4, r1, r3
 8001574:	4422      	add	r2, r4
 8001576:	4614      	mov	r4, r2
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <BMP280_ReadPressure+0x1c0>)
 800157a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800157e:	b211      	sxth	r1, r2
 8001580:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001584:	fb01 f504 	mul.w	r5, r1, r4
 8001588:	fb03 f002 	mul.w	r0, r3, r2
 800158c:	4428      	add	r0, r5
 800158e:	fba3 3401 	umull	r3, r4, r3, r1
 8001592:	1902      	adds	r2, r0, r4
 8001594:	4614      	mov	r4, r2
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	0a19      	lsrs	r1, r3, #8
 80015a0:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80015a4:	1222      	asrs	r2, r4, #8
	    ((var1 * (int64_t)p2)<<12);
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <BMP280_ReadPressure+0x1c4>)
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015b2:	6938      	ldr	r0, [r7, #16]
 80015b4:	fb04 f500 	mul.w	r5, r4, r0
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	fb03 f000 	mul.w	r0, r3, r0
 80015be:	4428      	add	r0, r5
 80015c0:	693d      	ldr	r5, [r7, #16]
 80015c2:	fba5 5603 	umull	r5, r6, r5, r3
 80015c6:	1983      	adds	r3, r0, r6
 80015c8:	461e      	mov	r6, r3
 80015ca:	f04f 0b00 	mov.w	fp, #0
 80015ce:	f04f 0c00 	mov.w	ip, #0
 80015d2:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80015d6:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80015da:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80015de:	eb1b 0301 	adds.w	r3, fp, r1
 80015e2:	eb4c 0402 	adc.w	r4, ip, r2
 80015e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80015ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015ee:	1c19      	adds	r1, r3, #0
 80015f0:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <BMP280_ReadPressure+0x1c8>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f04f 0400 	mov.w	r4, #0
 80015fe:	fb03 f502 	mul.w	r5, r3, r2
 8001602:	fb01 f004 	mul.w	r0, r1, r4
 8001606:	4428      	add	r0, r5
 8001608:	fba1 3403 	umull	r3, r4, r1, r3
 800160c:	1902      	adds	r2, r0, r4
 800160e:	4614      	mov	r4, r2
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	1061      	asrs	r1, r4, #1
 800161a:	17e2      	asrs	r2, r4, #31
 800161c:	e9c7 1204 	strd	r1, r2, [r7, #16]

	  if (var1 == 0) {
 8001620:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001624:	4323      	orrs	r3, r4
 8001626:	d10f      	bne.n	8001648 <BMP280_ReadPressure+0x1cc>
	    return 0;  // avoid exception caused by division by zero
 8001628:	2300      	movs	r3, #0
 800162a:	e0e6      	b.n	80017fa <BMP280_ReadPressure+0x37e>
 800162c:	20000238 	.word	0x20000238
 8001630:	20000224 	.word	0x20000224
 8001634:	2000021e 	.word	0x2000021e
 8001638:	20000234 	.word	0x20000234
 800163c:	20000230 	.word	0x20000230
 8001640:	20000216 	.word	0x20000216
 8001644:	20000220 	.word	0x20000220
	  }
	  p = 1048576 - adc_P;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800164e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001652:	e9c7 3400 	strd	r3, r4, [r7]
	  p = (((p<<31) - var2)*3125) / var1;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	ea4f 0963 	mov.w	r9, r3, asr #1
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001662:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001666:	4645      	mov	r5, r8
 8001668:	464e      	mov	r6, r9
 800166a:	1aed      	subs	r5, r5, r3
 800166c:	eb66 0604 	sbc.w	r6, r6, r4
 8001670:	46a8      	mov	r8, r5
 8001672:	46b1      	mov	r9, r6
 8001674:	eb18 0308 	adds.w	r3, r8, r8
 8001678:	eb49 0409 	adc.w	r4, r9, r9
 800167c:	4698      	mov	r8, r3
 800167e:	46a1      	mov	r9, r4
 8001680:	eb18 0805 	adds.w	r8, r8, r5
 8001684:	eb49 0906 	adc.w	r9, r9, r6
 8001688:	f04f 0100 	mov.w	r1, #0
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001694:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001698:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800169c:	eb18 0801 	adds.w	r8, r8, r1
 80016a0:	eb49 0902 	adc.w	r9, r9, r2
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016b0:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016b4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016b8:	4688      	mov	r8, r1
 80016ba:	4691      	mov	r9, r2
 80016bc:	eb18 0805 	adds.w	r8, r8, r5
 80016c0:	eb49 0906 	adc.w	r9, r9, r6
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016d0:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016d4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016d8:	4688      	mov	r8, r1
 80016da:	4691      	mov	r9, r2
 80016dc:	eb18 0005 	adds.w	r0, r8, r5
 80016e0:	eb49 0106 	adc.w	r1, r9, r6
 80016e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016e8:	f7ff face 	bl	8000c88 <__aeabi_ldivmod>
 80016ec:	4603      	mov	r3, r0
 80016ee:	460c      	mov	r4, r1
 80016f0:	e9c7 3400 	strd	r3, r4, [r7]
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <BMP280_ReadPressure+0x388>)
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	b219      	sxth	r1, r3
 80016fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001700:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f04f 0400 	mov.w	r4, #0
 800170c:	0b6b      	lsrs	r3, r5, #13
 800170e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001712:	1374      	asrs	r4, r6, #13
 8001714:	fb03 f502 	mul.w	r5, r3, r2
 8001718:	fb01 f004 	mul.w	r0, r1, r4
 800171c:	4428      	add	r0, r5
 800171e:	fba1 1203 	umull	r1, r2, r1, r3
 8001722:	1883      	adds	r3, r0, r2
 8001724:	461a      	mov	r2, r3
 8001726:	e9d7 5600 	ldrd	r5, r6, [r7]
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	f04f 0400 	mov.w	r4, #0
 8001732:	0b6b      	lsrs	r3, r5, #13
 8001734:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001738:	1374      	asrs	r4, r6, #13
 800173a:	fb03 f502 	mul.w	r5, r3, r2
 800173e:	fb01 f004 	mul.w	r0, r1, r4
 8001742:	4428      	add	r0, r5
 8001744:	fba1 1203 	umull	r1, r2, r1, r3
 8001748:	1883      	adds	r3, r0, r2
 800174a:	461a      	mov	r2, r3
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	0e4b      	lsrs	r3, r1, #25
 8001756:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800175a:	1654      	asrs	r4, r2, #25
 800175c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = (((int64_t)p8) * p) >> 19;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <BMP280_ReadPressure+0x38c>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b21b      	sxth	r3, r3
 8001768:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	fb04 f102 	mul.w	r1, r4, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	fb03 f202 	mul.w	r2, r3, r2
 8001778:	1888      	adds	r0, r1, r2
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	fba2 1203 	umull	r1, r2, r2, r3
 8001780:	1883      	adds	r3, r0, r2
 8001782:	461a      	mov	r2, r3
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	f04f 0400 	mov.w	r4, #0
 800178c:	0ccb      	lsrs	r3, r1, #19
 800178e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001792:	14d4      	asrs	r4, r2, #19
 8001794:	e9c7 3402 	strd	r3, r4, [r7, #8]

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001798:	e9d7 1200 	ldrd	r1, r2, [r7]
 800179c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80017a0:	eb11 0803 	adds.w	r8, r1, r3
 80017a4:	eb42 0904 	adc.w	r9, r2, r4
 80017a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017ac:	eb13 0508 	adds.w	r5, r3, r8
 80017b0:	eb44 0609 	adc.w	r6, r4, r9
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	0a29      	lsrs	r1, r5, #8
 80017be:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80017c2:	1232      	asrs	r2, r6, #8
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <BMP280_ReadPressure+0x390>)
 80017c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ca:	b21d      	sxth	r5, r3
 80017cc:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80017d0:	f04f 0800 	mov.w	r8, #0
 80017d4:	f04f 0900 	mov.w	r9, #0
 80017d8:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80017dc:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80017e0:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80017e4:	eb18 0301 	adds.w	r3, r8, r1
 80017e8:	eb49 0402 	adc.w	r4, r9, r2
 80017ec:	e9c7 3400 	strd	r3, r4, [r7]
	  return (int32_t)p/256;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da00      	bge.n	80017f8 <BMP280_ReadPressure+0x37c>
 80017f6:	33ff      	adds	r3, #255	; 0xff
 80017f8:	121b      	asrs	r3, r3, #8
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8001804:	20000232 	.word	0x20000232
 8001808:	20000222 	.word	0x20000222
 800180c:	20000218 	.word	0x20000218

08001810 <_write>:

/*Funkcja printf wywołuje funckje _write która jest funkcją
 *z atrybutem weak w bibliotece stdio.h, co powoduje że można
 *ją zastąpić własną implementacją, która służy do komunikacji
 *za pomocą UART.*/
int _write ( int file , char *ptr , int len ) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2 , (uint8_t*)ptr , len , 50) ;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	b29a      	uxth	r2, r3
 8001820:	2332      	movs	r3, #50	; 0x32
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <_write+0x24>)
 8001826:	f005 fb71 	bl	8006f0c <HAL_UART_Transmit>
	return len;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200004c0 	.word	0x200004c0

08001838 <delay_us>:
/*Funkcja odpowiedzialna za generowanie opóżnień które
 * służa w komunikacji z czujnikiem DHT11. Ustawia timer
 * na wartosć 0 po czym sprawdza czy wartość timera
 * jest większa niż oczekiwane opóżnienie*/
void delay_us (uint16_t us)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <delay_us+0x2c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 800184a:	bf00      	nop
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <delay_us+0x2c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	429a      	cmp	r2, r3
 8001856:	d3f9      	bcc.n	800184c <delay_us+0x14>
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	200002f0 	.word	0x200002f0

08001868 <Set_Pin_Output>:

/* Funkcja odpowiedzialna za ustawienie danego pinu
* jako wyjście. */
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f002 fcf8 	bl	800428c <HAL_GPIO_Init>
}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <Set_Pin_Input>:

/*
 * Funkcja odpowiedzialna za ustawienie pinu jako wejście*/
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4619      	mov	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f002 fcda 	bl	800428c <HAL_GPIO_Init>
}
 80018d8:	bf00      	nop
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DHT11_Start>:
 * DHT11 jako wyjście i ustawienie stanu niskiego
 * który będzie trwał 18 ms, następnie pin
 * konfigurowany jest jako wejście, aby odczytać
 * odpowiedź czujnika.*/
void DHT11_Start (void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80018e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <DHT11_Start+0x30>)
 80018ea:	f7ff ffbd 	bl	8001868 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <DHT11_Start+0x30>)
 80018f6:	f002 fe89 	bl	800460c <HAL_GPIO_WritePin>
	 delay_us(18000);  // wait for 18ms
 80018fa:	f244 6050 	movw	r0, #18000	; 0x4650
 80018fe:	f7ff ff9b 	bl	8001838 <delay_us>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001906:	4802      	ldr	r0, [pc, #8]	; (8001910 <DHT11_Start+0x30>)
 8001908:	f7ff ffcc 	bl	80018a4 <Set_Pin_Input>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	48000800 	.word	0x48000800

08001914 <Check_Response>:
 * po 80 ms sprawdza się czy stan jest wysoki.
 * Oczekiwanie na stan niski co powoduje
 * początek wysłania danych.
 * */
uint8_t Check_Response (void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	71fb      	strb	r3, [r7, #7]
	 delay_us(40);
 800191e:	2028      	movs	r0, #40	; 0x28
 8001920:	f7ff ff8a 	bl	8001838 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001928:	4811      	ldr	r0, [pc, #68]	; (8001970 <Check_Response+0x5c>)
 800192a:	f002 fe57 	bl	80045dc <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10f      	bne.n	8001954 <Check_Response+0x40>
	{
		 delay_us(80);
 8001934:	2050      	movs	r0, #80	; 0x50
 8001936:	f7ff ff7f 	bl	8001838 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 800193a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <Check_Response+0x5c>)
 8001940:	f002 fe4c 	bl	80045dc <HAL_GPIO_ReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <Check_Response+0x3c>
 800194a:	2301      	movs	r3, #1
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	e001      	b.n	8001954 <Check_Response+0x40>
		else Response = -1;
 8001950:	23ff      	movs	r3, #255	; 0xff
 8001952:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001954:	bf00      	nop
 8001956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <Check_Response+0x5c>)
 800195c:	f002 fe3e 	bl	80045dc <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f7      	bne.n	8001956 <Check_Response+0x42>

	return Response;
 8001966:	79fb      	ldrb	r3, [r7, #7]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	48000800 	.word	0x48000800

08001974 <DHT11_Read>:
 * Jeśli czas trwania stanu wysokiego wynosi 26-28 us
 * oznacza logiczne zero, natomiast jeżeli 40 s oznacza
 * logiczną jednykę.
 * */
uint8_t DHT11_Read (void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800197a:	2300      	movs	r3, #0
 800197c:	71bb      	strb	r3, [r7, #6]
 800197e:	e03a      	b.n	80019f6 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001980:	bf00      	nop
 8001982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001986:	4820      	ldr	r0, [pc, #128]	; (8001a08 <DHT11_Read+0x94>)
 8001988:	f002 fe28 	bl	80045dc <HAL_GPIO_ReadPin>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f7      	beq.n	8001982 <DHT11_Read+0xe>
		delay_us(40);   // wait for 40 us
 8001992:	2028      	movs	r0, #40	; 0x28
 8001994:	f7ff ff50 	bl	8001838 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800199c:	481a      	ldr	r0, [pc, #104]	; (8001a08 <DHT11_Read+0x94>)
 800199e:	f002 fe1d 	bl	80045dc <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10e      	bne.n	80019c6 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80019a8:	79bb      	ldrb	r3, [r7, #6]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2201      	movs	r2, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	4013      	ands	r3, r2
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	e00b      	b.n	80019de <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	f1c3 0307 	rsb	r3, r3, #7
 80019cc:	2201      	movs	r2, #1
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	b25a      	sxtb	r2, r3
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4313      	orrs	r3, r2
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80019de:	bf00      	nop
 80019e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <DHT11_Read+0x94>)
 80019e6:	f002 fdf9 	bl	80045dc <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f7      	bne.n	80019e0 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	3301      	adds	r3, #1
 80019f4:	71bb      	strb	r3, [r7, #6]
 80019f6:	79bb      	ldrb	r3, [r7, #6]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d9c1      	bls.n	8001980 <DHT11_Read+0xc>
	}
	return i;
 80019fc:	79fb      	ldrb	r3, [r7, #7]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	48000800 	.word	0x48000800

08001a0c <HAL_TIM_PeriodElapsedCallback>:

/*Wywolanie przerwania, spawdzane jest czy przerwanie wywołał
 * timer2.*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d102      	bne.n	8001a24 <HAL_TIM_PeriodElapsedCallback+0x18>
		FlagInterruption = 1;
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
	}
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000204 	.word	0x20000204

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a3a:	f000 fecb 	bl	80027d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3e:	f000 f8cf 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a42:	f000 fb2f 	bl	80020a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a46:	f000 fad7 	bl	8001ff8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a4a:	f000 f953 	bl	8001cf4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001a4e:	f000 f9c9 	bl	8001de4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001a52:	f000 faa1 	bl	8001f98 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001a56:	f000 faff 	bl	8002058 <MX_DMA_Init>
  MX_TIM3_Init();
 8001a5a:	f000 fa4f 	bl	8001efc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a5e:	f000 f9ff 	bl	8001e60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001a62:	217f      	movs	r1, #127	; 0x7f
 8001a64:	484a      	ldr	r0, [pc, #296]	; (8001b90 <main+0x15c>)
 8001a66:	f002 f84a 	bl	8003afe <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001a6a:	4849      	ldr	r0, [pc, #292]	; (8001b90 <main+0x15c>)
 8001a6c:	f001 fa8c 	bl	8002f88 <HAL_ADC_Start>

  HAL_TIM_Base_Start(&htim3);
 8001a70:	4848      	ldr	r0, [pc, #288]	; (8001b94 <main+0x160>)
 8001a72:	f004 fd4b 	bl	800650c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a76:	4848      	ldr	r0, [pc, #288]	; (8001b98 <main+0x164>)
 8001a78:	f004 fdb0 	bl	80065dc <HAL_TIM_Base_Start_IT>


  BMP280_Init(&hspi2, BMP280_TEMPERATURE_16BIT, BMP280_ULTRAHIGHRES, BMP280_NORMALMODE);
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	2205      	movs	r2, #5
 8001a80:	2101      	movs	r1, #1
 8001a82:	4846      	ldr	r0, [pc, #280]	; (8001b9c <main+0x168>)
 8001a84:	f7ff fba4 	bl	80011d0 <BMP280_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(FlagInterruption == 1){
 8001a88:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <main+0x16c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d1fb      	bne.n	8001a88 <main+0x54>

	  	uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8001a90:	483f      	ldr	r0, [pc, #252]	; (8001b90 <main+0x15c>)
 8001a92:	f001 fb33 	bl	80030fc <HAL_ADC_GetValue>
 8001a96:	6078      	str	r0, [r7, #4]
	  	float temp = adc_value * 330.0f / 4096.0f;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ba4 <main+0x170>
 8001aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aaa:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001ba8 <main+0x174>
 8001aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab2:	edc7 7a00 	vstr	s15, [r7]

	  	DHT11_Start();
 8001ab6:	f7ff ff13 	bl	80018e0 <DHT11_Start>
	  	Presence=Check_Response();
 8001aba:	f7ff ff2b 	bl	8001914 <Check_Response>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <main+0x178>)
 8001ac4:	701a      	strb	r2, [r3, #0]
	  	RH_byte1=DHT11_Read();
 8001ac6:	f7ff ff55 	bl	8001974 <DHT11_Read>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <main+0x17c>)
 8001ad0:	701a      	strb	r2, [r3, #0]
	  	RH_byte2=DHT11_Read();
 8001ad2:	f7ff ff4f 	bl	8001974 <DHT11_Read>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <main+0x180>)
 8001adc:	701a      	strb	r2, [r3, #0]
	  	Temp_byte1=DHT11_Read();
 8001ade:	f7ff ff49 	bl	8001974 <DHT11_Read>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <main+0x184>)
 8001ae8:	701a      	strb	r2, [r3, #0]
	  	Temp_byte2=DHT11_Read();
 8001aea:	f7ff ff43 	bl	8001974 <DHT11_Read>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <main+0x188>)
 8001af4:	701a      	strb	r2, [r3, #0]
	  	SUM=DHT11_Read();
 8001af6:	f7ff ff3d 	bl	8001974 <DHT11_Read>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <main+0x18c>)
 8001b00:	801a      	strh	r2, [r3, #0]

	  	Te=Temp_byte1;
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <main+0x184>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <main+0x190>)
 8001b0a:	801a      	strh	r2, [r3, #0]
	  	RH=RH_byte1;
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <main+0x17c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <main+0x194>)
 8001b14:	801a      	strh	r2, [r3, #0]
	  	Temperature= (float) Te;
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <main+0x190>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <main+0x198>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
	  	Humidity=(float) RH;
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <main+0x194>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <main+0x19c>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]



	  	HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <main+0x1a0>)
 8001b40:	f002 fd64 	bl	800460c <HAL_GPIO_WritePin>
	    pressure = BMP280_ReadPressure();
 8001b44:	f7ff fc9a 	bl	800147c <BMP280_ReadPressure>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <main+0x1a4>)
 8001b4c:	601a      	str	r2, [r3, #0]
	  	HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2102      	movs	r1, #2
 8001b52:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <main+0x1a0>)
 8001b54:	f002 fd5a 	bl	800460c <HAL_GPIO_WritePin>




	  	printf("!, T = %.1f C, RH = %.0f, P= %4d Pa \r\n", adc_value, temp, Humidity,  pressure);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7fe fcf5 	bl	8000548 <__aeabi_f2d>
 8001b5e:	4605      	mov	r5, r0
 8001b60:	460e      	mov	r6, r1
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <main+0x19c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcee 	bl	8000548 <__aeabi_f2d>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <main+0x1a4>)
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	9202      	str	r2, [sp, #8]
 8001b76:	e9cd 3400 	strd	r3, r4, [sp]
 8001b7a:	462a      	mov	r2, r5
 8001b7c:	4633      	mov	r3, r6
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4816      	ldr	r0, [pc, #88]	; (8001bdc <main+0x1a8>)
 8001b82:	f006 fe69 	bl	8008858 <iprintf>

	  	FlagInterruption = 0;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <main+0x16c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
	  if(FlagInterruption == 1){
 8001b8c:	e77c      	b.n	8001a88 <main+0x54>
 8001b8e:	bf00      	nop
 8001b90:	20000340 	.word	0x20000340
 8001b94:	200002f0 	.word	0x200002f0
 8001b98:	20000474 	.word	0x20000474
 8001b9c:	20000284 	.word	0x20000284
 8001ba0:	20000204 	.word	0x20000204
 8001ba4:	43a50000 	.word	0x43a50000
 8001ba8:	45800000 	.word	0x45800000
 8001bac:	20000200 	.word	0x20000200
 8001bb0:	20000540 	.word	0x20000540
 8001bb4:	20000545 	.word	0x20000545
 8001bb8:	20000470 	.word	0x20000470
 8001bbc:	20000544 	.word	0x20000544
 8001bc0:	20000542 	.word	0x20000542
 8001bc4:	20000472 	.word	0x20000472
 8001bc8:	200002e8 	.word	0x200002e8
 8001bcc:	200001f8 	.word	0x200001f8
 8001bd0:	200001fc 	.word	0x200001fc
 8001bd4:	48000800 	.word	0x48000800
 8001bd8:	2000033c 	.word	0x2000033c
 8001bdc:	0800bfb0 	.word	0x0800bfb0

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0b8      	sub	sp, #224	; 0xe0
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bea:	2244      	movs	r2, #68	; 0x44
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f005 ffec 	bl	8007bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	463b      	mov	r3, r7
 8001c06:	2288      	movs	r2, #136	; 0x88
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 ffde 	bl	8007bcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c10:	2302      	movs	r3, #2
 8001c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c1e:	2310      	movs	r3, #16
 8001c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c36:	230a      	movs	r3, #10
 8001c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 fd56 	bl	8004704 <HAL_RCC_OscConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c5e:	f000 fa9d 	bl	800219c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c62:	230f      	movs	r3, #15
 8001c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c84:	2104      	movs	r1, #4
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 f922 	bl	8004ed0 <HAL_RCC_ClockConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001c92:	f000 fa83 	bl	800219c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001c96:	f244 0303 	movw	r3, #16387	; 0x4003
 8001c9a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ca4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ca8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001caa:	2302      	movs	r3, #2
 8001cac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fb04 	bl	80052d8 <HAL_RCCEx_PeriphCLKConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001cd6:	f000 fa61 	bl	800219c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cde:	f002 fcbb 	bl	8004658 <HAL_PWREx_ControlVoltageScaling>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001ce8:	f000 fa58 	bl	800219c <Error_Handler>
  }
}
 8001cec:	bf00      	nop
 8001cee:	37e0      	adds	r7, #224	; 0xe0
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d16:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d18:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <MX_ADC1_Init+0xe8>)
 8001d1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d36:	2204      	movs	r2, #4
 8001d38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d3a:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d78:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d7a:	f000 ffb1 	bl	8002ce0 <HAL_ADC_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001d84:	f000 fa0a 	bl	800219c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001d94:	f001 ff14 	bl	8003bc0 <HAL_ADCEx_MultiModeConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001d9e:	f000 f9fd 	bl	800219c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_ADC1_Init+0xec>)
 8001da4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001da6:	2306      	movs	r3, #6
 8001da8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001daa:	2307      	movs	r3, #7
 8001dac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dae:	237f      	movs	r3, #127	; 0x7f
 8001db0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001db2:	2304      	movs	r3, #4
 8001db4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <MX_ADC1_Init+0xe4>)
 8001dc0:	f001 f9aa 	bl	8003118 <HAL_ADC_ConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001dca:	f000 f9e7 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000340 	.word	0x20000340
 8001ddc:	50040000 	.word	0x50040000
 8001de0:	04300002 	.word	0x04300002

08001de4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <MX_SPI2_Init+0x78>)
 8001dec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001dfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e1a:	2218      	movs	r2, #24
 8001e1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e32:	2207      	movs	r2, #7
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e3e:	2208      	movs	r2, #8
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_SPI2_Init+0x74>)
 8001e44:	f003 fef8 	bl	8005c38 <HAL_SPI_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e4e:	f000 f9a5 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000284 	.word	0x20000284
 8001e5c:	40003800 	.word	0x40003800

08001e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001e88:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001e8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001e96:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ea8:	4813      	ldr	r0, [pc, #76]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001eaa:	f004 fad7 	bl	800645c <HAL_TIM_Base_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001eb4:	f000 f972 	bl	800219c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ebe:	f107 0310 	add.w	r3, r7, #16
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001ec6:	f004 fd18 	bl	80068fa <HAL_TIM_ConfigClockSource>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ed0:	f000 f964 	bl	800219c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_TIM2_Init+0x98>)
 8001ee2:	f004 ff1f 	bl	8006d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001eec:	f000 f956 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000474 	.word	0x20000474

08001efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <MX_TIM3_Init+0x98>)
 8001f1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f22:	224f      	movs	r2, #79	; 0x4f
 8001f24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f40:	4813      	ldr	r0, [pc, #76]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f42:	f004 fa8b 	bl	800645c <HAL_TIM_Base_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f4c:	f000 f926 	bl	800219c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f5e:	f004 fccc 	bl	80068fa <HAL_TIM_ConfigClockSource>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f68:	f000 f918 	bl	800219c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_TIM3_Init+0x94>)
 8001f7a:	f004 fed3 	bl	8006d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f84:	f000 f90a 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200002f0 	.word	0x200002f0
 8001f94:	40000400 	.word	0x40000400

08001f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <MX_USART1_UART_Init+0x5c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART1_UART_Init+0x58>)
 8001fdc:	f004 ff48 	bl	8006e70 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fe6:	f000 f8d9 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200003f0 	.word	0x200003f0
 8001ff4:	40013800 	.word	0x40013800

08001ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <MX_USART2_UART_Init+0x5c>)
 8002000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800203c:	f004 ff18 	bl	8006e70 <HAL_UART_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002046:	f000 f8a9 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200004c0 	.word	0x200004c0
 8002054:	40004400 	.word	0x40004400

08002058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <MX_DMA_Init+0x48>)
 8002060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002062:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <MX_DMA_Init+0x48>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6493      	str	r3, [r2, #72]	; 0x48
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <MX_DMA_Init+0x48>)
 800206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2010      	movs	r0, #16
 800207c:	f001 ff27 	bl	8003ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002080:	2010      	movs	r0, #16
 8002082:	f001 ff40 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2011      	movs	r0, #17
 800208c:	f001 ff1f 	bl	8003ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002090:	2011      	movs	r0, #17
 8002092:	f001 ff38 	bl	8003f06 <HAL_NVIC_EnableIRQ>

}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000

080020a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ba:	4b35      	ldr	r3, [pc, #212]	; (8002190 <MX_GPIO_Init+0xec>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020be:	4a34      	ldr	r2, [pc, #208]	; (8002190 <MX_GPIO_Init+0xec>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c6:	4b32      	ldr	r3, [pc, #200]	; (8002190 <MX_GPIO_Init+0xec>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <MX_GPIO_Init+0xec>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	4a2e      	ldr	r2, [pc, #184]	; (8002190 <MX_GPIO_Init+0xec>)
 80020d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <MX_GPIO_Init+0xec>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <MX_GPIO_Init+0xec>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	4a28      	ldr	r2, [pc, #160]	; (8002190 <MX_GPIO_Init+0xec>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <MX_GPIO_Init+0xec>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	4b23      	ldr	r3, [pc, #140]	; (8002190 <MX_GPIO_Init+0xec>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <MX_GPIO_Init+0xec>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <MX_GPIO_Init+0xec>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CSB_Pin|DHT11_DATA_Pin, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f240 2102 	movw	r1, #514	; 0x202
 8002120:	481c      	ldr	r0, [pc, #112]	; (8002194 <MX_GPIO_Init+0xf0>)
 8002122:	f002 fa73 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2120      	movs	r1, #32
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f002 fa6d 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_GPIO_Init+0xf4>)
 800213a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4813      	ldr	r0, [pc, #76]	; (8002194 <MX_GPIO_Init+0xf0>)
 8002148:	f002 f8a0 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CSB_Pin DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = SPI2_CSB_Pin|DHT11_DATA_Pin;
 800214c:	f240 2302 	movw	r3, #514	; 0x202
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <MX_GPIO_Init+0xf0>)
 8002166:	f002 f891 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800216a:	2320      	movs	r3, #32
 800216c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002184:	f002 f882 	bl	800428c <HAL_GPIO_Init>

}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	48000800 	.word	0x48000800
 8002198:	10210000 	.word	0x10210000

0800219c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_MspInit+0x44>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_MspInit+0x44>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6613      	str	r3, [r2, #96]	; 0x60
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_MspInit+0x44>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_MspInit+0x44>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <HAL_MspInit+0x44>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_MspInit+0x44>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_ADC_MspInit+0x74>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d123      	bne.n	800225e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_ADC_MspInit+0x78>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_ADC_MspInit+0x78>)
 800221c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_ADC_MspInit+0x78>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_ADC_MspInit+0x78>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_ADC_MspInit+0x78>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_ADC_MspInit+0x78>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002246:	2301      	movs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800224a:	230b      	movs	r3, #11
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4805      	ldr	r0, [pc, #20]	; (8002270 <HAL_ADC_MspInit+0x7c>)
 800225a:	f002 f817 	bl	800428c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	50040000 	.word	0x50040000
 800226c:	40021000 	.word	0x40021000
 8002270:	48000800 	.word	0x48000800

08002274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_SPI_MspInit+0xb4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d144      	bne.n	8002320 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002296:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_SPI_MspInit+0xb8>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_SPI_MspInit+0xb8>)
 800229c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a0:	6593      	str	r3, [r2, #88]	; 0x58
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_SPI_MspInit+0xb8>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_SPI_MspInit+0xb8>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	4a1e      	ldr	r2, [pc, #120]	; (800232c <HAL_SPI_MspInit+0xb8>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_SPI_MspInit+0xb8>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_SPI_MspInit+0xb8>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_SPI_MspInit+0xb8>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_SPI_MspInit+0xb8>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022de:	230c      	movs	r3, #12
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ee:	2305      	movs	r3, #5
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	480d      	ldr	r0, [pc, #52]	; (8002330 <HAL_SPI_MspInit+0xbc>)
 80022fa:	f001 ffc7 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002310:	2305      	movs	r3, #5
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4806      	ldr	r0, [pc, #24]	; (8002334 <HAL_SPI_MspInit+0xc0>)
 800231c:	f001 ffb6 	bl	800428c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40003800 	.word	0x40003800
 800232c:	40021000 	.word	0x40021000
 8002330:	48000800 	.word	0x48000800
 8002334:	48000400 	.word	0x48000400

08002338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d114      	bne.n	8002374 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_TIM_Base_MspInit+0x68>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <HAL_TIM_Base_MspInit+0x68>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_TIM_Base_MspInit+0x68>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	201c      	movs	r0, #28
 8002368:	f001 fdb1 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800236c:	201c      	movs	r0, #28
 800236e:	f001 fdca 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002372:	e010      	b.n	8002396 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <HAL_TIM_Base_MspInit+0x6c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10b      	bne.n	8002396 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_TIM_Base_MspInit+0x68>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_TIM_Base_MspInit+0x68>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_TIM_Base_MspInit+0x68>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40000400 	.word	0x40000400

080023a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	; (800253c <HAL_UART_MspInit+0x194>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12a      	bne.n	8002420 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ca:	4b5d      	ldr	r3, [pc, #372]	; (8002540 <HAL_UART_MspInit+0x198>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	4a5c      	ldr	r2, [pc, #368]	; (8002540 <HAL_UART_MspInit+0x198>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d4:	6613      	str	r3, [r2, #96]	; 0x60
 80023d6:	4b5a      	ldr	r3, [pc, #360]	; (8002540 <HAL_UART_MspInit+0x198>)
 80023d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_UART_MspInit+0x198>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	4a56      	ldr	r2, [pc, #344]	; (8002540 <HAL_UART_MspInit+0x198>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HAL_UART_MspInit+0x198>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800240c:	2307      	movs	r3, #7
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241a:	f001 ff37 	bl	800428c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800241e:	e088      	b.n	8002532 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_UART_MspInit+0x19c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	f040 8083 	bne.w	8002532 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800242c:	4b44      	ldr	r3, [pc, #272]	; (8002540 <HAL_UART_MspInit+0x198>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	4a43      	ldr	r2, [pc, #268]	; (8002540 <HAL_UART_MspInit+0x198>)
 8002432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002436:	6593      	str	r3, [r2, #88]	; 0x58
 8002438:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_UART_MspInit+0x198>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <HAL_UART_MspInit+0x198>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <HAL_UART_MspInit+0x198>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002450:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_UART_MspInit+0x198>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800245c:	230c      	movs	r3, #12
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800246c:	2307      	movs	r3, #7
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247a:	f001 ff07 	bl	800428c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 8002480:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_UART_MspInit+0x1a4>)
 8002482:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 8002486:	2202      	movs	r2, #2
 8002488:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002490:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002496:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800249c:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 80024aa:	2220      	movs	r2, #32
 80024ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024b4:	4824      	ldr	r0, [pc, #144]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 80024b6:	f001 fd41 	bl	8003f3c <HAL_DMA_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 80024c0:	f7ff fe6c 	bl	800219c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a20      	ldr	r2, [pc, #128]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 80024c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80024ca:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_UART_MspInit+0x1a0>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 80024d2:	4a20      	ldr	r2, [pc, #128]	; (8002554 <HAL_UART_MspInit+0x1ac>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 80024d8:	2202      	movs	r2, #2
 80024da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 80024de:	2210      	movs	r2, #16
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 80024fc:	2220      	movs	r2, #32
 80024fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 8002502:	2200      	movs	r2, #0
 8002504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002506:	4812      	ldr	r0, [pc, #72]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 8002508:	f001 fd18 	bl	8003f3c <HAL_DMA_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002512:	f7ff fe43 	bl	800219c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 800251a:	669a      	str	r2, [r3, #104]	; 0x68
 800251c:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <HAL_UART_MspInit+0x1a8>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2026      	movs	r0, #38	; 0x26
 8002528:	f001 fcd1 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800252c:	2026      	movs	r0, #38	; 0x26
 800252e:	f001 fcea 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3730      	adds	r7, #48	; 0x30
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40013800 	.word	0x40013800
 8002540:	40021000 	.word	0x40021000
 8002544:	40004400 	.word	0x40004400
 8002548:	2000023c 	.word	0x2000023c
 800254c:	4002006c 	.word	0x4002006c
 8002550:	200003a4 	.word	0x200003a4
 8002554:	40020080 	.word	0x40020080

08002558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler+0x4>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler+0x4>

0800257e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f000 f96e 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Channel6_IRQHandler+0x10>)
 80025ba:	f001 fdb8 	bl	800412e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000023c 	.word	0x2000023c

080025c8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA1_Channel7_IRQHandler+0x10>)
 80025ce:	f001 fdae 	bl	800412e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200003a4 	.word	0x200003a4

080025dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <TIM2_IRQHandler+0x10>)
 80025e2:	f004 f86b 	bl	80066bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000474 	.word	0x20000474

080025f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <USART2_IRQHandler+0x10>)
 80025f6:	f004 fd1d 	bl	8007034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200004c0 	.word	0x200004c0

08002604 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e00a      	b.n	800262c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002616:	f3af 8000 	nop.w
 800261a:	4601      	mov	r1, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	60ba      	str	r2, [r7, #8]
 8002622:	b2ca      	uxtb	r2, r1
 8002624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	dbf0      	blt.n	8002616 <_read+0x12>
	}

return len;
 8002634:	687b      	ldr	r3, [r7, #4]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_close>:
	}
	return len;
}

int _close(int file)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
	return -1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002666:	605a      	str	r2, [r3, #4]
	return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_isatty>:

int _isatty(int file)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
	return 1;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
	return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <_sbrk+0x5c>)
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <_sbrk+0x60>)
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <_sbrk+0x64>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <_sbrk+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d207      	bcs.n	80026e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d8:	f005 fa4e 	bl	8007b78 <__errno>
 80026dc:	4602      	mov	r2, r0
 80026de:	230c      	movs	r3, #12
 80026e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	e009      	b.n	80026fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <_sbrk+0x64>)
 80026f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20018000 	.word	0x20018000
 8002708:	00000400 	.word	0x00000400
 800270c:	20000208 	.word	0x20000208
 8002710:	20000558 	.word	0x20000558

08002714 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <SystemInit+0x64>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <SystemInit+0x64>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <SystemInit+0x68>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <SystemInit+0x68>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <SystemInit+0x68>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <SystemInit+0x68>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a0f      	ldr	r2, [pc, #60]	; (800277c <SystemInit+0x68>)
 8002740:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002744:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002748:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <SystemInit+0x68>)
 800274c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002750:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <SystemInit+0x68>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <SystemInit+0x68>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <SystemInit+0x68>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SystemInit+0x64>)
 8002766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800276a:	609a      	str	r2, [r3, #8]
#endif
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00
 800277c:	40021000 	.word	0x40021000

08002780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002784:	f7ff ffc6 	bl	8002714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800278a:	e003      	b.n	8002794 <LoopCopyDataInit>

0800278c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800278e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002790:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002792:	3104      	adds	r1, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002794:	480a      	ldr	r0, [pc, #40]	; (80027c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002798:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800279a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800279c:	d3f6      	bcc.n	800278c <CopyDataInit>
	ldr	r2, =_sbss
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027a0:	e002      	b.n	80027a8 <LoopFillZerobss>

080027a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027a4:	f842 3b04 	str.w	r3, [r2], #4

080027a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <LoopForever+0x16>)
	cmp	r2, r3
 80027aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027ac:	d3f9      	bcc.n	80027a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ae:	f005 f9e9 	bl	8007b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027b2:	f7ff f93f 	bl	8001a34 <main>

080027b6 <LoopForever>:

LoopForever:
    b LoopForever
 80027b6:	e7fe      	b.n	80027b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80027bc:	0800c350 	.word	0x0800c350
	ldr	r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027c4:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80027c8:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80027cc:	20000554 	.word	0x20000554

080027d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC1_2_IRQHandler>
	...

080027d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_Init+0x3c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <HAL_Init+0x3c>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ea:	2003      	movs	r0, #3
 80027ec:	f001 fb64 	bl	8003eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027f0:	2000      	movs	r0, #0
 80027f2:	f000 f80f 	bl	8002814 <HAL_InitTick>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	71fb      	strb	r3, [r7, #7]
 8002800:	e001      	b.n	8002806 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002802:	f7ff fcd3 	bl	80021ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002806:	79fb      	ldrb	r3, [r7, #7]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40022000 	.word	0x40022000

08002814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <HAL_InitTick+0x6c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d023      	beq.n	8002870 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_InitTick+0x70>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_InitTick+0x6c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002836:	fbb3 f3f1 	udiv	r3, r3, r1
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f001 fb6f 	bl	8003f22 <HAL_SYSTICK_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d809      	bhi.n	8002864 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f001 fb39 	bl	8003ece <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_InitTick+0x74>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e007      	b.n	8002874 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e004      	b.n	8002874 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e001      	b.n	8002874 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000008 	.word	0x20000008
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x20>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_IncTick+0x24>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_IncTick+0x24>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000008 	.word	0x20000008
 80028b0:	2000054c 	.word	0x2000054c

080028b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_GetTick+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	2000054c 	.word	0x2000054c

080028cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff ffee 	bl	80028b4 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d005      	beq.n	80028f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_Delay+0x40>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f2:	bf00      	nop
 80028f4:	f7ff ffde 	bl	80028b4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f7      	bhi.n	80028f4 <HAL_Delay+0x28>
  {
  }
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000008 	.word	0x20000008

08002910 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	609a      	str	r2, [r3, #8]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <LL_ADC_SetOffset+0x44>)
 800299a:	4013      	ands	r3, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	03fff000 	.word	0x03fff000

080029c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3360      	adds	r3, #96	; 0x60
 80029ce:	461a      	mov	r2, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3360      	adds	r3, #96	; 0x60
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3330      	adds	r3, #48	; 0x30
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	4413      	add	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	211f      	movs	r1, #31
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	401a      	ands	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	f003 011f 	and.w	r1, r3, #31
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b087      	sub	sp, #28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	0e5b      	lsrs	r3, r3, #25
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	4413      	add	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	0d1b      	lsrs	r3, r3, #20
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2107      	movs	r1, #7
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	401a      	ands	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	0d1b      	lsrs	r3, r3, #20
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	401a      	ands	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0318 	and.w	r3, r3, #24
 8002af2:	4908      	ldr	r1, [pc, #32]	; (8002b14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002af4:	40d9      	lsrs	r1, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	400b      	ands	r3, r1
 8002afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afe:	431a      	orrs	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	0007ffff 	.word	0x0007ffff

08002b18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 031f 	and.w	r3, r3, #31
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6093      	str	r3, [r2, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b6c:	d101      	bne.n	8002b72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c0c:	f043 0202 	orr.w	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_IsEnabled+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_IsEnabled+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_IsDisableOngoing+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_IsDisableOngoing+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c80:	f043 0204 	orr.w	r2, r3, #4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d101      	bne.n	8002cac <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d101      	bne.n	8002cd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e134      	b.n	8002f64 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fa73 	bl	80021f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff19 	bl	8002b58 <LL_ADC_IsDeepPowerDownEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff feff 	bl	8002b34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff34 	bl	8002ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d113      	bne.n	8002d6e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff18 	bl	8002b80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d50:	4b86      	ldr	r3, [pc, #536]	; (8002f6c <HAL_ADC_Init+0x28c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	4a86      	ldr	r2, [pc, #536]	; (8002f70 <HAL_ADC_Init+0x290>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d60:	e002      	b.n	8002d68 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f9      	bne.n	8002d62 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff18 	bl	8002ba8 <LL_ADC_IsInternalRegulatorEnabled>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10d      	bne.n	8002d9a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff78 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 8002da4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 80cf 	bne.w	8002f52 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 80cb 	bne.w	8002f52 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dc4:	f043 0202 	orr.w	r2, r3, #2
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff25 	bl	8002c20 <LL_ADC_IsEnabled>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d115      	bne.n	8002e08 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ddc:	4865      	ldr	r0, [pc, #404]	; (8002f74 <HAL_ADC_Init+0x294>)
 8002dde:	f7ff ff1f 	bl	8002c20 <LL_ADC_IsEnabled>
 8002de2:	4604      	mov	r4, r0
 8002de4:	4864      	ldr	r0, [pc, #400]	; (8002f78 <HAL_ADC_Init+0x298>)
 8002de6:	f7ff ff1b 	bl	8002c20 <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	431c      	orrs	r4, r3
 8002dee:	4863      	ldr	r0, [pc, #396]	; (8002f7c <HAL_ADC_Init+0x29c>)
 8002df0:	f7ff ff16 	bl	8002c20 <LL_ADC_IsEnabled>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4323      	orrs	r3, r4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4619      	mov	r1, r3
 8002e02:	485f      	ldr	r0, [pc, #380]	; (8002f80 <HAL_ADC_Init+0x2a0>)
 8002e04:	f7ff fd84 	bl	8002910 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7e5b      	ldrb	r3, [r3, #25]
 8002e0c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e12:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e18:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e1e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e26:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d106      	bne.n	8002e44 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	045b      	lsls	r3, r3, #17
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_ADC_Init+0x2a4>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff0b 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 8002e7e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff18 	bl	8002cba <LL_ADC_INJ_IsConversionOngoing>
 8002e8a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d13d      	bne.n	8002f0e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d13a      	bne.n	8002f0e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e9c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ea4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eb4:	f023 0302 	bic.w	r3, r3, #2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	69b9      	ldr	r1, [r7, #24]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d118      	bne.n	8002efe <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ed6:	f023 0304 	bic.w	r3, r3, #4
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ee8:	4311      	orrs	r1, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	611a      	str	r2, [r3, #16]
 8002efc:	e007      	b.n	8002f0e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d10c      	bne.n	8002f30 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f023 010f 	bic.w	r1, r3, #15
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	1e5a      	subs	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f2e:	e007      	b.n	8002f40 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 020f 	bic.w	r2, r2, #15
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f023 0303 	bic.w	r3, r3, #3
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
 8002f50:	e007      	b.n	8002f62 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f043 0210 	orr.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3724      	adds	r7, #36	; 0x24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd90      	pop	{r4, r7, pc}
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	053e2d63 	.word	0x053e2d63
 8002f74:	50040000 	.word	0x50040000
 8002f78:	50040100 	.word	0x50040100
 8002f7c:	50040200 	.word	0x50040200
 8002f80:	50040300 	.word	0x50040300
 8002f84:	fff0c007 	.word	0xfff0c007

08002f88 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f90:	4857      	ldr	r0, [pc, #348]	; (80030f0 <HAL_ADC_Start+0x168>)
 8002f92:	f7ff fdc1 	bl	8002b18 <LL_ADC_GetMultimode>
 8002f96:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fe79 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 809c 	bne.w	80030e2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_Start+0x30>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e097      	b.n	80030e8 <HAL_ADC_Start+0x160>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fc97 	bl	80038f4 <ADC_Enable>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 8083 	bne.w	80030d8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a42      	ldr	r2, [pc, #264]	; (80030f4 <HAL_ADC_Start+0x16c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d002      	beq.n	8002ff6 <HAL_ADC_Start+0x6e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e000      	b.n	8002ff8 <HAL_ADC_Start+0x70>
 8002ff6:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <HAL_ADC_Start+0x170>)
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d002      	beq.n	8003006 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	d106      	bne.n	800302e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f023 0206 	bic.w	r2, r3, #6
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	659a      	str	r2, [r3, #88]	; 0x58
 800302c:	e002      	b.n	8003034 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	221c      	movs	r2, #28
 800303a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2a      	ldr	r2, [pc, #168]	; (80030f4 <HAL_ADC_Start+0x16c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d002      	beq.n	8003054 <HAL_ADC_Start+0xcc>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	e000      	b.n	8003056 <HAL_ADC_Start+0xce>
 8003054:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_ADC_Start+0x170>)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	4293      	cmp	r3, r2
 800305c:	d008      	beq.n	8003070 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b05      	cmp	r3, #5
 8003068:	d002      	beq.n	8003070 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b09      	cmp	r3, #9
 800306e:	d114      	bne.n	800309a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003086:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fdea 	bl	8002c6c <LL_ADC_REG_StartConversion>
 8003098:	e025      	b.n	80030e6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <HAL_ADC_Start+0x16c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d002      	beq.n	80030b6 <HAL_ADC_Start+0x12e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	e000      	b.n	80030b8 <HAL_ADC_Start+0x130>
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_ADC_Start+0x170>)
 80030b8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00f      	beq.n	80030e6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
 80030d6:	e006      	b.n	80030e6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80030e0:	e001      	b.n	80030e6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
 80030e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	50040300 	.word	0x50040300
 80030f4:	50040100 	.word	0x50040100
 80030f8:	50040000 	.word	0x50040000

080030fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b0b6      	sub	sp, #216	; 0xd8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_ConfigChannel+0x22>
 8003136:	2302      	movs	r3, #2
 8003138:	e3c6      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x7b0>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fda4 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 83a7 	bne.w	80038a2 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b05      	cmp	r3, #5
 800315a:	d824      	bhi.n	80031a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	3b02      	subs	r3, #2
 8003162:	2b03      	cmp	r3, #3
 8003164:	d81b      	bhi.n	800319e <HAL_ADC_ConfigChannel+0x86>
 8003166:	a201      	add	r2, pc, #4	; (adr r2, 800316c <HAL_ADC_ConfigChannel+0x54>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	0800317d 	.word	0x0800317d
 8003170:	08003185 	.word	0x08003185
 8003174:	0800318d 	.word	0x0800318d
 8003178:	08003195 	.word	0x08003195
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	220c      	movs	r2, #12
 8003180:	605a      	str	r2, [r3, #4]
          break;
 8003182:	e011      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2212      	movs	r2, #18
 8003188:	605a      	str	r2, [r3, #4]
          break;
 800318a:	e00d      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2218      	movs	r2, #24
 8003190:	605a      	str	r2, [r3, #4]
          break;
 8003192:	e009      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800319a:	605a      	str	r2, [r3, #4]
          break;
 800319c:	e004      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2206      	movs	r2, #6
 80031a2:	605a      	str	r2, [r3, #4]
          break;
 80031a4:	e000      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80031a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	f7ff fc34 	bl	8002a22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fd68 	bl	8002c94 <LL_ADC_REG_IsConversionOngoing>
 80031c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fd74 	bl	8002cba <LL_ADC_INJ_IsConversionOngoing>
 80031d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 81a6 	bne.w	800352c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 81a1 	bne.w	800352c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f7ff fc3f 	bl	8002a7a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b04      	cmp	r3, #4
 800321c:	d00a      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6919      	ldr	r1, [r3, #16]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800322e:	f7ff fba3 	bl	8002978 <LL_ADC_SetOffset>
 8003232:	e17b      	b.n	800352c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fbc0 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003240:	4603      	mov	r3, r0
 8003242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x148>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fbb5 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003256:	4603      	mov	r3, r0
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	f003 021f 	and.w	r2, r3, #31
 800325e:	e01e      	b.n	800329e <HAL_ADC_ConfigChannel+0x186>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fbaa 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 800326c:	4603      	mov	r3, r0
 800326e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800327e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800328e:	2320      	movs	r3, #32
 8003290:	e004      	b.n	800329c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x19e>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	e018      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x1d0>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80032ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e004      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80032de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d106      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fb79 	bl	80029ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fb5d 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x20e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fb52 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	0e9b      	lsrs	r3, r3, #26
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	e01e      	b.n	8003364 <HAL_ADC_ConfigChannel+0x24c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fb47 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003344:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800334c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003354:	2320      	movs	r3, #32
 8003356:	e004      	b.n	8003362 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_ADC_ConfigChannel+0x264>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0e9b      	lsrs	r3, r3, #26
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	e018      	b.n	80033ae <HAL_ADC_ConfigChannel+0x296>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003390:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e004      	b.n	80033ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80033a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d106      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	2101      	movs	r1, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fb16 	bl	80029ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fafa 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x2d4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2102      	movs	r1, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff faef 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	f003 021f 	and.w	r2, r3, #31
 80033ea:	e01e      	b.n	800342a <HAL_ADC_ConfigChannel+0x312>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fae4 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800340a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800340e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003412:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e004      	b.n	8003428 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800341e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x32a>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	e016      	b.n	8003470 <HAL_ADC_ConfigChannel+0x358>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800345a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003462:	2320      	movs	r3, #32
 8003464:	e004      	b.n	8003470 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003470:	429a      	cmp	r2, r3
 8003472:	d106      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fab5 	bl	80029ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2103      	movs	r1, #3
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fa99 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 800348e:	4603      	mov	r3, r0
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x396>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2103      	movs	r1, #3
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fa8e 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 80034a4:	4603      	mov	r3, r0
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	e017      	b.n	80034de <HAL_ADC_ConfigChannel+0x3c6>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2103      	movs	r1, #3
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fa83 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80034c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80034ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e003      	b.n	80034dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80034d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x3de>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0e9b      	lsrs	r3, r3, #26
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	e011      	b.n	800351a <HAL_ADC_ConfigChannel+0x402>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003506:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800350e:	2320      	movs	r3, #32
 8003510:	e003      	b.n	800351a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800351a:	429a      	cmp	r2, r3
 800351c:	d106      	bne.n	800352c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2200      	movs	r2, #0
 8003524:	2103      	movs	r1, #3
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fa60 	bl	80029ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fb75 	bl	8002c20 <LL_ADC_IsEnabled>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 813f 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	461a      	mov	r2, r3
 800354c:	f7ff fac0 	bl	8002ad0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a8e      	ldr	r2, [pc, #568]	; (8003790 <HAL_ADC_ConfigChannel+0x678>)
 8003556:	4293      	cmp	r3, r2
 8003558:	f040 8130 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x46c>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0e9b      	lsrs	r3, r3, #26
 8003572:	3301      	adds	r3, #1
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2b09      	cmp	r3, #9
 800357a:	bf94      	ite	ls
 800357c:	2301      	movls	r3, #1
 800357e:	2300      	movhi	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e019      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x4a0>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003594:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800359c:	2320      	movs	r3, #32
 800359e:	e003      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80035a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2b09      	cmp	r3, #9
 80035b0:	bf94      	ite	ls
 80035b2:	2301      	movls	r3, #1
 80035b4:	2300      	movhi	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d079      	beq.n	80036b0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x4c0>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	3301      	adds	r3, #1
 80035d0:	069b      	lsls	r3, r3, #26
 80035d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d6:	e015      	b.n	8003604 <HAL_ADC_ConfigChannel+0x4ec>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e003      	b.n	80035fc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80035f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	069b      	lsls	r3, r3, #26
 8003600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x50c>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	3301      	adds	r3, #1
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	e017      	b.n	8003654 <HAL_ADC_ConfigChannel+0x53c>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e003      	b.n	8003648 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	ea42 0103 	orr.w	r1, r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_ADC_ConfigChannel+0x562>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	3301      	adds	r3, #1
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	051b      	lsls	r3, r3, #20
 8003678:	e018      	b.n	80036ac <HAL_ADC_ConfigChannel+0x594>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e003      	b.n	800369e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f003 021f 	and.w	r2, r3, #31
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ac:	430b      	orrs	r3, r1
 80036ae:	e080      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d107      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x5b4>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	3301      	adds	r3, #1
 80036c4:	069b      	lsls	r3, r3, #26
 80036c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ca:	e015      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x5e0>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80036e4:	2320      	movs	r3, #32
 80036e6:	e003      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	069b      	lsls	r3, r3, #26
 80036f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x600>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	0e9b      	lsrs	r3, r3, #26
 800370a:	3301      	adds	r3, #1
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	e017      	b.n	8003748 <HAL_ADC_ConfigChannel+0x630>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	61fb      	str	r3, [r7, #28]
  return result;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003730:	2320      	movs	r3, #32
 8003732:	e003      	b.n	800373c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3301      	adds	r3, #1
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	ea42 0103 	orr.w	r1, r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x65c>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0e9b      	lsrs	r3, r3, #26
 800375e:	3301      	adds	r3, #1
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	3b1e      	subs	r3, #30
 800376c:	051b      	lsls	r3, r3, #20
 800376e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003772:	e01d      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x698>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	613b      	str	r3, [r7, #16]
  return result;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e005      	b.n	800379c <HAL_ADC_ConfigChannel+0x684>
 8003790:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f003 021f 	and.w	r2, r3, #31
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	3b1e      	subs	r3, #30
 80037aa:	051b      	lsls	r3, r3, #20
 80037ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b0:	430b      	orrs	r3, r1
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	6892      	ldr	r2, [r2, #8]
 80037b6:	4619      	mov	r1, r3
 80037b8:	f7ff f95f 	bl	8002a7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <HAL_ADC_ConfigChannel+0x7b8>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d079      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037c8:	4842      	ldr	r0, [pc, #264]	; (80038d4 <HAL_ADC_ConfigChannel+0x7bc>)
 80037ca:	f7ff f8c7 	bl	800295c <LL_ADC_GetCommonPathInternalCh>
 80037ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a40      	ldr	r2, [pc, #256]	; (80038d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d12b      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d125      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <HAL_ADC_ConfigChannel+0x7c4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_ADC_ConfigChannel+0x6e4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a3a      	ldr	r2, [pc, #232]	; (80038e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d15c      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003800:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003804:	4619      	mov	r1, r3
 8003806:	4833      	ldr	r0, [pc, #204]	; (80038d4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003808:	f7ff f895 	bl	8002936 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800380c:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <HAL_ADC_ConfigChannel+0x7cc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	4a35      	ldr	r2, [pc, #212]	; (80038e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	099a      	lsrs	r2, r3, #6
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003824:	e002      	b.n	800382c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3b01      	subs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f9      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003832:	e040      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <HAL_ADC_ConfigChannel+0x7d4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d118      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x758>
 800383e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d112      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a23      	ldr	r2, [pc, #140]	; (80038dc <HAL_ADC_ConfigChannel+0x7c4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_ADC_ConfigChannel+0x746>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <HAL_ADC_ConfigChannel+0x7c8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d12d      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800385e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	4619      	mov	r1, r3
 8003868:	481a      	ldr	r0, [pc, #104]	; (80038d4 <HAL_ADC_ConfigChannel+0x7bc>)
 800386a:	f7ff f864 	bl	8002936 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800386e:	e024      	b.n	80038ba <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d120      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800387a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11a      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a14      	ldr	r2, [pc, #80]	; (80038dc <HAL_ADC_ConfigChannel+0x7c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d115      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003898:	4619      	mov	r1, r3
 800389a:	480e      	ldr	r0, [pc, #56]	; (80038d4 <HAL_ADC_ConfigChannel+0x7bc>)
 800389c:	f7ff f84b 	bl	8002936 <LL_ADC_SetCommonPathInternalCh>
 80038a0:	e00c      	b.n	80038bc <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80038b4:	e002      	b.n	80038bc <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	37d8      	adds	r7, #216	; 0xd8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	80080000 	.word	0x80080000
 80038d4:	50040300 	.word	0x50040300
 80038d8:	c7520000 	.word	0xc7520000
 80038dc:	50040000 	.word	0x50040000
 80038e0:	50040200 	.word	0x50040200
 80038e4:	20000000 	.word	0x20000000
 80038e8:	053e2d63 	.word	0x053e2d63
 80038ec:	cb840000 	.word	0xcb840000
 80038f0:	80000001 	.word	0x80000001

080038f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff f98d 	bl	8002c20 <LL_ADC_IsEnabled>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d146      	bne.n	800399a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <ADC_Enable+0xb0>)
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0210 	orr.w	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e032      	b.n	800399c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff f948 	bl	8002bd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003940:	f7fe ffb8 	bl	80028b4 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003946:	e021      	b.n	800398c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff f967 	bl	8002c20 <LL_ADC_IsEnabled>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f937 	bl	8002bd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003962:	f7fe ffa7 	bl	80028b4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d90d      	bls.n	800398c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0210 	orr.w	r2, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d1d6      	bne.n	8003948 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	8000003f 	.word	0x8000003f

080039a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff f946 	bl	8002c46 <LL_ADC_IsDisableOngoing>
 80039ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff f92d 	bl	8002c20 <LL_ADC_IsEnabled>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d040      	beq.n	8003a4e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d13d      	bne.n	8003a4e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 030d 	and.w	r3, r3, #13
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10c      	bne.n	80039fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff f907 	bl	8002bf8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2203      	movs	r2, #3
 80039f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039f2:	f7fe ff5f 	bl	80028b4 <HAL_GetTick>
 80039f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f8:	e022      	b.n	8003a40 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e01c      	b.n	8003a50 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a16:	f7fe ff4d 	bl	80028b4 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d90d      	bls.n	8003a40 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e007      	b.n	8003a50 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <LL_ADC_IsEnabled>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <LL_ADC_IsEnabled+0x18>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <LL_ADC_IsEnabled+0x1a>
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_ADC_StartCalibration>:
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac4:	d101      	bne.n	8003aca <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d101      	bne.n	8003af0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_ADCEx_Calibration_Start+0x1c>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e04d      	b.n	8003bb6 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ff40 	bl	80039a8 <ADC_Disable>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d136      	bne.n	8003ba0 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b3a:	f023 0302 	bic.w	r3, r3, #2
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6839      	ldr	r1, [r7, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff96 	bl	8003a7e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b52:	e014      	b.n	8003b7e <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	3301      	adds	r3, #1
 8003b58:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003b60:	d30d      	bcc.n	8003b7e <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f023 0312 	bic.w	r3, r3, #18
 8003b6a:	f043 0210 	orr.w	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e01b      	b.n	8003bb6 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff94 	bl	8003ab0 <LL_ADC_IsCalibrationOnGoing>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e2      	bne.n	8003b54 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
 8003b9e:	e005      	b.n	8003bac <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	f043 0210 	orr.w	r2, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b09f      	sub	sp, #124	; 0x7c
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e08f      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a47      	ldr	r2, [pc, #284]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d102      	bne.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003bf0:	4b46      	ldr	r3, [pc, #280]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	e001      	b.n	8003bfa <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e072      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ff5c 	bl	8003ad8 <LL_ADC_REG_IsConversionOngoing>
 8003c20:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ff56 	bl	8003ad8 <LL_ADC_REG_IsConversionOngoing>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d154      	bne.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d151      	bne.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c3a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02c      	beq.n	8003c9e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c56:	035b      	lsls	r3, r3, #13
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c60:	4829      	ldr	r0, [pc, #164]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003c62:	f7ff fef9 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c66:	4604      	mov	r4, r0
 8003c68:	4828      	ldr	r0, [pc, #160]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003c6a:	f7ff fef5 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	431c      	orrs	r4, r3
 8003c72:	4828      	ldr	r0, [pc, #160]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c74:	f7ff fef0 	bl	8003a58 <LL_ADC_IsEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4323      	orrs	r3, r4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d137      	bne.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c88:	f023 030f 	bic.w	r3, r3, #15
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	6811      	ldr	r1, [r2, #0]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	6892      	ldr	r2, [r2, #8]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9c:	e028      	b.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003caa:	4817      	ldr	r0, [pc, #92]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003cac:	f7ff fed4 	bl	8003a58 <LL_ADC_IsEnabled>
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	4816      	ldr	r0, [pc, #88]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003cb4:	f7ff fed0 	bl	8003a58 <LL_ADC_IsEnabled>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	431c      	orrs	r4, r3
 8003cbc:	4815      	ldr	r0, [pc, #84]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cbe:	f7ff fecb 	bl	8003a58 <LL_ADC_IsEnabled>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4323      	orrs	r3, r4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d112      	bne.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cd2:	f023 030f 	bic.w	r3, r3, #15
 8003cd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cd8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cda:	e009      	b.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003cee:	e000      	b.n	8003cf2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	377c      	adds	r7, #124	; 0x7c
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}
 8003d06:	bf00      	nop
 8003d08:	50040000 	.word	0x50040000
 8003d0c:	50040100 	.word	0x50040100
 8003d10:	50040300 	.word	0x50040300
 8003d14:	50040200 	.word	0x50040200

08003d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d34:	4013      	ands	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	60d3      	str	r3, [r2, #12]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <__NVIC_GetPriorityGrouping+0x18>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 0307 	and.w	r3, r3, #7
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	db0b      	blt.n	8003da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	4907      	ldr	r1, [pc, #28]	; (8003db4 <__NVIC_EnableIRQ+0x38>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000e100 	.word	0xe000e100

08003db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db0a      	blt.n	8003de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	490c      	ldr	r1, [pc, #48]	; (8003e04 <__NVIC_SetPriority+0x4c>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de0:	e00a      	b.n	8003df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4908      	ldr	r1, [pc, #32]	; (8003e08 <__NVIC_SetPriority+0x50>)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	3b04      	subs	r3, #4
 8003df0:	0112      	lsls	r2, r2, #4
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	440b      	add	r3, r1
 8003df6:	761a      	strb	r2, [r3, #24]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000e100 	.word	0xe000e100
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f1c3 0307 	rsb	r3, r3, #7
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf28      	it	cs
 8003e2a:	2304      	movcs	r3, #4
 8003e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d902      	bls.n	8003e3c <NVIC_EncodePriority+0x30>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3b03      	subs	r3, #3
 8003e3a:	e000      	b.n	8003e3e <NVIC_EncodePriority+0x32>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	401a      	ands	r2, r3
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e54:	f04f 31ff 	mov.w	r1, #4294967295
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	43d9      	mvns	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	4313      	orrs	r3, r2
         );
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3724      	adds	r7, #36	; 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e84:	d301      	bcc.n	8003e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00f      	b.n	8003eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <SysTick_Config+0x40>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e92:	210f      	movs	r1, #15
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	f7ff ff8e 	bl	8003db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <SysTick_Config+0x40>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <SysTick_Config+0x40>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000e010 	.word	0xe000e010

08003eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff29 	bl	8003d18 <__NVIC_SetPriorityGrouping>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee0:	f7ff ff3e 	bl	8003d60 <__NVIC_GetPriorityGrouping>
 8003ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6978      	ldr	r0, [r7, #20]
 8003eec:	f7ff ff8e 	bl	8003e0c <NVIC_EncodePriority>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff5d 	bl	8003db8 <__NVIC_SetPriority>
}
 8003efe:	bf00      	nop
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff31 	bl	8003d7c <__NVIC_EnableIRQ>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffa2 	bl	8003e74 <SysTick_Config>
 8003f30:	4603      	mov	r3, r0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e098      	b.n	8004080 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b4d      	ldr	r3, [pc, #308]	; (800408c <HAL_DMA_Init+0x150>)
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d80f      	bhi.n	8003f7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_DMA_Init+0x154>)
 8003f62:	4413      	add	r3, r2
 8003f64:	4a4b      	ldr	r2, [pc, #300]	; (8004094 <HAL_DMA_Init+0x158>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	009a      	lsls	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a48      	ldr	r2, [pc, #288]	; (8004098 <HAL_DMA_Init+0x15c>)
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
 8003f78:	e00e      	b.n	8003f98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_DMA_Init+0x160>)
 8003f82:	4413      	add	r3, r2
 8003f84:	4a43      	ldr	r2, [pc, #268]	; (8004094 <HAL_DMA_Init+0x158>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	009a      	lsls	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a42      	ldr	r2, [pc, #264]	; (80040a0 <HAL_DMA_Init+0x164>)
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff2:	d039      	beq.n	8004068 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	4a27      	ldr	r2, [pc, #156]	; (8004098 <HAL_DMA_Init+0x15c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d11a      	bne.n	8004034 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ffe:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_DMA_Init+0x168>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f003 031c 	and.w	r3, r3, #28
 800400a:	210f      	movs	r1, #15
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	4924      	ldr	r1, [pc, #144]	; (80040a4 <HAL_DMA_Init+0x168>)
 8004014:	4013      	ands	r3, r2
 8004016:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004018:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <HAL_DMA_Init+0x168>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	f003 031c 	and.w	r3, r3, #28
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	491d      	ldr	r1, [pc, #116]	; (80040a4 <HAL_DMA_Init+0x168>)
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]
 8004032:	e019      	b.n	8004068 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004034:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <HAL_DMA_Init+0x16c>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	f003 031c 	and.w	r3, r3, #28
 8004040:	210f      	movs	r1, #15
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	4917      	ldr	r1, [pc, #92]	; (80040a8 <HAL_DMA_Init+0x16c>)
 800404a:	4013      	ands	r3, r2
 800404c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800404e:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <HAL_DMA_Init+0x16c>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6859      	ldr	r1, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	f003 031c 	and.w	r3, r3, #28
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	4911      	ldr	r1, [pc, #68]	; (80040a8 <HAL_DMA_Init+0x16c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40020407 	.word	0x40020407
 8004090:	bffdfff8 	.word	0xbffdfff8
 8004094:	cccccccd 	.word	0xcccccccd
 8004098:	40020000 	.word	0x40020000
 800409c:	bffdfbf8 	.word	0xbffdfbf8
 80040a0:	40020400 	.word	0x40020400
 80040a4:	400200a8 	.word	0x400200a8
 80040a8:	400204a8 	.word	0x400204a8

080040ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d005      	beq.n	80040d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2204      	movs	r2, #4
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
 80040ce:	e029      	b.n	8004124 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 020e 	bic.w	r2, r2, #14
 80040de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f4:	f003 021c 	and.w	r2, r3, #28
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004102:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
    }
  }
  return status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f003 031c 	and.w	r3, r3, #28
 800414e:	2204      	movs	r2, #4
 8004150:	409a      	lsls	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d026      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x7a>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d021      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0204 	bic.w	r2, r2, #4
 8004180:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f003 021c 	and.w	r2, r3, #28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	2104      	movs	r1, #4
 8004190:	fa01 f202 	lsl.w	r2, r1, r2
 8004194:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	2b00      	cmp	r3, #0
 800419c:	d071      	beq.n	8004282 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80041a6:	e06c      	b.n	8004282 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	f003 031c 	and.w	r3, r3, #28
 80041b0:	2202      	movs	r2, #2
 80041b2:	409a      	lsls	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02e      	beq.n	800421a <HAL_DMA_IRQHandler+0xec>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d029      	beq.n	800421a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 020a 	bic.w	r2, r2, #10
 80041e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	f003 021c 	and.w	r2, r3, #28
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	2102      	movs	r1, #2
 80041fa:	fa01 f202 	lsl.w	r2, r1, r2
 80041fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d038      	beq.n	8004282 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004218:	e033      	b.n	8004282 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f003 031c 	and.w	r3, r3, #28
 8004222:	2208      	movs	r2, #8
 8004224:	409a      	lsls	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d02a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x156>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d025      	beq.n	8004284 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 020e 	bic.w	r2, r2, #14
 8004246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	f003 021c 	and.w	r2, r3, #28
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f202 	lsl.w	r2, r1, r2
 800425a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004282:	bf00      	nop
 8004284:	bf00      	nop
}
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800429a:	e17f      	b.n	800459c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2101      	movs	r1, #1
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8171 	beq.w	8004596 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d00b      	beq.n	80042d4 <HAL_GPIO_Init+0x48>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d007      	beq.n	80042d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042c8:	2b11      	cmp	r3, #17
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b12      	cmp	r3, #18
 80042d2:	d130      	bne.n	8004336 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800430a:	2201      	movs	r2, #1
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 0201 	and.w	r2, r3, #1
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b03      	cmp	r3, #3
 8004340:	d118      	bne.n	8004374 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004348:	2201      	movs	r2, #1
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4013      	ands	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f003 0201 	and.w	r2, r3, #1
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x128>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b12      	cmp	r3, #18
 80043b2:	d123      	bne.n	80043fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4013      	ands	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80ac 	beq.w	8004596 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443e:	4b5e      	ldr	r3, [pc, #376]	; (80045b8 <HAL_GPIO_Init+0x32c>)
 8004440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004442:	4a5d      	ldr	r2, [pc, #372]	; (80045b8 <HAL_GPIO_Init+0x32c>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6613      	str	r3, [r2, #96]	; 0x60
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_GPIO_Init+0x32c>)
 800444c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004456:	4a59      	ldr	r2, [pc, #356]	; (80045bc <HAL_GPIO_Init+0x330>)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	089b      	lsrs	r3, r3, #2
 800445c:	3302      	adds	r3, #2
 800445e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004462:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	220f      	movs	r2, #15
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43db      	mvns	r3, r3
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4013      	ands	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004480:	d025      	beq.n	80044ce <HAL_GPIO_Init+0x242>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a4e      	ldr	r2, [pc, #312]	; (80045c0 <HAL_GPIO_Init+0x334>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01f      	beq.n	80044ca <HAL_GPIO_Init+0x23e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a4d      	ldr	r2, [pc, #308]	; (80045c4 <HAL_GPIO_Init+0x338>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d019      	beq.n	80044c6 <HAL_GPIO_Init+0x23a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a4c      	ldr	r2, [pc, #304]	; (80045c8 <HAL_GPIO_Init+0x33c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_GPIO_Init+0x236>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a4b      	ldr	r2, [pc, #300]	; (80045cc <HAL_GPIO_Init+0x340>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00d      	beq.n	80044be <HAL_GPIO_Init+0x232>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a4a      	ldr	r2, [pc, #296]	; (80045d0 <HAL_GPIO_Init+0x344>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <HAL_GPIO_Init+0x22e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a49      	ldr	r2, [pc, #292]	; (80045d4 <HAL_GPIO_Init+0x348>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_GPIO_Init+0x22a>
 80044b2:	2306      	movs	r3, #6
 80044b4:	e00c      	b.n	80044d0 <HAL_GPIO_Init+0x244>
 80044b6:	2307      	movs	r3, #7
 80044b8:	e00a      	b.n	80044d0 <HAL_GPIO_Init+0x244>
 80044ba:	2305      	movs	r3, #5
 80044bc:	e008      	b.n	80044d0 <HAL_GPIO_Init+0x244>
 80044be:	2304      	movs	r3, #4
 80044c0:	e006      	b.n	80044d0 <HAL_GPIO_Init+0x244>
 80044c2:	2303      	movs	r3, #3
 80044c4:	e004      	b.n	80044d0 <HAL_GPIO_Init+0x244>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e002      	b.n	80044d0 <HAL_GPIO_Init+0x244>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <HAL_GPIO_Init+0x244>
 80044ce:	2300      	movs	r3, #0
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	f002 0203 	and.w	r2, r2, #3
 80044d6:	0092      	lsls	r2, r2, #2
 80044d8:	4093      	lsls	r3, r2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044e0:	4936      	ldr	r1, [pc, #216]	; (80045bc <HAL_GPIO_Init+0x330>)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	3302      	adds	r3, #2
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044ee:	4b3a      	ldr	r3, [pc, #232]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004512:	4a31      	ldr	r2, [pc, #196]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004518:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800453c:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004542:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004566:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004590:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <HAL_GPIO_Init+0x34c>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3301      	adds	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fa22 f303 	lsr.w	r3, r2, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f47f ae78 	bne.w	800429c <HAL_GPIO_Init+0x10>
  }
}
 80045ac:	bf00      	nop
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40010000 	.word	0x40010000
 80045c0:	48000400 	.word	0x48000400
 80045c4:	48000800 	.word	0x48000800
 80045c8:	48000c00 	.word	0x48000c00
 80045cc:	48001000 	.word	0x48001000
 80045d0:	48001400 	.word	0x48001400
 80045d4:	48001800 	.word	0x48001800
 80045d8:	40010400 	.word	0x40010400

080045dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e001      	b.n	80045fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004628:	e002      	b.n	8004630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <HAL_PWREx_GetVoltageRange+0x18>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40007000 	.word	0x40007000

08004658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d130      	bne.n	80046ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004668:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004674:	d038      	beq.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004684:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2232      	movs	r2, #50	; 0x32
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0c9b      	lsrs	r3, r3, #18
 8004698:	3301      	adds	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800469c:	e002      	b.n	80046a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046a4:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b0:	d102      	bne.n	80046b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f2      	bne.n	800469e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c4:	d110      	bne.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e00f      	b.n	80046ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d6:	d007      	beq.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046e0:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40007000 	.word	0x40007000
 80046fc:	20000000 	.word	0x20000000
 8004700:	431bde83 	.word	0x431bde83

08004704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e3d4      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004716:	4ba1      	ldr	r3, [pc, #644]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004720:	4b9e      	ldr	r3, [pc, #632]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80e4 	beq.w	8004900 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_RCC_OscConfig+0x4a>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b0c      	cmp	r3, #12
 8004742:	f040 808b 	bne.w	800485c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b01      	cmp	r3, #1
 800474a:	f040 8087 	bne.w	800485c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800474e:	4b93      	ldr	r3, [pc, #588]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_RCC_OscConfig+0x62>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e3ac      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1a      	ldr	r2, [r3, #32]
 800476a:	4b8c      	ldr	r3, [pc, #560]	; (800499c <HAL_RCC_OscConfig+0x298>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <HAL_RCC_OscConfig+0x7c>
 8004776:	4b89      	ldr	r3, [pc, #548]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477e:	e005      	b.n	800478c <HAL_RCC_OscConfig+0x88>
 8004780:	4b86      	ldr	r3, [pc, #536]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478c:	4293      	cmp	r3, r2
 800478e:	d223      	bcs.n	80047d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fd3f 	bl	8005218 <RCC_SetFlashLatencyFromMSIRange>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e38d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047a4:	4b7d      	ldr	r3, [pc, #500]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7c      	ldr	r2, [pc, #496]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047aa:	f043 0308 	orr.w	r3, r3, #8
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4b7a      	ldr	r3, [pc, #488]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4977      	ldr	r1, [pc, #476]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047c2:	4b76      	ldr	r3, [pc, #472]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	4972      	ldr	r1, [pc, #456]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	604b      	str	r3, [r1, #4]
 80047d6:	e025      	b.n	8004824 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047d8:	4b70      	ldr	r3, [pc, #448]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a6f      	ldr	r2, [pc, #444]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047de:	f043 0308 	orr.w	r3, r3, #8
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b6d      	ldr	r3, [pc, #436]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	496a      	ldr	r1, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f6:	4b69      	ldr	r3, [pc, #420]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	4965      	ldr	r1, [pc, #404]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fcff 	bl	8005218 <RCC_SetFlashLatencyFromMSIRange>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e34d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004824:	f000 fc36 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 8004828:	4601      	mov	r1, r0
 800482a:	4b5c      	ldr	r3, [pc, #368]	; (800499c <HAL_RCC_OscConfig+0x298>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	4a5a      	ldr	r2, [pc, #360]	; (80049a0 <HAL_RCC_OscConfig+0x29c>)
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa21 f303 	lsr.w	r3, r1, r3
 8004840:	4a58      	ldr	r2, [pc, #352]	; (80049a4 <HAL_RCC_OscConfig+0x2a0>)
 8004842:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004844:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <HAL_RCC_OscConfig+0x2a4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7fd ffe3 	bl	8002814 <HAL_InitTick>
 800484e:	4603      	mov	r3, r0
 8004850:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d052      	beq.n	80048fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	e331      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d032      	beq.n	80048ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004864:	4b4d      	ldr	r3, [pc, #308]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a4c      	ldr	r2, [pc, #304]	; (800499c <HAL_RCC_OscConfig+0x298>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004870:	f7fe f820 	bl	80028b4 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004878:	f7fe f81c 	bl	80028b4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e31a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800488a:	4b44      	ldr	r3, [pc, #272]	; (800499c <HAL_RCC_OscConfig+0x298>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004896:	4b41      	ldr	r3, [pc, #260]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a40      	ldr	r2, [pc, #256]	; (800499c <HAL_RCC_OscConfig+0x298>)
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	4b3e      	ldr	r3, [pc, #248]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	493b      	ldr	r1, [pc, #236]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b4:	4b39      	ldr	r3, [pc, #228]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	4936      	ldr	r1, [pc, #216]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
 80048c8:	e01a      	b.n	8004900 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048ca:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a33      	ldr	r2, [pc, #204]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048d6:	f7fd ffed 	bl	80028b4 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048de:	f7fd ffe9 	bl	80028b4 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e2e7      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048f0:	4b2a      	ldr	r3, [pc, #168]	; (800499c <HAL_RCC_OscConfig+0x298>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f0      	bne.n	80048de <HAL_RCC_OscConfig+0x1da>
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d074      	beq.n	80049f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b08      	cmp	r3, #8
 8004910:	d005      	beq.n	800491e <HAL_RCC_OscConfig+0x21a>
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d10e      	bne.n	8004936 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d10b      	bne.n	8004936 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491e:	4b1f      	ldr	r3, [pc, #124]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d064      	beq.n	80049f4 <HAL_RCC_OscConfig+0x2f0>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d160      	bne.n	80049f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e2c4      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493e:	d106      	bne.n	800494e <HAL_RCC_OscConfig+0x24a>
 8004940:	4b16      	ldr	r3, [pc, #88]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a15      	ldr	r2, [pc, #84]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	e01d      	b.n	800498a <HAL_RCC_OscConfig+0x286>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004956:	d10c      	bne.n	8004972 <HAL_RCC_OscConfig+0x26e>
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_RCC_OscConfig+0x298>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0f      	ldr	r2, [pc, #60]	; (800499c <HAL_RCC_OscConfig+0x298>)
 800495e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b0d      	ldr	r3, [pc, #52]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a0c      	ldr	r2, [pc, #48]	; (800499c <HAL_RCC_OscConfig+0x298>)
 800496a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e00b      	b.n	800498a <HAL_RCC_OscConfig+0x286>
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a06      	ldr	r2, [pc, #24]	; (800499c <HAL_RCC_OscConfig+0x298>)
 8004984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004988:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01c      	beq.n	80049cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fd ff8f 	bl	80028b4 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004998:	e011      	b.n	80049be <HAL_RCC_OscConfig+0x2ba>
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	0800bfd8 	.word	0x0800bfd8
 80049a4:	20000000 	.word	0x20000000
 80049a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fd ff82 	bl	80028b4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	; 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e280      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049be:	4baf      	ldr	r3, [pc, #700]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x2a8>
 80049ca:	e014      	b.n	80049f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fd ff72 	bl	80028b4 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d4:	f7fd ff6e 	bl	80028b4 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	; 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e26c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049e6:	4ba5      	ldr	r3, [pc, #660]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x2d0>
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d060      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_OscConfig+0x310>
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b0c      	cmp	r3, #12
 8004a0c:	d119      	bne.n	8004a42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d116      	bne.n	8004a42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a14:	4b99      	ldr	r3, [pc, #612]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_OscConfig+0x328>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e249      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2c:	4b93      	ldr	r3, [pc, #588]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	061b      	lsls	r3, r3, #24
 8004a3a:	4990      	ldr	r1, [pc, #576]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a40:	e040      	b.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d023      	beq.n	8004a92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a4a:	4b8c      	ldr	r3, [pc, #560]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a8b      	ldr	r2, [pc, #556]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a56:	f7fd ff2d 	bl	80028b4 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5e:	f7fd ff29 	bl	80028b4 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e227      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a70:	4b82      	ldr	r3, [pc, #520]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7c:	4b7f      	ldr	r3, [pc, #508]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	497c      	ldr	r1, [pc, #496]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]
 8004a90:	e018      	b.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a92:	4b7a      	ldr	r3, [pc, #488]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a79      	ldr	r2, [pc, #484]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fd ff09 	bl	80028b4 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa6:	f7fd ff05 	bl	80028b4 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e203      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ab8:	4b70      	ldr	r3, [pc, #448]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f0      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d03c      	beq.n	8004b4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01c      	beq.n	8004b12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad8:	4b68      	ldr	r3, [pc, #416]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ade:	4a67      	ldr	r2, [pc, #412]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fd fee4 	bl	80028b4 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af0:	f7fd fee0 	bl	80028b4 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e1de      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b02:	4b5e      	ldr	r3, [pc, #376]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0ef      	beq.n	8004af0 <HAL_RCC_OscConfig+0x3ec>
 8004b10:	e01b      	b.n	8004b4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b12:	4b5a      	ldr	r3, [pc, #360]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b18:	4a58      	ldr	r2, [pc, #352]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fd fec7 	bl	80028b4 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b2a:	f7fd fec3 	bl	80028b4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1c1      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b3c:	4b4f      	ldr	r3, [pc, #316]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ef      	bne.n	8004b2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80a6 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b5c:	4b47      	ldr	r3, [pc, #284]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10d      	bne.n	8004b84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b68:	4b44      	ldr	r3, [pc, #272]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	4a43      	ldr	r2, [pc, #268]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b72:	6593      	str	r3, [r2, #88]	; 0x58
 8004b74:	4b41      	ldr	r3, [pc, #260]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	4b3e      	ldr	r3, [pc, #248]	; (8004c80 <HAL_RCC_OscConfig+0x57c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d118      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b90:	4b3b      	ldr	r3, [pc, #236]	; (8004c80 <HAL_RCC_OscConfig+0x57c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a3a      	ldr	r2, [pc, #232]	; (8004c80 <HAL_RCC_OscConfig+0x57c>)
 8004b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9c:	f7fd fe8a 	bl	80028b4 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba4:	f7fd fe86 	bl	80028b4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e184      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb6:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <HAL_RCC_OscConfig+0x57c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d108      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4d8>
 8004bca:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bda:	e024      	b.n	8004c26 <HAL_RCC_OscConfig+0x522>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	d110      	bne.n	8004c06 <HAL_RCC_OscConfig+0x502>
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004bec:	f043 0304 	orr.w	r3, r3, #4
 8004bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bf4:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	4a20      	ldr	r2, [pc, #128]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c04:	e00f      	b.n	8004c26 <HAL_RCC_OscConfig+0x522>
 8004c06:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	4a17      	ldr	r2, [pc, #92]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004c1e:	f023 0304 	bic.w	r3, r3, #4
 8004c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d016      	beq.n	8004c5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fd fe41 	bl	80028b4 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7fd fe3d 	bl	80028b4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e139      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_RCC_OscConfig+0x578>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ed      	beq.n	8004c36 <HAL_RCC_OscConfig+0x532>
 8004c5a:	e01a      	b.n	8004c92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fd fe2a 	bl	80028b4 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c62:	e00f      	b.n	8004c84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c64:	f7fd fe26 	bl	80028b4 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d906      	bls.n	8004c84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e122      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c84:	4b90      	ldr	r3, [pc, #576]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e8      	bne.n	8004c64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d105      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c98:	4b8b      	ldr	r3, [pc, #556]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	4a8a      	ldr	r2, [pc, #552]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8108 	beq.w	8004ebe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	f040 80d0 	bne.w	8004e58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cb8:	4b83      	ldr	r3, [pc, #524]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f003 0203 	and.w	r2, r3, #3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d130      	bne.n	8004d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d127      	bne.n	8004d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d11f      	bne.n	8004d2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cf8:	2a07      	cmp	r2, #7
 8004cfa:	bf14      	ite	ne
 8004cfc:	2201      	movne	r2, #1
 8004cfe:	2200      	moveq	r2, #0
 8004d00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d113      	bne.n	8004d2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	3b01      	subs	r3, #1
 8004d14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d109      	bne.n	8004d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	3b01      	subs	r3, #1
 8004d28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d06e      	beq.n	8004e0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b0c      	cmp	r3, #12
 8004d32:	d069      	beq.n	8004e08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d34:	4b64      	ldr	r3, [pc, #400]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d40:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0b7      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d50:	4b5d      	ldr	r3, [pc, #372]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5c      	ldr	r2, [pc, #368]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d5c:	f7fd fdaa 	bl	80028b4 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d64:	f7fd fda6 	bl	80028b4 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0a4      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d76:	4b54      	ldr	r3, [pc, #336]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d82:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <HAL_RCC_OscConfig+0x7c8>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d92:	3a01      	subs	r2, #1
 8004d94:	0112      	lsls	r2, r2, #4
 8004d96:	4311      	orrs	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d9c:	0212      	lsls	r2, r2, #8
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004da4:	0852      	lsrs	r2, r2, #1
 8004da6:	3a01      	subs	r2, #1
 8004da8:	0552      	lsls	r2, r2, #21
 8004daa:	4311      	orrs	r1, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004db0:	0852      	lsrs	r2, r2, #1
 8004db2:	3a01      	subs	r2, #1
 8004db4:	0652      	lsls	r2, r2, #25
 8004db6:	4311      	orrs	r1, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dbc:	0912      	lsrs	r2, r2, #4
 8004dbe:	0452      	lsls	r2, r2, #17
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	4941      	ldr	r1, [pc, #260]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004dc8:	4b3f      	ldr	r3, [pc, #252]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a3e      	ldr	r2, [pc, #248]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd4:	4b3c      	ldr	r3, [pc, #240]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a3b      	ldr	r2, [pc, #236]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004de0:	f7fd fd68 	bl	80028b4 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fd fd64 	bl	80028b4 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e062      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfa:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e06:	e05a      	b.n	8004ebe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e059      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0c:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d152      	bne.n	8004ebe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e18:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e24:	4b28      	ldr	r3, [pc, #160]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e30:	f7fd fd40 	bl	80028b4 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fd fd3c 	bl	80028b4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e03a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x734>
 8004e56:	e032      	b.n	8004ebe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d02d      	beq.n	8004eba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e7c:	f023 0303 	bic.w	r3, r3, #3
 8004e80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	4a10      	ldr	r2, [pc, #64]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004e88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fd fd0f 	bl	80028b4 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fd fd0b 	bl	80028b4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e009      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_RCC_OscConfig+0x7c4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x796>
 8004eb8:	e001      	b.n	8004ebe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	f99d808c 	.word	0xf99d808c

08004ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0c8      	b.n	8005076 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b66      	ldr	r3, [pc, #408]	; (8005080 <HAL_RCC_ClockConfig+0x1b0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d910      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b63      	ldr	r3, [pc, #396]	; (8005080 <HAL_RCC_ClockConfig+0x1b0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 0207 	bic.w	r2, r3, #7
 8004efa:	4961      	ldr	r1, [pc, #388]	; (8005080 <HAL_RCC_ClockConfig+0x1b0>)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b5f      	ldr	r3, [pc, #380]	; (8005080 <HAL_RCC_ClockConfig+0x1b0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0b0      	b.n	8005076 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d04c      	beq.n	8004fba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d107      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f28:	4b56      	ldr	r3, [pc, #344]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d121      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e09e      	b.n	8005076 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f40:	4b50      	ldr	r3, [pc, #320]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d115      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e092      	b.n	8005076 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f58:	4b4a      	ldr	r3, [pc, #296]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e086      	b.n	8005076 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f68:	4b46      	ldr	r3, [pc, #280]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e07e      	b.n	8005076 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f78:	4b42      	ldr	r3, [pc, #264]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f023 0203 	bic.w	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	493f      	ldr	r1, [pc, #252]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fd fc93 	bl	80028b4 <HAL_GetTick>
 8004f8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f90:	e00a      	b.n	8004fa8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f92:	f7fd fc8f 	bl	80028b4 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e066      	b.n	8005076 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa8:	4b36      	ldr	r3, [pc, #216]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 020c 	and.w	r2, r3, #12
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d1eb      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc6:	4b2f      	ldr	r3, [pc, #188]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	492c      	ldr	r1, [pc, #176]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b29      	ldr	r3, [pc, #164]	; (8005080 <HAL_RCC_ClockConfig+0x1b0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d210      	bcs.n	8005008 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <HAL_RCC_ClockConfig+0x1b0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 0207 	bic.w	r2, r3, #7
 8004fee:	4924      	ldr	r1, [pc, #144]	; (8005080 <HAL_RCC_ClockConfig+0x1b0>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b22      	ldr	r3, [pc, #136]	; (8005080 <HAL_RCC_ClockConfig+0x1b0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e036      	b.n	8005076 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4918      	ldr	r1, [pc, #96]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4910      	ldr	r1, [pc, #64]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005046:	f000 f825 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 800504a:	4601      	mov	r1, r0
 800504c:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <HAL_RCC_ClockConfig+0x1b4>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005058:	5cd3      	ldrb	r3, [r2, r3]
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	fa21 f303 	lsr.w	r3, r1, r3
 8005062:	4a0a      	ldr	r2, [pc, #40]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fbd2 	bl	8002814 <HAL_InitTick>
 8005070:	4603      	mov	r3, r0
 8005072:	72fb      	strb	r3, [r7, #11]

  return status;
 8005074:	7afb      	ldrb	r3, [r7, #11]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40022000 	.word	0x40022000
 8005084:	40021000 	.word	0x40021000
 8005088:	0800bfd8 	.word	0x0800bfd8
 800508c:	20000000 	.word	0x20000000
 8005090:	20000004 	.word	0x20000004

08005094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005094:	b480      	push	{r7}
 8005096:	b089      	sub	sp, #36	; 0x24
 8005098:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a2:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050ac:	4b3a      	ldr	r3, [pc, #232]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_GetSysClockFreq+0x34>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d121      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d11e      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050c8:	4b33      	ldr	r3, [pc, #204]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050d4:	4b30      	ldr	r3, [pc, #192]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	e005      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050e4:	4b2c      	ldr	r3, [pc, #176]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050f0:	4a2a      	ldr	r2, [pc, #168]	; (800519c <HAL_RCC_GetSysClockFreq+0x108>)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005104:	e00a      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d102      	bne.n	8005112 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800510c:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e004      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d101      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005118:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800511a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d133      	bne.n	800518a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d002      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0xa4>
 8005132:	2b03      	cmp	r3, #3
 8005134:	d003      	beq.n	800513e <HAL_RCC_GetSysClockFreq+0xaa>
 8005136:	e005      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005138:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800513a:	617b      	str	r3, [r7, #20]
      break;
 800513c:	e005      	b.n	800514a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800513e:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005140:	617b      	str	r3, [r7, #20]
      break;
 8005142:	e002      	b.n	800514a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	617b      	str	r3, [r7, #20]
      break;
 8005148:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800514a:	4b13      	ldr	r3, [pc, #76]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	091b      	lsrs	r3, r3, #4
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	3301      	adds	r3, #1
 8005156:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005158:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	fb02 f203 	mul.w	r2, r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <HAL_RCC_GetSysClockFreq+0x104>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	0e5b      	lsrs	r3, r3, #25
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	3301      	adds	r3, #1
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800518a:	69bb      	ldr	r3, [r7, #24]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3724      	adds	r7, #36	; 0x24
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	40021000 	.word	0x40021000
 800519c:	0800bff0 	.word	0x0800bff0
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	007a1200 	.word	0x007a1200

080051a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ae:	681b      	ldr	r3, [r3, #0]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000000 	.word	0x20000000

080051c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051c4:	f7ff fff0 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051c8:	4601      	mov	r1, r0
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051d6:	5cd3      	ldrb	r3, [r2, r3]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40021000 	.word	0x40021000
 80051e8:	0800bfe8 	.word	0x0800bfe8

080051ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051f0:	f7ff ffda 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051f4:	4601      	mov	r1, r0
 80051f6:	4b06      	ldr	r3, [pc, #24]	; (8005210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	0adb      	lsrs	r3, r3, #11
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	4a04      	ldr	r2, [pc, #16]	; (8005214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005202:	5cd3      	ldrb	r3, [r2, r3]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	fa21 f303 	lsr.w	r3, r1, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40021000 	.word	0x40021000
 8005214:	0800bfe8 	.word	0x0800bfe8

08005218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005224:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005230:	f7ff fa04 	bl	800463c <HAL_PWREx_GetVoltageRange>
 8005234:	6178      	str	r0, [r7, #20]
 8005236:	e014      	b.n	8005262 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005238:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	6593      	str	r3, [r2, #88]	; 0x58
 8005244:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005250:	f7ff f9f4 	bl	800463c <HAL_PWREx_GetVoltageRange>
 8005254:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005260:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005268:	d10b      	bne.n	8005282 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d919      	bls.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2ba0      	cmp	r3, #160	; 0xa0
 8005274:	d902      	bls.n	800527c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005276:	2302      	movs	r3, #2
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e013      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800527c:	2301      	movs	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e010      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b80      	cmp	r3, #128	; 0x80
 8005286:	d902      	bls.n	800528e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005288:	2303      	movs	r3, #3
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	e00a      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d102      	bne.n	800529a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005294:	2302      	movs	r3, #2
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e004      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b70      	cmp	r3, #112	; 0x70
 800529e:	d101      	bne.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052a0:	2301      	movs	r3, #1
 80052a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f023 0207 	bic.w	r2, r3, #7
 80052ac:	4909      	ldr	r1, [pc, #36]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40022000 	.word	0x40022000

080052d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052e0:	2300      	movs	r3, #0
 80052e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052e4:	2300      	movs	r3, #0
 80052e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d03f      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fc:	d01c      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80052fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005302:	d802      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00e      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005308:	e01f      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800530a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800530e:	d003      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005310:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005314:	d01c      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005316:	e018      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005318:	4b85      	ldr	r3, [pc, #532]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a84      	ldr	r2, [pc, #528]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005322:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005324:	e015      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3304      	adds	r3, #4
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fab9 	bl	80058a4 <RCCEx_PLLSAI1_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005336:	e00c      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3320      	adds	r3, #32
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fba0 	bl	8005a84 <RCCEx_PLLSAI2_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005348:	e003      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	74fb      	strb	r3, [r7, #19]
      break;
 800534e:	e000      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005352:	7cfb      	ldrb	r3, [r7, #19]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005358:	4b75      	ldr	r3, [pc, #468]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005366:	4972      	ldr	r1, [pc, #456]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800536e:	e001      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d03f      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005388:	d01c      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800538a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800538e:	d802      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005394:	e01f      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800539a:	d003      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800539c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053a0:	d01c      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80053a2:	e018      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053a4:	4b62      	ldr	r3, [pc, #392]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4a61      	ldr	r2, [pc, #388]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053b0:	e015      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fa73 	bl	80058a4 <RCCEx_PLLSAI1_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053c2:	e00c      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3320      	adds	r3, #32
 80053c8:	2100      	movs	r1, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fb5a 	bl	8005a84 <RCCEx_PLLSAI2_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	74fb      	strb	r3, [r7, #19]
      break;
 80053da:	e000      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80053dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053e4:	4b52      	ldr	r3, [pc, #328]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f2:	494f      	ldr	r1, [pc, #316]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053fa:	e001      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80a0 	beq.w	800554e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005412:	4b47      	ldr	r3, [pc, #284]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005428:	4b41      	ldr	r3, [pc, #260]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	4a40      	ldr	r2, [pc, #256]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800542e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005432:	6593      	str	r3, [r2, #88]	; 0x58
 8005434:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005440:	2301      	movs	r3, #1
 8005442:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005444:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a3a      	ldr	r2, [pc, #232]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800544a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005450:	f7fd fa30 	bl	80028b4 <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005456:	e009      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005458:	f7fd fa2c 	bl	80028b4 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d902      	bls.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	74fb      	strb	r3, [r7, #19]
        break;
 800546a:	e005      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800546c:	4b31      	ldr	r3, [pc, #196]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ef      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005478:	7cfb      	ldrb	r3, [r7, #19]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d15c      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800547e:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005488:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01f      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	429a      	cmp	r2, r3
 800549a:	d019      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	4a20      	ldr	r2, [pc, #128]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054b8:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054c8:	4a19      	ldr	r2, [pc, #100]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d016      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7fd f9eb 	bl	80028b4 <HAL_GetTick>
 80054de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e0:	e00b      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7fd f9e7 	bl	80028b4 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d902      	bls.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	74fb      	strb	r3, [r7, #19]
            break;
 80054f8:	e006      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ec      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10c      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551e:	4904      	ldr	r1, [pc, #16]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005526:	e009      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
 800552c:	e006      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000
 8005534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800553c:	7c7b      	ldrb	r3, [r7, #17]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d105      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005542:	4b9e      	ldr	r3, [pc, #632]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	4a9d      	ldr	r2, [pc, #628]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800554c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800555a:	4b98      	ldr	r3, [pc, #608]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	f023 0203 	bic.w	r2, r3, #3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	4994      	ldr	r1, [pc, #592]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800557c:	4b8f      	ldr	r3, [pc, #572]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f023 020c 	bic.w	r2, r3, #12
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	498c      	ldr	r1, [pc, #560]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800559e:	4b87      	ldr	r3, [pc, #540]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	4983      	ldr	r1, [pc, #524]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055c0:	4b7e      	ldr	r3, [pc, #504]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	497b      	ldr	r1, [pc, #492]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055e2:	4b76      	ldr	r3, [pc, #472]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f0:	4972      	ldr	r1, [pc, #456]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005604:	4b6d      	ldr	r3, [pc, #436]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005612:	496a      	ldr	r1, [pc, #424]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005626:	4b65      	ldr	r3, [pc, #404]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	4961      	ldr	r1, [pc, #388]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005648:	4b5c      	ldr	r3, [pc, #368]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	4959      	ldr	r1, [pc, #356]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800566a:	4b54      	ldr	r3, [pc, #336]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005670:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	4950      	ldr	r1, [pc, #320]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800568c:	4b4b      	ldr	r3, [pc, #300]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005692:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569a:	4948      	ldr	r1, [pc, #288]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056ae:	4b43      	ldr	r3, [pc, #268]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	493f      	ldr	r1, [pc, #252]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d028      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d0:	4b3a      	ldr	r3, [pc, #232]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056de:	4937      	ldr	r1, [pc, #220]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ee:	d106      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f0:	4b32      	ldr	r3, [pc, #200]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a31      	ldr	r2, [pc, #196]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056fa:	60d3      	str	r3, [r2, #12]
 80056fc:	e011      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005702:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005706:	d10c      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	2101      	movs	r1, #1
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f8c8 	bl	80058a4 <RCCEx_PLLSAI1_Config>
 8005714:	4603      	mov	r3, r0
 8005716:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005718:	7cfb      	ldrb	r3, [r7, #19]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d028      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800572e:	4b23      	ldr	r3, [pc, #140]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005734:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	491f      	ldr	r1, [pc, #124]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574c:	d106      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800574e:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	4a1a      	ldr	r2, [pc, #104]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005758:	60d3      	str	r3, [r2, #12]
 800575a:	e011      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005764:	d10c      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	2101      	movs	r1, #1
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f899 	bl	80058a4 <RCCEx_PLLSAI1_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02b      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579a:	4908      	ldr	r1, [pc, #32]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057aa:	d109      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4a02      	ldr	r2, [pc, #8]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057b6:	60d3      	str	r3, [r2, #12]
 80057b8:	e014      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057c8:	d10c      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	2101      	movs	r1, #1
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f867 	bl	80058a4 <RCCEx_PLLSAI1_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057da:	7cfb      	ldrb	r3, [r7, #19]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80057e0:	7cfb      	ldrb	r3, [r7, #19]
 80057e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02f      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057f0:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057fe:	4928      	ldr	r1, [pc, #160]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800580e:	d10d      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	2102      	movs	r1, #2
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f844 	bl	80058a4 <RCCEx_PLLSAI1_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d014      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	74bb      	strb	r3, [r7, #18]
 800582a:	e011      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005834:	d10c      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3320      	adds	r3, #32
 800583a:	2102      	movs	r1, #2
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f921 	bl	8005a84 <RCCEx_PLLSAI2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005846:	7cfb      	ldrb	r3, [r7, #19]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800584c:	7cfb      	ldrb	r3, [r7, #19]
 800584e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800585c:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586a:	490d      	ldr	r1, [pc, #52]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800588e:	4904      	ldr	r1, [pc, #16]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005896:	7cbb      	ldrb	r3, [r7, #18]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40021000 	.word	0x40021000

080058a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058b2:	4b73      	ldr	r3, [pc, #460]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058be:	4b70      	ldr	r3, [pc, #448]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0203 	and.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d10d      	bne.n	80058ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
       ||
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058d6:	4b6a      	ldr	r3, [pc, #424]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	091b      	lsrs	r3, r3, #4
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
       ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d044      	beq.n	8005974 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	e041      	b.n	8005974 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d00c      	beq.n	8005912 <RCCEx_PLLSAI1_Config+0x6e>
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d013      	beq.n	8005924 <RCCEx_PLLSAI1_Config+0x80>
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d120      	bne.n	8005942 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005900:	4b5f      	ldr	r3, [pc, #380]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11d      	bne.n	8005948 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005910:	e01a      	b.n	8005948 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005912:	4b5b      	ldr	r3, [pc, #364]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	2b00      	cmp	r3, #0
 800591c:	d116      	bne.n	800594c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005922:	e013      	b.n	800594c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005924:	4b56      	ldr	r3, [pc, #344]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10f      	bne.n	8005950 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005930:	4b53      	ldr	r3, [pc, #332]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005940:	e006      	b.n	8005950 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
      break;
 8005946:	e004      	b.n	8005952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005948:	bf00      	nop
 800594a:	e002      	b.n	8005952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800594c:	bf00      	nop
 800594e:	e000      	b.n	8005952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005950:	bf00      	nop
    }

    if(status == HAL_OK)
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10d      	bne.n	8005974 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005958:	4b49      	ldr	r3, [pc, #292]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	3b01      	subs	r3, #1
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	430b      	orrs	r3, r1
 800596e:	4944      	ldr	r1, [pc, #272]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d17d      	bne.n	8005a76 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800597a:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a40      	ldr	r2, [pc, #256]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005980:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fc ff95 	bl	80028b4 <HAL_GetTick>
 800598a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800598c:	e009      	b.n	80059a2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800598e:	f7fc ff91 	bl	80028b4 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d902      	bls.n	80059a2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	73fb      	strb	r3, [r7, #15]
        break;
 80059a0:	e005      	b.n	80059ae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059a2:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1ef      	bne.n	800598e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d160      	bne.n	8005a76 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d111      	bne.n	80059de <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ba:	4b31      	ldr	r3, [pc, #196]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6892      	ldr	r2, [r2, #8]
 80059ca:	0211      	lsls	r1, r2, #8
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	68d2      	ldr	r2, [r2, #12]
 80059d0:	0912      	lsrs	r2, r2, #4
 80059d2:	0452      	lsls	r2, r2, #17
 80059d4:	430a      	orrs	r2, r1
 80059d6:	492a      	ldr	r1, [pc, #168]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	610b      	str	r3, [r1, #16]
 80059dc:	e027      	b.n	8005a2e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d112      	bne.n	8005a0a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059e4:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6892      	ldr	r2, [r2, #8]
 80059f4:	0211      	lsls	r1, r2, #8
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6912      	ldr	r2, [r2, #16]
 80059fa:	0852      	lsrs	r2, r2, #1
 80059fc:	3a01      	subs	r2, #1
 80059fe:	0552      	lsls	r2, r2, #21
 8005a00:	430a      	orrs	r2, r1
 8005a02:	491f      	ldr	r1, [pc, #124]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	610b      	str	r3, [r1, #16]
 8005a08:	e011      	b.n	8005a2e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6892      	ldr	r2, [r2, #8]
 8005a1a:	0211      	lsls	r1, r2, #8
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6952      	ldr	r2, [r2, #20]
 8005a20:	0852      	lsrs	r2, r2, #1
 8005a22:	3a01      	subs	r2, #1
 8005a24:	0652      	lsls	r2, r2, #25
 8005a26:	430a      	orrs	r2, r1
 8005a28:	4915      	ldr	r1, [pc, #84]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a2e:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3a:	f7fc ff3b 	bl	80028b4 <HAL_GetTick>
 8005a3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a40:	e009      	b.n	8005a56 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a42:	f7fc ff37 	bl	80028b4 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d902      	bls.n	8005a56 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	73fb      	strb	r3, [r7, #15]
          break;
 8005a54:	e005      	b.n	8005a62 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0ef      	beq.n	8005a42 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	4903      	ldr	r1, [pc, #12]	; (8005a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40021000 	.word	0x40021000

08005a84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a92:	4b68      	ldr	r3, [pc, #416]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d018      	beq.n	8005ad0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a9e:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0203 	and.w	r2, r3, #3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d10d      	bne.n	8005aca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ab6:	4b5f      	ldr	r3, [pc, #380]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d044      	beq.n	8005b54 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
 8005ace:	e041      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d00c      	beq.n	8005af2 <RCCEx_PLLSAI2_Config+0x6e>
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d013      	beq.n	8005b04 <RCCEx_PLLSAI2_Config+0x80>
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d120      	bne.n	8005b22 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ae0:	4b54      	ldr	r3, [pc, #336]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11d      	bne.n	8005b28 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af0:	e01a      	b.n	8005b28 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005af2:	4b50      	ldr	r3, [pc, #320]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d116      	bne.n	8005b2c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b02:	e013      	b.n	8005b2c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b04:	4b4b      	ldr	r3, [pc, #300]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10f      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b10:	4b48      	ldr	r3, [pc, #288]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b20:	e006      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	73fb      	strb	r3, [r7, #15]
      break;
 8005b26:	e004      	b.n	8005b32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b28:	bf00      	nop
 8005b2a:	e002      	b.n	8005b32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b2c:	bf00      	nop
 8005b2e:	e000      	b.n	8005b32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b30:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b38:	4b3e      	ldr	r3, [pc, #248]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	4939      	ldr	r1, [pc, #228]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d167      	bne.n	8005c2a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b5a:	4b36      	ldr	r3, [pc, #216]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a35      	ldr	r2, [pc, #212]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b66:	f7fc fea5 	bl	80028b4 <HAL_GetTick>
 8005b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b6c:	e009      	b.n	8005b82 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b6e:	f7fc fea1 	bl	80028b4 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d902      	bls.n	8005b82 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	73fb      	strb	r3, [r7, #15]
        break;
 8005b80:	e005      	b.n	8005b8e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b82:	4b2c      	ldr	r3, [pc, #176]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1ef      	bne.n	8005b6e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d14a      	bne.n	8005c2a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d111      	bne.n	8005bbe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b9a:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6892      	ldr	r2, [r2, #8]
 8005baa:	0211      	lsls	r1, r2, #8
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	68d2      	ldr	r2, [r2, #12]
 8005bb0:	0912      	lsrs	r2, r2, #4
 8005bb2:	0452      	lsls	r2, r2, #17
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	491f      	ldr	r1, [pc, #124]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	614b      	str	r3, [r1, #20]
 8005bbc:	e011      	b.n	8005be2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6892      	ldr	r2, [r2, #8]
 8005bce:	0211      	lsls	r1, r2, #8
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6912      	ldr	r2, [r2, #16]
 8005bd4:	0852      	lsrs	r2, r2, #1
 8005bd6:	3a01      	subs	r2, #1
 8005bd8:	0652      	lsls	r2, r2, #25
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	4915      	ldr	r1, [pc, #84]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005be2:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bee:	f7fc fe61 	bl	80028b4 <HAL_GetTick>
 8005bf2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bf4:	e009      	b.n	8005c0a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bf6:	f7fc fe5d 	bl	80028b4 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d902      	bls.n	8005c0a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	73fb      	strb	r3, [r7, #15]
          break;
 8005c08:	e005      	b.n	8005c16 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c0a:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0ef      	beq.n	8005bf6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c1e:	695a      	ldr	r2, [r3, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	4903      	ldr	r1, [pc, #12]	; (8005c34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40021000 	.word	0x40021000

08005c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e095      	b.n	8005d76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d108      	bne.n	8005c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5a:	d009      	beq.n	8005c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	61da      	str	r2, [r3, #28]
 8005c62:	e005      	b.n	8005c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fc faf2 	bl	8002274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cb0:	d902      	bls.n	8005cb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e002      	b.n	8005cbe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cc6:	d007      	beq.n	8005cd8 <HAL_SPI_Init+0xa0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	ea42 0103 	orr.w	r1, r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	f003 0204 	and.w	r2, r3, #4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d54:	ea42 0103 	orr.w	r1, r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b08a      	sub	sp, #40	; 0x28
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x26>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e1fb      	b.n	800619c <HAL_SPI_TransmitReceive+0x41e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dac:	f7fc fd82 	bl	80028b4 <HAL_GetTick>
 8005db0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005db8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005dc0:	887b      	ldrh	r3, [r7, #2]
 8005dc2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005dc4:	887b      	ldrh	r3, [r7, #2]
 8005dc6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dc8:	7efb      	ldrb	r3, [r7, #27]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d00e      	beq.n	8005dec <HAL_SPI_TransmitReceive+0x6e>
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd4:	d106      	bne.n	8005de4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <HAL_SPI_TransmitReceive+0x66>
 8005dde:	7efb      	ldrb	r3, [r7, #27]
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d003      	beq.n	8005dec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005dea:	e1cd      	b.n	8006188 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_SPI_TransmitReceive+0x80>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_SPI_TransmitReceive+0x80>
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e04:	e1c0      	b.n	8006188 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d003      	beq.n	8005e1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2205      	movs	r2, #5
 8005e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	887a      	ldrh	r2, [r7, #2]
 8005e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	887a      	ldrh	r2, [r7, #2]
 8005e32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	887a      	ldrh	r2, [r7, #2]
 8005e40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	887a      	ldrh	r2, [r7, #2]
 8005e46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e5c:	d802      	bhi.n	8005e64 <HAL_SPI_TransmitReceive+0xe6>
 8005e5e:	8a3b      	ldrh	r3, [r7, #16]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d908      	bls.n	8005e76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e72:	605a      	str	r2, [r3, #4]
 8005e74:	e007      	b.n	8005e86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d007      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eac:	d97c      	bls.n	8005fa8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x13e>
 8005eb6:	8a7b      	ldrh	r3, [r7, #18]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d169      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	881a      	ldrh	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	1c9a      	adds	r2, r3, #2
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee0:	e056      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d11b      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x1aa>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <HAL_SPI_TransmitReceive+0x1aa>
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d113      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d11c      	bne.n	8005f70 <HAL_SPI_TransmitReceive+0x1f2>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d016      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	b292      	uxth	r2, r2
 8005f4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f70:	f7fc fca0 	bl	80028b4 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d807      	bhi.n	8005f90 <HAL_SPI_TransmitReceive+0x212>
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d003      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f8e:	e0fb      	b.n	8006188 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1a3      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x164>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d19d      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x164>
 8005fa6:	e0df      	b.n	8006168 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_SPI_TransmitReceive+0x23a>
 8005fb0:	8a7b      	ldrh	r3, [r7, #18]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	f040 80cb 	bne.w	800614e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d912      	bls.n	8005fe8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b02      	subs	r3, #2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fe6:	e0b2      	b.n	800614e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800600e:	e09e      	b.n	800614e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d134      	bne.n	8006088 <HAL_SPI_TransmitReceive+0x30a>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d02f      	beq.n	8006088 <HAL_SPI_TransmitReceive+0x30a>
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	2b01      	cmp	r3, #1
 800602c:	d12c      	bne.n	8006088 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d912      	bls.n	800605e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	881a      	ldrh	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	1c9a      	adds	r2, r3, #2
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b02      	subs	r3, #2
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800605c:	e012      	b.n	8006084 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b01      	cmp	r3, #1
 8006094:	d148      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x3aa>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d042      	beq.n	8006128 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d923      	bls.n	80060f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	b292      	uxth	r2, r2
 80060ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b02      	subs	r3, #2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d81f      	bhi.n	8006124 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	e016      	b.n	8006124 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f103 020c 	add.w	r2, r3, #12
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	7812      	ldrb	r2, [r2, #0]
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006124:	2301      	movs	r3, #1
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006128:	f7fc fbc4 	bl	80028b4 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006134:	429a      	cmp	r2, r3
 8006136:	d803      	bhi.n	8006140 <HAL_SPI_TransmitReceive+0x3c2>
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d102      	bne.n	8006146 <HAL_SPI_TransmitReceive+0x3c8>
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800614c:	e01c      	b.n	8006188 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	f47f af5b 	bne.w	8006010 <HAL_SPI_TransmitReceive+0x292>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	f47f af54 	bne.w	8006010 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f92f 	bl	80063d0 <SPI_EndRxTxTransaction>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d006      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	661a      	str	r2, [r3, #96]	; 0x60
 8006184:	e000      	b.n	8006188 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006186:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800619c:	4618      	mov	r0, r3
 800619e:	3728      	adds	r7, #40	; 0x28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061b4:	f7fc fb7e 	bl	80028b4 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	4413      	add	r3, r2
 80061c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061c4:	f7fc fb76 	bl	80028b4 <HAL_GetTick>
 80061c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ca:	4b39      	ldr	r3, [pc, #228]	; (80062b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	015b      	lsls	r3, r3, #5
 80061d0:	0d1b      	lsrs	r3, r3, #20
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	fb02 f303 	mul.w	r3, r2, r3
 80061d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061da:	e054      	b.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d050      	beq.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061e4:	f7fc fb66 	bl	80028b4 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d902      	bls.n	80061fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d13d      	bne.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006212:	d111      	bne.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621c:	d004      	beq.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006226:	d107      	bne.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006240:	d10f      	bne.n	8006262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e017      	b.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3b01      	subs	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d19b      	bne.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3720      	adds	r7, #32
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000000 	.word	0x20000000

080062b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062c2:	f7fc faf7 	bl	80028b4 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	4413      	add	r3, r2
 80062d0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062d2:	f7fc faef 	bl	80028b4 <HAL_GetTick>
 80062d6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062d8:	4b3c      	ldr	r3, [pc, #240]	; (80063cc <SPI_WaitFifoStateUntilTimeout+0x118>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	00da      	lsls	r2, r3, #3
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	0d1b      	lsrs	r3, r3, #20
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80062f0:	e05f      	b.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062f8:	d106      	bne.n	8006308 <SPI_WaitFifoStateUntilTimeout+0x54>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d050      	beq.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006310:	f7fc fad0 	bl	80028b4 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	429a      	cmp	r2, r3
 800631e:	d902      	bls.n	8006326 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d13d      	bne.n	80063a2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006334:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633e:	d111      	bne.n	8006364 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006348:	d004      	beq.n	8006354 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006352:	d107      	bne.n	8006364 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006362:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636c:	d10f      	bne.n	800638e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800638c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e010      	b.n	80063c4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4013      	ands	r3, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d197      	bne.n	80062f2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20000000 	.word	0x20000000

080063d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff ff63 	bl	80062b4 <SPI_WaitFifoStateUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f8:	f043 0220 	orr.w	r2, r3, #32
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e027      	b.n	8006454 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	2180      	movs	r1, #128	; 0x80
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff fec8 	bl	80061a4 <SPI_WaitFlagStateUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641e:	f043 0220 	orr.w	r2, r3, #32
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e014      	b.n	8006454 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2200      	movs	r2, #0
 8006432:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f7ff ff3c 	bl	80062b4 <SPI_WaitFifoStateUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006446:	f043 0220 	orr.w	r2, r3, #32
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e000      	b.n	8006454 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e049      	b.n	8006502 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fb ff58 	bl	8002338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3304      	adds	r3, #4
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f000 fb0e 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d001      	beq.n	8006524 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e047      	b.n	80065b4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a23      	ldr	r2, [pc, #140]	; (80065c0 <HAL_TIM_Base_Start+0xb4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01d      	beq.n	8006572 <HAL_TIM_Base_Start+0x66>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653e:	d018      	beq.n	8006572 <HAL_TIM_Base_Start+0x66>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <HAL_TIM_Base_Start+0xb8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <HAL_TIM_Base_Start+0x66>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <HAL_TIM_Base_Start+0xbc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00e      	beq.n	8006572 <HAL_TIM_Base_Start+0x66>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1c      	ldr	r2, [pc, #112]	; (80065cc <HAL_TIM_Base_Start+0xc0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d009      	beq.n	8006572 <HAL_TIM_Base_Start+0x66>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <HAL_TIM_Base_Start+0xc4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d004      	beq.n	8006572 <HAL_TIM_Base_Start+0x66>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a19      	ldr	r2, [pc, #100]	; (80065d4 <HAL_TIM_Base_Start+0xc8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d115      	bne.n	800659e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <HAL_TIM_Base_Start+0xcc>)
 800657a:	4013      	ands	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b06      	cmp	r3, #6
 8006582:	d015      	beq.n	80065b0 <HAL_TIM_Base_Start+0xa4>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658a:	d011      	beq.n	80065b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659c:	e008      	b.n	80065b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0201 	orr.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e000      	b.n	80065b2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	40012c00 	.word	0x40012c00
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800
 80065cc:	40000c00 	.word	0x40000c00
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	00010007 	.word	0x00010007

080065dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d001      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e04f      	b.n	8006694 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a23      	ldr	r2, [pc, #140]	; (80066a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01d      	beq.n	8006652 <HAL_TIM_Base_Start_IT+0x76>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661e:	d018      	beq.n	8006652 <HAL_TIM_Base_Start_IT+0x76>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_TIM_Base_Start_IT+0x76>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_TIM_Base_Start_IT+0x76>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1c      	ldr	r2, [pc, #112]	; (80066ac <HAL_TIM_Base_Start_IT+0xd0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_TIM_Base_Start_IT+0x76>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1b      	ldr	r2, [pc, #108]	; (80066b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_TIM_Base_Start_IT+0x76>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d115      	bne.n	800667e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	4b17      	ldr	r3, [pc, #92]	; (80066b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800665a:	4013      	ands	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b06      	cmp	r3, #6
 8006662:	d015      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0xb4>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666a:	d011      	beq.n	8006690 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667c:	e008      	b.n	8006690 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e000      	b.n	8006692 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006690:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00
 80066b0:	40013400 	.word	0x40013400
 80066b4:	40014000 	.word	0x40014000
 80066b8:	00010007 	.word	0x00010007

080066bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d122      	bne.n	8006718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d11b      	bne.n	8006718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0202 	mvn.w	r2, #2
 80066e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f9be 	bl	8006a80 <HAL_TIM_IC_CaptureCallback>
 8006704:	e005      	b.n	8006712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f9b0 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f9c1 	bl	8006a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b04      	cmp	r3, #4
 8006724:	d122      	bne.n	800676c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b04      	cmp	r3, #4
 8006732:	d11b      	bne.n	800676c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0204 	mvn.w	r2, #4
 800673c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f994 	bl	8006a80 <HAL_TIM_IC_CaptureCallback>
 8006758:	e005      	b.n	8006766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f986 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f997 	bl	8006a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b08      	cmp	r3, #8
 8006778:	d122      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d11b      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0208 	mvn.w	r2, #8
 8006790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2204      	movs	r2, #4
 8006796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f96a 	bl	8006a80 <HAL_TIM_IC_CaptureCallback>
 80067ac:	e005      	b.n	80067ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f95c 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f96d 	bl	8006a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d122      	bne.n	8006814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d11b      	bne.n	8006814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0210 	mvn.w	r2, #16
 80067e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2208      	movs	r2, #8
 80067ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f940 	bl	8006a80 <HAL_TIM_IC_CaptureCallback>
 8006800:	e005      	b.n	800680e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f932 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f943 	bl	8006a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b01      	cmp	r3, #1
 8006820:	d10e      	bne.n	8006840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	d107      	bne.n	8006840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0201 	mvn.w	r2, #1
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb f8e6 	bl	8001a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d10e      	bne.n	800686c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006858:	2b80      	cmp	r3, #128	; 0x80
 800685a:	d107      	bne.n	800686c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 faee 	bl	8006e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687a:	d10e      	bne.n	800689a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006886:	2b80      	cmp	r3, #128	; 0x80
 8006888:	d107      	bne.n	800689a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fae1 	bl	8006e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	d10e      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d107      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f8f1 	bl	8006aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d10e      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d107      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f06f 0220 	mvn.w	r2, #32
 80068ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 faa1 	bl	8006e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_TIM_ConfigClockSource+0x18>
 800690e:	2302      	movs	r3, #2
 8006910:	e0a8      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x16a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006930:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006934:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d067      	beq.n	8006a1e <HAL_TIM_ConfigClockSource+0x124>
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d80b      	bhi.n	800696a <HAL_TIM_ConfigClockSource+0x70>
 8006952:	2b10      	cmp	r3, #16
 8006954:	d073      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0x144>
 8006956:	2b10      	cmp	r3, #16
 8006958:	d802      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x66>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d06f      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800695e:	e078      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006960:	2b20      	cmp	r3, #32
 8006962:	d06c      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0x144>
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d06a      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006968:	e073      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800696a:	2b70      	cmp	r3, #112	; 0x70
 800696c:	d00d      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x90>
 800696e:	2b70      	cmp	r3, #112	; 0x70
 8006970:	d804      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x82>
 8006972:	2b50      	cmp	r3, #80	; 0x50
 8006974:	d033      	beq.n	80069de <HAL_TIM_ConfigClockSource+0xe4>
 8006976:	2b60      	cmp	r3, #96	; 0x60
 8006978:	d041      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x104>
      break;
 800697a:	e06a      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d066      	beq.n	8006a50 <HAL_TIM_ConfigClockSource+0x156>
 8006982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006986:	d017      	beq.n	80069b8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006988:	e063      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6899      	ldr	r1, [r3, #8]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f000 f9a3 	bl	8006ce4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	609a      	str	r2, [r3, #8]
      break;
 80069b6:	e04c      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6899      	ldr	r1, [r3, #8]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f000 f98c 	bl	8006ce4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069da:	609a      	str	r2, [r3, #8]
      break;
 80069dc:	e039      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	6859      	ldr	r1, [r3, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f000 f900 	bl	8006bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2150      	movs	r1, #80	; 0x50
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f959 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 80069fc:	e029      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	6859      	ldr	r1, [r3, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f000 f91f 	bl	8006c4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2160      	movs	r1, #96	; 0x60
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f949 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006a1c:	e019      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6859      	ldr	r1, [r3, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f000 f8e0 	bl	8006bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2140      	movs	r1, #64	; 0x40
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 f939 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006a3c:	e009      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f000 f930 	bl	8006cae <TIM_ITRx_SetConfig>
        break;
 8006a4e:	e000      	b.n	8006a52 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006a50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a40      	ldr	r2, [pc, #256]	; (8006bd0 <TIM_Base_SetConfig+0x114>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ada:	d00f      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3d      	ldr	r2, [pc, #244]	; (8006bd4 <TIM_Base_SetConfig+0x118>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3c      	ldr	r2, [pc, #240]	; (8006bd8 <TIM_Base_SetConfig+0x11c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a3b      	ldr	r2, [pc, #236]	; (8006bdc <TIM_Base_SetConfig+0x120>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a3a      	ldr	r2, [pc, #232]	; (8006be0 <TIM_Base_SetConfig+0x124>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d108      	bne.n	8006b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a2f      	ldr	r2, [pc, #188]	; (8006bd0 <TIM_Base_SetConfig+0x114>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01f      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1c:	d01b      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <TIM_Base_SetConfig+0x118>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d017      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2b      	ldr	r2, [pc, #172]	; (8006bd8 <TIM_Base_SetConfig+0x11c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a2a      	ldr	r2, [pc, #168]	; (8006bdc <TIM_Base_SetConfig+0x120>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00f      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a29      	ldr	r2, [pc, #164]	; (8006be0 <TIM_Base_SetConfig+0x124>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a28      	ldr	r2, [pc, #160]	; (8006be4 <TIM_Base_SetConfig+0x128>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a27      	ldr	r2, [pc, #156]	; (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a26      	ldr	r2, [pc, #152]	; (8006bec <TIM_Base_SetConfig+0x130>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a10      	ldr	r2, [pc, #64]	; (8006bd0 <TIM_Base_SetConfig+0x114>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00f      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <TIM_Base_SetConfig+0x124>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00b      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <TIM_Base_SetConfig+0x128>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d007      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a0f      	ldr	r2, [pc, #60]	; (8006bec <TIM_Base_SetConfig+0x130>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d103      	bne.n	8006bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	615a      	str	r2, [r3, #20]
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800

08006bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 030a 	bic.w	r3, r3, #10
 8006c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b087      	sub	sp, #28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0210 	bic.w	r2, r3, #16
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f043 0307 	orr.w	r3, r3, #7
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	021a      	lsls	r2, r3, #8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e068      	b.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a2e      	ldr	r2, [pc, #184]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a2d      	ldr	r2, [pc, #180]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d108      	bne.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01d      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dae:	d018      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1b      	ldr	r2, [pc, #108]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d013      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1a      	ldr	r2, [pc, #104]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00e      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d10c      	bne.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	40014000 	.word	0x40014000

08006e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e040      	b.n	8006f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fb fa88 	bl	80023a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2224      	movs	r2, #36	; 0x24
 8006e9c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0201 	bic.w	r2, r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa1c 	bl	80072ec <UART_SetConfig>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e022      	b.n	8006f04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fc9a 	bl	8007800 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fd21 	bl	8007944 <UART_CheckIdleState>
 8006f02:	4603      	mov	r3, r0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	f040 8081 	bne.w	8007028 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <HAL_UART_Transmit+0x26>
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e079      	b.n	800702a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_UART_Transmit+0x38>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e072      	b.n	800702a <HAL_UART_Transmit+0x11e>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2221      	movs	r2, #33	; 0x21
 8006f56:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006f58:	f7fb fcac 	bl	80028b4 <HAL_GetTick>
 8006f5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	88fa      	ldrh	r2, [r7, #6]
 8006f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f76:	d108      	bne.n	8006f8a <HAL_UART_Transmit+0x7e>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	e003      	b.n	8006f92 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006f9a:	e02d      	b.n	8006ff8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2180      	movs	r1, #128	; 0x80
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fd11 	bl	80079ce <UART_WaitOnFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e039      	b.n	800702a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	881a      	ldrh	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	3302      	adds	r3, #2
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	e008      	b.n	8006fe6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	b292      	uxth	r2, r2
 8006fde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1cb      	bne.n	8006f9c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2200      	movs	r2, #0
 800700c:	2140      	movs	r1, #64	; 0x40
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fcdd 	bl	80079ce <UART_WaitOnFlagUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e005      	b.n	800702a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2220      	movs	r2, #32
 8007022:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	e000      	b.n	800702a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007028:	2302      	movs	r3, #2
  }
}
 800702a:	4618      	mov	r0, r3
 800702c:	3720      	adds	r7, #32
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	f640 030f 	movw	r3, #2063	; 0x80f
 800705a:	4013      	ands	r3, r2
 800705c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d113      	bne.n	800708c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00e      	beq.n	800708c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 8114 	beq.w	80072aa <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
      }
      return;
 800708a:	e10e      	b.n	80072aa <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80d6 	beq.w	8007240 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d105      	bne.n	80070aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	4b86      	ldr	r3, [pc, #536]	; (80072bc <HAL_UART_IRQHandler+0x288>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80cb 	beq.w	8007240 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00e      	beq.n	80070d2 <HAL_UART_IRQHandler+0x9e>
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2201      	movs	r2, #1
 80070c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ca:	f043 0201 	orr.w	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00e      	beq.n	80070fa <HAL_UART_IRQHandler+0xc6>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2202      	movs	r2, #2
 80070ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070f2:	f043 0204 	orr.w	r2, r3, #4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00e      	beq.n	8007122 <HAL_UART_IRQHandler+0xee>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d009      	beq.n	8007122 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2204      	movs	r2, #4
 8007114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711a:	f043 0202 	orr.w	r2, r3, #2
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d013      	beq.n	8007154 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d104      	bne.n	8007140 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2208      	movs	r2, #8
 8007146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800714c:	f043 0208 	orr.w	r2, r3, #8
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00f      	beq.n	800717e <HAL_UART_IRQHandler+0x14a>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007176:	f043 0220 	orr.w	r2, r3, #32
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8093 	beq.w	80072ae <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b40      	cmp	r3, #64	; 0x40
 80071be:	d004      	beq.n	80071ca <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d031      	beq.n	800722e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fc7a 	bl	8007ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d123      	bne.n	8007226 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fa:	4a31      	ldr	r2, [pc, #196]	; (80072c0 <HAL_UART_IRQHandler+0x28c>)
 80071fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007202:	4618      	mov	r0, r3
 8007204:	f7fc ff52 	bl	80040ac <HAL_DMA_Abort_IT>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d016      	beq.n	800723c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	e00e      	b.n	800723c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f85a 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007224:	e00a      	b.n	800723c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f856 	bl	80072d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722c:	e006      	b.n	800723c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f852 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800723a:	e038      	b.n	80072ae <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	bf00      	nop
    return;
 800723e:	e036      	b.n	80072ae <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00d      	beq.n	8007266 <HAL_UART_IRQHandler+0x232>
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800725c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fc7f 	bl	8007b62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007264:	e026      	b.n	80072b4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727e:	2b00      	cmp	r3, #0
 8007280:	d017      	beq.n	80072b2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
    }
    return;
 800728a:	e012      	b.n	80072b2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <HAL_UART_IRQHandler+0x280>
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d009      	beq.n	80072b4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fc45 	bl	8007b30 <UART_EndTransmit_IT>
    return;
 80072a6:	bf00      	nop
 80072a8:	e004      	b.n	80072b4 <HAL_UART_IRQHandler+0x280>
      return;
 80072aa:	bf00      	nop
 80072ac:	e002      	b.n	80072b4 <HAL_UART_IRQHandler+0x280>
    return;
 80072ae:	bf00      	nop
 80072b0:	e000      	b.n	80072b4 <HAL_UART_IRQHandler+0x280>
    return;
 80072b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80072b4:	3720      	adds	r7, #32
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	04000120 	.word	0x04000120
 80072c0:	08007b05 	.word	0x08007b05

080072c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80072f0:	b088      	sub	sp, #32
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	4313      	orrs	r3, r2
 8007310:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	4bac      	ldr	r3, [pc, #688]	; (80075cc <UART_SetConfig+0x2e0>)
 800731a:	4013      	ands	r3, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6812      	ldr	r2, [r2, #0]
 8007320:	69f9      	ldr	r1, [r7, #28]
 8007322:	430b      	orrs	r3, r1
 8007324:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4aa2      	ldr	r2, [pc, #648]	; (80075d0 <UART_SetConfig+0x2e4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d004      	beq.n	8007356 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	4313      	orrs	r3, r2
 8007354:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	430a      	orrs	r2, r1
 8007368:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a99      	ldr	r2, [pc, #612]	; (80075d4 <UART_SetConfig+0x2e8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d121      	bne.n	80073b8 <UART_SetConfig+0xcc>
 8007374:	4b98      	ldr	r3, [pc, #608]	; (80075d8 <UART_SetConfig+0x2ec>)
 8007376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d816      	bhi.n	80073b0 <UART_SetConfig+0xc4>
 8007382:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <UART_SetConfig+0x9c>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	08007399 	.word	0x08007399
 800738c:	080073a5 	.word	0x080073a5
 8007390:	0800739f 	.word	0x0800739f
 8007394:	080073ab 	.word	0x080073ab
 8007398:	2301      	movs	r3, #1
 800739a:	76fb      	strb	r3, [r7, #27]
 800739c:	e0e8      	b.n	8007570 <UART_SetConfig+0x284>
 800739e:	2302      	movs	r3, #2
 80073a0:	76fb      	strb	r3, [r7, #27]
 80073a2:	e0e5      	b.n	8007570 <UART_SetConfig+0x284>
 80073a4:	2304      	movs	r3, #4
 80073a6:	76fb      	strb	r3, [r7, #27]
 80073a8:	e0e2      	b.n	8007570 <UART_SetConfig+0x284>
 80073aa:	2308      	movs	r3, #8
 80073ac:	76fb      	strb	r3, [r7, #27]
 80073ae:	e0df      	b.n	8007570 <UART_SetConfig+0x284>
 80073b0:	2310      	movs	r3, #16
 80073b2:	76fb      	strb	r3, [r7, #27]
 80073b4:	bf00      	nop
 80073b6:	e0db      	b.n	8007570 <UART_SetConfig+0x284>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a87      	ldr	r2, [pc, #540]	; (80075dc <UART_SetConfig+0x2f0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d134      	bne.n	800742c <UART_SetConfig+0x140>
 80073c2:	4b85      	ldr	r3, [pc, #532]	; (80075d8 <UART_SetConfig+0x2ec>)
 80073c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c8:	f003 030c 	and.w	r3, r3, #12
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	d829      	bhi.n	8007424 <UART_SetConfig+0x138>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <UART_SetConfig+0xec>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	0800740d 	.word	0x0800740d
 80073dc:	08007425 	.word	0x08007425
 80073e0:	08007425 	.word	0x08007425
 80073e4:	08007425 	.word	0x08007425
 80073e8:	08007419 	.word	0x08007419
 80073ec:	08007425 	.word	0x08007425
 80073f0:	08007425 	.word	0x08007425
 80073f4:	08007425 	.word	0x08007425
 80073f8:	08007413 	.word	0x08007413
 80073fc:	08007425 	.word	0x08007425
 8007400:	08007425 	.word	0x08007425
 8007404:	08007425 	.word	0x08007425
 8007408:	0800741f 	.word	0x0800741f
 800740c:	2300      	movs	r3, #0
 800740e:	76fb      	strb	r3, [r7, #27]
 8007410:	e0ae      	b.n	8007570 <UART_SetConfig+0x284>
 8007412:	2302      	movs	r3, #2
 8007414:	76fb      	strb	r3, [r7, #27]
 8007416:	e0ab      	b.n	8007570 <UART_SetConfig+0x284>
 8007418:	2304      	movs	r3, #4
 800741a:	76fb      	strb	r3, [r7, #27]
 800741c:	e0a8      	b.n	8007570 <UART_SetConfig+0x284>
 800741e:	2308      	movs	r3, #8
 8007420:	76fb      	strb	r3, [r7, #27]
 8007422:	e0a5      	b.n	8007570 <UART_SetConfig+0x284>
 8007424:	2310      	movs	r3, #16
 8007426:	76fb      	strb	r3, [r7, #27]
 8007428:	bf00      	nop
 800742a:	e0a1      	b.n	8007570 <UART_SetConfig+0x284>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a6b      	ldr	r2, [pc, #428]	; (80075e0 <UART_SetConfig+0x2f4>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d120      	bne.n	8007478 <UART_SetConfig+0x18c>
 8007436:	4b68      	ldr	r3, [pc, #416]	; (80075d8 <UART_SetConfig+0x2ec>)
 8007438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007440:	2b10      	cmp	r3, #16
 8007442:	d00f      	beq.n	8007464 <UART_SetConfig+0x178>
 8007444:	2b10      	cmp	r3, #16
 8007446:	d802      	bhi.n	800744e <UART_SetConfig+0x162>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <UART_SetConfig+0x16c>
 800744c:	e010      	b.n	8007470 <UART_SetConfig+0x184>
 800744e:	2b20      	cmp	r3, #32
 8007450:	d005      	beq.n	800745e <UART_SetConfig+0x172>
 8007452:	2b30      	cmp	r3, #48	; 0x30
 8007454:	d009      	beq.n	800746a <UART_SetConfig+0x17e>
 8007456:	e00b      	b.n	8007470 <UART_SetConfig+0x184>
 8007458:	2300      	movs	r3, #0
 800745a:	76fb      	strb	r3, [r7, #27]
 800745c:	e088      	b.n	8007570 <UART_SetConfig+0x284>
 800745e:	2302      	movs	r3, #2
 8007460:	76fb      	strb	r3, [r7, #27]
 8007462:	e085      	b.n	8007570 <UART_SetConfig+0x284>
 8007464:	2304      	movs	r3, #4
 8007466:	76fb      	strb	r3, [r7, #27]
 8007468:	e082      	b.n	8007570 <UART_SetConfig+0x284>
 800746a:	2308      	movs	r3, #8
 800746c:	76fb      	strb	r3, [r7, #27]
 800746e:	e07f      	b.n	8007570 <UART_SetConfig+0x284>
 8007470:	2310      	movs	r3, #16
 8007472:	76fb      	strb	r3, [r7, #27]
 8007474:	bf00      	nop
 8007476:	e07b      	b.n	8007570 <UART_SetConfig+0x284>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a59      	ldr	r2, [pc, #356]	; (80075e4 <UART_SetConfig+0x2f8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d120      	bne.n	80074c4 <UART_SetConfig+0x1d8>
 8007482:	4b55      	ldr	r3, [pc, #340]	; (80075d8 <UART_SetConfig+0x2ec>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007488:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d00f      	beq.n	80074b0 <UART_SetConfig+0x1c4>
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d802      	bhi.n	800749a <UART_SetConfig+0x1ae>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <UART_SetConfig+0x1b8>
 8007498:	e010      	b.n	80074bc <UART_SetConfig+0x1d0>
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d005      	beq.n	80074aa <UART_SetConfig+0x1be>
 800749e:	2bc0      	cmp	r3, #192	; 0xc0
 80074a0:	d009      	beq.n	80074b6 <UART_SetConfig+0x1ca>
 80074a2:	e00b      	b.n	80074bc <UART_SetConfig+0x1d0>
 80074a4:	2300      	movs	r3, #0
 80074a6:	76fb      	strb	r3, [r7, #27]
 80074a8:	e062      	b.n	8007570 <UART_SetConfig+0x284>
 80074aa:	2302      	movs	r3, #2
 80074ac:	76fb      	strb	r3, [r7, #27]
 80074ae:	e05f      	b.n	8007570 <UART_SetConfig+0x284>
 80074b0:	2304      	movs	r3, #4
 80074b2:	76fb      	strb	r3, [r7, #27]
 80074b4:	e05c      	b.n	8007570 <UART_SetConfig+0x284>
 80074b6:	2308      	movs	r3, #8
 80074b8:	76fb      	strb	r3, [r7, #27]
 80074ba:	e059      	b.n	8007570 <UART_SetConfig+0x284>
 80074bc:	2310      	movs	r3, #16
 80074be:	76fb      	strb	r3, [r7, #27]
 80074c0:	bf00      	nop
 80074c2:	e055      	b.n	8007570 <UART_SetConfig+0x284>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a47      	ldr	r2, [pc, #284]	; (80075e8 <UART_SetConfig+0x2fc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d124      	bne.n	8007518 <UART_SetConfig+0x22c>
 80074ce:	4b42      	ldr	r3, [pc, #264]	; (80075d8 <UART_SetConfig+0x2ec>)
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074dc:	d012      	beq.n	8007504 <UART_SetConfig+0x218>
 80074de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e2:	d802      	bhi.n	80074ea <UART_SetConfig+0x1fe>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <UART_SetConfig+0x20c>
 80074e8:	e012      	b.n	8007510 <UART_SetConfig+0x224>
 80074ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ee:	d006      	beq.n	80074fe <UART_SetConfig+0x212>
 80074f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f4:	d009      	beq.n	800750a <UART_SetConfig+0x21e>
 80074f6:	e00b      	b.n	8007510 <UART_SetConfig+0x224>
 80074f8:	2300      	movs	r3, #0
 80074fa:	76fb      	strb	r3, [r7, #27]
 80074fc:	e038      	b.n	8007570 <UART_SetConfig+0x284>
 80074fe:	2302      	movs	r3, #2
 8007500:	76fb      	strb	r3, [r7, #27]
 8007502:	e035      	b.n	8007570 <UART_SetConfig+0x284>
 8007504:	2304      	movs	r3, #4
 8007506:	76fb      	strb	r3, [r7, #27]
 8007508:	e032      	b.n	8007570 <UART_SetConfig+0x284>
 800750a:	2308      	movs	r3, #8
 800750c:	76fb      	strb	r3, [r7, #27]
 800750e:	e02f      	b.n	8007570 <UART_SetConfig+0x284>
 8007510:	2310      	movs	r3, #16
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	bf00      	nop
 8007516:	e02b      	b.n	8007570 <UART_SetConfig+0x284>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a2c      	ldr	r2, [pc, #176]	; (80075d0 <UART_SetConfig+0x2e4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d124      	bne.n	800756c <UART_SetConfig+0x280>
 8007522:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <UART_SetConfig+0x2ec>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800752c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007530:	d012      	beq.n	8007558 <UART_SetConfig+0x26c>
 8007532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007536:	d802      	bhi.n	800753e <UART_SetConfig+0x252>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <UART_SetConfig+0x260>
 800753c:	e012      	b.n	8007564 <UART_SetConfig+0x278>
 800753e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007542:	d006      	beq.n	8007552 <UART_SetConfig+0x266>
 8007544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007548:	d009      	beq.n	800755e <UART_SetConfig+0x272>
 800754a:	e00b      	b.n	8007564 <UART_SetConfig+0x278>
 800754c:	2300      	movs	r3, #0
 800754e:	76fb      	strb	r3, [r7, #27]
 8007550:	e00e      	b.n	8007570 <UART_SetConfig+0x284>
 8007552:	2302      	movs	r3, #2
 8007554:	76fb      	strb	r3, [r7, #27]
 8007556:	e00b      	b.n	8007570 <UART_SetConfig+0x284>
 8007558:	2304      	movs	r3, #4
 800755a:	76fb      	strb	r3, [r7, #27]
 800755c:	e008      	b.n	8007570 <UART_SetConfig+0x284>
 800755e:	2308      	movs	r3, #8
 8007560:	76fb      	strb	r3, [r7, #27]
 8007562:	e005      	b.n	8007570 <UART_SetConfig+0x284>
 8007564:	2310      	movs	r3, #16
 8007566:	76fb      	strb	r3, [r7, #27]
 8007568:	bf00      	nop
 800756a:	e001      	b.n	8007570 <UART_SetConfig+0x284>
 800756c:	2310      	movs	r3, #16
 800756e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a16      	ldr	r2, [pc, #88]	; (80075d0 <UART_SetConfig+0x2e4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	f040 8087 	bne.w	800768a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800757c:	7efb      	ldrb	r3, [r7, #27]
 800757e:	2b08      	cmp	r3, #8
 8007580:	d836      	bhi.n	80075f0 <UART_SetConfig+0x304>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <UART_SetConfig+0x29c>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075ad 	.word	0x080075ad
 800758c:	080075f1 	.word	0x080075f1
 8007590:	080075b5 	.word	0x080075b5
 8007594:	080075f1 	.word	0x080075f1
 8007598:	080075bb 	.word	0x080075bb
 800759c:	080075f1 	.word	0x080075f1
 80075a0:	080075f1 	.word	0x080075f1
 80075a4:	080075f1 	.word	0x080075f1
 80075a8:	080075c3 	.word	0x080075c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075ac:	f7fd fe08 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 80075b0:	6178      	str	r0, [r7, #20]
        break;
 80075b2:	e022      	b.n	80075fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b4:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <UART_SetConfig+0x300>)
 80075b6:	617b      	str	r3, [r7, #20]
        break;
 80075b8:	e01f      	b.n	80075fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ba:	f7fd fd6b 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 80075be:	6178      	str	r0, [r7, #20]
        break;
 80075c0:	e01b      	b.n	80075fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c6:	617b      	str	r3, [r7, #20]
        break;
 80075c8:	e017      	b.n	80075fa <UART_SetConfig+0x30e>
 80075ca:	bf00      	nop
 80075cc:	efff69f3 	.word	0xefff69f3
 80075d0:	40008000 	.word	0x40008000
 80075d4:	40013800 	.word	0x40013800
 80075d8:	40021000 	.word	0x40021000
 80075dc:	40004400 	.word	0x40004400
 80075e0:	40004800 	.word	0x40004800
 80075e4:	40004c00 	.word	0x40004c00
 80075e8:	40005000 	.word	0x40005000
 80075ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	76bb      	strb	r3, [r7, #26]
        break;
 80075f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80f1 	beq.w	80077e4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	4413      	add	r3, r2
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	429a      	cmp	r2, r3
 8007610:	d305      	bcc.n	800761e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	429a      	cmp	r2, r3
 800761c:	d902      	bls.n	8007624 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	76bb      	strb	r3, [r7, #26]
 8007622:	e0df      	b.n	80077e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	4619      	mov	r1, r3
 8007628:	f04f 0200 	mov.w	r2, #0
 800762c:	f04f 0300 	mov.w	r3, #0
 8007630:	f04f 0400 	mov.w	r4, #0
 8007634:	0214      	lsls	r4, r2, #8
 8007636:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800763a:	020b      	lsls	r3, r1, #8
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	6852      	ldr	r2, [r2, #4]
 8007640:	0852      	lsrs	r2, r2, #1
 8007642:	4611      	mov	r1, r2
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	eb13 0b01 	adds.w	fp, r3, r1
 800764c:	eb44 0c02 	adc.w	ip, r4, r2
 8007650:	4658      	mov	r0, fp
 8007652:	4661      	mov	r1, ip
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f04f 0400 	mov.w	r4, #0
 800765c:	461a      	mov	r2, r3
 800765e:	4623      	mov	r3, r4
 8007660:	f7f9 fb62 	bl	8000d28 <__aeabi_uldivmod>
 8007664:	4603      	mov	r3, r0
 8007666:	460c      	mov	r4, r1
 8007668:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007670:	d308      	bcc.n	8007684 <UART_SetConfig+0x398>
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007678:	d204      	bcs.n	8007684 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	e0af      	b.n	80077e4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	76bb      	strb	r3, [r7, #26]
 8007688:	e0ac      	b.n	80077e4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007692:	d15b      	bne.n	800774c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007694:	7efb      	ldrb	r3, [r7, #27]
 8007696:	2b08      	cmp	r3, #8
 8007698:	d827      	bhi.n	80076ea <UART_SetConfig+0x3fe>
 800769a:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <UART_SetConfig+0x3b4>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076cd 	.word	0x080076cd
 80076a8:	080076d5 	.word	0x080076d5
 80076ac:	080076eb 	.word	0x080076eb
 80076b0:	080076db 	.word	0x080076db
 80076b4:	080076eb 	.word	0x080076eb
 80076b8:	080076eb 	.word	0x080076eb
 80076bc:	080076eb 	.word	0x080076eb
 80076c0:	080076e3 	.word	0x080076e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c4:	f7fd fd7c 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 80076c8:	6178      	str	r0, [r7, #20]
        break;
 80076ca:	e013      	b.n	80076f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076cc:	f7fd fd8e 	bl	80051ec <HAL_RCC_GetPCLK2Freq>
 80076d0:	6178      	str	r0, [r7, #20]
        break;
 80076d2:	e00f      	b.n	80076f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d4:	4b49      	ldr	r3, [pc, #292]	; (80077fc <UART_SetConfig+0x510>)
 80076d6:	617b      	str	r3, [r7, #20]
        break;
 80076d8:	e00c      	b.n	80076f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076da:	f7fd fcdb 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 80076de:	6178      	str	r0, [r7, #20]
        break;
 80076e0:	e008      	b.n	80076f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e6:	617b      	str	r3, [r7, #20]
        break;
 80076e8:	e004      	b.n	80076f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	76bb      	strb	r3, [r7, #26]
        break;
 80076f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d074      	beq.n	80077e4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	005a      	lsls	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	085b      	lsrs	r3, r3, #1
 8007704:	441a      	add	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	fbb2 f3f3 	udiv	r3, r2, r3
 800770e:	b29b      	uxth	r3, r3
 8007710:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	2b0f      	cmp	r3, #15
 8007716:	d916      	bls.n	8007746 <UART_SetConfig+0x45a>
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800771e:	d212      	bcs.n	8007746 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	b29b      	uxth	r3, r3
 8007724:	f023 030f 	bic.w	r3, r3, #15
 8007728:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	b29b      	uxth	r3, r3
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	b29a      	uxth	r2, r3
 8007736:	89fb      	ldrh	r3, [r7, #14]
 8007738:	4313      	orrs	r3, r2
 800773a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	89fa      	ldrh	r2, [r7, #14]
 8007742:	60da      	str	r2, [r3, #12]
 8007744:	e04e      	b.n	80077e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	76bb      	strb	r3, [r7, #26]
 800774a:	e04b      	b.n	80077e4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800774c:	7efb      	ldrb	r3, [r7, #27]
 800774e:	2b08      	cmp	r3, #8
 8007750:	d827      	bhi.n	80077a2 <UART_SetConfig+0x4b6>
 8007752:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <UART_SetConfig+0x46c>)
 8007754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007758:	0800777d 	.word	0x0800777d
 800775c:	08007785 	.word	0x08007785
 8007760:	0800778d 	.word	0x0800778d
 8007764:	080077a3 	.word	0x080077a3
 8007768:	08007793 	.word	0x08007793
 800776c:	080077a3 	.word	0x080077a3
 8007770:	080077a3 	.word	0x080077a3
 8007774:	080077a3 	.word	0x080077a3
 8007778:	0800779b 	.word	0x0800779b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800777c:	f7fd fd20 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8007780:	6178      	str	r0, [r7, #20]
        break;
 8007782:	e013      	b.n	80077ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007784:	f7fd fd32 	bl	80051ec <HAL_RCC_GetPCLK2Freq>
 8007788:	6178      	str	r0, [r7, #20]
        break;
 800778a:	e00f      	b.n	80077ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800778c:	4b1b      	ldr	r3, [pc, #108]	; (80077fc <UART_SetConfig+0x510>)
 800778e:	617b      	str	r3, [r7, #20]
        break;
 8007790:	e00c      	b.n	80077ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007792:	f7fd fc7f 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 8007796:	6178      	str	r0, [r7, #20]
        break;
 8007798:	e008      	b.n	80077ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779e:	617b      	str	r3, [r7, #20]
        break;
 80077a0:	e004      	b.n	80077ac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	76bb      	strb	r3, [r7, #26]
        break;
 80077aa:	bf00      	nop
    }

    if (pclk != 0U)
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	085a      	lsrs	r2, r3, #1
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	441a      	add	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b0f      	cmp	r3, #15
 80077cc:	d908      	bls.n	80077e0 <UART_SetConfig+0x4f4>
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d4:	d204      	bcs.n	80077e0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	60da      	str	r2, [r3, #12]
 80077de:	e001      	b.n	80077e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80077f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80077fc:	00f42400 	.word	0x00f42400

08007800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00a      	beq.n	800782a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00a      	beq.n	80078b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01a      	beq.n	8007916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078fe:	d10a      	bne.n	8007916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	605a      	str	r2, [r3, #4]
  }
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af02      	add	r7, sp, #8
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007952:	f7fa ffaf 	bl	80028b4 <HAL_GetTick>
 8007956:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b08      	cmp	r3, #8
 8007964:	d10e      	bne.n	8007984 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007966:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f82a 	bl	80079ce <UART_WaitOnFlagUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e020      	b.n	80079c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b04      	cmp	r3, #4
 8007990:	d10e      	bne.n	80079b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007992:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f814 	bl	80079ce <UART_WaitOnFlagUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e00a      	b.n	80079c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	603b      	str	r3, [r7, #0]
 80079da:	4613      	mov	r3, r2
 80079dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079de:	e05d      	b.n	8007a9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e6:	d059      	beq.n	8007a9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e8:	f7fa ff64 	bl	80028b4 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d302      	bcc.n	80079fe <UART_WaitOnFlagUntilTimeout+0x30>
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d11b      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0201 	bic.w	r2, r2, #1
 8007a1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e042      	b.n	8007abc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d02b      	beq.n	8007a9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a52:	d123      	bne.n	8007a9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a6c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0201 	bic.w	r2, r2, #1
 8007a7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e00f      	b.n	8007abc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69da      	ldr	r2, [r3, #28]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	bf0c      	ite	eq
 8007aac:	2301      	moveq	r3, #1
 8007aae:	2300      	movne	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d092      	beq.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ada:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689a      	ldr	r2, [r3, #8]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7ff fbd8 	bl	80072d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fbb5 	bl	80072c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
	...

08007b78 <__errno>:
 8007b78:	4b01      	ldr	r3, [pc, #4]	; (8007b80 <__errno+0x8>)
 8007b7a:	6818      	ldr	r0, [r3, #0]
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	2000000c 	.word	0x2000000c

08007b84 <__libc_init_array>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4e0d      	ldr	r6, [pc, #52]	; (8007bbc <__libc_init_array+0x38>)
 8007b88:	4c0d      	ldr	r4, [pc, #52]	; (8007bc0 <__libc_init_array+0x3c>)
 8007b8a:	1ba4      	subs	r4, r4, r6
 8007b8c:	10a4      	asrs	r4, r4, #2
 8007b8e:	2500      	movs	r5, #0
 8007b90:	42a5      	cmp	r5, r4
 8007b92:	d109      	bne.n	8007ba8 <__libc_init_array+0x24>
 8007b94:	4e0b      	ldr	r6, [pc, #44]	; (8007bc4 <__libc_init_array+0x40>)
 8007b96:	4c0c      	ldr	r4, [pc, #48]	; (8007bc8 <__libc_init_array+0x44>)
 8007b98:	f004 f9fc 	bl	800bf94 <_init>
 8007b9c:	1ba4      	subs	r4, r4, r6
 8007b9e:	10a4      	asrs	r4, r4, #2
 8007ba0:	2500      	movs	r5, #0
 8007ba2:	42a5      	cmp	r5, r4
 8007ba4:	d105      	bne.n	8007bb2 <__libc_init_array+0x2e>
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}
 8007ba8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bac:	4798      	blx	r3
 8007bae:	3501      	adds	r5, #1
 8007bb0:	e7ee      	b.n	8007b90 <__libc_init_array+0xc>
 8007bb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bb6:	4798      	blx	r3
 8007bb8:	3501      	adds	r5, #1
 8007bba:	e7f2      	b.n	8007ba2 <__libc_init_array+0x1e>
 8007bbc:	0800c348 	.word	0x0800c348
 8007bc0:	0800c348 	.word	0x0800c348
 8007bc4:	0800c348 	.word	0x0800c348
 8007bc8:	0800c34c 	.word	0x0800c34c

08007bcc <memset>:
 8007bcc:	4402      	add	r2, r0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d100      	bne.n	8007bd6 <memset+0xa>
 8007bd4:	4770      	bx	lr
 8007bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bda:	e7f9      	b.n	8007bd0 <memset+0x4>

08007bdc <__cvt>:
 8007bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	ec55 4b10 	vmov	r4, r5, d0
 8007be4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007be6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bea:	2d00      	cmp	r5, #0
 8007bec:	460e      	mov	r6, r1
 8007bee:	4691      	mov	r9, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	bfb8      	it	lt
 8007bf4:	4622      	movlt	r2, r4
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f027 0720 	bic.w	r7, r7, #32
 8007bfc:	bfbb      	ittet	lt
 8007bfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c02:	461d      	movlt	r5, r3
 8007c04:	2300      	movge	r3, #0
 8007c06:	232d      	movlt	r3, #45	; 0x2d
 8007c08:	bfb8      	it	lt
 8007c0a:	4614      	movlt	r4, r2
 8007c0c:	2f46      	cmp	r7, #70	; 0x46
 8007c0e:	700b      	strb	r3, [r1, #0]
 8007c10:	d004      	beq.n	8007c1c <__cvt+0x40>
 8007c12:	2f45      	cmp	r7, #69	; 0x45
 8007c14:	d100      	bne.n	8007c18 <__cvt+0x3c>
 8007c16:	3601      	adds	r6, #1
 8007c18:	2102      	movs	r1, #2
 8007c1a:	e000      	b.n	8007c1e <__cvt+0x42>
 8007c1c:	2103      	movs	r1, #3
 8007c1e:	ab03      	add	r3, sp, #12
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	ab02      	add	r3, sp, #8
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	4632      	mov	r2, r6
 8007c28:	4653      	mov	r3, sl
 8007c2a:	ec45 4b10 	vmov	d0, r4, r5
 8007c2e:	f001 fd8f 	bl	8009750 <_dtoa_r>
 8007c32:	2f47      	cmp	r7, #71	; 0x47
 8007c34:	4680      	mov	r8, r0
 8007c36:	d102      	bne.n	8007c3e <__cvt+0x62>
 8007c38:	f019 0f01 	tst.w	r9, #1
 8007c3c:	d026      	beq.n	8007c8c <__cvt+0xb0>
 8007c3e:	2f46      	cmp	r7, #70	; 0x46
 8007c40:	eb08 0906 	add.w	r9, r8, r6
 8007c44:	d111      	bne.n	8007c6a <__cvt+0x8e>
 8007c46:	f898 3000 	ldrb.w	r3, [r8]
 8007c4a:	2b30      	cmp	r3, #48	; 0x30
 8007c4c:	d10a      	bne.n	8007c64 <__cvt+0x88>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2300      	movs	r3, #0
 8007c52:	4620      	mov	r0, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	f7f8 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c5a:	b918      	cbnz	r0, 8007c64 <__cvt+0x88>
 8007c5c:	f1c6 0601 	rsb	r6, r6, #1
 8007c60:	f8ca 6000 	str.w	r6, [sl]
 8007c64:	f8da 3000 	ldr.w	r3, [sl]
 8007c68:	4499      	add	r9, r3
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4620      	mov	r0, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7f8 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c76:	b938      	cbnz	r0, 8007c88 <__cvt+0xac>
 8007c78:	2230      	movs	r2, #48	; 0x30
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	454b      	cmp	r3, r9
 8007c7e:	d205      	bcs.n	8007c8c <__cvt+0xb0>
 8007c80:	1c59      	adds	r1, r3, #1
 8007c82:	9103      	str	r1, [sp, #12]
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	e7f8      	b.n	8007c7a <__cvt+0x9e>
 8007c88:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c90:	eba3 0308 	sub.w	r3, r3, r8
 8007c94:	4640      	mov	r0, r8
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	b004      	add	sp, #16
 8007c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007c9e <__exponent>:
 8007c9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	bfba      	itte	lt
 8007ca6:	4249      	neglt	r1, r1
 8007ca8:	232d      	movlt	r3, #45	; 0x2d
 8007caa:	232b      	movge	r3, #43	; 0x2b
 8007cac:	2909      	cmp	r1, #9
 8007cae:	f804 2b02 	strb.w	r2, [r4], #2
 8007cb2:	7043      	strb	r3, [r0, #1]
 8007cb4:	dd20      	ble.n	8007cf8 <__exponent+0x5a>
 8007cb6:	f10d 0307 	add.w	r3, sp, #7
 8007cba:	461f      	mov	r7, r3
 8007cbc:	260a      	movs	r6, #10
 8007cbe:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cc2:	fb06 1115 	mls	r1, r6, r5, r1
 8007cc6:	3130      	adds	r1, #48	; 0x30
 8007cc8:	2d09      	cmp	r5, #9
 8007cca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cce:	f103 32ff 	add.w	r2, r3, #4294967295
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	dc09      	bgt.n	8007cea <__exponent+0x4c>
 8007cd6:	3130      	adds	r1, #48	; 0x30
 8007cd8:	3b02      	subs	r3, #2
 8007cda:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007cde:	42bb      	cmp	r3, r7
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	d304      	bcc.n	8007cee <__exponent+0x50>
 8007ce4:	1a10      	subs	r0, r2, r0
 8007ce6:	b003      	add	sp, #12
 8007ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cea:	4613      	mov	r3, r2
 8007cec:	e7e7      	b.n	8007cbe <__exponent+0x20>
 8007cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf2:	f804 2b01 	strb.w	r2, [r4], #1
 8007cf6:	e7f2      	b.n	8007cde <__exponent+0x40>
 8007cf8:	2330      	movs	r3, #48	; 0x30
 8007cfa:	4419      	add	r1, r3
 8007cfc:	7083      	strb	r3, [r0, #2]
 8007cfe:	1d02      	adds	r2, r0, #4
 8007d00:	70c1      	strb	r1, [r0, #3]
 8007d02:	e7ef      	b.n	8007ce4 <__exponent+0x46>

08007d04 <_printf_float>:
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	b08d      	sub	sp, #52	; 0x34
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007d10:	4616      	mov	r6, r2
 8007d12:	461f      	mov	r7, r3
 8007d14:	4605      	mov	r5, r0
 8007d16:	f002 fec9 	bl	800aaac <_localeconv_r>
 8007d1a:	6803      	ldr	r3, [r0, #0]
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7f8 fa56 	bl	80001d0 <strlen>
 8007d24:	2300      	movs	r3, #0
 8007d26:	930a      	str	r3, [sp, #40]	; 0x28
 8007d28:	f8d8 3000 	ldr.w	r3, [r8]
 8007d2c:	9005      	str	r0, [sp, #20]
 8007d2e:	3307      	adds	r3, #7
 8007d30:	f023 0307 	bic.w	r3, r3, #7
 8007d34:	f103 0208 	add.w	r2, r3, #8
 8007d38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d3c:	f8d4 b000 	ldr.w	fp, [r4]
 8007d40:	f8c8 2000 	str.w	r2, [r8]
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d4c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d54:	9307      	str	r3, [sp, #28]
 8007d56:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5e:	4ba7      	ldr	r3, [pc, #668]	; (8007ffc <_printf_float+0x2f8>)
 8007d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d64:	f7f8 fee2 	bl	8000b2c <__aeabi_dcmpun>
 8007d68:	bb70      	cbnz	r0, 8007dc8 <_printf_float+0xc4>
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	4ba3      	ldr	r3, [pc, #652]	; (8007ffc <_printf_float+0x2f8>)
 8007d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d74:	f7f8 febc 	bl	8000af0 <__aeabi_dcmple>
 8007d78:	bb30      	cbnz	r0, 8007dc8 <_printf_float+0xc4>
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4640      	mov	r0, r8
 8007d80:	4649      	mov	r1, r9
 8007d82:	f7f8 feab 	bl	8000adc <__aeabi_dcmplt>
 8007d86:	b110      	cbz	r0, 8007d8e <_printf_float+0x8a>
 8007d88:	232d      	movs	r3, #45	; 0x2d
 8007d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d8e:	4a9c      	ldr	r2, [pc, #624]	; (8008000 <_printf_float+0x2fc>)
 8007d90:	4b9c      	ldr	r3, [pc, #624]	; (8008004 <_printf_float+0x300>)
 8007d92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007d96:	bf8c      	ite	hi
 8007d98:	4690      	movhi	r8, r2
 8007d9a:	4698      	movls	r8, r3
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	f02b 0204 	bic.w	r2, fp, #4
 8007da2:	6123      	str	r3, [r4, #16]
 8007da4:	6022      	str	r2, [r4, #0]
 8007da6:	f04f 0900 	mov.w	r9, #0
 8007daa:	9700      	str	r7, [sp, #0]
 8007dac:	4633      	mov	r3, r6
 8007dae:	aa0b      	add	r2, sp, #44	; 0x2c
 8007db0:	4621      	mov	r1, r4
 8007db2:	4628      	mov	r0, r5
 8007db4:	f000 f9e6 	bl	8008184 <_printf_common>
 8007db8:	3001      	adds	r0, #1
 8007dba:	f040 808d 	bne.w	8007ed8 <_printf_float+0x1d4>
 8007dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc2:	b00d      	add	sp, #52	; 0x34
 8007dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc8:	4642      	mov	r2, r8
 8007dca:	464b      	mov	r3, r9
 8007dcc:	4640      	mov	r0, r8
 8007dce:	4649      	mov	r1, r9
 8007dd0:	f7f8 feac 	bl	8000b2c <__aeabi_dcmpun>
 8007dd4:	b110      	cbz	r0, 8007ddc <_printf_float+0xd8>
 8007dd6:	4a8c      	ldr	r2, [pc, #560]	; (8008008 <_printf_float+0x304>)
 8007dd8:	4b8c      	ldr	r3, [pc, #560]	; (800800c <_printf_float+0x308>)
 8007dda:	e7da      	b.n	8007d92 <_printf_float+0x8e>
 8007ddc:	6861      	ldr	r1, [r4, #4]
 8007dde:	1c4b      	adds	r3, r1, #1
 8007de0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007de4:	a80a      	add	r0, sp, #40	; 0x28
 8007de6:	d13e      	bne.n	8007e66 <_printf_float+0x162>
 8007de8:	2306      	movs	r3, #6
 8007dea:	6063      	str	r3, [r4, #4]
 8007dec:	2300      	movs	r3, #0
 8007dee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007df2:	ab09      	add	r3, sp, #36	; 0x24
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	ec49 8b10 	vmov	d0, r8, r9
 8007dfa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dfe:	6022      	str	r2, [r4, #0]
 8007e00:	f8cd a004 	str.w	sl, [sp, #4]
 8007e04:	6861      	ldr	r1, [r4, #4]
 8007e06:	4628      	mov	r0, r5
 8007e08:	f7ff fee8 	bl	8007bdc <__cvt>
 8007e0c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007e10:	2b47      	cmp	r3, #71	; 0x47
 8007e12:	4680      	mov	r8, r0
 8007e14:	d109      	bne.n	8007e2a <_printf_float+0x126>
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	1cd8      	adds	r0, r3, #3
 8007e1a:	db02      	blt.n	8007e22 <_printf_float+0x11e>
 8007e1c:	6862      	ldr	r2, [r4, #4]
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	dd47      	ble.n	8007eb2 <_printf_float+0x1ae>
 8007e22:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e26:	fa5f fa8a 	uxtb.w	sl, sl
 8007e2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e30:	d824      	bhi.n	8007e7c <_printf_float+0x178>
 8007e32:	3901      	subs	r1, #1
 8007e34:	4652      	mov	r2, sl
 8007e36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e3a:	9109      	str	r1, [sp, #36]	; 0x24
 8007e3c:	f7ff ff2f 	bl	8007c9e <__exponent>
 8007e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e42:	1813      	adds	r3, r2, r0
 8007e44:	2a01      	cmp	r2, #1
 8007e46:	4681      	mov	r9, r0
 8007e48:	6123      	str	r3, [r4, #16]
 8007e4a:	dc02      	bgt.n	8007e52 <_printf_float+0x14e>
 8007e4c:	6822      	ldr	r2, [r4, #0]
 8007e4e:	07d1      	lsls	r1, r2, #31
 8007e50:	d501      	bpl.n	8007e56 <_printf_float+0x152>
 8007e52:	3301      	adds	r3, #1
 8007e54:	6123      	str	r3, [r4, #16]
 8007e56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0a5      	beq.n	8007daa <_printf_float+0xa6>
 8007e5e:	232d      	movs	r3, #45	; 0x2d
 8007e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e64:	e7a1      	b.n	8007daa <_printf_float+0xa6>
 8007e66:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007e6a:	f000 8177 	beq.w	800815c <_printf_float+0x458>
 8007e6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e72:	d1bb      	bne.n	8007dec <_printf_float+0xe8>
 8007e74:	2900      	cmp	r1, #0
 8007e76:	d1b9      	bne.n	8007dec <_printf_float+0xe8>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e7b6      	b.n	8007dea <_printf_float+0xe6>
 8007e7c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007e80:	d119      	bne.n	8007eb6 <_printf_float+0x1b2>
 8007e82:	2900      	cmp	r1, #0
 8007e84:	6863      	ldr	r3, [r4, #4]
 8007e86:	dd0c      	ble.n	8007ea2 <_printf_float+0x19e>
 8007e88:	6121      	str	r1, [r4, #16]
 8007e8a:	b913      	cbnz	r3, 8007e92 <_printf_float+0x18e>
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	07d2      	lsls	r2, r2, #31
 8007e90:	d502      	bpl.n	8007e98 <_printf_float+0x194>
 8007e92:	3301      	adds	r3, #1
 8007e94:	440b      	add	r3, r1
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007e9c:	f04f 0900 	mov.w	r9, #0
 8007ea0:	e7d9      	b.n	8007e56 <_printf_float+0x152>
 8007ea2:	b913      	cbnz	r3, 8007eaa <_printf_float+0x1a6>
 8007ea4:	6822      	ldr	r2, [r4, #0]
 8007ea6:	07d0      	lsls	r0, r2, #31
 8007ea8:	d501      	bpl.n	8007eae <_printf_float+0x1aa>
 8007eaa:	3302      	adds	r3, #2
 8007eac:	e7f3      	b.n	8007e96 <_printf_float+0x192>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7f1      	b.n	8007e96 <_printf_float+0x192>
 8007eb2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007eb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	db05      	blt.n	8007eca <_printf_float+0x1c6>
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	07d1      	lsls	r1, r2, #31
 8007ec4:	d5e8      	bpl.n	8007e98 <_printf_float+0x194>
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	e7e5      	b.n	8007e96 <_printf_float+0x192>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bfd4      	ite	le
 8007ece:	f1c3 0302 	rsble	r3, r3, #2
 8007ed2:	2301      	movgt	r3, #1
 8007ed4:	4413      	add	r3, r2
 8007ed6:	e7de      	b.n	8007e96 <_printf_float+0x192>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	055a      	lsls	r2, r3, #21
 8007edc:	d407      	bmi.n	8007eee <_printf_float+0x1ea>
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b8      	blx	r7
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d12b      	bne.n	8007f44 <_printf_float+0x240>
 8007eec:	e767      	b.n	8007dbe <_printf_float+0xba>
 8007eee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007ef2:	f240 80dc 	bls.w	80080ae <_printf_float+0x3aa>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007efe:	f7f8 fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d033      	beq.n	8007f6e <_printf_float+0x26a>
 8007f06:	2301      	movs	r3, #1
 8007f08:	4a41      	ldr	r2, [pc, #260]	; (8008010 <_printf_float+0x30c>)
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b8      	blx	r7
 8007f10:	3001      	adds	r0, #1
 8007f12:	f43f af54 	beq.w	8007dbe <_printf_float+0xba>
 8007f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	db02      	blt.n	8007f24 <_printf_float+0x220>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	07d8      	lsls	r0, r3, #31
 8007f22:	d50f      	bpl.n	8007f44 <_printf_float+0x240>
 8007f24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	f43f af45 	beq.w	8007dbe <_printf_float+0xba>
 8007f34:	f04f 0800 	mov.w	r8, #0
 8007f38:	f104 091a 	add.w	r9, r4, #26
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4543      	cmp	r3, r8
 8007f42:	dc09      	bgt.n	8007f58 <_printf_float+0x254>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	079b      	lsls	r3, r3, #30
 8007f48:	f100 8103 	bmi.w	8008152 <_printf_float+0x44e>
 8007f4c:	68e0      	ldr	r0, [r4, #12]
 8007f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f50:	4298      	cmp	r0, r3
 8007f52:	bfb8      	it	lt
 8007f54:	4618      	movlt	r0, r3
 8007f56:	e734      	b.n	8007dc2 <_printf_float+0xbe>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	464a      	mov	r2, r9
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	3001      	adds	r0, #1
 8007f64:	f43f af2b 	beq.w	8007dbe <_printf_float+0xba>
 8007f68:	f108 0801 	add.w	r8, r8, #1
 8007f6c:	e7e6      	b.n	8007f3c <_printf_float+0x238>
 8007f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dc2b      	bgt.n	8007fcc <_printf_float+0x2c8>
 8007f74:	2301      	movs	r3, #1
 8007f76:	4a26      	ldr	r2, [pc, #152]	; (8008010 <_printf_float+0x30c>)
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f af1d 	beq.w	8007dbe <_printf_float+0xba>
 8007f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f86:	b923      	cbnz	r3, 8007f92 <_printf_float+0x28e>
 8007f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8a:	b913      	cbnz	r3, 8007f92 <_printf_float+0x28e>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	07d9      	lsls	r1, r3, #31
 8007f90:	d5d8      	bpl.n	8007f44 <_printf_float+0x240>
 8007f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f96:	4631      	mov	r1, r6
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b8      	blx	r7
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f43f af0e 	beq.w	8007dbe <_printf_float+0xba>
 8007fa2:	f04f 0900 	mov.w	r9, #0
 8007fa6:	f104 0a1a 	add.w	sl, r4, #26
 8007faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fac:	425b      	negs	r3, r3
 8007fae:	454b      	cmp	r3, r9
 8007fb0:	dc01      	bgt.n	8007fb6 <_printf_float+0x2b2>
 8007fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb4:	e794      	b.n	8007ee0 <_printf_float+0x1dc>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4652      	mov	r2, sl
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	47b8      	blx	r7
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	f43f aefc 	beq.w	8007dbe <_printf_float+0xba>
 8007fc6:	f109 0901 	add.w	r9, r9, #1
 8007fca:	e7ee      	b.n	8007faa <_printf_float+0x2a6>
 8007fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	bfa8      	it	ge
 8007fd4:	461a      	movge	r2, r3
 8007fd6:	2a00      	cmp	r2, #0
 8007fd8:	4691      	mov	r9, r2
 8007fda:	dd07      	ble.n	8007fec <_printf_float+0x2e8>
 8007fdc:	4613      	mov	r3, r2
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f aee9 	beq.w	8007dbe <_printf_float+0xba>
 8007fec:	f104 031a 	add.w	r3, r4, #26
 8007ff0:	f04f 0b00 	mov.w	fp, #0
 8007ff4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ff8:	9306      	str	r3, [sp, #24]
 8007ffa:	e015      	b.n	8008028 <_printf_float+0x324>
 8007ffc:	7fefffff 	.word	0x7fefffff
 8008000:	0800c028 	.word	0x0800c028
 8008004:	0800c024 	.word	0x0800c024
 8008008:	0800c030 	.word	0x0800c030
 800800c:	0800c02c 	.word	0x0800c02c
 8008010:	0800c034 	.word	0x0800c034
 8008014:	2301      	movs	r3, #1
 8008016:	9a06      	ldr	r2, [sp, #24]
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	f43f aecd 	beq.w	8007dbe <_printf_float+0xba>
 8008024:	f10b 0b01 	add.w	fp, fp, #1
 8008028:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800802c:	ebaa 0309 	sub.w	r3, sl, r9
 8008030:	455b      	cmp	r3, fp
 8008032:	dcef      	bgt.n	8008014 <_printf_float+0x310>
 8008034:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008038:	429a      	cmp	r2, r3
 800803a:	44d0      	add	r8, sl
 800803c:	db15      	blt.n	800806a <_printf_float+0x366>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	07da      	lsls	r2, r3, #31
 8008042:	d412      	bmi.n	800806a <_printf_float+0x366>
 8008044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008046:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008048:	eba3 020a 	sub.w	r2, r3, sl
 800804c:	eba3 0a01 	sub.w	sl, r3, r1
 8008050:	4592      	cmp	sl, r2
 8008052:	bfa8      	it	ge
 8008054:	4692      	movge	sl, r2
 8008056:	f1ba 0f00 	cmp.w	sl, #0
 800805a:	dc0e      	bgt.n	800807a <_printf_float+0x376>
 800805c:	f04f 0800 	mov.w	r8, #0
 8008060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008064:	f104 091a 	add.w	r9, r4, #26
 8008068:	e019      	b.n	800809e <_printf_float+0x39a>
 800806a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	d1e5      	bne.n	8008044 <_printf_float+0x340>
 8008078:	e6a1      	b.n	8007dbe <_printf_float+0xba>
 800807a:	4653      	mov	r3, sl
 800807c:	4642      	mov	r2, r8
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	d1e9      	bne.n	800805c <_printf_float+0x358>
 8008088:	e699      	b.n	8007dbe <_printf_float+0xba>
 800808a:	2301      	movs	r3, #1
 800808c:	464a      	mov	r2, r9
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	f43f ae92 	beq.w	8007dbe <_printf_float+0xba>
 800809a:	f108 0801 	add.w	r8, r8, #1
 800809e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	eba3 030a 	sub.w	r3, r3, sl
 80080a8:	4543      	cmp	r3, r8
 80080aa:	dcee      	bgt.n	800808a <_printf_float+0x386>
 80080ac:	e74a      	b.n	8007f44 <_printf_float+0x240>
 80080ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b0:	2a01      	cmp	r2, #1
 80080b2:	dc01      	bgt.n	80080b8 <_printf_float+0x3b4>
 80080b4:	07db      	lsls	r3, r3, #31
 80080b6:	d53a      	bpl.n	800812e <_printf_float+0x42a>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4642      	mov	r2, r8
 80080bc:	4631      	mov	r1, r6
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f ae7b 	beq.w	8007dbe <_printf_float+0xba>
 80080c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	f108 0801 	add.w	r8, r8, #1
 80080d8:	f43f ae71 	beq.w	8007dbe <_printf_float+0xba>
 80080dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080de:	2200      	movs	r2, #0
 80080e0:	f103 3aff 	add.w	sl, r3, #4294967295
 80080e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080e8:	2300      	movs	r3, #0
 80080ea:	f7f8 fced 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ee:	b9c8      	cbnz	r0, 8008124 <_printf_float+0x420>
 80080f0:	4653      	mov	r3, sl
 80080f2:	4642      	mov	r2, r8
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	d10e      	bne.n	800811c <_printf_float+0x418>
 80080fe:	e65e      	b.n	8007dbe <_printf_float+0xba>
 8008100:	2301      	movs	r3, #1
 8008102:	4652      	mov	r2, sl
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f ae57 	beq.w	8007dbe <_printf_float+0xba>
 8008110:	f108 0801 	add.w	r8, r8, #1
 8008114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008116:	3b01      	subs	r3, #1
 8008118:	4543      	cmp	r3, r8
 800811a:	dcf1      	bgt.n	8008100 <_printf_float+0x3fc>
 800811c:	464b      	mov	r3, r9
 800811e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008122:	e6de      	b.n	8007ee2 <_printf_float+0x1de>
 8008124:	f04f 0800 	mov.w	r8, #0
 8008128:	f104 0a1a 	add.w	sl, r4, #26
 800812c:	e7f2      	b.n	8008114 <_printf_float+0x410>
 800812e:	2301      	movs	r3, #1
 8008130:	e7df      	b.n	80080f2 <_printf_float+0x3ee>
 8008132:	2301      	movs	r3, #1
 8008134:	464a      	mov	r2, r9
 8008136:	4631      	mov	r1, r6
 8008138:	4628      	mov	r0, r5
 800813a:	47b8      	blx	r7
 800813c:	3001      	adds	r0, #1
 800813e:	f43f ae3e 	beq.w	8007dbe <_printf_float+0xba>
 8008142:	f108 0801 	add.w	r8, r8, #1
 8008146:	68e3      	ldr	r3, [r4, #12]
 8008148:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	4543      	cmp	r3, r8
 800814e:	dcf0      	bgt.n	8008132 <_printf_float+0x42e>
 8008150:	e6fc      	b.n	8007f4c <_printf_float+0x248>
 8008152:	f04f 0800 	mov.w	r8, #0
 8008156:	f104 0919 	add.w	r9, r4, #25
 800815a:	e7f4      	b.n	8008146 <_printf_float+0x442>
 800815c:	2900      	cmp	r1, #0
 800815e:	f43f ae8b 	beq.w	8007e78 <_printf_float+0x174>
 8008162:	2300      	movs	r3, #0
 8008164:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008168:	ab09      	add	r3, sp, #36	; 0x24
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	ec49 8b10 	vmov	d0, r8, r9
 8008170:	6022      	str	r2, [r4, #0]
 8008172:	f8cd a004 	str.w	sl, [sp, #4]
 8008176:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800817a:	4628      	mov	r0, r5
 800817c:	f7ff fd2e 	bl	8007bdc <__cvt>
 8008180:	4680      	mov	r8, r0
 8008182:	e648      	b.n	8007e16 <_printf_float+0x112>

08008184 <_printf_common>:
 8008184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008188:	4691      	mov	r9, r2
 800818a:	461f      	mov	r7, r3
 800818c:	688a      	ldr	r2, [r1, #8]
 800818e:	690b      	ldr	r3, [r1, #16]
 8008190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008194:	4293      	cmp	r3, r2
 8008196:	bfb8      	it	lt
 8008198:	4613      	movlt	r3, r2
 800819a:	f8c9 3000 	str.w	r3, [r9]
 800819e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081a2:	4606      	mov	r6, r0
 80081a4:	460c      	mov	r4, r1
 80081a6:	b112      	cbz	r2, 80081ae <_printf_common+0x2a>
 80081a8:	3301      	adds	r3, #1
 80081aa:	f8c9 3000 	str.w	r3, [r9]
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	0699      	lsls	r1, r3, #26
 80081b2:	bf42      	ittt	mi
 80081b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80081b8:	3302      	addmi	r3, #2
 80081ba:	f8c9 3000 	strmi.w	r3, [r9]
 80081be:	6825      	ldr	r5, [r4, #0]
 80081c0:	f015 0506 	ands.w	r5, r5, #6
 80081c4:	d107      	bne.n	80081d6 <_printf_common+0x52>
 80081c6:	f104 0a19 	add.w	sl, r4, #25
 80081ca:	68e3      	ldr	r3, [r4, #12]
 80081cc:	f8d9 2000 	ldr.w	r2, [r9]
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	42ab      	cmp	r3, r5
 80081d4:	dc28      	bgt.n	8008228 <_printf_common+0xa4>
 80081d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	3300      	adds	r3, #0
 80081de:	bf18      	it	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	0692      	lsls	r2, r2, #26
 80081e4:	d42d      	bmi.n	8008242 <_printf_common+0xbe>
 80081e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ea:	4639      	mov	r1, r7
 80081ec:	4630      	mov	r0, r6
 80081ee:	47c0      	blx	r8
 80081f0:	3001      	adds	r0, #1
 80081f2:	d020      	beq.n	8008236 <_printf_common+0xb2>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	68e5      	ldr	r5, [r4, #12]
 80081f8:	f8d9 2000 	ldr.w	r2, [r9]
 80081fc:	f003 0306 	and.w	r3, r3, #6
 8008200:	2b04      	cmp	r3, #4
 8008202:	bf08      	it	eq
 8008204:	1aad      	subeq	r5, r5, r2
 8008206:	68a3      	ldr	r3, [r4, #8]
 8008208:	6922      	ldr	r2, [r4, #16]
 800820a:	bf0c      	ite	eq
 800820c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008210:	2500      	movne	r5, #0
 8008212:	4293      	cmp	r3, r2
 8008214:	bfc4      	itt	gt
 8008216:	1a9b      	subgt	r3, r3, r2
 8008218:	18ed      	addgt	r5, r5, r3
 800821a:	f04f 0900 	mov.w	r9, #0
 800821e:	341a      	adds	r4, #26
 8008220:	454d      	cmp	r5, r9
 8008222:	d11a      	bne.n	800825a <_printf_common+0xd6>
 8008224:	2000      	movs	r0, #0
 8008226:	e008      	b.n	800823a <_printf_common+0xb6>
 8008228:	2301      	movs	r3, #1
 800822a:	4652      	mov	r2, sl
 800822c:	4639      	mov	r1, r7
 800822e:	4630      	mov	r0, r6
 8008230:	47c0      	blx	r8
 8008232:	3001      	adds	r0, #1
 8008234:	d103      	bne.n	800823e <_printf_common+0xba>
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	3501      	adds	r5, #1
 8008240:	e7c3      	b.n	80081ca <_printf_common+0x46>
 8008242:	18e1      	adds	r1, r4, r3
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	2030      	movs	r0, #48	; 0x30
 8008248:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800824c:	4422      	add	r2, r4
 800824e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008252:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008256:	3302      	adds	r3, #2
 8008258:	e7c5      	b.n	80081e6 <_printf_common+0x62>
 800825a:	2301      	movs	r3, #1
 800825c:	4622      	mov	r2, r4
 800825e:	4639      	mov	r1, r7
 8008260:	4630      	mov	r0, r6
 8008262:	47c0      	blx	r8
 8008264:	3001      	adds	r0, #1
 8008266:	d0e6      	beq.n	8008236 <_printf_common+0xb2>
 8008268:	f109 0901 	add.w	r9, r9, #1
 800826c:	e7d8      	b.n	8008220 <_printf_common+0x9c>
	...

08008270 <_printf_i>:
 8008270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008274:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008278:	460c      	mov	r4, r1
 800827a:	7e09      	ldrb	r1, [r1, #24]
 800827c:	b085      	sub	sp, #20
 800827e:	296e      	cmp	r1, #110	; 0x6e
 8008280:	4617      	mov	r7, r2
 8008282:	4606      	mov	r6, r0
 8008284:	4698      	mov	r8, r3
 8008286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008288:	f000 80b3 	beq.w	80083f2 <_printf_i+0x182>
 800828c:	d822      	bhi.n	80082d4 <_printf_i+0x64>
 800828e:	2963      	cmp	r1, #99	; 0x63
 8008290:	d036      	beq.n	8008300 <_printf_i+0x90>
 8008292:	d80a      	bhi.n	80082aa <_printf_i+0x3a>
 8008294:	2900      	cmp	r1, #0
 8008296:	f000 80b9 	beq.w	800840c <_printf_i+0x19c>
 800829a:	2958      	cmp	r1, #88	; 0x58
 800829c:	f000 8083 	beq.w	80083a6 <_printf_i+0x136>
 80082a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80082a8:	e032      	b.n	8008310 <_printf_i+0xa0>
 80082aa:	2964      	cmp	r1, #100	; 0x64
 80082ac:	d001      	beq.n	80082b2 <_printf_i+0x42>
 80082ae:	2969      	cmp	r1, #105	; 0x69
 80082b0:	d1f6      	bne.n	80082a0 <_printf_i+0x30>
 80082b2:	6820      	ldr	r0, [r4, #0]
 80082b4:	6813      	ldr	r3, [r2, #0]
 80082b6:	0605      	lsls	r5, r0, #24
 80082b8:	f103 0104 	add.w	r1, r3, #4
 80082bc:	d52a      	bpl.n	8008314 <_printf_i+0xa4>
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6011      	str	r1, [r2, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	da03      	bge.n	80082ce <_printf_i+0x5e>
 80082c6:	222d      	movs	r2, #45	; 0x2d
 80082c8:	425b      	negs	r3, r3
 80082ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80082ce:	486f      	ldr	r0, [pc, #444]	; (800848c <_printf_i+0x21c>)
 80082d0:	220a      	movs	r2, #10
 80082d2:	e039      	b.n	8008348 <_printf_i+0xd8>
 80082d4:	2973      	cmp	r1, #115	; 0x73
 80082d6:	f000 809d 	beq.w	8008414 <_printf_i+0x1a4>
 80082da:	d808      	bhi.n	80082ee <_printf_i+0x7e>
 80082dc:	296f      	cmp	r1, #111	; 0x6f
 80082de:	d020      	beq.n	8008322 <_printf_i+0xb2>
 80082e0:	2970      	cmp	r1, #112	; 0x70
 80082e2:	d1dd      	bne.n	80082a0 <_printf_i+0x30>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	f043 0320 	orr.w	r3, r3, #32
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	e003      	b.n	80082f6 <_printf_i+0x86>
 80082ee:	2975      	cmp	r1, #117	; 0x75
 80082f0:	d017      	beq.n	8008322 <_printf_i+0xb2>
 80082f2:	2978      	cmp	r1, #120	; 0x78
 80082f4:	d1d4      	bne.n	80082a0 <_printf_i+0x30>
 80082f6:	2378      	movs	r3, #120	; 0x78
 80082f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082fc:	4864      	ldr	r0, [pc, #400]	; (8008490 <_printf_i+0x220>)
 80082fe:	e055      	b.n	80083ac <_printf_i+0x13c>
 8008300:	6813      	ldr	r3, [r2, #0]
 8008302:	1d19      	adds	r1, r3, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6011      	str	r1, [r2, #0]
 8008308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800830c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008310:	2301      	movs	r3, #1
 8008312:	e08c      	b.n	800842e <_printf_i+0x1be>
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6011      	str	r1, [r2, #0]
 8008318:	f010 0f40 	tst.w	r0, #64	; 0x40
 800831c:	bf18      	it	ne
 800831e:	b21b      	sxthne	r3, r3
 8008320:	e7cf      	b.n	80082c2 <_printf_i+0x52>
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	6825      	ldr	r5, [r4, #0]
 8008326:	1d18      	adds	r0, r3, #4
 8008328:	6010      	str	r0, [r2, #0]
 800832a:	0628      	lsls	r0, r5, #24
 800832c:	d501      	bpl.n	8008332 <_printf_i+0xc2>
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	e002      	b.n	8008338 <_printf_i+0xc8>
 8008332:	0668      	lsls	r0, r5, #25
 8008334:	d5fb      	bpl.n	800832e <_printf_i+0xbe>
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	4854      	ldr	r0, [pc, #336]	; (800848c <_printf_i+0x21c>)
 800833a:	296f      	cmp	r1, #111	; 0x6f
 800833c:	bf14      	ite	ne
 800833e:	220a      	movne	r2, #10
 8008340:	2208      	moveq	r2, #8
 8008342:	2100      	movs	r1, #0
 8008344:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008348:	6865      	ldr	r5, [r4, #4]
 800834a:	60a5      	str	r5, [r4, #8]
 800834c:	2d00      	cmp	r5, #0
 800834e:	f2c0 8095 	blt.w	800847c <_printf_i+0x20c>
 8008352:	6821      	ldr	r1, [r4, #0]
 8008354:	f021 0104 	bic.w	r1, r1, #4
 8008358:	6021      	str	r1, [r4, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d13d      	bne.n	80083da <_printf_i+0x16a>
 800835e:	2d00      	cmp	r5, #0
 8008360:	f040 808e 	bne.w	8008480 <_printf_i+0x210>
 8008364:	4665      	mov	r5, ip
 8008366:	2a08      	cmp	r2, #8
 8008368:	d10b      	bne.n	8008382 <_printf_i+0x112>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	07db      	lsls	r3, r3, #31
 800836e:	d508      	bpl.n	8008382 <_printf_i+0x112>
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	6862      	ldr	r2, [r4, #4]
 8008374:	429a      	cmp	r2, r3
 8008376:	bfde      	ittt	le
 8008378:	2330      	movle	r3, #48	; 0x30
 800837a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800837e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008382:	ebac 0305 	sub.w	r3, ip, r5
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	f8cd 8000 	str.w	r8, [sp]
 800838c:	463b      	mov	r3, r7
 800838e:	aa03      	add	r2, sp, #12
 8008390:	4621      	mov	r1, r4
 8008392:	4630      	mov	r0, r6
 8008394:	f7ff fef6 	bl	8008184 <_printf_common>
 8008398:	3001      	adds	r0, #1
 800839a:	d14d      	bne.n	8008438 <_printf_i+0x1c8>
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	b005      	add	sp, #20
 80083a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083a6:	4839      	ldr	r0, [pc, #228]	; (800848c <_printf_i+0x21c>)
 80083a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80083ac:	6813      	ldr	r3, [r2, #0]
 80083ae:	6821      	ldr	r1, [r4, #0]
 80083b0:	1d1d      	adds	r5, r3, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6015      	str	r5, [r2, #0]
 80083b6:	060a      	lsls	r2, r1, #24
 80083b8:	d50b      	bpl.n	80083d2 <_printf_i+0x162>
 80083ba:	07ca      	lsls	r2, r1, #31
 80083bc:	bf44      	itt	mi
 80083be:	f041 0120 	orrmi.w	r1, r1, #32
 80083c2:	6021      	strmi	r1, [r4, #0]
 80083c4:	b91b      	cbnz	r3, 80083ce <_printf_i+0x15e>
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	f022 0220 	bic.w	r2, r2, #32
 80083cc:	6022      	str	r2, [r4, #0]
 80083ce:	2210      	movs	r2, #16
 80083d0:	e7b7      	b.n	8008342 <_printf_i+0xd2>
 80083d2:	064d      	lsls	r5, r1, #25
 80083d4:	bf48      	it	mi
 80083d6:	b29b      	uxthmi	r3, r3
 80083d8:	e7ef      	b.n	80083ba <_printf_i+0x14a>
 80083da:	4665      	mov	r5, ip
 80083dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80083e0:	fb02 3311 	mls	r3, r2, r1, r3
 80083e4:	5cc3      	ldrb	r3, [r0, r3]
 80083e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80083ea:	460b      	mov	r3, r1
 80083ec:	2900      	cmp	r1, #0
 80083ee:	d1f5      	bne.n	80083dc <_printf_i+0x16c>
 80083f0:	e7b9      	b.n	8008366 <_printf_i+0xf6>
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	6825      	ldr	r5, [r4, #0]
 80083f6:	6961      	ldr	r1, [r4, #20]
 80083f8:	1d18      	adds	r0, r3, #4
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	0628      	lsls	r0, r5, #24
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	d501      	bpl.n	8008406 <_printf_i+0x196>
 8008402:	6019      	str	r1, [r3, #0]
 8008404:	e002      	b.n	800840c <_printf_i+0x19c>
 8008406:	066a      	lsls	r2, r5, #25
 8008408:	d5fb      	bpl.n	8008402 <_printf_i+0x192>
 800840a:	8019      	strh	r1, [r3, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	6123      	str	r3, [r4, #16]
 8008410:	4665      	mov	r5, ip
 8008412:	e7b9      	b.n	8008388 <_printf_i+0x118>
 8008414:	6813      	ldr	r3, [r2, #0]
 8008416:	1d19      	adds	r1, r3, #4
 8008418:	6011      	str	r1, [r2, #0]
 800841a:	681d      	ldr	r5, [r3, #0]
 800841c:	6862      	ldr	r2, [r4, #4]
 800841e:	2100      	movs	r1, #0
 8008420:	4628      	mov	r0, r5
 8008422:	f7f7 fedd 	bl	80001e0 <memchr>
 8008426:	b108      	cbz	r0, 800842c <_printf_i+0x1bc>
 8008428:	1b40      	subs	r0, r0, r5
 800842a:	6060      	str	r0, [r4, #4]
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	6123      	str	r3, [r4, #16]
 8008430:	2300      	movs	r3, #0
 8008432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008436:	e7a7      	b.n	8008388 <_printf_i+0x118>
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	462a      	mov	r2, r5
 800843c:	4639      	mov	r1, r7
 800843e:	4630      	mov	r0, r6
 8008440:	47c0      	blx	r8
 8008442:	3001      	adds	r0, #1
 8008444:	d0aa      	beq.n	800839c <_printf_i+0x12c>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	079b      	lsls	r3, r3, #30
 800844a:	d413      	bmi.n	8008474 <_printf_i+0x204>
 800844c:	68e0      	ldr	r0, [r4, #12]
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	4298      	cmp	r0, r3
 8008452:	bfb8      	it	lt
 8008454:	4618      	movlt	r0, r3
 8008456:	e7a3      	b.n	80083a0 <_printf_i+0x130>
 8008458:	2301      	movs	r3, #1
 800845a:	464a      	mov	r2, r9
 800845c:	4639      	mov	r1, r7
 800845e:	4630      	mov	r0, r6
 8008460:	47c0      	blx	r8
 8008462:	3001      	adds	r0, #1
 8008464:	d09a      	beq.n	800839c <_printf_i+0x12c>
 8008466:	3501      	adds	r5, #1
 8008468:	68e3      	ldr	r3, [r4, #12]
 800846a:	9a03      	ldr	r2, [sp, #12]
 800846c:	1a9b      	subs	r3, r3, r2
 800846e:	42ab      	cmp	r3, r5
 8008470:	dcf2      	bgt.n	8008458 <_printf_i+0x1e8>
 8008472:	e7eb      	b.n	800844c <_printf_i+0x1dc>
 8008474:	2500      	movs	r5, #0
 8008476:	f104 0919 	add.w	r9, r4, #25
 800847a:	e7f5      	b.n	8008468 <_printf_i+0x1f8>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1ac      	bne.n	80083da <_printf_i+0x16a>
 8008480:	7803      	ldrb	r3, [r0, #0]
 8008482:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008486:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800848a:	e76c      	b.n	8008366 <_printf_i+0xf6>
 800848c:	0800c036 	.word	0x0800c036
 8008490:	0800c047 	.word	0x0800c047

08008494 <_scanf_float>:
 8008494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	469a      	mov	sl, r3
 800849a:	688b      	ldr	r3, [r1, #8]
 800849c:	4616      	mov	r6, r2
 800849e:	1e5a      	subs	r2, r3, #1
 80084a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084a4:	b087      	sub	sp, #28
 80084a6:	bf83      	ittte	hi
 80084a8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80084ac:	189b      	addhi	r3, r3, r2
 80084ae:	9301      	strhi	r3, [sp, #4]
 80084b0:	2300      	movls	r3, #0
 80084b2:	bf86      	itte	hi
 80084b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084b8:	608b      	strhi	r3, [r1, #8]
 80084ba:	9301      	strls	r3, [sp, #4]
 80084bc:	680b      	ldr	r3, [r1, #0]
 80084be:	4688      	mov	r8, r1
 80084c0:	f04f 0b00 	mov.w	fp, #0
 80084c4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084c8:	f848 3b1c 	str.w	r3, [r8], #28
 80084cc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80084d0:	4607      	mov	r7, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	4645      	mov	r5, r8
 80084d6:	465a      	mov	r2, fp
 80084d8:	46d9      	mov	r9, fp
 80084da:	f8cd b008 	str.w	fp, [sp, #8]
 80084de:	68a1      	ldr	r1, [r4, #8]
 80084e0:	b181      	cbz	r1, 8008504 <_scanf_float+0x70>
 80084e2:	6833      	ldr	r3, [r6, #0]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b49      	cmp	r3, #73	; 0x49
 80084e8:	d071      	beq.n	80085ce <_scanf_float+0x13a>
 80084ea:	d84d      	bhi.n	8008588 <_scanf_float+0xf4>
 80084ec:	2b39      	cmp	r3, #57	; 0x39
 80084ee:	d840      	bhi.n	8008572 <_scanf_float+0xde>
 80084f0:	2b31      	cmp	r3, #49	; 0x31
 80084f2:	f080 8088 	bcs.w	8008606 <_scanf_float+0x172>
 80084f6:	2b2d      	cmp	r3, #45	; 0x2d
 80084f8:	f000 8090 	beq.w	800861c <_scanf_float+0x188>
 80084fc:	d815      	bhi.n	800852a <_scanf_float+0x96>
 80084fe:	2b2b      	cmp	r3, #43	; 0x2b
 8008500:	f000 808c 	beq.w	800861c <_scanf_float+0x188>
 8008504:	f1b9 0f00 	cmp.w	r9, #0
 8008508:	d003      	beq.n	8008512 <_scanf_float+0x7e>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	3a01      	subs	r2, #1
 8008514:	2a01      	cmp	r2, #1
 8008516:	f200 80ea 	bhi.w	80086ee <_scanf_float+0x25a>
 800851a:	4545      	cmp	r5, r8
 800851c:	f200 80dc 	bhi.w	80086d8 <_scanf_float+0x244>
 8008520:	2601      	movs	r6, #1
 8008522:	4630      	mov	r0, r6
 8008524:	b007      	add	sp, #28
 8008526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852a:	2b2e      	cmp	r3, #46	; 0x2e
 800852c:	f000 809f 	beq.w	800866e <_scanf_float+0x1da>
 8008530:	2b30      	cmp	r3, #48	; 0x30
 8008532:	d1e7      	bne.n	8008504 <_scanf_float+0x70>
 8008534:	6820      	ldr	r0, [r4, #0]
 8008536:	f410 7f80 	tst.w	r0, #256	; 0x100
 800853a:	d064      	beq.n	8008606 <_scanf_float+0x172>
 800853c:	9b01      	ldr	r3, [sp, #4]
 800853e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008542:	6020      	str	r0, [r4, #0]
 8008544:	f109 0901 	add.w	r9, r9, #1
 8008548:	b11b      	cbz	r3, 8008552 <_scanf_float+0xbe>
 800854a:	3b01      	subs	r3, #1
 800854c:	3101      	adds	r1, #1
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	60a1      	str	r1, [r4, #8]
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	3b01      	subs	r3, #1
 8008556:	60a3      	str	r3, [r4, #8]
 8008558:	6923      	ldr	r3, [r4, #16]
 800855a:	3301      	adds	r3, #1
 800855c:	6123      	str	r3, [r4, #16]
 800855e:	6873      	ldr	r3, [r6, #4]
 8008560:	3b01      	subs	r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	6073      	str	r3, [r6, #4]
 8008566:	f340 80ac 	ble.w	80086c2 <_scanf_float+0x22e>
 800856a:	6833      	ldr	r3, [r6, #0]
 800856c:	3301      	adds	r3, #1
 800856e:	6033      	str	r3, [r6, #0]
 8008570:	e7b5      	b.n	80084de <_scanf_float+0x4a>
 8008572:	2b45      	cmp	r3, #69	; 0x45
 8008574:	f000 8085 	beq.w	8008682 <_scanf_float+0x1ee>
 8008578:	2b46      	cmp	r3, #70	; 0x46
 800857a:	d06a      	beq.n	8008652 <_scanf_float+0x1be>
 800857c:	2b41      	cmp	r3, #65	; 0x41
 800857e:	d1c1      	bne.n	8008504 <_scanf_float+0x70>
 8008580:	2a01      	cmp	r2, #1
 8008582:	d1bf      	bne.n	8008504 <_scanf_float+0x70>
 8008584:	2202      	movs	r2, #2
 8008586:	e046      	b.n	8008616 <_scanf_float+0x182>
 8008588:	2b65      	cmp	r3, #101	; 0x65
 800858a:	d07a      	beq.n	8008682 <_scanf_float+0x1ee>
 800858c:	d818      	bhi.n	80085c0 <_scanf_float+0x12c>
 800858e:	2b54      	cmp	r3, #84	; 0x54
 8008590:	d066      	beq.n	8008660 <_scanf_float+0x1cc>
 8008592:	d811      	bhi.n	80085b8 <_scanf_float+0x124>
 8008594:	2b4e      	cmp	r3, #78	; 0x4e
 8008596:	d1b5      	bne.n	8008504 <_scanf_float+0x70>
 8008598:	2a00      	cmp	r2, #0
 800859a:	d146      	bne.n	800862a <_scanf_float+0x196>
 800859c:	f1b9 0f00 	cmp.w	r9, #0
 80085a0:	d145      	bne.n	800862e <_scanf_float+0x19a>
 80085a2:	6821      	ldr	r1, [r4, #0]
 80085a4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80085a8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80085ac:	d13f      	bne.n	800862e <_scanf_float+0x19a>
 80085ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80085b2:	6021      	str	r1, [r4, #0]
 80085b4:	2201      	movs	r2, #1
 80085b6:	e02e      	b.n	8008616 <_scanf_float+0x182>
 80085b8:	2b59      	cmp	r3, #89	; 0x59
 80085ba:	d01e      	beq.n	80085fa <_scanf_float+0x166>
 80085bc:	2b61      	cmp	r3, #97	; 0x61
 80085be:	e7de      	b.n	800857e <_scanf_float+0xea>
 80085c0:	2b6e      	cmp	r3, #110	; 0x6e
 80085c2:	d0e9      	beq.n	8008598 <_scanf_float+0x104>
 80085c4:	d815      	bhi.n	80085f2 <_scanf_float+0x15e>
 80085c6:	2b66      	cmp	r3, #102	; 0x66
 80085c8:	d043      	beq.n	8008652 <_scanf_float+0x1be>
 80085ca:	2b69      	cmp	r3, #105	; 0x69
 80085cc:	d19a      	bne.n	8008504 <_scanf_float+0x70>
 80085ce:	f1bb 0f00 	cmp.w	fp, #0
 80085d2:	d138      	bne.n	8008646 <_scanf_float+0x1b2>
 80085d4:	f1b9 0f00 	cmp.w	r9, #0
 80085d8:	d197      	bne.n	800850a <_scanf_float+0x76>
 80085da:	6821      	ldr	r1, [r4, #0]
 80085dc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80085e0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80085e4:	d195      	bne.n	8008512 <_scanf_float+0x7e>
 80085e6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80085ea:	6021      	str	r1, [r4, #0]
 80085ec:	f04f 0b01 	mov.w	fp, #1
 80085f0:	e011      	b.n	8008616 <_scanf_float+0x182>
 80085f2:	2b74      	cmp	r3, #116	; 0x74
 80085f4:	d034      	beq.n	8008660 <_scanf_float+0x1cc>
 80085f6:	2b79      	cmp	r3, #121	; 0x79
 80085f8:	d184      	bne.n	8008504 <_scanf_float+0x70>
 80085fa:	f1bb 0f07 	cmp.w	fp, #7
 80085fe:	d181      	bne.n	8008504 <_scanf_float+0x70>
 8008600:	f04f 0b08 	mov.w	fp, #8
 8008604:	e007      	b.n	8008616 <_scanf_float+0x182>
 8008606:	eb12 0f0b 	cmn.w	r2, fp
 800860a:	f47f af7b 	bne.w	8008504 <_scanf_float+0x70>
 800860e:	6821      	ldr	r1, [r4, #0]
 8008610:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008614:	6021      	str	r1, [r4, #0]
 8008616:	702b      	strb	r3, [r5, #0]
 8008618:	3501      	adds	r5, #1
 800861a:	e79a      	b.n	8008552 <_scanf_float+0xbe>
 800861c:	6821      	ldr	r1, [r4, #0]
 800861e:	0608      	lsls	r0, r1, #24
 8008620:	f57f af70 	bpl.w	8008504 <_scanf_float+0x70>
 8008624:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008628:	e7f4      	b.n	8008614 <_scanf_float+0x180>
 800862a:	2a02      	cmp	r2, #2
 800862c:	d047      	beq.n	80086be <_scanf_float+0x22a>
 800862e:	f1bb 0f01 	cmp.w	fp, #1
 8008632:	d003      	beq.n	800863c <_scanf_float+0x1a8>
 8008634:	f1bb 0f04 	cmp.w	fp, #4
 8008638:	f47f af64 	bne.w	8008504 <_scanf_float+0x70>
 800863c:	f10b 0b01 	add.w	fp, fp, #1
 8008640:	fa5f fb8b 	uxtb.w	fp, fp
 8008644:	e7e7      	b.n	8008616 <_scanf_float+0x182>
 8008646:	f1bb 0f03 	cmp.w	fp, #3
 800864a:	d0f7      	beq.n	800863c <_scanf_float+0x1a8>
 800864c:	f1bb 0f05 	cmp.w	fp, #5
 8008650:	e7f2      	b.n	8008638 <_scanf_float+0x1a4>
 8008652:	f1bb 0f02 	cmp.w	fp, #2
 8008656:	f47f af55 	bne.w	8008504 <_scanf_float+0x70>
 800865a:	f04f 0b03 	mov.w	fp, #3
 800865e:	e7da      	b.n	8008616 <_scanf_float+0x182>
 8008660:	f1bb 0f06 	cmp.w	fp, #6
 8008664:	f47f af4e 	bne.w	8008504 <_scanf_float+0x70>
 8008668:	f04f 0b07 	mov.w	fp, #7
 800866c:	e7d3      	b.n	8008616 <_scanf_float+0x182>
 800866e:	6821      	ldr	r1, [r4, #0]
 8008670:	0588      	lsls	r0, r1, #22
 8008672:	f57f af47 	bpl.w	8008504 <_scanf_float+0x70>
 8008676:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800867a:	6021      	str	r1, [r4, #0]
 800867c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008680:	e7c9      	b.n	8008616 <_scanf_float+0x182>
 8008682:	6821      	ldr	r1, [r4, #0]
 8008684:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008688:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800868c:	d006      	beq.n	800869c <_scanf_float+0x208>
 800868e:	0548      	lsls	r0, r1, #21
 8008690:	f57f af38 	bpl.w	8008504 <_scanf_float+0x70>
 8008694:	f1b9 0f00 	cmp.w	r9, #0
 8008698:	f43f af3b 	beq.w	8008512 <_scanf_float+0x7e>
 800869c:	0588      	lsls	r0, r1, #22
 800869e:	bf58      	it	pl
 80086a0:	9802      	ldrpl	r0, [sp, #8]
 80086a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80086a6:	bf58      	it	pl
 80086a8:	eba9 0000 	subpl.w	r0, r9, r0
 80086ac:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80086b0:	bf58      	it	pl
 80086b2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80086b6:	6021      	str	r1, [r4, #0]
 80086b8:	f04f 0900 	mov.w	r9, #0
 80086bc:	e7ab      	b.n	8008616 <_scanf_float+0x182>
 80086be:	2203      	movs	r2, #3
 80086c0:	e7a9      	b.n	8008616 <_scanf_float+0x182>
 80086c2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086c6:	9205      	str	r2, [sp, #20]
 80086c8:	4631      	mov	r1, r6
 80086ca:	4638      	mov	r0, r7
 80086cc:	4798      	blx	r3
 80086ce:	9a05      	ldr	r2, [sp, #20]
 80086d0:	2800      	cmp	r0, #0
 80086d2:	f43f af04 	beq.w	80084de <_scanf_float+0x4a>
 80086d6:	e715      	b.n	8008504 <_scanf_float+0x70>
 80086d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80086e0:	4632      	mov	r2, r6
 80086e2:	4638      	mov	r0, r7
 80086e4:	4798      	blx	r3
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	6123      	str	r3, [r4, #16]
 80086ec:	e715      	b.n	800851a <_scanf_float+0x86>
 80086ee:	f10b 33ff 	add.w	r3, fp, #4294967295
 80086f2:	2b06      	cmp	r3, #6
 80086f4:	d80a      	bhi.n	800870c <_scanf_float+0x278>
 80086f6:	f1bb 0f02 	cmp.w	fp, #2
 80086fa:	d968      	bls.n	80087ce <_scanf_float+0x33a>
 80086fc:	f1ab 0b03 	sub.w	fp, fp, #3
 8008700:	fa5f fb8b 	uxtb.w	fp, fp
 8008704:	eba5 0b0b 	sub.w	fp, r5, fp
 8008708:	455d      	cmp	r5, fp
 800870a:	d14b      	bne.n	80087a4 <_scanf_float+0x310>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	05da      	lsls	r2, r3, #23
 8008710:	d51f      	bpl.n	8008752 <_scanf_float+0x2be>
 8008712:	055b      	lsls	r3, r3, #21
 8008714:	d468      	bmi.n	80087e8 <_scanf_float+0x354>
 8008716:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	2965      	cmp	r1, #101	; 0x65
 800871e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008722:	f105 3bff 	add.w	fp, r5, #4294967295
 8008726:	6123      	str	r3, [r4, #16]
 8008728:	d00d      	beq.n	8008746 <_scanf_float+0x2b2>
 800872a:	2945      	cmp	r1, #69	; 0x45
 800872c:	d00b      	beq.n	8008746 <_scanf_float+0x2b2>
 800872e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008732:	4632      	mov	r2, r6
 8008734:	4638      	mov	r0, r7
 8008736:	4798      	blx	r3
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800873e:	3b01      	subs	r3, #1
 8008740:	f1a5 0b02 	sub.w	fp, r5, #2
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800874a:	4632      	mov	r2, r6
 800874c:	4638      	mov	r0, r7
 800874e:	4798      	blx	r3
 8008750:	465d      	mov	r5, fp
 8008752:	6826      	ldr	r6, [r4, #0]
 8008754:	f016 0610 	ands.w	r6, r6, #16
 8008758:	d17a      	bne.n	8008850 <_scanf_float+0x3bc>
 800875a:	702e      	strb	r6, [r5, #0]
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008766:	d142      	bne.n	80087ee <_scanf_float+0x35a>
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	eba9 0303 	sub.w	r3, r9, r3
 800876e:	425a      	negs	r2, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d149      	bne.n	8008808 <_scanf_float+0x374>
 8008774:	2200      	movs	r2, #0
 8008776:	4641      	mov	r1, r8
 8008778:	4638      	mov	r0, r7
 800877a:	f000 febd 	bl	80094f8 <_strtod_r>
 800877e:	6825      	ldr	r5, [r4, #0]
 8008780:	f8da 3000 	ldr.w	r3, [sl]
 8008784:	f015 0f02 	tst.w	r5, #2
 8008788:	f103 0204 	add.w	r2, r3, #4
 800878c:	ec59 8b10 	vmov	r8, r9, d0
 8008790:	f8ca 2000 	str.w	r2, [sl]
 8008794:	d043      	beq.n	800881e <_scanf_float+0x38a>
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	e9c3 8900 	strd	r8, r9, [r3]
 800879c:	68e3      	ldr	r3, [r4, #12]
 800879e:	3301      	adds	r3, #1
 80087a0:	60e3      	str	r3, [r4, #12]
 80087a2:	e6be      	b.n	8008522 <_scanf_float+0x8e>
 80087a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80087ac:	4632      	mov	r2, r6
 80087ae:	4638      	mov	r0, r7
 80087b0:	4798      	blx	r3
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	e7a6      	b.n	8008708 <_scanf_float+0x274>
 80087ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087be:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80087c2:	4632      	mov	r2, r6
 80087c4:	4638      	mov	r0, r7
 80087c6:	4798      	blx	r3
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	6123      	str	r3, [r4, #16]
 80087ce:	4545      	cmp	r5, r8
 80087d0:	d8f3      	bhi.n	80087ba <_scanf_float+0x326>
 80087d2:	e6a5      	b.n	8008520 <_scanf_float+0x8c>
 80087d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80087dc:	4632      	mov	r2, r6
 80087de:	4638      	mov	r0, r7
 80087e0:	4798      	blx	r3
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	6123      	str	r3, [r4, #16]
 80087e8:	4545      	cmp	r5, r8
 80087ea:	d8f3      	bhi.n	80087d4 <_scanf_float+0x340>
 80087ec:	e698      	b.n	8008520 <_scanf_float+0x8c>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0bf      	beq.n	8008774 <_scanf_float+0x2e0>
 80087f4:	9904      	ldr	r1, [sp, #16]
 80087f6:	230a      	movs	r3, #10
 80087f8:	4632      	mov	r2, r6
 80087fa:	3101      	adds	r1, #1
 80087fc:	4638      	mov	r0, r7
 80087fe:	f000 ff07 	bl	8009610 <_strtol_r>
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	9d04      	ldr	r5, [sp, #16]
 8008806:	1ac2      	subs	r2, r0, r3
 8008808:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800880c:	429d      	cmp	r5, r3
 800880e:	bf28      	it	cs
 8008810:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008814:	490f      	ldr	r1, [pc, #60]	; (8008854 <_scanf_float+0x3c0>)
 8008816:	4628      	mov	r0, r5
 8008818:	f000 f83c 	bl	8008894 <siprintf>
 800881c:	e7aa      	b.n	8008774 <_scanf_float+0x2e0>
 800881e:	f015 0504 	ands.w	r5, r5, #4
 8008822:	d1b8      	bne.n	8008796 <_scanf_float+0x302>
 8008824:	681f      	ldr	r7, [r3, #0]
 8008826:	ee10 2a10 	vmov	r2, s0
 800882a:	464b      	mov	r3, r9
 800882c:	ee10 0a10 	vmov	r0, s0
 8008830:	4649      	mov	r1, r9
 8008832:	f7f8 f97b 	bl	8000b2c <__aeabi_dcmpun>
 8008836:	b128      	cbz	r0, 8008844 <_scanf_float+0x3b0>
 8008838:	4628      	mov	r0, r5
 800883a:	f000 f825 	bl	8008888 <nanf>
 800883e:	ed87 0a00 	vstr	s0, [r7]
 8008842:	e7ab      	b.n	800879c <_scanf_float+0x308>
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f8 f9ce 	bl	8000be8 <__aeabi_d2f>
 800884c:	6038      	str	r0, [r7, #0]
 800884e:	e7a5      	b.n	800879c <_scanf_float+0x308>
 8008850:	2600      	movs	r6, #0
 8008852:	e666      	b.n	8008522 <_scanf_float+0x8e>
 8008854:	0800c058 	.word	0x0800c058

08008858 <iprintf>:
 8008858:	b40f      	push	{r0, r1, r2, r3}
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <iprintf+0x2c>)
 800885c:	b513      	push	{r0, r1, r4, lr}
 800885e:	681c      	ldr	r4, [r3, #0]
 8008860:	b124      	cbz	r4, 800886c <iprintf+0x14>
 8008862:	69a3      	ldr	r3, [r4, #24]
 8008864:	b913      	cbnz	r3, 800886c <iprintf+0x14>
 8008866:	4620      	mov	r0, r4
 8008868:	f001 fd6a 	bl	800a340 <__sinit>
 800886c:	ab05      	add	r3, sp, #20
 800886e:	9a04      	ldr	r2, [sp, #16]
 8008870:	68a1      	ldr	r1, [r4, #8]
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	4620      	mov	r0, r4
 8008876:	f002 ff7d 	bl	800b774 <_vfiprintf_r>
 800887a:	b002      	add	sp, #8
 800887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008880:	b004      	add	sp, #16
 8008882:	4770      	bx	lr
 8008884:	2000000c 	.word	0x2000000c

08008888 <nanf>:
 8008888:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008890 <nanf+0x8>
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	7fc00000 	.word	0x7fc00000

08008894 <siprintf>:
 8008894:	b40e      	push	{r1, r2, r3}
 8008896:	b500      	push	{lr}
 8008898:	b09c      	sub	sp, #112	; 0x70
 800889a:	ab1d      	add	r3, sp, #116	; 0x74
 800889c:	9002      	str	r0, [sp, #8]
 800889e:	9006      	str	r0, [sp, #24]
 80088a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088a4:	4809      	ldr	r0, [pc, #36]	; (80088cc <siprintf+0x38>)
 80088a6:	9107      	str	r1, [sp, #28]
 80088a8:	9104      	str	r1, [sp, #16]
 80088aa:	4909      	ldr	r1, [pc, #36]	; (80088d0 <siprintf+0x3c>)
 80088ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b0:	9105      	str	r1, [sp, #20]
 80088b2:	6800      	ldr	r0, [r0, #0]
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	a902      	add	r1, sp, #8
 80088b8:	f002 fe3a 	bl	800b530 <_svfiprintf_r>
 80088bc:	9b02      	ldr	r3, [sp, #8]
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	b01c      	add	sp, #112	; 0x70
 80088c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c8:	b003      	add	sp, #12
 80088ca:	4770      	bx	lr
 80088cc:	2000000c 	.word	0x2000000c
 80088d0:	ffff0208 	.word	0xffff0208

080088d4 <sulp>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	ec45 4b10 	vmov	d0, r4, r5
 80088de:	4616      	mov	r6, r2
 80088e0:	f002 fbe2 	bl	800b0a8 <__ulp>
 80088e4:	ec51 0b10 	vmov	r0, r1, d0
 80088e8:	b17e      	cbz	r6, 800890a <sulp+0x36>
 80088ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80088ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dd09      	ble.n	800890a <sulp+0x36>
 80088f6:	051b      	lsls	r3, r3, #20
 80088f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088fc:	2400      	movs	r4, #0
 80088fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008902:	4622      	mov	r2, r4
 8008904:	462b      	mov	r3, r5
 8008906:	f7f7 fe77 	bl	80005f8 <__aeabi_dmul>
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	0000      	movs	r0, r0
	...

08008910 <_strtod_l>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	461f      	mov	r7, r3
 8008916:	b0a1      	sub	sp, #132	; 0x84
 8008918:	2300      	movs	r3, #0
 800891a:	4681      	mov	r9, r0
 800891c:	4638      	mov	r0, r7
 800891e:	460e      	mov	r6, r1
 8008920:	9217      	str	r2, [sp, #92]	; 0x5c
 8008922:	931c      	str	r3, [sp, #112]	; 0x70
 8008924:	f002 f8bf 	bl	800aaa6 <__localeconv_l>
 8008928:	4680      	mov	r8, r0
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	f7f7 fc50 	bl	80001d0 <strlen>
 8008930:	f04f 0a00 	mov.w	sl, #0
 8008934:	4604      	mov	r4, r0
 8008936:	f04f 0b00 	mov.w	fp, #0
 800893a:	961b      	str	r6, [sp, #108]	; 0x6c
 800893c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	2a0d      	cmp	r2, #13
 8008942:	d832      	bhi.n	80089aa <_strtod_l+0x9a>
 8008944:	2a09      	cmp	r2, #9
 8008946:	d236      	bcs.n	80089b6 <_strtod_l+0xa6>
 8008948:	2a00      	cmp	r2, #0
 800894a:	d03e      	beq.n	80089ca <_strtod_l+0xba>
 800894c:	2300      	movs	r3, #0
 800894e:	930d      	str	r3, [sp, #52]	; 0x34
 8008950:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008952:	782b      	ldrb	r3, [r5, #0]
 8008954:	2b30      	cmp	r3, #48	; 0x30
 8008956:	f040 80ac 	bne.w	8008ab2 <_strtod_l+0x1a2>
 800895a:	786b      	ldrb	r3, [r5, #1]
 800895c:	2b58      	cmp	r3, #88	; 0x58
 800895e:	d001      	beq.n	8008964 <_strtod_l+0x54>
 8008960:	2b78      	cmp	r3, #120	; 0x78
 8008962:	d167      	bne.n	8008a34 <_strtod_l+0x124>
 8008964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	ab1c      	add	r3, sp, #112	; 0x70
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	9702      	str	r7, [sp, #8]
 800896e:	ab1d      	add	r3, sp, #116	; 0x74
 8008970:	4a88      	ldr	r2, [pc, #544]	; (8008b94 <_strtod_l+0x284>)
 8008972:	a91b      	add	r1, sp, #108	; 0x6c
 8008974:	4648      	mov	r0, r9
 8008976:	f001 fdbc 	bl	800a4f2 <__gethex>
 800897a:	f010 0407 	ands.w	r4, r0, #7
 800897e:	4606      	mov	r6, r0
 8008980:	d005      	beq.n	800898e <_strtod_l+0x7e>
 8008982:	2c06      	cmp	r4, #6
 8008984:	d12b      	bne.n	80089de <_strtod_l+0xce>
 8008986:	3501      	adds	r5, #1
 8008988:	2300      	movs	r3, #0
 800898a:	951b      	str	r5, [sp, #108]	; 0x6c
 800898c:	930d      	str	r3, [sp, #52]	; 0x34
 800898e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008990:	2b00      	cmp	r3, #0
 8008992:	f040 859a 	bne.w	80094ca <_strtod_l+0xbba>
 8008996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008998:	b1e3      	cbz	r3, 80089d4 <_strtod_l+0xc4>
 800899a:	4652      	mov	r2, sl
 800899c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089a0:	ec43 2b10 	vmov	d0, r2, r3
 80089a4:	b021      	add	sp, #132	; 0x84
 80089a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089aa:	2a2b      	cmp	r2, #43	; 0x2b
 80089ac:	d015      	beq.n	80089da <_strtod_l+0xca>
 80089ae:	2a2d      	cmp	r2, #45	; 0x2d
 80089b0:	d004      	beq.n	80089bc <_strtod_l+0xac>
 80089b2:	2a20      	cmp	r2, #32
 80089b4:	d1ca      	bne.n	800894c <_strtod_l+0x3c>
 80089b6:	3301      	adds	r3, #1
 80089b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80089ba:	e7bf      	b.n	800893c <_strtod_l+0x2c>
 80089bc:	2201      	movs	r2, #1
 80089be:	920d      	str	r2, [sp, #52]	; 0x34
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1c2      	bne.n	8008950 <_strtod_l+0x40>
 80089ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 8579 	bne.w	80094c6 <_strtod_l+0xbb6>
 80089d4:	4652      	mov	r2, sl
 80089d6:	465b      	mov	r3, fp
 80089d8:	e7e2      	b.n	80089a0 <_strtod_l+0x90>
 80089da:	2200      	movs	r2, #0
 80089dc:	e7ef      	b.n	80089be <_strtod_l+0xae>
 80089de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089e0:	b13a      	cbz	r2, 80089f2 <_strtod_l+0xe2>
 80089e2:	2135      	movs	r1, #53	; 0x35
 80089e4:	a81e      	add	r0, sp, #120	; 0x78
 80089e6:	f002 fc57 	bl	800b298 <__copybits>
 80089ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089ec:	4648      	mov	r0, r9
 80089ee:	f002 f8c4 	bl	800ab7a <_Bfree>
 80089f2:	3c01      	subs	r4, #1
 80089f4:	2c04      	cmp	r4, #4
 80089f6:	d806      	bhi.n	8008a06 <_strtod_l+0xf6>
 80089f8:	e8df f004 	tbb	[pc, r4]
 80089fc:	1714030a 	.word	0x1714030a
 8008a00:	0a          	.byte	0x0a
 8008a01:	00          	.byte	0x00
 8008a02:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008a06:	0730      	lsls	r0, r6, #28
 8008a08:	d5c1      	bpl.n	800898e <_strtod_l+0x7e>
 8008a0a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a0e:	e7be      	b.n	800898e <_strtod_l+0x7e>
 8008a10:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008a14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a1a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a1e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a22:	e7f0      	b.n	8008a06 <_strtod_l+0xf6>
 8008a24:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008b98 <_strtod_l+0x288>
 8008a28:	e7ed      	b.n	8008a06 <_strtod_l+0xf6>
 8008a2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a2e:	f04f 3aff 	mov.w	sl, #4294967295
 8008a32:	e7e8      	b.n	8008a06 <_strtod_l+0xf6>
 8008a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b30      	cmp	r3, #48	; 0x30
 8008a3e:	d0f9      	beq.n	8008a34 <_strtod_l+0x124>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0a4      	beq.n	800898e <_strtod_l+0x7e>
 8008a44:	2301      	movs	r3, #1
 8008a46:	2500      	movs	r5, #0
 8008a48:	9306      	str	r3, [sp, #24]
 8008a4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a4c:	9308      	str	r3, [sp, #32]
 8008a4e:	9507      	str	r5, [sp, #28]
 8008a50:	9505      	str	r5, [sp, #20]
 8008a52:	220a      	movs	r2, #10
 8008a54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008a56:	7807      	ldrb	r7, [r0, #0]
 8008a58:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008a5c:	b2d9      	uxtb	r1, r3
 8008a5e:	2909      	cmp	r1, #9
 8008a60:	d929      	bls.n	8008ab6 <_strtod_l+0x1a6>
 8008a62:	4622      	mov	r2, r4
 8008a64:	f8d8 1000 	ldr.w	r1, [r8]
 8008a68:	f002 ffed 	bl	800ba46 <strncmp>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d031      	beq.n	8008ad4 <_strtod_l+0x1c4>
 8008a70:	2000      	movs	r0, #0
 8008a72:	9c05      	ldr	r4, [sp, #20]
 8008a74:	9004      	str	r0, [sp, #16]
 8008a76:	463b      	mov	r3, r7
 8008a78:	4602      	mov	r2, r0
 8008a7a:	2b65      	cmp	r3, #101	; 0x65
 8008a7c:	d001      	beq.n	8008a82 <_strtod_l+0x172>
 8008a7e:	2b45      	cmp	r3, #69	; 0x45
 8008a80:	d114      	bne.n	8008aac <_strtod_l+0x19c>
 8008a82:	b924      	cbnz	r4, 8008a8e <_strtod_l+0x17e>
 8008a84:	b910      	cbnz	r0, 8008a8c <_strtod_l+0x17c>
 8008a86:	9b06      	ldr	r3, [sp, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d09e      	beq.n	80089ca <_strtod_l+0xba>
 8008a8c:	2400      	movs	r4, #0
 8008a8e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008a90:	1c73      	adds	r3, r6, #1
 8008a92:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a94:	7873      	ldrb	r3, [r6, #1]
 8008a96:	2b2b      	cmp	r3, #43	; 0x2b
 8008a98:	d078      	beq.n	8008b8c <_strtod_l+0x27c>
 8008a9a:	2b2d      	cmp	r3, #45	; 0x2d
 8008a9c:	d070      	beq.n	8008b80 <_strtod_l+0x270>
 8008a9e:	f04f 0c00 	mov.w	ip, #0
 8008aa2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008aa6:	2f09      	cmp	r7, #9
 8008aa8:	d97c      	bls.n	8008ba4 <_strtod_l+0x294>
 8008aaa:	961b      	str	r6, [sp, #108]	; 0x6c
 8008aac:	f04f 0e00 	mov.w	lr, #0
 8008ab0:	e09a      	b.n	8008be8 <_strtod_l+0x2d8>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e7c7      	b.n	8008a46 <_strtod_l+0x136>
 8008ab6:	9905      	ldr	r1, [sp, #20]
 8008ab8:	2908      	cmp	r1, #8
 8008aba:	bfdd      	ittte	le
 8008abc:	9907      	ldrle	r1, [sp, #28]
 8008abe:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ac2:	9307      	strle	r3, [sp, #28]
 8008ac4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008ac8:	9b05      	ldr	r3, [sp, #20]
 8008aca:	3001      	adds	r0, #1
 8008acc:	3301      	adds	r3, #1
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	901b      	str	r0, [sp, #108]	; 0x6c
 8008ad2:	e7bf      	b.n	8008a54 <_strtod_l+0x144>
 8008ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ad6:	191a      	adds	r2, r3, r4
 8008ad8:	921b      	str	r2, [sp, #108]	; 0x6c
 8008ada:	9a05      	ldr	r2, [sp, #20]
 8008adc:	5d1b      	ldrb	r3, [r3, r4]
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	d037      	beq.n	8008b52 <_strtod_l+0x242>
 8008ae2:	9c05      	ldr	r4, [sp, #20]
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008aea:	2909      	cmp	r1, #9
 8008aec:	d913      	bls.n	8008b16 <_strtod_l+0x206>
 8008aee:	2101      	movs	r1, #1
 8008af0:	9104      	str	r1, [sp, #16]
 8008af2:	e7c2      	b.n	8008a7a <_strtod_l+0x16a>
 8008af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	921b      	str	r2, [sp, #108]	; 0x6c
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	3001      	adds	r0, #1
 8008afe:	2b30      	cmp	r3, #48	; 0x30
 8008b00:	d0f8      	beq.n	8008af4 <_strtod_l+0x1e4>
 8008b02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008b06:	2a08      	cmp	r2, #8
 8008b08:	f200 84e4 	bhi.w	80094d4 <_strtod_l+0xbc4>
 8008b0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b0e:	9208      	str	r2, [sp, #32]
 8008b10:	4602      	mov	r2, r0
 8008b12:	2000      	movs	r0, #0
 8008b14:	4604      	mov	r4, r0
 8008b16:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008b1a:	f100 0101 	add.w	r1, r0, #1
 8008b1e:	d012      	beq.n	8008b46 <_strtod_l+0x236>
 8008b20:	440a      	add	r2, r1
 8008b22:	eb00 0c04 	add.w	ip, r0, r4
 8008b26:	4621      	mov	r1, r4
 8008b28:	270a      	movs	r7, #10
 8008b2a:	458c      	cmp	ip, r1
 8008b2c:	d113      	bne.n	8008b56 <_strtod_l+0x246>
 8008b2e:	1821      	adds	r1, r4, r0
 8008b30:	2908      	cmp	r1, #8
 8008b32:	f104 0401 	add.w	r4, r4, #1
 8008b36:	4404      	add	r4, r0
 8008b38:	dc19      	bgt.n	8008b6e <_strtod_l+0x25e>
 8008b3a:	9b07      	ldr	r3, [sp, #28]
 8008b3c:	210a      	movs	r1, #10
 8008b3e:	fb01 e303 	mla	r3, r1, r3, lr
 8008b42:	9307      	str	r3, [sp, #28]
 8008b44:	2100      	movs	r1, #0
 8008b46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b48:	1c58      	adds	r0, r3, #1
 8008b4a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	4608      	mov	r0, r1
 8008b50:	e7c9      	b.n	8008ae6 <_strtod_l+0x1d6>
 8008b52:	9805      	ldr	r0, [sp, #20]
 8008b54:	e7d3      	b.n	8008afe <_strtod_l+0x1ee>
 8008b56:	2908      	cmp	r1, #8
 8008b58:	f101 0101 	add.w	r1, r1, #1
 8008b5c:	dc03      	bgt.n	8008b66 <_strtod_l+0x256>
 8008b5e:	9b07      	ldr	r3, [sp, #28]
 8008b60:	437b      	muls	r3, r7
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	e7e1      	b.n	8008b2a <_strtod_l+0x21a>
 8008b66:	2910      	cmp	r1, #16
 8008b68:	bfd8      	it	le
 8008b6a:	437d      	mulle	r5, r7
 8008b6c:	e7dd      	b.n	8008b2a <_strtod_l+0x21a>
 8008b6e:	2c10      	cmp	r4, #16
 8008b70:	bfdc      	itt	le
 8008b72:	210a      	movle	r1, #10
 8008b74:	fb01 e505 	mlale	r5, r1, r5, lr
 8008b78:	e7e4      	b.n	8008b44 <_strtod_l+0x234>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	e781      	b.n	8008a84 <_strtod_l+0x174>
 8008b80:	f04f 0c01 	mov.w	ip, #1
 8008b84:	1cb3      	adds	r3, r6, #2
 8008b86:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b88:	78b3      	ldrb	r3, [r6, #2]
 8008b8a:	e78a      	b.n	8008aa2 <_strtod_l+0x192>
 8008b8c:	f04f 0c00 	mov.w	ip, #0
 8008b90:	e7f8      	b.n	8008b84 <_strtod_l+0x274>
 8008b92:	bf00      	nop
 8008b94:	0800c060 	.word	0x0800c060
 8008b98:	7ff00000 	.word	0x7ff00000
 8008b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b9e:	1c5f      	adds	r7, r3, #1
 8008ba0:	971b      	str	r7, [sp, #108]	; 0x6c
 8008ba2:	785b      	ldrb	r3, [r3, #1]
 8008ba4:	2b30      	cmp	r3, #48	; 0x30
 8008ba6:	d0f9      	beq.n	8008b9c <_strtod_l+0x28c>
 8008ba8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008bac:	2f08      	cmp	r7, #8
 8008bae:	f63f af7d 	bhi.w	8008aac <_strtod_l+0x19c>
 8008bb2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008bb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bbc:	1c5f      	adds	r7, r3, #1
 8008bbe:	971b      	str	r7, [sp, #108]	; 0x6c
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008bc6:	f1b8 0f09 	cmp.w	r8, #9
 8008bca:	d937      	bls.n	8008c3c <_strtod_l+0x32c>
 8008bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bce:	1a7f      	subs	r7, r7, r1
 8008bd0:	2f08      	cmp	r7, #8
 8008bd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008bd6:	dc37      	bgt.n	8008c48 <_strtod_l+0x338>
 8008bd8:	45be      	cmp	lr, r7
 8008bda:	bfa8      	it	ge
 8008bdc:	46be      	movge	lr, r7
 8008bde:	f1bc 0f00 	cmp.w	ip, #0
 8008be2:	d001      	beq.n	8008be8 <_strtod_l+0x2d8>
 8008be4:	f1ce 0e00 	rsb	lr, lr, #0
 8008be8:	2c00      	cmp	r4, #0
 8008bea:	d151      	bne.n	8008c90 <_strtod_l+0x380>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f47f aece 	bne.w	800898e <_strtod_l+0x7e>
 8008bf2:	9a06      	ldr	r2, [sp, #24]
 8008bf4:	2a00      	cmp	r2, #0
 8008bf6:	f47f aeca 	bne.w	800898e <_strtod_l+0x7e>
 8008bfa:	9a04      	ldr	r2, [sp, #16]
 8008bfc:	2a00      	cmp	r2, #0
 8008bfe:	f47f aee4 	bne.w	80089ca <_strtod_l+0xba>
 8008c02:	2b4e      	cmp	r3, #78	; 0x4e
 8008c04:	d027      	beq.n	8008c56 <_strtod_l+0x346>
 8008c06:	dc21      	bgt.n	8008c4c <_strtod_l+0x33c>
 8008c08:	2b49      	cmp	r3, #73	; 0x49
 8008c0a:	f47f aede 	bne.w	80089ca <_strtod_l+0xba>
 8008c0e:	49a0      	ldr	r1, [pc, #640]	; (8008e90 <_strtod_l+0x580>)
 8008c10:	a81b      	add	r0, sp, #108	; 0x6c
 8008c12:	f001 fea1 	bl	800a958 <__match>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f43f aed7 	beq.w	80089ca <_strtod_l+0xba>
 8008c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c1e:	499d      	ldr	r1, [pc, #628]	; (8008e94 <_strtod_l+0x584>)
 8008c20:	3b01      	subs	r3, #1
 8008c22:	a81b      	add	r0, sp, #108	; 0x6c
 8008c24:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c26:	f001 fe97 	bl	800a958 <__match>
 8008c2a:	b910      	cbnz	r0, 8008c32 <_strtod_l+0x322>
 8008c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c2e:	3301      	adds	r3, #1
 8008c30:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c32:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008ea8 <_strtod_l+0x598>
 8008c36:	f04f 0a00 	mov.w	sl, #0
 8008c3a:	e6a8      	b.n	800898e <_strtod_l+0x7e>
 8008c3c:	210a      	movs	r1, #10
 8008c3e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008c42:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008c46:	e7b8      	b.n	8008bba <_strtod_l+0x2aa>
 8008c48:	46be      	mov	lr, r7
 8008c4a:	e7c8      	b.n	8008bde <_strtod_l+0x2ce>
 8008c4c:	2b69      	cmp	r3, #105	; 0x69
 8008c4e:	d0de      	beq.n	8008c0e <_strtod_l+0x2fe>
 8008c50:	2b6e      	cmp	r3, #110	; 0x6e
 8008c52:	f47f aeba 	bne.w	80089ca <_strtod_l+0xba>
 8008c56:	4990      	ldr	r1, [pc, #576]	; (8008e98 <_strtod_l+0x588>)
 8008c58:	a81b      	add	r0, sp, #108	; 0x6c
 8008c5a:	f001 fe7d 	bl	800a958 <__match>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f43f aeb3 	beq.w	80089ca <_strtod_l+0xba>
 8008c64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	2b28      	cmp	r3, #40	; 0x28
 8008c6a:	d10e      	bne.n	8008c8a <_strtod_l+0x37a>
 8008c6c:	aa1e      	add	r2, sp, #120	; 0x78
 8008c6e:	498b      	ldr	r1, [pc, #556]	; (8008e9c <_strtod_l+0x58c>)
 8008c70:	a81b      	add	r0, sp, #108	; 0x6c
 8008c72:	f001 fe85 	bl	800a980 <__hexnan>
 8008c76:	2805      	cmp	r0, #5
 8008c78:	d107      	bne.n	8008c8a <_strtod_l+0x37a>
 8008c7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c7c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008c80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008c84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008c88:	e681      	b.n	800898e <_strtod_l+0x7e>
 8008c8a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008eb0 <_strtod_l+0x5a0>
 8008c8e:	e7d2      	b.n	8008c36 <_strtod_l+0x326>
 8008c90:	ebae 0302 	sub.w	r3, lr, r2
 8008c94:	9306      	str	r3, [sp, #24]
 8008c96:	9b05      	ldr	r3, [sp, #20]
 8008c98:	9807      	ldr	r0, [sp, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bf08      	it	eq
 8008c9e:	4623      	moveq	r3, r4
 8008ca0:	2c10      	cmp	r4, #16
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	46a0      	mov	r8, r4
 8008ca6:	bfa8      	it	ge
 8008ca8:	f04f 0810 	movge.w	r8, #16
 8008cac:	f7f7 fc2a 	bl	8000504 <__aeabi_ui2d>
 8008cb0:	2c09      	cmp	r4, #9
 8008cb2:	4682      	mov	sl, r0
 8008cb4:	468b      	mov	fp, r1
 8008cb6:	dc13      	bgt.n	8008ce0 <_strtod_l+0x3d0>
 8008cb8:	9b06      	ldr	r3, [sp, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f43f ae67 	beq.w	800898e <_strtod_l+0x7e>
 8008cc0:	9b06      	ldr	r3, [sp, #24]
 8008cc2:	dd7a      	ble.n	8008dba <_strtod_l+0x4aa>
 8008cc4:	2b16      	cmp	r3, #22
 8008cc6:	dc61      	bgt.n	8008d8c <_strtod_l+0x47c>
 8008cc8:	4a75      	ldr	r2, [pc, #468]	; (8008ea0 <_strtod_l+0x590>)
 8008cca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008cce:	e9de 0100 	ldrd	r0, r1, [lr]
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	465b      	mov	r3, fp
 8008cd6:	f7f7 fc8f 	bl	80005f8 <__aeabi_dmul>
 8008cda:	4682      	mov	sl, r0
 8008cdc:	468b      	mov	fp, r1
 8008cde:	e656      	b.n	800898e <_strtod_l+0x7e>
 8008ce0:	4b6f      	ldr	r3, [pc, #444]	; (8008ea0 <_strtod_l+0x590>)
 8008ce2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008ce6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008cea:	f7f7 fc85 	bl	80005f8 <__aeabi_dmul>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	f7f7 fc06 	bl	8000504 <__aeabi_ui2d>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 fac4 	bl	800028c <__adddf3>
 8008d04:	2c0f      	cmp	r4, #15
 8008d06:	4682      	mov	sl, r0
 8008d08:	468b      	mov	fp, r1
 8008d0a:	ddd5      	ble.n	8008cb8 <_strtod_l+0x3a8>
 8008d0c:	9b06      	ldr	r3, [sp, #24]
 8008d0e:	eba4 0808 	sub.w	r8, r4, r8
 8008d12:	4498      	add	r8, r3
 8008d14:	f1b8 0f00 	cmp.w	r8, #0
 8008d18:	f340 8096 	ble.w	8008e48 <_strtod_l+0x538>
 8008d1c:	f018 030f 	ands.w	r3, r8, #15
 8008d20:	d00a      	beq.n	8008d38 <_strtod_l+0x428>
 8008d22:	495f      	ldr	r1, [pc, #380]	; (8008ea0 <_strtod_l+0x590>)
 8008d24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d28:	4652      	mov	r2, sl
 8008d2a:	465b      	mov	r3, fp
 8008d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d30:	f7f7 fc62 	bl	80005f8 <__aeabi_dmul>
 8008d34:	4682      	mov	sl, r0
 8008d36:	468b      	mov	fp, r1
 8008d38:	f038 080f 	bics.w	r8, r8, #15
 8008d3c:	d073      	beq.n	8008e26 <_strtod_l+0x516>
 8008d3e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008d42:	dd47      	ble.n	8008dd4 <_strtod_l+0x4c4>
 8008d44:	2400      	movs	r4, #0
 8008d46:	46a0      	mov	r8, r4
 8008d48:	9407      	str	r4, [sp, #28]
 8008d4a:	9405      	str	r4, [sp, #20]
 8008d4c:	2322      	movs	r3, #34	; 0x22
 8008d4e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008ea8 <_strtod_l+0x598>
 8008d52:	f8c9 3000 	str.w	r3, [r9]
 8008d56:	f04f 0a00 	mov.w	sl, #0
 8008d5a:	9b07      	ldr	r3, [sp, #28]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f43f ae16 	beq.w	800898e <_strtod_l+0x7e>
 8008d62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d64:	4648      	mov	r0, r9
 8008d66:	f001 ff08 	bl	800ab7a <_Bfree>
 8008d6a:	9905      	ldr	r1, [sp, #20]
 8008d6c:	4648      	mov	r0, r9
 8008d6e:	f001 ff04 	bl	800ab7a <_Bfree>
 8008d72:	4641      	mov	r1, r8
 8008d74:	4648      	mov	r0, r9
 8008d76:	f001 ff00 	bl	800ab7a <_Bfree>
 8008d7a:	9907      	ldr	r1, [sp, #28]
 8008d7c:	4648      	mov	r0, r9
 8008d7e:	f001 fefc 	bl	800ab7a <_Bfree>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4648      	mov	r0, r9
 8008d86:	f001 fef8 	bl	800ab7a <_Bfree>
 8008d8a:	e600      	b.n	800898e <_strtod_l+0x7e>
 8008d8c:	9a06      	ldr	r2, [sp, #24]
 8008d8e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008d92:	4293      	cmp	r3, r2
 8008d94:	dbba      	blt.n	8008d0c <_strtod_l+0x3fc>
 8008d96:	4d42      	ldr	r5, [pc, #264]	; (8008ea0 <_strtod_l+0x590>)
 8008d98:	f1c4 040f 	rsb	r4, r4, #15
 8008d9c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008da0:	4652      	mov	r2, sl
 8008da2:	465b      	mov	r3, fp
 8008da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da8:	f7f7 fc26 	bl	80005f8 <__aeabi_dmul>
 8008dac:	9b06      	ldr	r3, [sp, #24]
 8008dae:	1b1c      	subs	r4, r3, r4
 8008db0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008db4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008db8:	e78d      	b.n	8008cd6 <_strtod_l+0x3c6>
 8008dba:	f113 0f16 	cmn.w	r3, #22
 8008dbe:	dba5      	blt.n	8008d0c <_strtod_l+0x3fc>
 8008dc0:	4a37      	ldr	r2, [pc, #220]	; (8008ea0 <_strtod_l+0x590>)
 8008dc2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008dc6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008dca:	4650      	mov	r0, sl
 8008dcc:	4659      	mov	r1, fp
 8008dce:	f7f7 fd3d 	bl	800084c <__aeabi_ddiv>
 8008dd2:	e782      	b.n	8008cda <_strtod_l+0x3ca>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4e33      	ldr	r6, [pc, #204]	; (8008ea4 <_strtod_l+0x594>)
 8008dd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ddc:	4650      	mov	r0, sl
 8008dde:	4659      	mov	r1, fp
 8008de0:	461d      	mov	r5, r3
 8008de2:	f1b8 0f01 	cmp.w	r8, #1
 8008de6:	dc21      	bgt.n	8008e2c <_strtod_l+0x51c>
 8008de8:	b10b      	cbz	r3, 8008dee <_strtod_l+0x4de>
 8008dea:	4682      	mov	sl, r0
 8008dec:	468b      	mov	fp, r1
 8008dee:	4b2d      	ldr	r3, [pc, #180]	; (8008ea4 <_strtod_l+0x594>)
 8008df0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008df4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008df8:	4652      	mov	r2, sl
 8008dfa:	465b      	mov	r3, fp
 8008dfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e00:	f7f7 fbfa 	bl	80005f8 <__aeabi_dmul>
 8008e04:	4b28      	ldr	r3, [pc, #160]	; (8008ea8 <_strtod_l+0x598>)
 8008e06:	460a      	mov	r2, r1
 8008e08:	400b      	ands	r3, r1
 8008e0a:	4928      	ldr	r1, [pc, #160]	; (8008eac <_strtod_l+0x59c>)
 8008e0c:	428b      	cmp	r3, r1
 8008e0e:	4682      	mov	sl, r0
 8008e10:	d898      	bhi.n	8008d44 <_strtod_l+0x434>
 8008e12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e16:	428b      	cmp	r3, r1
 8008e18:	bf86      	itte	hi
 8008e1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008eb4 <_strtod_l+0x5a4>
 8008e1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e26:	2300      	movs	r3, #0
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	e077      	b.n	8008f1c <_strtod_l+0x60c>
 8008e2c:	f018 0f01 	tst.w	r8, #1
 8008e30:	d006      	beq.n	8008e40 <_strtod_l+0x530>
 8008e32:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	3501      	adds	r5, #1
 8008e42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e46:	e7cc      	b.n	8008de2 <_strtod_l+0x4d2>
 8008e48:	d0ed      	beq.n	8008e26 <_strtod_l+0x516>
 8008e4a:	f1c8 0800 	rsb	r8, r8, #0
 8008e4e:	f018 020f 	ands.w	r2, r8, #15
 8008e52:	d00a      	beq.n	8008e6a <_strtod_l+0x55a>
 8008e54:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <_strtod_l+0x590>)
 8008e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 fcf3 	bl	800084c <__aeabi_ddiv>
 8008e66:	4682      	mov	sl, r0
 8008e68:	468b      	mov	fp, r1
 8008e6a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008e6e:	d0da      	beq.n	8008e26 <_strtod_l+0x516>
 8008e70:	f1b8 0f1f 	cmp.w	r8, #31
 8008e74:	dd20      	ble.n	8008eb8 <_strtod_l+0x5a8>
 8008e76:	2400      	movs	r4, #0
 8008e78:	46a0      	mov	r8, r4
 8008e7a:	9407      	str	r4, [sp, #28]
 8008e7c:	9405      	str	r4, [sp, #20]
 8008e7e:	2322      	movs	r3, #34	; 0x22
 8008e80:	f04f 0a00 	mov.w	sl, #0
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	f8c9 3000 	str.w	r3, [r9]
 8008e8c:	e765      	b.n	8008d5a <_strtod_l+0x44a>
 8008e8e:	bf00      	nop
 8008e90:	0800c029 	.word	0x0800c029
 8008e94:	0800c0b3 	.word	0x0800c0b3
 8008e98:	0800c031 	.word	0x0800c031
 8008e9c:	0800c074 	.word	0x0800c074
 8008ea0:	0800c158 	.word	0x0800c158
 8008ea4:	0800c130 	.word	0x0800c130
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	7ca00000 	.word	0x7ca00000
 8008eb0:	fff80000 	.word	0xfff80000
 8008eb4:	7fefffff 	.word	0x7fefffff
 8008eb8:	f018 0310 	ands.w	r3, r8, #16
 8008ebc:	bf18      	it	ne
 8008ebe:	236a      	movne	r3, #106	; 0x6a
 8008ec0:	4da0      	ldr	r5, [pc, #640]	; (8009144 <_strtod_l+0x834>)
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	4650      	mov	r0, sl
 8008ec6:	4659      	mov	r1, fp
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f1b8 0f00 	cmp.w	r8, #0
 8008ece:	f300 810a 	bgt.w	80090e6 <_strtod_l+0x7d6>
 8008ed2:	b10b      	cbz	r3, 8008ed8 <_strtod_l+0x5c8>
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	468b      	mov	fp, r1
 8008ed8:	9b04      	ldr	r3, [sp, #16]
 8008eda:	b1bb      	cbz	r3, 8008f0c <_strtod_l+0x5fc>
 8008edc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008ee0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	dd10      	ble.n	8008f0c <_strtod_l+0x5fc>
 8008eea:	2b1f      	cmp	r3, #31
 8008eec:	f340 8107 	ble.w	80090fe <_strtod_l+0x7ee>
 8008ef0:	2b34      	cmp	r3, #52	; 0x34
 8008ef2:	bfde      	ittt	le
 8008ef4:	3b20      	suble	r3, #32
 8008ef6:	f04f 32ff 	movle.w	r2, #4294967295
 8008efa:	fa02 f303 	lslle.w	r3, r2, r3
 8008efe:	f04f 0a00 	mov.w	sl, #0
 8008f02:	bfcc      	ite	gt
 8008f04:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f08:	ea03 0b01 	andle.w	fp, r3, r1
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4650      	mov	r0, sl
 8008f12:	4659      	mov	r1, fp
 8008f14:	f7f7 fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1ac      	bne.n	8008e76 <_strtod_l+0x566>
 8008f1c:	9b07      	ldr	r3, [sp, #28]
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	9a05      	ldr	r2, [sp, #20]
 8008f22:	9908      	ldr	r1, [sp, #32]
 8008f24:	4623      	mov	r3, r4
 8008f26:	4648      	mov	r0, r9
 8008f28:	f001 fe79 	bl	800ac1e <__s2b>
 8008f2c:	9007      	str	r0, [sp, #28]
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f af08 	beq.w	8008d44 <_strtod_l+0x434>
 8008f34:	9a06      	ldr	r2, [sp, #24]
 8008f36:	9b06      	ldr	r3, [sp, #24]
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	f1c3 0300 	rsb	r3, r3, #0
 8008f3e:	bfa8      	it	ge
 8008f40:	2300      	movge	r3, #0
 8008f42:	930e      	str	r3, [sp, #56]	; 0x38
 8008f44:	2400      	movs	r4, #0
 8008f46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f4a:	9316      	str	r3, [sp, #88]	; 0x58
 8008f4c:	46a0      	mov	r8, r4
 8008f4e:	9b07      	ldr	r3, [sp, #28]
 8008f50:	4648      	mov	r0, r9
 8008f52:	6859      	ldr	r1, [r3, #4]
 8008f54:	f001 fddd 	bl	800ab12 <_Balloc>
 8008f58:	9005      	str	r0, [sp, #20]
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	f43f aef6 	beq.w	8008d4c <_strtod_l+0x43c>
 8008f60:	9b07      	ldr	r3, [sp, #28]
 8008f62:	691a      	ldr	r2, [r3, #16]
 8008f64:	3202      	adds	r2, #2
 8008f66:	f103 010c 	add.w	r1, r3, #12
 8008f6a:	0092      	lsls	r2, r2, #2
 8008f6c:	300c      	adds	r0, #12
 8008f6e:	f001 fdc5 	bl	800aafc <memcpy>
 8008f72:	aa1e      	add	r2, sp, #120	; 0x78
 8008f74:	a91d      	add	r1, sp, #116	; 0x74
 8008f76:	ec4b ab10 	vmov	d0, sl, fp
 8008f7a:	4648      	mov	r0, r9
 8008f7c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008f80:	f002 f908 	bl	800b194 <__d2b>
 8008f84:	901c      	str	r0, [sp, #112]	; 0x70
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f43f aee0 	beq.w	8008d4c <_strtod_l+0x43c>
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	4648      	mov	r0, r9
 8008f90:	f001 fed1 	bl	800ad36 <__i2b>
 8008f94:	4680      	mov	r8, r0
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f43f aed8 	beq.w	8008d4c <_strtod_l+0x43c>
 8008f9c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008f9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008fa0:	2e00      	cmp	r6, #0
 8008fa2:	bfab      	itete	ge
 8008fa4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008fa6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008fa8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008faa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008fac:	bfac      	ite	ge
 8008fae:	18f7      	addge	r7, r6, r3
 8008fb0:	1b9d      	sublt	r5, r3, r6
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	1af6      	subs	r6, r6, r3
 8008fb6:	4416      	add	r6, r2
 8008fb8:	4b63      	ldr	r3, [pc, #396]	; (8009148 <_strtod_l+0x838>)
 8008fba:	3e01      	subs	r6, #1
 8008fbc:	429e      	cmp	r6, r3
 8008fbe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fc2:	f280 80af 	bge.w	8009124 <_strtod_l+0x814>
 8008fc6:	1b9b      	subs	r3, r3, r6
 8008fc8:	2b1f      	cmp	r3, #31
 8008fca:	eba2 0203 	sub.w	r2, r2, r3
 8008fce:	f04f 0101 	mov.w	r1, #1
 8008fd2:	f300 809b 	bgt.w	800910c <_strtod_l+0x7fc>
 8008fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fda:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fdc:	2300      	movs	r3, #0
 8008fde:	930a      	str	r3, [sp, #40]	; 0x28
 8008fe0:	18be      	adds	r6, r7, r2
 8008fe2:	9b04      	ldr	r3, [sp, #16]
 8008fe4:	42b7      	cmp	r7, r6
 8008fe6:	4415      	add	r5, r2
 8008fe8:	441d      	add	r5, r3
 8008fea:	463b      	mov	r3, r7
 8008fec:	bfa8      	it	ge
 8008fee:	4633      	movge	r3, r6
 8008ff0:	42ab      	cmp	r3, r5
 8008ff2:	bfa8      	it	ge
 8008ff4:	462b      	movge	r3, r5
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfc2      	ittt	gt
 8008ffa:	1af6      	subgt	r6, r6, r3
 8008ffc:	1aed      	subgt	r5, r5, r3
 8008ffe:	1aff      	subgt	r7, r7, r3
 8009000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009002:	b1bb      	cbz	r3, 8009034 <_strtod_l+0x724>
 8009004:	4641      	mov	r1, r8
 8009006:	461a      	mov	r2, r3
 8009008:	4648      	mov	r0, r9
 800900a:	f001 ff33 	bl	800ae74 <__pow5mult>
 800900e:	4680      	mov	r8, r0
 8009010:	2800      	cmp	r0, #0
 8009012:	f43f ae9b 	beq.w	8008d4c <_strtod_l+0x43c>
 8009016:	4601      	mov	r1, r0
 8009018:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800901a:	4648      	mov	r0, r9
 800901c:	f001 fe94 	bl	800ad48 <__multiply>
 8009020:	900c      	str	r0, [sp, #48]	; 0x30
 8009022:	2800      	cmp	r0, #0
 8009024:	f43f ae92 	beq.w	8008d4c <_strtod_l+0x43c>
 8009028:	991c      	ldr	r1, [sp, #112]	; 0x70
 800902a:	4648      	mov	r0, r9
 800902c:	f001 fda5 	bl	800ab7a <_Bfree>
 8009030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009032:	931c      	str	r3, [sp, #112]	; 0x70
 8009034:	2e00      	cmp	r6, #0
 8009036:	dc7a      	bgt.n	800912e <_strtod_l+0x81e>
 8009038:	9b06      	ldr	r3, [sp, #24]
 800903a:	2b00      	cmp	r3, #0
 800903c:	dd08      	ble.n	8009050 <_strtod_l+0x740>
 800903e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009040:	9905      	ldr	r1, [sp, #20]
 8009042:	4648      	mov	r0, r9
 8009044:	f001 ff16 	bl	800ae74 <__pow5mult>
 8009048:	9005      	str	r0, [sp, #20]
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f ae7e 	beq.w	8008d4c <_strtod_l+0x43c>
 8009050:	2d00      	cmp	r5, #0
 8009052:	dd08      	ble.n	8009066 <_strtod_l+0x756>
 8009054:	462a      	mov	r2, r5
 8009056:	9905      	ldr	r1, [sp, #20]
 8009058:	4648      	mov	r0, r9
 800905a:	f001 ff59 	bl	800af10 <__lshift>
 800905e:	9005      	str	r0, [sp, #20]
 8009060:	2800      	cmp	r0, #0
 8009062:	f43f ae73 	beq.w	8008d4c <_strtod_l+0x43c>
 8009066:	2f00      	cmp	r7, #0
 8009068:	dd08      	ble.n	800907c <_strtod_l+0x76c>
 800906a:	4641      	mov	r1, r8
 800906c:	463a      	mov	r2, r7
 800906e:	4648      	mov	r0, r9
 8009070:	f001 ff4e 	bl	800af10 <__lshift>
 8009074:	4680      	mov	r8, r0
 8009076:	2800      	cmp	r0, #0
 8009078:	f43f ae68 	beq.w	8008d4c <_strtod_l+0x43c>
 800907c:	9a05      	ldr	r2, [sp, #20]
 800907e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009080:	4648      	mov	r0, r9
 8009082:	f001 ffb3 	bl	800afec <__mdiff>
 8009086:	4604      	mov	r4, r0
 8009088:	2800      	cmp	r0, #0
 800908a:	f43f ae5f 	beq.w	8008d4c <_strtod_l+0x43c>
 800908e:	68c3      	ldr	r3, [r0, #12]
 8009090:	930c      	str	r3, [sp, #48]	; 0x30
 8009092:	2300      	movs	r3, #0
 8009094:	60c3      	str	r3, [r0, #12]
 8009096:	4641      	mov	r1, r8
 8009098:	f001 ff8e 	bl	800afb8 <__mcmp>
 800909c:	2800      	cmp	r0, #0
 800909e:	da55      	bge.n	800914c <_strtod_l+0x83c>
 80090a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090a2:	b9e3      	cbnz	r3, 80090de <_strtod_l+0x7ce>
 80090a4:	f1ba 0f00 	cmp.w	sl, #0
 80090a8:	d119      	bne.n	80090de <_strtod_l+0x7ce>
 80090aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090ae:	b9b3      	cbnz	r3, 80090de <_strtod_l+0x7ce>
 80090b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090b4:	0d1b      	lsrs	r3, r3, #20
 80090b6:	051b      	lsls	r3, r3, #20
 80090b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090bc:	d90f      	bls.n	80090de <_strtod_l+0x7ce>
 80090be:	6963      	ldr	r3, [r4, #20]
 80090c0:	b913      	cbnz	r3, 80090c8 <_strtod_l+0x7b8>
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	dd0a      	ble.n	80090de <_strtod_l+0x7ce>
 80090c8:	4621      	mov	r1, r4
 80090ca:	2201      	movs	r2, #1
 80090cc:	4648      	mov	r0, r9
 80090ce:	f001 ff1f 	bl	800af10 <__lshift>
 80090d2:	4641      	mov	r1, r8
 80090d4:	4604      	mov	r4, r0
 80090d6:	f001 ff6f 	bl	800afb8 <__mcmp>
 80090da:	2800      	cmp	r0, #0
 80090dc:	dc67      	bgt.n	80091ae <_strtod_l+0x89e>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d171      	bne.n	80091c8 <_strtod_l+0x8b8>
 80090e4:	e63d      	b.n	8008d62 <_strtod_l+0x452>
 80090e6:	f018 0f01 	tst.w	r8, #1
 80090ea:	d004      	beq.n	80090f6 <_strtod_l+0x7e6>
 80090ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090f0:	f7f7 fa82 	bl	80005f8 <__aeabi_dmul>
 80090f4:	2301      	movs	r3, #1
 80090f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80090fa:	3508      	adds	r5, #8
 80090fc:	e6e5      	b.n	8008eca <_strtod_l+0x5ba>
 80090fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009102:	fa02 f303 	lsl.w	r3, r2, r3
 8009106:	ea03 0a0a 	and.w	sl, r3, sl
 800910a:	e6ff      	b.n	8008f0c <_strtod_l+0x5fc>
 800910c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009110:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009114:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009118:	36e2      	adds	r6, #226	; 0xe2
 800911a:	fa01 f306 	lsl.w	r3, r1, r6
 800911e:	930a      	str	r3, [sp, #40]	; 0x28
 8009120:	910f      	str	r1, [sp, #60]	; 0x3c
 8009122:	e75d      	b.n	8008fe0 <_strtod_l+0x6d0>
 8009124:	2300      	movs	r3, #0
 8009126:	930a      	str	r3, [sp, #40]	; 0x28
 8009128:	2301      	movs	r3, #1
 800912a:	930f      	str	r3, [sp, #60]	; 0x3c
 800912c:	e758      	b.n	8008fe0 <_strtod_l+0x6d0>
 800912e:	4632      	mov	r2, r6
 8009130:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009132:	4648      	mov	r0, r9
 8009134:	f001 feec 	bl	800af10 <__lshift>
 8009138:	901c      	str	r0, [sp, #112]	; 0x70
 800913a:	2800      	cmp	r0, #0
 800913c:	f47f af7c 	bne.w	8009038 <_strtod_l+0x728>
 8009140:	e604      	b.n	8008d4c <_strtod_l+0x43c>
 8009142:	bf00      	nop
 8009144:	0800c088 	.word	0x0800c088
 8009148:	fffffc02 	.word	0xfffffc02
 800914c:	465d      	mov	r5, fp
 800914e:	f040 8086 	bne.w	800925e <_strtod_l+0x94e>
 8009152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009154:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009158:	b32a      	cbz	r2, 80091a6 <_strtod_l+0x896>
 800915a:	4aaf      	ldr	r2, [pc, #700]	; (8009418 <_strtod_l+0xb08>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d153      	bne.n	8009208 <_strtod_l+0x8f8>
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	4650      	mov	r0, sl
 8009164:	b1d3      	cbz	r3, 800919c <_strtod_l+0x88c>
 8009166:	4aad      	ldr	r2, [pc, #692]	; (800941c <_strtod_l+0xb0c>)
 8009168:	402a      	ands	r2, r5
 800916a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800916e:	f04f 31ff 	mov.w	r1, #4294967295
 8009172:	d816      	bhi.n	80091a2 <_strtod_l+0x892>
 8009174:	0d12      	lsrs	r2, r2, #20
 8009176:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800917a:	fa01 f303 	lsl.w	r3, r1, r3
 800917e:	4298      	cmp	r0, r3
 8009180:	d142      	bne.n	8009208 <_strtod_l+0x8f8>
 8009182:	4ba7      	ldr	r3, [pc, #668]	; (8009420 <_strtod_l+0xb10>)
 8009184:	429d      	cmp	r5, r3
 8009186:	d102      	bne.n	800918e <_strtod_l+0x87e>
 8009188:	3001      	adds	r0, #1
 800918a:	f43f addf 	beq.w	8008d4c <_strtod_l+0x43c>
 800918e:	4ba3      	ldr	r3, [pc, #652]	; (800941c <_strtod_l+0xb0c>)
 8009190:	402b      	ands	r3, r5
 8009192:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009196:	f04f 0a00 	mov.w	sl, #0
 800919a:	e7a0      	b.n	80090de <_strtod_l+0x7ce>
 800919c:	f04f 33ff 	mov.w	r3, #4294967295
 80091a0:	e7ed      	b.n	800917e <_strtod_l+0x86e>
 80091a2:	460b      	mov	r3, r1
 80091a4:	e7eb      	b.n	800917e <_strtod_l+0x86e>
 80091a6:	bb7b      	cbnz	r3, 8009208 <_strtod_l+0x8f8>
 80091a8:	f1ba 0f00 	cmp.w	sl, #0
 80091ac:	d12c      	bne.n	8009208 <_strtod_l+0x8f8>
 80091ae:	9904      	ldr	r1, [sp, #16]
 80091b0:	4a9a      	ldr	r2, [pc, #616]	; (800941c <_strtod_l+0xb0c>)
 80091b2:	465b      	mov	r3, fp
 80091b4:	b1f1      	cbz	r1, 80091f4 <_strtod_l+0x8e4>
 80091b6:	ea02 010b 	and.w	r1, r2, fp
 80091ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091be:	dc19      	bgt.n	80091f4 <_strtod_l+0x8e4>
 80091c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091c4:	f77f ae5b 	ble.w	8008e7e <_strtod_l+0x56e>
 80091c8:	4a96      	ldr	r2, [pc, #600]	; (8009424 <_strtod_l+0xb14>)
 80091ca:	2300      	movs	r3, #0
 80091cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80091d0:	4650      	mov	r0, sl
 80091d2:	4659      	mov	r1, fp
 80091d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80091d8:	f7f7 fa0e 	bl	80005f8 <__aeabi_dmul>
 80091dc:	4682      	mov	sl, r0
 80091de:	468b      	mov	fp, r1
 80091e0:	2900      	cmp	r1, #0
 80091e2:	f47f adbe 	bne.w	8008d62 <_strtod_l+0x452>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f47f adbb 	bne.w	8008d62 <_strtod_l+0x452>
 80091ec:	2322      	movs	r3, #34	; 0x22
 80091ee:	f8c9 3000 	str.w	r3, [r9]
 80091f2:	e5b6      	b.n	8008d62 <_strtod_l+0x452>
 80091f4:	4013      	ands	r3, r2
 80091f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009202:	f04f 3aff 	mov.w	sl, #4294967295
 8009206:	e76a      	b.n	80090de <_strtod_l+0x7ce>
 8009208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800920a:	b193      	cbz	r3, 8009232 <_strtod_l+0x922>
 800920c:	422b      	tst	r3, r5
 800920e:	f43f af66 	beq.w	80090de <_strtod_l+0x7ce>
 8009212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009214:	9a04      	ldr	r2, [sp, #16]
 8009216:	4650      	mov	r0, sl
 8009218:	4659      	mov	r1, fp
 800921a:	b173      	cbz	r3, 800923a <_strtod_l+0x92a>
 800921c:	f7ff fb5a 	bl	80088d4 <sulp>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009228:	f7f7 f830 	bl	800028c <__adddf3>
 800922c:	4682      	mov	sl, r0
 800922e:	468b      	mov	fp, r1
 8009230:	e755      	b.n	80090de <_strtod_l+0x7ce>
 8009232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009234:	ea13 0f0a 	tst.w	r3, sl
 8009238:	e7e9      	b.n	800920e <_strtod_l+0x8fe>
 800923a:	f7ff fb4b 	bl	80088d4 <sulp>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009246:	f7f7 f81f 	bl	8000288 <__aeabi_dsub>
 800924a:	2200      	movs	r2, #0
 800924c:	2300      	movs	r3, #0
 800924e:	4682      	mov	sl, r0
 8009250:	468b      	mov	fp, r1
 8009252:	f7f7 fc39 	bl	8000ac8 <__aeabi_dcmpeq>
 8009256:	2800      	cmp	r0, #0
 8009258:	f47f ae11 	bne.w	8008e7e <_strtod_l+0x56e>
 800925c:	e73f      	b.n	80090de <_strtod_l+0x7ce>
 800925e:	4641      	mov	r1, r8
 8009260:	4620      	mov	r0, r4
 8009262:	f001 ffe6 	bl	800b232 <__ratio>
 8009266:	ec57 6b10 	vmov	r6, r7, d0
 800926a:	2200      	movs	r2, #0
 800926c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009270:	ee10 0a10 	vmov	r0, s0
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 fc3b 	bl	8000af0 <__aeabi_dcmple>
 800927a:	2800      	cmp	r0, #0
 800927c:	d077      	beq.n	800936e <_strtod_l+0xa5e>
 800927e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009280:	2b00      	cmp	r3, #0
 8009282:	d04a      	beq.n	800931a <_strtod_l+0xa0a>
 8009284:	4b68      	ldr	r3, [pc, #416]	; (8009428 <_strtod_l+0xb18>)
 8009286:	2200      	movs	r2, #0
 8009288:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800928c:	4f66      	ldr	r7, [pc, #408]	; (8009428 <_strtod_l+0xb18>)
 800928e:	2600      	movs	r6, #0
 8009290:	4b62      	ldr	r3, [pc, #392]	; (800941c <_strtod_l+0xb0c>)
 8009292:	402b      	ands	r3, r5
 8009294:	930f      	str	r3, [sp, #60]	; 0x3c
 8009296:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009298:	4b64      	ldr	r3, [pc, #400]	; (800942c <_strtod_l+0xb1c>)
 800929a:	429a      	cmp	r2, r3
 800929c:	f040 80ce 	bne.w	800943c <_strtod_l+0xb2c>
 80092a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80092ac:	ec4b ab10 	vmov	d0, sl, fp
 80092b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80092b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092b8:	f001 fef6 	bl	800b0a8 <__ulp>
 80092bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092c0:	ec53 2b10 	vmov	r2, r3, d0
 80092c4:	f7f7 f998 	bl	80005f8 <__aeabi_dmul>
 80092c8:	4652      	mov	r2, sl
 80092ca:	465b      	mov	r3, fp
 80092cc:	f7f6 ffde 	bl	800028c <__adddf3>
 80092d0:	460b      	mov	r3, r1
 80092d2:	4952      	ldr	r1, [pc, #328]	; (800941c <_strtod_l+0xb0c>)
 80092d4:	4a56      	ldr	r2, [pc, #344]	; (8009430 <_strtod_l+0xb20>)
 80092d6:	4019      	ands	r1, r3
 80092d8:	4291      	cmp	r1, r2
 80092da:	4682      	mov	sl, r0
 80092dc:	d95b      	bls.n	8009396 <_strtod_l+0xa86>
 80092de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d103      	bne.n	80092f0 <_strtod_l+0x9e0>
 80092e8:	9b08      	ldr	r3, [sp, #32]
 80092ea:	3301      	adds	r3, #1
 80092ec:	f43f ad2e 	beq.w	8008d4c <_strtod_l+0x43c>
 80092f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009420 <_strtod_l+0xb10>
 80092f4:	f04f 3aff 	mov.w	sl, #4294967295
 80092f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80092fa:	4648      	mov	r0, r9
 80092fc:	f001 fc3d 	bl	800ab7a <_Bfree>
 8009300:	9905      	ldr	r1, [sp, #20]
 8009302:	4648      	mov	r0, r9
 8009304:	f001 fc39 	bl	800ab7a <_Bfree>
 8009308:	4641      	mov	r1, r8
 800930a:	4648      	mov	r0, r9
 800930c:	f001 fc35 	bl	800ab7a <_Bfree>
 8009310:	4621      	mov	r1, r4
 8009312:	4648      	mov	r0, r9
 8009314:	f001 fc31 	bl	800ab7a <_Bfree>
 8009318:	e619      	b.n	8008f4e <_strtod_l+0x63e>
 800931a:	f1ba 0f00 	cmp.w	sl, #0
 800931e:	d11a      	bne.n	8009356 <_strtod_l+0xa46>
 8009320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009324:	b9eb      	cbnz	r3, 8009362 <_strtod_l+0xa52>
 8009326:	2200      	movs	r2, #0
 8009328:	4b3f      	ldr	r3, [pc, #252]	; (8009428 <_strtod_l+0xb18>)
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f7 fbd5 	bl	8000adc <__aeabi_dcmplt>
 8009332:	b9c8      	cbnz	r0, 8009368 <_strtod_l+0xa58>
 8009334:	4630      	mov	r0, r6
 8009336:	4639      	mov	r1, r7
 8009338:	2200      	movs	r2, #0
 800933a:	4b3e      	ldr	r3, [pc, #248]	; (8009434 <_strtod_l+0xb24>)
 800933c:	f7f7 f95c 	bl	80005f8 <__aeabi_dmul>
 8009340:	4606      	mov	r6, r0
 8009342:	460f      	mov	r7, r1
 8009344:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009348:	9618      	str	r6, [sp, #96]	; 0x60
 800934a:	9319      	str	r3, [sp, #100]	; 0x64
 800934c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009350:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009354:	e79c      	b.n	8009290 <_strtod_l+0x980>
 8009356:	f1ba 0f01 	cmp.w	sl, #1
 800935a:	d102      	bne.n	8009362 <_strtod_l+0xa52>
 800935c:	2d00      	cmp	r5, #0
 800935e:	f43f ad8e 	beq.w	8008e7e <_strtod_l+0x56e>
 8009362:	2200      	movs	r2, #0
 8009364:	4b34      	ldr	r3, [pc, #208]	; (8009438 <_strtod_l+0xb28>)
 8009366:	e78f      	b.n	8009288 <_strtod_l+0x978>
 8009368:	2600      	movs	r6, #0
 800936a:	4f32      	ldr	r7, [pc, #200]	; (8009434 <_strtod_l+0xb24>)
 800936c:	e7ea      	b.n	8009344 <_strtod_l+0xa34>
 800936e:	4b31      	ldr	r3, [pc, #196]	; (8009434 <_strtod_l+0xb24>)
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	2200      	movs	r2, #0
 8009376:	f7f7 f93f 	bl	80005f8 <__aeabi_dmul>
 800937a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800937c:	4606      	mov	r6, r0
 800937e:	460f      	mov	r7, r1
 8009380:	b933      	cbnz	r3, 8009390 <_strtod_l+0xa80>
 8009382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009386:	9010      	str	r0, [sp, #64]	; 0x40
 8009388:	9311      	str	r3, [sp, #68]	; 0x44
 800938a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800938e:	e7df      	b.n	8009350 <_strtod_l+0xa40>
 8009390:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009394:	e7f9      	b.n	800938a <_strtod_l+0xa7a>
 8009396:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800939a:	9b04      	ldr	r3, [sp, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1ab      	bne.n	80092f8 <_strtod_l+0x9e8>
 80093a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093a4:	0d1b      	lsrs	r3, r3, #20
 80093a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093a8:	051b      	lsls	r3, r3, #20
 80093aa:	429a      	cmp	r2, r3
 80093ac:	465d      	mov	r5, fp
 80093ae:	d1a3      	bne.n	80092f8 <_strtod_l+0x9e8>
 80093b0:	4639      	mov	r1, r7
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7f7 fbd0 	bl	8000b58 <__aeabi_d2iz>
 80093b8:	f7f7 f8b4 	bl	8000524 <__aeabi_i2d>
 80093bc:	460b      	mov	r3, r1
 80093be:	4602      	mov	r2, r0
 80093c0:	4639      	mov	r1, r7
 80093c2:	4630      	mov	r0, r6
 80093c4:	f7f6 ff60 	bl	8000288 <__aeabi_dsub>
 80093c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ca:	4606      	mov	r6, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	b933      	cbnz	r3, 80093de <_strtod_l+0xace>
 80093d0:	f1ba 0f00 	cmp.w	sl, #0
 80093d4:	d103      	bne.n	80093de <_strtod_l+0xace>
 80093d6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80093da:	2d00      	cmp	r5, #0
 80093dc:	d06d      	beq.n	80094ba <_strtod_l+0xbaa>
 80093de:	a30a      	add	r3, pc, #40	; (adr r3, 8009408 <_strtod_l+0xaf8>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	4630      	mov	r0, r6
 80093e6:	4639      	mov	r1, r7
 80093e8:	f7f7 fb78 	bl	8000adc <__aeabi_dcmplt>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f47f acb8 	bne.w	8008d62 <_strtod_l+0x452>
 80093f2:	a307      	add	r3, pc, #28	; (adr r3, 8009410 <_strtod_l+0xb00>)
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	4630      	mov	r0, r6
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7f7 fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 8009400:	2800      	cmp	r0, #0
 8009402:	f43f af79 	beq.w	80092f8 <_strtod_l+0x9e8>
 8009406:	e4ac      	b.n	8008d62 <_strtod_l+0x452>
 8009408:	94a03595 	.word	0x94a03595
 800940c:	3fdfffff 	.word	0x3fdfffff
 8009410:	35afe535 	.word	0x35afe535
 8009414:	3fe00000 	.word	0x3fe00000
 8009418:	000fffff 	.word	0x000fffff
 800941c:	7ff00000 	.word	0x7ff00000
 8009420:	7fefffff 	.word	0x7fefffff
 8009424:	39500000 	.word	0x39500000
 8009428:	3ff00000 	.word	0x3ff00000
 800942c:	7fe00000 	.word	0x7fe00000
 8009430:	7c9fffff 	.word	0x7c9fffff
 8009434:	3fe00000 	.word	0x3fe00000
 8009438:	bff00000 	.word	0xbff00000
 800943c:	9b04      	ldr	r3, [sp, #16]
 800943e:	b333      	cbz	r3, 800948e <_strtod_l+0xb7e>
 8009440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009442:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009446:	d822      	bhi.n	800948e <_strtod_l+0xb7e>
 8009448:	a327      	add	r3, pc, #156	; (adr r3, 80094e8 <_strtod_l+0xbd8>)
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7f7 fb4d 	bl	8000af0 <__aeabi_dcmple>
 8009456:	b1a0      	cbz	r0, 8009482 <_strtod_l+0xb72>
 8009458:	4639      	mov	r1, r7
 800945a:	4630      	mov	r0, r6
 800945c:	f7f7 fba4 	bl	8000ba8 <__aeabi_d2uiz>
 8009460:	2800      	cmp	r0, #0
 8009462:	bf08      	it	eq
 8009464:	2001      	moveq	r0, #1
 8009466:	f7f7 f84d 	bl	8000504 <__aeabi_ui2d>
 800946a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800946c:	4606      	mov	r6, r0
 800946e:	460f      	mov	r7, r1
 8009470:	bb03      	cbnz	r3, 80094b4 <_strtod_l+0xba4>
 8009472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009476:	9012      	str	r0, [sp, #72]	; 0x48
 8009478:	9313      	str	r3, [sp, #76]	; 0x4c
 800947a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800947e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009486:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	930b      	str	r3, [sp, #44]	; 0x2c
 800948e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009492:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009496:	f001 fe07 	bl	800b0a8 <__ulp>
 800949a:	4650      	mov	r0, sl
 800949c:	ec53 2b10 	vmov	r2, r3, d0
 80094a0:	4659      	mov	r1, fp
 80094a2:	f7f7 f8a9 	bl	80005f8 <__aeabi_dmul>
 80094a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094aa:	f7f6 feef 	bl	800028c <__adddf3>
 80094ae:	4682      	mov	sl, r0
 80094b0:	468b      	mov	fp, r1
 80094b2:	e772      	b.n	800939a <_strtod_l+0xa8a>
 80094b4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80094b8:	e7df      	b.n	800947a <_strtod_l+0xb6a>
 80094ba:	a30d      	add	r3, pc, #52	; (adr r3, 80094f0 <_strtod_l+0xbe0>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f7 fb0c 	bl	8000adc <__aeabi_dcmplt>
 80094c4:	e79c      	b.n	8009400 <_strtod_l+0xaf0>
 80094c6:	2300      	movs	r3, #0
 80094c8:	930d      	str	r3, [sp, #52]	; 0x34
 80094ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	f7ff ba61 	b.w	8008996 <_strtod_l+0x86>
 80094d4:	2b65      	cmp	r3, #101	; 0x65
 80094d6:	f04f 0200 	mov.w	r2, #0
 80094da:	f43f ab4e 	beq.w	8008b7a <_strtod_l+0x26a>
 80094de:	2101      	movs	r1, #1
 80094e0:	4614      	mov	r4, r2
 80094e2:	9104      	str	r1, [sp, #16]
 80094e4:	f7ff bacb 	b.w	8008a7e <_strtod_l+0x16e>
 80094e8:	ffc00000 	.word	0xffc00000
 80094ec:	41dfffff 	.word	0x41dfffff
 80094f0:	94a03595 	.word	0x94a03595
 80094f4:	3fcfffff 	.word	0x3fcfffff

080094f8 <_strtod_r>:
 80094f8:	4b05      	ldr	r3, [pc, #20]	; (8009510 <_strtod_r+0x18>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	b410      	push	{r4}
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	4c04      	ldr	r4, [pc, #16]	; (8009514 <_strtod_r+0x1c>)
 8009502:	2b00      	cmp	r3, #0
 8009504:	bf08      	it	eq
 8009506:	4623      	moveq	r3, r4
 8009508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950c:	f7ff ba00 	b.w	8008910 <_strtod_l>
 8009510:	2000000c 	.word	0x2000000c
 8009514:	20000070 	.word	0x20000070

08009518 <_strtol_l.isra.0>:
 8009518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	4680      	mov	r8, r0
 800951e:	4689      	mov	r9, r1
 8009520:	4692      	mov	sl, r2
 8009522:	461e      	mov	r6, r3
 8009524:	460f      	mov	r7, r1
 8009526:	463d      	mov	r5, r7
 8009528:	9808      	ldr	r0, [sp, #32]
 800952a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800952e:	f001 fab7 	bl	800aaa0 <__locale_ctype_ptr_l>
 8009532:	4420      	add	r0, r4
 8009534:	7843      	ldrb	r3, [r0, #1]
 8009536:	f013 0308 	ands.w	r3, r3, #8
 800953a:	d132      	bne.n	80095a2 <_strtol_l.isra.0+0x8a>
 800953c:	2c2d      	cmp	r4, #45	; 0x2d
 800953e:	d132      	bne.n	80095a6 <_strtol_l.isra.0+0x8e>
 8009540:	787c      	ldrb	r4, [r7, #1]
 8009542:	1cbd      	adds	r5, r7, #2
 8009544:	2201      	movs	r2, #1
 8009546:	2e00      	cmp	r6, #0
 8009548:	d05d      	beq.n	8009606 <_strtol_l.isra.0+0xee>
 800954a:	2e10      	cmp	r6, #16
 800954c:	d109      	bne.n	8009562 <_strtol_l.isra.0+0x4a>
 800954e:	2c30      	cmp	r4, #48	; 0x30
 8009550:	d107      	bne.n	8009562 <_strtol_l.isra.0+0x4a>
 8009552:	782b      	ldrb	r3, [r5, #0]
 8009554:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009558:	2b58      	cmp	r3, #88	; 0x58
 800955a:	d14f      	bne.n	80095fc <_strtol_l.isra.0+0xe4>
 800955c:	786c      	ldrb	r4, [r5, #1]
 800955e:	2610      	movs	r6, #16
 8009560:	3502      	adds	r5, #2
 8009562:	2a00      	cmp	r2, #0
 8009564:	bf14      	ite	ne
 8009566:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800956a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800956e:	2700      	movs	r7, #0
 8009570:	fbb1 fcf6 	udiv	ip, r1, r6
 8009574:	4638      	mov	r0, r7
 8009576:	fb06 1e1c 	mls	lr, r6, ip, r1
 800957a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800957e:	2b09      	cmp	r3, #9
 8009580:	d817      	bhi.n	80095b2 <_strtol_l.isra.0+0x9a>
 8009582:	461c      	mov	r4, r3
 8009584:	42a6      	cmp	r6, r4
 8009586:	dd23      	ble.n	80095d0 <_strtol_l.isra.0+0xb8>
 8009588:	1c7b      	adds	r3, r7, #1
 800958a:	d007      	beq.n	800959c <_strtol_l.isra.0+0x84>
 800958c:	4584      	cmp	ip, r0
 800958e:	d31c      	bcc.n	80095ca <_strtol_l.isra.0+0xb2>
 8009590:	d101      	bne.n	8009596 <_strtol_l.isra.0+0x7e>
 8009592:	45a6      	cmp	lr, r4
 8009594:	db19      	blt.n	80095ca <_strtol_l.isra.0+0xb2>
 8009596:	fb00 4006 	mla	r0, r0, r6, r4
 800959a:	2701      	movs	r7, #1
 800959c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095a0:	e7eb      	b.n	800957a <_strtol_l.isra.0+0x62>
 80095a2:	462f      	mov	r7, r5
 80095a4:	e7bf      	b.n	8009526 <_strtol_l.isra.0+0xe>
 80095a6:	2c2b      	cmp	r4, #43	; 0x2b
 80095a8:	bf04      	itt	eq
 80095aa:	1cbd      	addeq	r5, r7, #2
 80095ac:	787c      	ldrbeq	r4, [r7, #1]
 80095ae:	461a      	mov	r2, r3
 80095b0:	e7c9      	b.n	8009546 <_strtol_l.isra.0+0x2e>
 80095b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80095b6:	2b19      	cmp	r3, #25
 80095b8:	d801      	bhi.n	80095be <_strtol_l.isra.0+0xa6>
 80095ba:	3c37      	subs	r4, #55	; 0x37
 80095bc:	e7e2      	b.n	8009584 <_strtol_l.isra.0+0x6c>
 80095be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80095c2:	2b19      	cmp	r3, #25
 80095c4:	d804      	bhi.n	80095d0 <_strtol_l.isra.0+0xb8>
 80095c6:	3c57      	subs	r4, #87	; 0x57
 80095c8:	e7dc      	b.n	8009584 <_strtol_l.isra.0+0x6c>
 80095ca:	f04f 37ff 	mov.w	r7, #4294967295
 80095ce:	e7e5      	b.n	800959c <_strtol_l.isra.0+0x84>
 80095d0:	1c7b      	adds	r3, r7, #1
 80095d2:	d108      	bne.n	80095e6 <_strtol_l.isra.0+0xce>
 80095d4:	2322      	movs	r3, #34	; 0x22
 80095d6:	f8c8 3000 	str.w	r3, [r8]
 80095da:	4608      	mov	r0, r1
 80095dc:	f1ba 0f00 	cmp.w	sl, #0
 80095e0:	d107      	bne.n	80095f2 <_strtol_l.isra.0+0xda>
 80095e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e6:	b102      	cbz	r2, 80095ea <_strtol_l.isra.0+0xd2>
 80095e8:	4240      	negs	r0, r0
 80095ea:	f1ba 0f00 	cmp.w	sl, #0
 80095ee:	d0f8      	beq.n	80095e2 <_strtol_l.isra.0+0xca>
 80095f0:	b10f      	cbz	r7, 80095f6 <_strtol_l.isra.0+0xde>
 80095f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80095f6:	f8ca 9000 	str.w	r9, [sl]
 80095fa:	e7f2      	b.n	80095e2 <_strtol_l.isra.0+0xca>
 80095fc:	2430      	movs	r4, #48	; 0x30
 80095fe:	2e00      	cmp	r6, #0
 8009600:	d1af      	bne.n	8009562 <_strtol_l.isra.0+0x4a>
 8009602:	2608      	movs	r6, #8
 8009604:	e7ad      	b.n	8009562 <_strtol_l.isra.0+0x4a>
 8009606:	2c30      	cmp	r4, #48	; 0x30
 8009608:	d0a3      	beq.n	8009552 <_strtol_l.isra.0+0x3a>
 800960a:	260a      	movs	r6, #10
 800960c:	e7a9      	b.n	8009562 <_strtol_l.isra.0+0x4a>
	...

08009610 <_strtol_r>:
 8009610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009612:	4c06      	ldr	r4, [pc, #24]	; (800962c <_strtol_r+0x1c>)
 8009614:	4d06      	ldr	r5, [pc, #24]	; (8009630 <_strtol_r+0x20>)
 8009616:	6824      	ldr	r4, [r4, #0]
 8009618:	6a24      	ldr	r4, [r4, #32]
 800961a:	2c00      	cmp	r4, #0
 800961c:	bf08      	it	eq
 800961e:	462c      	moveq	r4, r5
 8009620:	9400      	str	r4, [sp, #0]
 8009622:	f7ff ff79 	bl	8009518 <_strtol_l.isra.0>
 8009626:	b003      	add	sp, #12
 8009628:	bd30      	pop	{r4, r5, pc}
 800962a:	bf00      	nop
 800962c:	2000000c 	.word	0x2000000c
 8009630:	20000070 	.word	0x20000070

08009634 <quorem>:
 8009634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	6903      	ldr	r3, [r0, #16]
 800963a:	690c      	ldr	r4, [r1, #16]
 800963c:	42a3      	cmp	r3, r4
 800963e:	4680      	mov	r8, r0
 8009640:	f2c0 8082 	blt.w	8009748 <quorem+0x114>
 8009644:	3c01      	subs	r4, #1
 8009646:	f101 0714 	add.w	r7, r1, #20
 800964a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800964e:	f100 0614 	add.w	r6, r0, #20
 8009652:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009656:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800965a:	eb06 030c 	add.w	r3, r6, ip
 800965e:	3501      	adds	r5, #1
 8009660:	eb07 090c 	add.w	r9, r7, ip
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	fbb0 f5f5 	udiv	r5, r0, r5
 800966a:	b395      	cbz	r5, 80096d2 <quorem+0x9e>
 800966c:	f04f 0a00 	mov.w	sl, #0
 8009670:	4638      	mov	r0, r7
 8009672:	46b6      	mov	lr, r6
 8009674:	46d3      	mov	fp, sl
 8009676:	f850 2b04 	ldr.w	r2, [r0], #4
 800967a:	b293      	uxth	r3, r2
 800967c:	fb05 a303 	mla	r3, r5, r3, sl
 8009680:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009684:	b29b      	uxth	r3, r3
 8009686:	ebab 0303 	sub.w	r3, fp, r3
 800968a:	0c12      	lsrs	r2, r2, #16
 800968c:	f8de b000 	ldr.w	fp, [lr]
 8009690:	fb05 a202 	mla	r2, r5, r2, sl
 8009694:	fa13 f38b 	uxtah	r3, r3, fp
 8009698:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800969c:	fa1f fb82 	uxth.w	fp, r2
 80096a0:	f8de 2000 	ldr.w	r2, [lr]
 80096a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80096a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096b2:	4581      	cmp	r9, r0
 80096b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80096b8:	f84e 3b04 	str.w	r3, [lr], #4
 80096bc:	d2db      	bcs.n	8009676 <quorem+0x42>
 80096be:	f856 300c 	ldr.w	r3, [r6, ip]
 80096c2:	b933      	cbnz	r3, 80096d2 <quorem+0x9e>
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	3b04      	subs	r3, #4
 80096c8:	429e      	cmp	r6, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	d330      	bcc.n	8009730 <quorem+0xfc>
 80096ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80096d2:	4640      	mov	r0, r8
 80096d4:	f001 fc70 	bl	800afb8 <__mcmp>
 80096d8:	2800      	cmp	r0, #0
 80096da:	db25      	blt.n	8009728 <quorem+0xf4>
 80096dc:	3501      	adds	r5, #1
 80096de:	4630      	mov	r0, r6
 80096e0:	f04f 0c00 	mov.w	ip, #0
 80096e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80096e8:	f8d0 e000 	ldr.w	lr, [r0]
 80096ec:	b293      	uxth	r3, r2
 80096ee:	ebac 0303 	sub.w	r3, ip, r3
 80096f2:	0c12      	lsrs	r2, r2, #16
 80096f4:	fa13 f38e 	uxtah	r3, r3, lr
 80096f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009700:	b29b      	uxth	r3, r3
 8009702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009706:	45b9      	cmp	r9, r7
 8009708:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800970c:	f840 3b04 	str.w	r3, [r0], #4
 8009710:	d2e8      	bcs.n	80096e4 <quorem+0xb0>
 8009712:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009716:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800971a:	b92a      	cbnz	r2, 8009728 <quorem+0xf4>
 800971c:	3b04      	subs	r3, #4
 800971e:	429e      	cmp	r6, r3
 8009720:	461a      	mov	r2, r3
 8009722:	d30b      	bcc.n	800973c <quorem+0x108>
 8009724:	f8c8 4010 	str.w	r4, [r8, #16]
 8009728:	4628      	mov	r0, r5
 800972a:	b003      	add	sp, #12
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	6812      	ldr	r2, [r2, #0]
 8009732:	3b04      	subs	r3, #4
 8009734:	2a00      	cmp	r2, #0
 8009736:	d1ca      	bne.n	80096ce <quorem+0x9a>
 8009738:	3c01      	subs	r4, #1
 800973a:	e7c5      	b.n	80096c8 <quorem+0x94>
 800973c:	6812      	ldr	r2, [r2, #0]
 800973e:	3b04      	subs	r3, #4
 8009740:	2a00      	cmp	r2, #0
 8009742:	d1ef      	bne.n	8009724 <quorem+0xf0>
 8009744:	3c01      	subs	r4, #1
 8009746:	e7ea      	b.n	800971e <quorem+0xea>
 8009748:	2000      	movs	r0, #0
 800974a:	e7ee      	b.n	800972a <quorem+0xf6>
 800974c:	0000      	movs	r0, r0
	...

08009750 <_dtoa_r>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	ec57 6b10 	vmov	r6, r7, d0
 8009758:	b097      	sub	sp, #92	; 0x5c
 800975a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800975c:	9106      	str	r1, [sp, #24]
 800975e:	4604      	mov	r4, r0
 8009760:	920b      	str	r2, [sp, #44]	; 0x2c
 8009762:	9312      	str	r3, [sp, #72]	; 0x48
 8009764:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009768:	e9cd 6700 	strd	r6, r7, [sp]
 800976c:	b93d      	cbnz	r5, 800977e <_dtoa_r+0x2e>
 800976e:	2010      	movs	r0, #16
 8009770:	f001 f9aa 	bl	800aac8 <malloc>
 8009774:	6260      	str	r0, [r4, #36]	; 0x24
 8009776:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800977a:	6005      	str	r5, [r0, #0]
 800977c:	60c5      	str	r5, [r0, #12]
 800977e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009780:	6819      	ldr	r1, [r3, #0]
 8009782:	b151      	cbz	r1, 800979a <_dtoa_r+0x4a>
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	604a      	str	r2, [r1, #4]
 8009788:	2301      	movs	r3, #1
 800978a:	4093      	lsls	r3, r2
 800978c:	608b      	str	r3, [r1, #8]
 800978e:	4620      	mov	r0, r4
 8009790:	f001 f9f3 	bl	800ab7a <_Bfree>
 8009794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	1e3b      	subs	r3, r7, #0
 800979c:	bfbb      	ittet	lt
 800979e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097a2:	9301      	strlt	r3, [sp, #4]
 80097a4:	2300      	movge	r3, #0
 80097a6:	2201      	movlt	r2, #1
 80097a8:	bfac      	ite	ge
 80097aa:	f8c8 3000 	strge.w	r3, [r8]
 80097ae:	f8c8 2000 	strlt.w	r2, [r8]
 80097b2:	4baf      	ldr	r3, [pc, #700]	; (8009a70 <_dtoa_r+0x320>)
 80097b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80097b8:	ea33 0308 	bics.w	r3, r3, r8
 80097bc:	d114      	bne.n	80097e8 <_dtoa_r+0x98>
 80097be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	9b00      	ldr	r3, [sp, #0]
 80097c8:	b923      	cbnz	r3, 80097d4 <_dtoa_r+0x84>
 80097ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f000 8542 	beq.w	800a258 <_dtoa_r+0xb08>
 80097d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009a84 <_dtoa_r+0x334>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 8544 	beq.w	800a268 <_dtoa_r+0xb18>
 80097e0:	f10b 0303 	add.w	r3, fp, #3
 80097e4:	f000 bd3e 	b.w	800a264 <_dtoa_r+0xb14>
 80097e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80097ec:	2200      	movs	r2, #0
 80097ee:	2300      	movs	r3, #0
 80097f0:	4630      	mov	r0, r6
 80097f2:	4639      	mov	r1, r7
 80097f4:	f7f7 f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80097f8:	4681      	mov	r9, r0
 80097fa:	b168      	cbz	r0, 8009818 <_dtoa_r+0xc8>
 80097fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097fe:	2301      	movs	r3, #1
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8524 	beq.w	800a252 <_dtoa_r+0xb02>
 800980a:	4b9a      	ldr	r3, [pc, #616]	; (8009a74 <_dtoa_r+0x324>)
 800980c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800980e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	f000 bd28 	b.w	800a268 <_dtoa_r+0xb18>
 8009818:	aa14      	add	r2, sp, #80	; 0x50
 800981a:	a915      	add	r1, sp, #84	; 0x54
 800981c:	ec47 6b10 	vmov	d0, r6, r7
 8009820:	4620      	mov	r0, r4
 8009822:	f001 fcb7 	bl	800b194 <__d2b>
 8009826:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800982a:	9004      	str	r0, [sp, #16]
 800982c:	2d00      	cmp	r5, #0
 800982e:	d07c      	beq.n	800992a <_dtoa_r+0x1da>
 8009830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009834:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009838:	46b2      	mov	sl, r6
 800983a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800983e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009842:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009846:	2200      	movs	r2, #0
 8009848:	4b8b      	ldr	r3, [pc, #556]	; (8009a78 <_dtoa_r+0x328>)
 800984a:	4650      	mov	r0, sl
 800984c:	4659      	mov	r1, fp
 800984e:	f7f6 fd1b 	bl	8000288 <__aeabi_dsub>
 8009852:	a381      	add	r3, pc, #516	; (adr r3, 8009a58 <_dtoa_r+0x308>)
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f7f6 fece 	bl	80005f8 <__aeabi_dmul>
 800985c:	a380      	add	r3, pc, #512	; (adr r3, 8009a60 <_dtoa_r+0x310>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fd13 	bl	800028c <__adddf3>
 8009866:	4606      	mov	r6, r0
 8009868:	4628      	mov	r0, r5
 800986a:	460f      	mov	r7, r1
 800986c:	f7f6 fe5a 	bl	8000524 <__aeabi_i2d>
 8009870:	a37d      	add	r3, pc, #500	; (adr r3, 8009a68 <_dtoa_r+0x318>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 febf 	bl	80005f8 <__aeabi_dmul>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f6 fd03 	bl	800028c <__adddf3>
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	f7f7 f965 	bl	8000b58 <__aeabi_d2iz>
 800988e:	2200      	movs	r2, #0
 8009890:	4682      	mov	sl, r0
 8009892:	2300      	movs	r3, #0
 8009894:	4630      	mov	r0, r6
 8009896:	4639      	mov	r1, r7
 8009898:	f7f7 f920 	bl	8000adc <__aeabi_dcmplt>
 800989c:	b148      	cbz	r0, 80098b2 <_dtoa_r+0x162>
 800989e:	4650      	mov	r0, sl
 80098a0:	f7f6 fe40 	bl	8000524 <__aeabi_i2d>
 80098a4:	4632      	mov	r2, r6
 80098a6:	463b      	mov	r3, r7
 80098a8:	f7f7 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ac:	b908      	cbnz	r0, 80098b2 <_dtoa_r+0x162>
 80098ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098b2:	f1ba 0f16 	cmp.w	sl, #22
 80098b6:	d859      	bhi.n	800996c <_dtoa_r+0x21c>
 80098b8:	4970      	ldr	r1, [pc, #448]	; (8009a7c <_dtoa_r+0x32c>)
 80098ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80098be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c6:	f7f7 f927 	bl	8000b18 <__aeabi_dcmpgt>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d050      	beq.n	8009970 <_dtoa_r+0x220>
 80098ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098d2:	2300      	movs	r3, #0
 80098d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80098d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098d8:	1b5d      	subs	r5, r3, r5
 80098da:	f1b5 0801 	subs.w	r8, r5, #1
 80098de:	bf49      	itett	mi
 80098e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80098e4:	2300      	movpl	r3, #0
 80098e6:	9305      	strmi	r3, [sp, #20]
 80098e8:	f04f 0800 	movmi.w	r8, #0
 80098ec:	bf58      	it	pl
 80098ee:	9305      	strpl	r3, [sp, #20]
 80098f0:	f1ba 0f00 	cmp.w	sl, #0
 80098f4:	db3e      	blt.n	8009974 <_dtoa_r+0x224>
 80098f6:	2300      	movs	r3, #0
 80098f8:	44d0      	add	r8, sl
 80098fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80098fe:	9307      	str	r3, [sp, #28]
 8009900:	9b06      	ldr	r3, [sp, #24]
 8009902:	2b09      	cmp	r3, #9
 8009904:	f200 8090 	bhi.w	8009a28 <_dtoa_r+0x2d8>
 8009908:	2b05      	cmp	r3, #5
 800990a:	bfc4      	itt	gt
 800990c:	3b04      	subgt	r3, #4
 800990e:	9306      	strgt	r3, [sp, #24]
 8009910:	9b06      	ldr	r3, [sp, #24]
 8009912:	f1a3 0302 	sub.w	r3, r3, #2
 8009916:	bfcc      	ite	gt
 8009918:	2500      	movgt	r5, #0
 800991a:	2501      	movle	r5, #1
 800991c:	2b03      	cmp	r3, #3
 800991e:	f200 808f 	bhi.w	8009a40 <_dtoa_r+0x2f0>
 8009922:	e8df f003 	tbb	[pc, r3]
 8009926:	7f7d      	.short	0x7f7d
 8009928:	7131      	.short	0x7131
 800992a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800992e:	441d      	add	r5, r3
 8009930:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009934:	2820      	cmp	r0, #32
 8009936:	dd13      	ble.n	8009960 <_dtoa_r+0x210>
 8009938:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800993c:	9b00      	ldr	r3, [sp, #0]
 800993e:	fa08 f800 	lsl.w	r8, r8, r0
 8009942:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009946:	fa23 f000 	lsr.w	r0, r3, r0
 800994a:	ea48 0000 	orr.w	r0, r8, r0
 800994e:	f7f6 fdd9 	bl	8000504 <__aeabi_ui2d>
 8009952:	2301      	movs	r3, #1
 8009954:	4682      	mov	sl, r0
 8009956:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800995a:	3d01      	subs	r5, #1
 800995c:	9313      	str	r3, [sp, #76]	; 0x4c
 800995e:	e772      	b.n	8009846 <_dtoa_r+0xf6>
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	f1c0 0020 	rsb	r0, r0, #32
 8009966:	fa03 f000 	lsl.w	r0, r3, r0
 800996a:	e7f0      	b.n	800994e <_dtoa_r+0x1fe>
 800996c:	2301      	movs	r3, #1
 800996e:	e7b1      	b.n	80098d4 <_dtoa_r+0x184>
 8009970:	900f      	str	r0, [sp, #60]	; 0x3c
 8009972:	e7b0      	b.n	80098d6 <_dtoa_r+0x186>
 8009974:	9b05      	ldr	r3, [sp, #20]
 8009976:	eba3 030a 	sub.w	r3, r3, sl
 800997a:	9305      	str	r3, [sp, #20]
 800997c:	f1ca 0300 	rsb	r3, sl, #0
 8009980:	9307      	str	r3, [sp, #28]
 8009982:	2300      	movs	r3, #0
 8009984:	930e      	str	r3, [sp, #56]	; 0x38
 8009986:	e7bb      	b.n	8009900 <_dtoa_r+0x1b0>
 8009988:	2301      	movs	r3, #1
 800998a:	930a      	str	r3, [sp, #40]	; 0x28
 800998c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998e:	2b00      	cmp	r3, #0
 8009990:	dd59      	ble.n	8009a46 <_dtoa_r+0x2f6>
 8009992:	9302      	str	r3, [sp, #8]
 8009994:	4699      	mov	r9, r3
 8009996:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009998:	2200      	movs	r2, #0
 800999a:	6072      	str	r2, [r6, #4]
 800999c:	2204      	movs	r2, #4
 800999e:	f102 0014 	add.w	r0, r2, #20
 80099a2:	4298      	cmp	r0, r3
 80099a4:	6871      	ldr	r1, [r6, #4]
 80099a6:	d953      	bls.n	8009a50 <_dtoa_r+0x300>
 80099a8:	4620      	mov	r0, r4
 80099aa:	f001 f8b2 	bl	800ab12 <_Balloc>
 80099ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b0:	6030      	str	r0, [r6, #0]
 80099b2:	f1b9 0f0e 	cmp.w	r9, #14
 80099b6:	f8d3 b000 	ldr.w	fp, [r3]
 80099ba:	f200 80e6 	bhi.w	8009b8a <_dtoa_r+0x43a>
 80099be:	2d00      	cmp	r5, #0
 80099c0:	f000 80e3 	beq.w	8009b8a <_dtoa_r+0x43a>
 80099c4:	ed9d 7b00 	vldr	d7, [sp]
 80099c8:	f1ba 0f00 	cmp.w	sl, #0
 80099cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80099d0:	dd74      	ble.n	8009abc <_dtoa_r+0x36c>
 80099d2:	4a2a      	ldr	r2, [pc, #168]	; (8009a7c <_dtoa_r+0x32c>)
 80099d4:	f00a 030f 	and.w	r3, sl, #15
 80099d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099dc:	ed93 7b00 	vldr	d7, [r3]
 80099e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80099e4:	06f0      	lsls	r0, r6, #27
 80099e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80099ea:	d565      	bpl.n	8009ab8 <_dtoa_r+0x368>
 80099ec:	4b24      	ldr	r3, [pc, #144]	; (8009a80 <_dtoa_r+0x330>)
 80099ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099f6:	f7f6 ff29 	bl	800084c <__aeabi_ddiv>
 80099fa:	e9cd 0100 	strd	r0, r1, [sp]
 80099fe:	f006 060f 	and.w	r6, r6, #15
 8009a02:	2503      	movs	r5, #3
 8009a04:	4f1e      	ldr	r7, [pc, #120]	; (8009a80 <_dtoa_r+0x330>)
 8009a06:	e04c      	b.n	8009aa2 <_dtoa_r+0x352>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a0e:	4453      	add	r3, sl
 8009a10:	f103 0901 	add.w	r9, r3, #1
 8009a14:	9302      	str	r3, [sp, #8]
 8009a16:	464b      	mov	r3, r9
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	bfb8      	it	lt
 8009a1c:	2301      	movlt	r3, #1
 8009a1e:	e7ba      	b.n	8009996 <_dtoa_r+0x246>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e7b2      	b.n	800998a <_dtoa_r+0x23a>
 8009a24:	2300      	movs	r3, #0
 8009a26:	e7f0      	b.n	8009a0a <_dtoa_r+0x2ba>
 8009a28:	2501      	movs	r5, #1
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9306      	str	r3, [sp, #24]
 8009a2e:	950a      	str	r5, [sp, #40]	; 0x28
 8009a30:	f04f 33ff 	mov.w	r3, #4294967295
 8009a34:	9302      	str	r3, [sp, #8]
 8009a36:	4699      	mov	r9, r3
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2312      	movs	r3, #18
 8009a3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009a3e:	e7aa      	b.n	8009996 <_dtoa_r+0x246>
 8009a40:	2301      	movs	r3, #1
 8009a42:	930a      	str	r3, [sp, #40]	; 0x28
 8009a44:	e7f4      	b.n	8009a30 <_dtoa_r+0x2e0>
 8009a46:	2301      	movs	r3, #1
 8009a48:	9302      	str	r3, [sp, #8]
 8009a4a:	4699      	mov	r9, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	e7f5      	b.n	8009a3c <_dtoa_r+0x2ec>
 8009a50:	3101      	adds	r1, #1
 8009a52:	6071      	str	r1, [r6, #4]
 8009a54:	0052      	lsls	r2, r2, #1
 8009a56:	e7a2      	b.n	800999e <_dtoa_r+0x24e>
 8009a58:	636f4361 	.word	0x636f4361
 8009a5c:	3fd287a7 	.word	0x3fd287a7
 8009a60:	8b60c8b3 	.word	0x8b60c8b3
 8009a64:	3fc68a28 	.word	0x3fc68a28
 8009a68:	509f79fb 	.word	0x509f79fb
 8009a6c:	3fd34413 	.word	0x3fd34413
 8009a70:	7ff00000 	.word	0x7ff00000
 8009a74:	0800c035 	.word	0x0800c035
 8009a78:	3ff80000 	.word	0x3ff80000
 8009a7c:	0800c158 	.word	0x0800c158
 8009a80:	0800c130 	.word	0x0800c130
 8009a84:	0800c0b9 	.word	0x0800c0b9
 8009a88:	07f1      	lsls	r1, r6, #31
 8009a8a:	d508      	bpl.n	8009a9e <_dtoa_r+0x34e>
 8009a8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a94:	f7f6 fdb0 	bl	80005f8 <__aeabi_dmul>
 8009a98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	1076      	asrs	r6, r6, #1
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	2e00      	cmp	r6, #0
 8009aa4:	d1f0      	bne.n	8009a88 <_dtoa_r+0x338>
 8009aa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aae:	f7f6 fecd 	bl	800084c <__aeabi_ddiv>
 8009ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8009ab6:	e01a      	b.n	8009aee <_dtoa_r+0x39e>
 8009ab8:	2502      	movs	r5, #2
 8009aba:	e7a3      	b.n	8009a04 <_dtoa_r+0x2b4>
 8009abc:	f000 80a0 	beq.w	8009c00 <_dtoa_r+0x4b0>
 8009ac0:	f1ca 0600 	rsb	r6, sl, #0
 8009ac4:	4b9f      	ldr	r3, [pc, #636]	; (8009d44 <_dtoa_r+0x5f4>)
 8009ac6:	4fa0      	ldr	r7, [pc, #640]	; (8009d48 <_dtoa_r+0x5f8>)
 8009ac8:	f006 020f 	and.w	r2, r6, #15
 8009acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ad8:	f7f6 fd8e 	bl	80005f8 <__aeabi_dmul>
 8009adc:	e9cd 0100 	strd	r0, r1, [sp]
 8009ae0:	1136      	asrs	r6, r6, #4
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	2502      	movs	r5, #2
 8009ae6:	2e00      	cmp	r6, #0
 8009ae8:	d17f      	bne.n	8009bea <_dtoa_r+0x49a>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e1      	bne.n	8009ab2 <_dtoa_r+0x362>
 8009aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 8087 	beq.w	8009c04 <_dtoa_r+0x4b4>
 8009af6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009afa:	2200      	movs	r2, #0
 8009afc:	4b93      	ldr	r3, [pc, #588]	; (8009d4c <_dtoa_r+0x5fc>)
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 ffeb 	bl	8000adc <__aeabi_dcmplt>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d07c      	beq.n	8009c04 <_dtoa_r+0x4b4>
 8009b0a:	f1b9 0f00 	cmp.w	r9, #0
 8009b0e:	d079      	beq.n	8009c04 <_dtoa_r+0x4b4>
 8009b10:	9b02      	ldr	r3, [sp, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dd35      	ble.n	8009b82 <_dtoa_r+0x432>
 8009b16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009b1a:	9308      	str	r3, [sp, #32]
 8009b1c:	4639      	mov	r1, r7
 8009b1e:	2200      	movs	r2, #0
 8009b20:	4b8b      	ldr	r3, [pc, #556]	; (8009d50 <_dtoa_r+0x600>)
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7f6 fd68 	bl	80005f8 <__aeabi_dmul>
 8009b28:	e9cd 0100 	strd	r0, r1, [sp]
 8009b2c:	9f02      	ldr	r7, [sp, #8]
 8009b2e:	3501      	adds	r5, #1
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7f6 fcf7 	bl	8000524 <__aeabi_i2d>
 8009b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b3a:	f7f6 fd5d 	bl	80005f8 <__aeabi_dmul>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	4b84      	ldr	r3, [pc, #528]	; (8009d54 <_dtoa_r+0x604>)
 8009b42:	f7f6 fba3 	bl	800028c <__adddf3>
 8009b46:	4605      	mov	r5, r0
 8009b48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009b4c:	2f00      	cmp	r7, #0
 8009b4e:	d15d      	bne.n	8009c0c <_dtoa_r+0x4bc>
 8009b50:	2200      	movs	r2, #0
 8009b52:	4b81      	ldr	r3, [pc, #516]	; (8009d58 <_dtoa_r+0x608>)
 8009b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b58:	f7f6 fb96 	bl	8000288 <__aeabi_dsub>
 8009b5c:	462a      	mov	r2, r5
 8009b5e:	4633      	mov	r3, r6
 8009b60:	e9cd 0100 	strd	r0, r1, [sp]
 8009b64:	f7f6 ffd8 	bl	8000b18 <__aeabi_dcmpgt>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f040 8288 	bne.w	800a07e <_dtoa_r+0x92e>
 8009b6e:	462a      	mov	r2, r5
 8009b70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b78:	f7f6 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f040 827c 	bne.w	800a07a <_dtoa_r+0x92a>
 8009b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b86:	e9cd 2300 	strd	r2, r3, [sp]
 8009b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f2c0 8150 	blt.w	8009e32 <_dtoa_r+0x6e2>
 8009b92:	f1ba 0f0e 	cmp.w	sl, #14
 8009b96:	f300 814c 	bgt.w	8009e32 <_dtoa_r+0x6e2>
 8009b9a:	4b6a      	ldr	r3, [pc, #424]	; (8009d44 <_dtoa_r+0x5f4>)
 8009b9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ba0:	ed93 7b00 	vldr	d7, [r3]
 8009ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bac:	f280 80d8 	bge.w	8009d60 <_dtoa_r+0x610>
 8009bb0:	f1b9 0f00 	cmp.w	r9, #0
 8009bb4:	f300 80d4 	bgt.w	8009d60 <_dtoa_r+0x610>
 8009bb8:	f040 825e 	bne.w	800a078 <_dtoa_r+0x928>
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4b66      	ldr	r3, [pc, #408]	; (8009d58 <_dtoa_r+0x608>)
 8009bc0:	ec51 0b17 	vmov	r0, r1, d7
 8009bc4:	f7f6 fd18 	bl	80005f8 <__aeabi_dmul>
 8009bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bcc:	f7f6 ff9a 	bl	8000b04 <__aeabi_dcmpge>
 8009bd0:	464f      	mov	r7, r9
 8009bd2:	464e      	mov	r6, r9
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	f040 8234 	bne.w	800a042 <_dtoa_r+0x8f2>
 8009bda:	2331      	movs	r3, #49	; 0x31
 8009bdc:	f10b 0501 	add.w	r5, fp, #1
 8009be0:	f88b 3000 	strb.w	r3, [fp]
 8009be4:	f10a 0a01 	add.w	sl, sl, #1
 8009be8:	e22f      	b.n	800a04a <_dtoa_r+0x8fa>
 8009bea:	07f2      	lsls	r2, r6, #31
 8009bec:	d505      	bpl.n	8009bfa <_dtoa_r+0x4aa>
 8009bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bf2:	f7f6 fd01 	bl	80005f8 <__aeabi_dmul>
 8009bf6:	3501      	adds	r5, #1
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	1076      	asrs	r6, r6, #1
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	e772      	b.n	8009ae6 <_dtoa_r+0x396>
 8009c00:	2502      	movs	r5, #2
 8009c02:	e774      	b.n	8009aee <_dtoa_r+0x39e>
 8009c04:	f8cd a020 	str.w	sl, [sp, #32]
 8009c08:	464f      	mov	r7, r9
 8009c0a:	e791      	b.n	8009b30 <_dtoa_r+0x3e0>
 8009c0c:	4b4d      	ldr	r3, [pc, #308]	; (8009d44 <_dtoa_r+0x5f4>)
 8009c0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d047      	beq.n	8009cac <_dtoa_r+0x55c>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	2000      	movs	r0, #0
 8009c22:	494e      	ldr	r1, [pc, #312]	; (8009d5c <_dtoa_r+0x60c>)
 8009c24:	f7f6 fe12 	bl	800084c <__aeabi_ddiv>
 8009c28:	462a      	mov	r2, r5
 8009c2a:	4633      	mov	r3, r6
 8009c2c:	f7f6 fb2c 	bl	8000288 <__aeabi_dsub>
 8009c30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c34:	465d      	mov	r5, fp
 8009c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c3a:	f7f6 ff8d 	bl	8000b58 <__aeabi_d2iz>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	f7f6 fc70 	bl	8000524 <__aeabi_i2d>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c4c:	f7f6 fb1c 	bl	8000288 <__aeabi_dsub>
 8009c50:	3630      	adds	r6, #48	; 0x30
 8009c52:	f805 6b01 	strb.w	r6, [r5], #1
 8009c56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8009c5e:	f7f6 ff3d 	bl	8000adc <__aeabi_dcmplt>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d163      	bne.n	8009d2e <_dtoa_r+0x5de>
 8009c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	4937      	ldr	r1, [pc, #220]	; (8009d4c <_dtoa_r+0x5fc>)
 8009c6e:	f7f6 fb0b 	bl	8000288 <__aeabi_dsub>
 8009c72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009c76:	f7f6 ff31 	bl	8000adc <__aeabi_dcmplt>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f040 80b7 	bne.w	8009dee <_dtoa_r+0x69e>
 8009c80:	eba5 030b 	sub.w	r3, r5, fp
 8009c84:	429f      	cmp	r7, r3
 8009c86:	f77f af7c 	ble.w	8009b82 <_dtoa_r+0x432>
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4b30      	ldr	r3, [pc, #192]	; (8009d50 <_dtoa_r+0x600>)
 8009c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c92:	f7f6 fcb1 	bl	80005f8 <__aeabi_dmul>
 8009c96:	2200      	movs	r2, #0
 8009c98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c9c:	4b2c      	ldr	r3, [pc, #176]	; (8009d50 <_dtoa_r+0x600>)
 8009c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ca2:	f7f6 fca9 	bl	80005f8 <__aeabi_dmul>
 8009ca6:	e9cd 0100 	strd	r0, r1, [sp]
 8009caa:	e7c4      	b.n	8009c36 <_dtoa_r+0x4e6>
 8009cac:	462a      	mov	r2, r5
 8009cae:	4633      	mov	r3, r6
 8009cb0:	f7f6 fca2 	bl	80005f8 <__aeabi_dmul>
 8009cb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009cb8:	eb0b 0507 	add.w	r5, fp, r7
 8009cbc:	465e      	mov	r6, fp
 8009cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cc2:	f7f6 ff49 	bl	8000b58 <__aeabi_d2iz>
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	f7f6 fc2c 	bl	8000524 <__aeabi_i2d>
 8009ccc:	3730      	adds	r7, #48	; 0x30
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cd6:	f7f6 fad7 	bl	8000288 <__aeabi_dsub>
 8009cda:	f806 7b01 	strb.w	r7, [r6], #1
 8009cde:	42ae      	cmp	r6, r5
 8009ce0:	e9cd 0100 	strd	r0, r1, [sp]
 8009ce4:	f04f 0200 	mov.w	r2, #0
 8009ce8:	d126      	bne.n	8009d38 <_dtoa_r+0x5e8>
 8009cea:	4b1c      	ldr	r3, [pc, #112]	; (8009d5c <_dtoa_r+0x60c>)
 8009cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cf0:	f7f6 facc 	bl	800028c <__adddf3>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cfc:	f7f6 ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d174      	bne.n	8009dee <_dtoa_r+0x69e>
 8009d04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d08:	2000      	movs	r0, #0
 8009d0a:	4914      	ldr	r1, [pc, #80]	; (8009d5c <_dtoa_r+0x60c>)
 8009d0c:	f7f6 fabc 	bl	8000288 <__aeabi_dsub>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d18:	f7f6 fee0 	bl	8000adc <__aeabi_dcmplt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	f43f af30 	beq.w	8009b82 <_dtoa_r+0x432>
 8009d22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d26:	2b30      	cmp	r3, #48	; 0x30
 8009d28:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d2c:	d002      	beq.n	8009d34 <_dtoa_r+0x5e4>
 8009d2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009d32:	e04a      	b.n	8009dca <_dtoa_r+0x67a>
 8009d34:	4615      	mov	r5, r2
 8009d36:	e7f4      	b.n	8009d22 <_dtoa_r+0x5d2>
 8009d38:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <_dtoa_r+0x600>)
 8009d3a:	f7f6 fc5d 	bl	80005f8 <__aeabi_dmul>
 8009d3e:	e9cd 0100 	strd	r0, r1, [sp]
 8009d42:	e7bc      	b.n	8009cbe <_dtoa_r+0x56e>
 8009d44:	0800c158 	.word	0x0800c158
 8009d48:	0800c130 	.word	0x0800c130
 8009d4c:	3ff00000 	.word	0x3ff00000
 8009d50:	40240000 	.word	0x40240000
 8009d54:	401c0000 	.word	0x401c0000
 8009d58:	40140000 	.word	0x40140000
 8009d5c:	3fe00000 	.word	0x3fe00000
 8009d60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009d64:	465d      	mov	r5, fp
 8009d66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	4639      	mov	r1, r7
 8009d6e:	f7f6 fd6d 	bl	800084c <__aeabi_ddiv>
 8009d72:	f7f6 fef1 	bl	8000b58 <__aeabi_d2iz>
 8009d76:	4680      	mov	r8, r0
 8009d78:	f7f6 fbd4 	bl	8000524 <__aeabi_i2d>
 8009d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d80:	f7f6 fc3a 	bl	80005f8 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009d90:	f7f6 fa7a 	bl	8000288 <__aeabi_dsub>
 8009d94:	f805 6b01 	strb.w	r6, [r5], #1
 8009d98:	eba5 060b 	sub.w	r6, r5, fp
 8009d9c:	45b1      	cmp	r9, r6
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	d139      	bne.n	8009e18 <_dtoa_r+0x6c8>
 8009da4:	f7f6 fa72 	bl	800028c <__adddf3>
 8009da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dac:	4606      	mov	r6, r0
 8009dae:	460f      	mov	r7, r1
 8009db0:	f7f6 feb2 	bl	8000b18 <__aeabi_dcmpgt>
 8009db4:	b9c8      	cbnz	r0, 8009dea <_dtoa_r+0x69a>
 8009db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dba:	4630      	mov	r0, r6
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	f7f6 fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dc2:	b110      	cbz	r0, 8009dca <_dtoa_r+0x67a>
 8009dc4:	f018 0f01 	tst.w	r8, #1
 8009dc8:	d10f      	bne.n	8009dea <_dtoa_r+0x69a>
 8009dca:	9904      	ldr	r1, [sp, #16]
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fed4 	bl	800ab7a <_Bfree>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dd6:	702b      	strb	r3, [r5, #0]
 8009dd8:	f10a 0301 	add.w	r3, sl, #1
 8009ddc:	6013      	str	r3, [r2, #0]
 8009dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 8241 	beq.w	800a268 <_dtoa_r+0xb18>
 8009de6:	601d      	str	r5, [r3, #0]
 8009de8:	e23e      	b.n	800a268 <_dtoa_r+0xb18>
 8009dea:	f8cd a020 	str.w	sl, [sp, #32]
 8009dee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009df2:	2a39      	cmp	r2, #57	; 0x39
 8009df4:	f105 33ff 	add.w	r3, r5, #4294967295
 8009df8:	d108      	bne.n	8009e0c <_dtoa_r+0x6bc>
 8009dfa:	459b      	cmp	fp, r3
 8009dfc:	d10a      	bne.n	8009e14 <_dtoa_r+0x6c4>
 8009dfe:	9b08      	ldr	r3, [sp, #32]
 8009e00:	3301      	adds	r3, #1
 8009e02:	9308      	str	r3, [sp, #32]
 8009e04:	2330      	movs	r3, #48	; 0x30
 8009e06:	f88b 3000 	strb.w	r3, [fp]
 8009e0a:	465b      	mov	r3, fp
 8009e0c:	781a      	ldrb	r2, [r3, #0]
 8009e0e:	3201      	adds	r2, #1
 8009e10:	701a      	strb	r2, [r3, #0]
 8009e12:	e78c      	b.n	8009d2e <_dtoa_r+0x5de>
 8009e14:	461d      	mov	r5, r3
 8009e16:	e7ea      	b.n	8009dee <_dtoa_r+0x69e>
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4b9b      	ldr	r3, [pc, #620]	; (800a088 <_dtoa_r+0x938>)
 8009e1c:	f7f6 fbec 	bl	80005f8 <__aeabi_dmul>
 8009e20:	2200      	movs	r2, #0
 8009e22:	2300      	movs	r3, #0
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	f7f6 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d09a      	beq.n	8009d66 <_dtoa_r+0x616>
 8009e30:	e7cb      	b.n	8009dca <_dtoa_r+0x67a>
 8009e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e34:	2a00      	cmp	r2, #0
 8009e36:	f000 808b 	beq.w	8009f50 <_dtoa_r+0x800>
 8009e3a:	9a06      	ldr	r2, [sp, #24]
 8009e3c:	2a01      	cmp	r2, #1
 8009e3e:	dc6e      	bgt.n	8009f1e <_dtoa_r+0x7ce>
 8009e40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e42:	2a00      	cmp	r2, #0
 8009e44:	d067      	beq.n	8009f16 <_dtoa_r+0x7c6>
 8009e46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e4a:	9f07      	ldr	r7, [sp, #28]
 8009e4c:	9d05      	ldr	r5, [sp, #20]
 8009e4e:	9a05      	ldr	r2, [sp, #20]
 8009e50:	2101      	movs	r1, #1
 8009e52:	441a      	add	r2, r3
 8009e54:	4620      	mov	r0, r4
 8009e56:	9205      	str	r2, [sp, #20]
 8009e58:	4498      	add	r8, r3
 8009e5a:	f000 ff6c 	bl	800ad36 <__i2b>
 8009e5e:	4606      	mov	r6, r0
 8009e60:	2d00      	cmp	r5, #0
 8009e62:	dd0c      	ble.n	8009e7e <_dtoa_r+0x72e>
 8009e64:	f1b8 0f00 	cmp.w	r8, #0
 8009e68:	dd09      	ble.n	8009e7e <_dtoa_r+0x72e>
 8009e6a:	4545      	cmp	r5, r8
 8009e6c:	9a05      	ldr	r2, [sp, #20]
 8009e6e:	462b      	mov	r3, r5
 8009e70:	bfa8      	it	ge
 8009e72:	4643      	movge	r3, r8
 8009e74:	1ad2      	subs	r2, r2, r3
 8009e76:	9205      	str	r2, [sp, #20]
 8009e78:	1aed      	subs	r5, r5, r3
 8009e7a:	eba8 0803 	sub.w	r8, r8, r3
 8009e7e:	9b07      	ldr	r3, [sp, #28]
 8009e80:	b1eb      	cbz	r3, 8009ebe <_dtoa_r+0x76e>
 8009e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d067      	beq.n	8009f58 <_dtoa_r+0x808>
 8009e88:	b18f      	cbz	r7, 8009eae <_dtoa_r+0x75e>
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	463a      	mov	r2, r7
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 fff0 	bl	800ae74 <__pow5mult>
 8009e94:	9a04      	ldr	r2, [sp, #16]
 8009e96:	4601      	mov	r1, r0
 8009e98:	4606      	mov	r6, r0
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 ff54 	bl	800ad48 <__multiply>
 8009ea0:	9904      	ldr	r1, [sp, #16]
 8009ea2:	9008      	str	r0, [sp, #32]
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f000 fe68 	bl	800ab7a <_Bfree>
 8009eaa:	9b08      	ldr	r3, [sp, #32]
 8009eac:	9304      	str	r3, [sp, #16]
 8009eae:	9b07      	ldr	r3, [sp, #28]
 8009eb0:	1bda      	subs	r2, r3, r7
 8009eb2:	d004      	beq.n	8009ebe <_dtoa_r+0x76e>
 8009eb4:	9904      	ldr	r1, [sp, #16]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 ffdc 	bl	800ae74 <__pow5mult>
 8009ebc:	9004      	str	r0, [sp, #16]
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 ff38 	bl	800ad36 <__i2b>
 8009ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ec8:	4607      	mov	r7, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 81d0 	beq.w	800a270 <_dtoa_r+0xb20>
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 ffcd 	bl	800ae74 <__pow5mult>
 8009eda:	9b06      	ldr	r3, [sp, #24]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	4607      	mov	r7, r0
 8009ee0:	dc40      	bgt.n	8009f64 <_dtoa_r+0x814>
 8009ee2:	9b00      	ldr	r3, [sp, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d139      	bne.n	8009f5c <_dtoa_r+0x80c>
 8009ee8:	9b01      	ldr	r3, [sp, #4]
 8009eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d136      	bne.n	8009f60 <_dtoa_r+0x810>
 8009ef2:	9b01      	ldr	r3, [sp, #4]
 8009ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ef8:	0d1b      	lsrs	r3, r3, #20
 8009efa:	051b      	lsls	r3, r3, #20
 8009efc:	b12b      	cbz	r3, 8009f0a <_dtoa_r+0x7ba>
 8009efe:	9b05      	ldr	r3, [sp, #20]
 8009f00:	3301      	adds	r3, #1
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	f108 0801 	add.w	r8, r8, #1
 8009f08:	2301      	movs	r3, #1
 8009f0a:	9307      	str	r3, [sp, #28]
 8009f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d12a      	bne.n	8009f68 <_dtoa_r+0x818>
 8009f12:	2001      	movs	r0, #1
 8009f14:	e030      	b.n	8009f78 <_dtoa_r+0x828>
 8009f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f1c:	e795      	b.n	8009e4a <_dtoa_r+0x6fa>
 8009f1e:	9b07      	ldr	r3, [sp, #28]
 8009f20:	f109 37ff 	add.w	r7, r9, #4294967295
 8009f24:	42bb      	cmp	r3, r7
 8009f26:	bfbf      	itttt	lt
 8009f28:	9b07      	ldrlt	r3, [sp, #28]
 8009f2a:	9707      	strlt	r7, [sp, #28]
 8009f2c:	1afa      	sublt	r2, r7, r3
 8009f2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009f30:	bfbb      	ittet	lt
 8009f32:	189b      	addlt	r3, r3, r2
 8009f34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009f36:	1bdf      	subge	r7, r3, r7
 8009f38:	2700      	movlt	r7, #0
 8009f3a:	f1b9 0f00 	cmp.w	r9, #0
 8009f3e:	bfb5      	itete	lt
 8009f40:	9b05      	ldrlt	r3, [sp, #20]
 8009f42:	9d05      	ldrge	r5, [sp, #20]
 8009f44:	eba3 0509 	sublt.w	r5, r3, r9
 8009f48:	464b      	movge	r3, r9
 8009f4a:	bfb8      	it	lt
 8009f4c:	2300      	movlt	r3, #0
 8009f4e:	e77e      	b.n	8009e4e <_dtoa_r+0x6fe>
 8009f50:	9f07      	ldr	r7, [sp, #28]
 8009f52:	9d05      	ldr	r5, [sp, #20]
 8009f54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009f56:	e783      	b.n	8009e60 <_dtoa_r+0x710>
 8009f58:	9a07      	ldr	r2, [sp, #28]
 8009f5a:	e7ab      	b.n	8009eb4 <_dtoa_r+0x764>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e7d4      	b.n	8009f0a <_dtoa_r+0x7ba>
 8009f60:	9b00      	ldr	r3, [sp, #0]
 8009f62:	e7d2      	b.n	8009f0a <_dtoa_r+0x7ba>
 8009f64:	2300      	movs	r3, #0
 8009f66:	9307      	str	r3, [sp, #28]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009f6e:	6918      	ldr	r0, [r3, #16]
 8009f70:	f000 fe93 	bl	800ac9a <__hi0bits>
 8009f74:	f1c0 0020 	rsb	r0, r0, #32
 8009f78:	4440      	add	r0, r8
 8009f7a:	f010 001f 	ands.w	r0, r0, #31
 8009f7e:	d047      	beq.n	800a010 <_dtoa_r+0x8c0>
 8009f80:	f1c0 0320 	rsb	r3, r0, #32
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	dd3b      	ble.n	800a000 <_dtoa_r+0x8b0>
 8009f88:	9b05      	ldr	r3, [sp, #20]
 8009f8a:	f1c0 001c 	rsb	r0, r0, #28
 8009f8e:	4403      	add	r3, r0
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	4405      	add	r5, r0
 8009f94:	4480      	add	r8, r0
 8009f96:	9b05      	ldr	r3, [sp, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	dd05      	ble.n	8009fa8 <_dtoa_r+0x858>
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	9904      	ldr	r1, [sp, #16]
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 ffb5 	bl	800af10 <__lshift>
 8009fa6:	9004      	str	r0, [sp, #16]
 8009fa8:	f1b8 0f00 	cmp.w	r8, #0
 8009fac:	dd05      	ble.n	8009fba <_dtoa_r+0x86a>
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 ffac 	bl	800af10 <__lshift>
 8009fb8:	4607      	mov	r7, r0
 8009fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fbc:	b353      	cbz	r3, 800a014 <_dtoa_r+0x8c4>
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	9804      	ldr	r0, [sp, #16]
 8009fc2:	f000 fff9 	bl	800afb8 <__mcmp>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	da24      	bge.n	800a014 <_dtoa_r+0x8c4>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	220a      	movs	r2, #10
 8009fce:	9904      	ldr	r1, [sp, #16]
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f000 fde9 	bl	800aba8 <__multadd>
 8009fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd8:	9004      	str	r0, [sp, #16]
 8009fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 814d 	beq.w	800a27e <_dtoa_r+0xb2e>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	220a      	movs	r2, #10
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 fddc 	bl	800aba8 <__multadd>
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	dc4f      	bgt.n	800a098 <_dtoa_r+0x948>
 8009ff8:	9b06      	ldr	r3, [sp, #24]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	dd4c      	ble.n	800a098 <_dtoa_r+0x948>
 8009ffe:	e011      	b.n	800a024 <_dtoa_r+0x8d4>
 800a000:	d0c9      	beq.n	8009f96 <_dtoa_r+0x846>
 800a002:	9a05      	ldr	r2, [sp, #20]
 800a004:	331c      	adds	r3, #28
 800a006:	441a      	add	r2, r3
 800a008:	9205      	str	r2, [sp, #20]
 800a00a:	441d      	add	r5, r3
 800a00c:	4498      	add	r8, r3
 800a00e:	e7c2      	b.n	8009f96 <_dtoa_r+0x846>
 800a010:	4603      	mov	r3, r0
 800a012:	e7f6      	b.n	800a002 <_dtoa_r+0x8b2>
 800a014:	f1b9 0f00 	cmp.w	r9, #0
 800a018:	dc38      	bgt.n	800a08c <_dtoa_r+0x93c>
 800a01a:	9b06      	ldr	r3, [sp, #24]
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	dd35      	ble.n	800a08c <_dtoa_r+0x93c>
 800a020:	f8cd 9008 	str.w	r9, [sp, #8]
 800a024:	9b02      	ldr	r3, [sp, #8]
 800a026:	b963      	cbnz	r3, 800a042 <_dtoa_r+0x8f2>
 800a028:	4639      	mov	r1, r7
 800a02a:	2205      	movs	r2, #5
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fdbb 	bl	800aba8 <__multadd>
 800a032:	4601      	mov	r1, r0
 800a034:	4607      	mov	r7, r0
 800a036:	9804      	ldr	r0, [sp, #16]
 800a038:	f000 ffbe 	bl	800afb8 <__mcmp>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	f73f adcc 	bgt.w	8009bda <_dtoa_r+0x48a>
 800a042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a044:	465d      	mov	r5, fp
 800a046:	ea6f 0a03 	mvn.w	sl, r3
 800a04a:	f04f 0900 	mov.w	r9, #0
 800a04e:	4639      	mov	r1, r7
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fd92 	bl	800ab7a <_Bfree>
 800a056:	2e00      	cmp	r6, #0
 800a058:	f43f aeb7 	beq.w	8009dca <_dtoa_r+0x67a>
 800a05c:	f1b9 0f00 	cmp.w	r9, #0
 800a060:	d005      	beq.n	800a06e <_dtoa_r+0x91e>
 800a062:	45b1      	cmp	r9, r6
 800a064:	d003      	beq.n	800a06e <_dtoa_r+0x91e>
 800a066:	4649      	mov	r1, r9
 800a068:	4620      	mov	r0, r4
 800a06a:	f000 fd86 	bl	800ab7a <_Bfree>
 800a06e:	4631      	mov	r1, r6
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fd82 	bl	800ab7a <_Bfree>
 800a076:	e6a8      	b.n	8009dca <_dtoa_r+0x67a>
 800a078:	2700      	movs	r7, #0
 800a07a:	463e      	mov	r6, r7
 800a07c:	e7e1      	b.n	800a042 <_dtoa_r+0x8f2>
 800a07e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a082:	463e      	mov	r6, r7
 800a084:	e5a9      	b.n	8009bda <_dtoa_r+0x48a>
 800a086:	bf00      	nop
 800a088:	40240000 	.word	0x40240000
 800a08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a08e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80fa 	beq.w	800a28c <_dtoa_r+0xb3c>
 800a098:	2d00      	cmp	r5, #0
 800a09a:	dd05      	ble.n	800a0a8 <_dtoa_r+0x958>
 800a09c:	4631      	mov	r1, r6
 800a09e:	462a      	mov	r2, r5
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 ff35 	bl	800af10 <__lshift>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	9b07      	ldr	r3, [sp, #28]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d04c      	beq.n	800a148 <_dtoa_r+0x9f8>
 800a0ae:	6871      	ldr	r1, [r6, #4]
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 fd2e 	bl	800ab12 <_Balloc>
 800a0b6:	6932      	ldr	r2, [r6, #16]
 800a0b8:	3202      	adds	r2, #2
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	0092      	lsls	r2, r2, #2
 800a0be:	f106 010c 	add.w	r1, r6, #12
 800a0c2:	300c      	adds	r0, #12
 800a0c4:	f000 fd1a 	bl	800aafc <memcpy>
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 ff1f 	bl	800af10 <__lshift>
 800a0d2:	9b00      	ldr	r3, [sp, #0]
 800a0d4:	f8cd b014 	str.w	fp, [sp, #20]
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	46b1      	mov	r9, r6
 800a0de:	9307      	str	r3, [sp, #28]
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	9804      	ldr	r0, [sp, #16]
 800a0e6:	f7ff faa5 	bl	8009634 <quorem>
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a0f2:	9804      	ldr	r0, [sp, #16]
 800a0f4:	f000 ff60 	bl	800afb8 <__mcmp>
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	9000      	str	r0, [sp, #0]
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 ff74 	bl	800afec <__mdiff>
 800a104:	68c3      	ldr	r3, [r0, #12]
 800a106:	4602      	mov	r2, r0
 800a108:	bb03      	cbnz	r3, 800a14c <_dtoa_r+0x9fc>
 800a10a:	4601      	mov	r1, r0
 800a10c:	9008      	str	r0, [sp, #32]
 800a10e:	9804      	ldr	r0, [sp, #16]
 800a110:	f000 ff52 	bl	800afb8 <__mcmp>
 800a114:	9a08      	ldr	r2, [sp, #32]
 800a116:	4603      	mov	r3, r0
 800a118:	4611      	mov	r1, r2
 800a11a:	4620      	mov	r0, r4
 800a11c:	9308      	str	r3, [sp, #32]
 800a11e:	f000 fd2c 	bl	800ab7a <_Bfree>
 800a122:	9b08      	ldr	r3, [sp, #32]
 800a124:	b9a3      	cbnz	r3, 800a150 <_dtoa_r+0xa00>
 800a126:	9a06      	ldr	r2, [sp, #24]
 800a128:	b992      	cbnz	r2, 800a150 <_dtoa_r+0xa00>
 800a12a:	9a07      	ldr	r2, [sp, #28]
 800a12c:	b982      	cbnz	r2, 800a150 <_dtoa_r+0xa00>
 800a12e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a132:	d029      	beq.n	800a188 <_dtoa_r+0xa38>
 800a134:	9b00      	ldr	r3, [sp, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	dd01      	ble.n	800a13e <_dtoa_r+0x9ee>
 800a13a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a13e:	9b05      	ldr	r3, [sp, #20]
 800a140:	1c5d      	adds	r5, r3, #1
 800a142:	f883 8000 	strb.w	r8, [r3]
 800a146:	e782      	b.n	800a04e <_dtoa_r+0x8fe>
 800a148:	4630      	mov	r0, r6
 800a14a:	e7c2      	b.n	800a0d2 <_dtoa_r+0x982>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e7e3      	b.n	800a118 <_dtoa_r+0x9c8>
 800a150:	9a00      	ldr	r2, [sp, #0]
 800a152:	2a00      	cmp	r2, #0
 800a154:	db04      	blt.n	800a160 <_dtoa_r+0xa10>
 800a156:	d125      	bne.n	800a1a4 <_dtoa_r+0xa54>
 800a158:	9a06      	ldr	r2, [sp, #24]
 800a15a:	bb1a      	cbnz	r2, 800a1a4 <_dtoa_r+0xa54>
 800a15c:	9a07      	ldr	r2, [sp, #28]
 800a15e:	bb0a      	cbnz	r2, 800a1a4 <_dtoa_r+0xa54>
 800a160:	2b00      	cmp	r3, #0
 800a162:	ddec      	ble.n	800a13e <_dtoa_r+0x9ee>
 800a164:	2201      	movs	r2, #1
 800a166:	9904      	ldr	r1, [sp, #16]
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fed1 	bl	800af10 <__lshift>
 800a16e:	4639      	mov	r1, r7
 800a170:	9004      	str	r0, [sp, #16]
 800a172:	f000 ff21 	bl	800afb8 <__mcmp>
 800a176:	2800      	cmp	r0, #0
 800a178:	dc03      	bgt.n	800a182 <_dtoa_r+0xa32>
 800a17a:	d1e0      	bne.n	800a13e <_dtoa_r+0x9ee>
 800a17c:	f018 0f01 	tst.w	r8, #1
 800a180:	d0dd      	beq.n	800a13e <_dtoa_r+0x9ee>
 800a182:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a186:	d1d8      	bne.n	800a13a <_dtoa_r+0x9ea>
 800a188:	9b05      	ldr	r3, [sp, #20]
 800a18a:	9a05      	ldr	r2, [sp, #20]
 800a18c:	1c5d      	adds	r5, r3, #1
 800a18e:	2339      	movs	r3, #57	; 0x39
 800a190:	7013      	strb	r3, [r2, #0]
 800a192:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a196:	2b39      	cmp	r3, #57	; 0x39
 800a198:	f105 32ff 	add.w	r2, r5, #4294967295
 800a19c:	d04f      	beq.n	800a23e <_dtoa_r+0xaee>
 800a19e:	3301      	adds	r3, #1
 800a1a0:	7013      	strb	r3, [r2, #0]
 800a1a2:	e754      	b.n	800a04e <_dtoa_r+0x8fe>
 800a1a4:	9a05      	ldr	r2, [sp, #20]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f102 0501 	add.w	r5, r2, #1
 800a1ac:	dd06      	ble.n	800a1bc <_dtoa_r+0xa6c>
 800a1ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a1b2:	d0e9      	beq.n	800a188 <_dtoa_r+0xa38>
 800a1b4:	f108 0801 	add.w	r8, r8, #1
 800a1b8:	9b05      	ldr	r3, [sp, #20]
 800a1ba:	e7c2      	b.n	800a142 <_dtoa_r+0x9f2>
 800a1bc:	9a02      	ldr	r2, [sp, #8]
 800a1be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a1c2:	eba5 030b 	sub.w	r3, r5, fp
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d021      	beq.n	800a20e <_dtoa_r+0xabe>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	220a      	movs	r2, #10
 800a1ce:	9904      	ldr	r1, [sp, #16]
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fce9 	bl	800aba8 <__multadd>
 800a1d6:	45b1      	cmp	r9, r6
 800a1d8:	9004      	str	r0, [sp, #16]
 800a1da:	f04f 0300 	mov.w	r3, #0
 800a1de:	f04f 020a 	mov.w	r2, #10
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	d105      	bne.n	800a1f4 <_dtoa_r+0xaa4>
 800a1e8:	f000 fcde 	bl	800aba8 <__multadd>
 800a1ec:	4681      	mov	r9, r0
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	9505      	str	r5, [sp, #20]
 800a1f2:	e776      	b.n	800a0e2 <_dtoa_r+0x992>
 800a1f4:	f000 fcd8 	bl	800aba8 <__multadd>
 800a1f8:	4631      	mov	r1, r6
 800a1fa:	4681      	mov	r9, r0
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	220a      	movs	r2, #10
 800a200:	4620      	mov	r0, r4
 800a202:	f000 fcd1 	bl	800aba8 <__multadd>
 800a206:	4606      	mov	r6, r0
 800a208:	e7f2      	b.n	800a1f0 <_dtoa_r+0xaa0>
 800a20a:	f04f 0900 	mov.w	r9, #0
 800a20e:	2201      	movs	r2, #1
 800a210:	9904      	ldr	r1, [sp, #16]
 800a212:	4620      	mov	r0, r4
 800a214:	f000 fe7c 	bl	800af10 <__lshift>
 800a218:	4639      	mov	r1, r7
 800a21a:	9004      	str	r0, [sp, #16]
 800a21c:	f000 fecc 	bl	800afb8 <__mcmp>
 800a220:	2800      	cmp	r0, #0
 800a222:	dcb6      	bgt.n	800a192 <_dtoa_r+0xa42>
 800a224:	d102      	bne.n	800a22c <_dtoa_r+0xadc>
 800a226:	f018 0f01 	tst.w	r8, #1
 800a22a:	d1b2      	bne.n	800a192 <_dtoa_r+0xa42>
 800a22c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a230:	2b30      	cmp	r3, #48	; 0x30
 800a232:	f105 32ff 	add.w	r2, r5, #4294967295
 800a236:	f47f af0a 	bne.w	800a04e <_dtoa_r+0x8fe>
 800a23a:	4615      	mov	r5, r2
 800a23c:	e7f6      	b.n	800a22c <_dtoa_r+0xadc>
 800a23e:	4593      	cmp	fp, r2
 800a240:	d105      	bne.n	800a24e <_dtoa_r+0xafe>
 800a242:	2331      	movs	r3, #49	; 0x31
 800a244:	f10a 0a01 	add.w	sl, sl, #1
 800a248:	f88b 3000 	strb.w	r3, [fp]
 800a24c:	e6ff      	b.n	800a04e <_dtoa_r+0x8fe>
 800a24e:	4615      	mov	r5, r2
 800a250:	e79f      	b.n	800a192 <_dtoa_r+0xa42>
 800a252:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a2b8 <_dtoa_r+0xb68>
 800a256:	e007      	b.n	800a268 <_dtoa_r+0xb18>
 800a258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a25a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a2bc <_dtoa_r+0xb6c>
 800a25e:	b11b      	cbz	r3, 800a268 <_dtoa_r+0xb18>
 800a260:	f10b 0308 	add.w	r3, fp, #8
 800a264:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	4658      	mov	r0, fp
 800a26a:	b017      	add	sp, #92	; 0x5c
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a270:	9b06      	ldr	r3, [sp, #24]
 800a272:	2b01      	cmp	r3, #1
 800a274:	f77f ae35 	ble.w	8009ee2 <_dtoa_r+0x792>
 800a278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	e649      	b.n	8009f12 <_dtoa_r+0x7c2>
 800a27e:	9b02      	ldr	r3, [sp, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	dc03      	bgt.n	800a28c <_dtoa_r+0xb3c>
 800a284:	9b06      	ldr	r3, [sp, #24]
 800a286:	2b02      	cmp	r3, #2
 800a288:	f73f aecc 	bgt.w	800a024 <_dtoa_r+0x8d4>
 800a28c:	465d      	mov	r5, fp
 800a28e:	4639      	mov	r1, r7
 800a290:	9804      	ldr	r0, [sp, #16]
 800a292:	f7ff f9cf 	bl	8009634 <quorem>
 800a296:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a29a:	f805 8b01 	strb.w	r8, [r5], #1
 800a29e:	9a02      	ldr	r2, [sp, #8]
 800a2a0:	eba5 030b 	sub.w	r3, r5, fp
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	ddb0      	ble.n	800a20a <_dtoa_r+0xaba>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	220a      	movs	r2, #10
 800a2ac:	9904      	ldr	r1, [sp, #16]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 fc7a 	bl	800aba8 <__multadd>
 800a2b4:	9004      	str	r0, [sp, #16]
 800a2b6:	e7ea      	b.n	800a28e <_dtoa_r+0xb3e>
 800a2b8:	0800c034 	.word	0x0800c034
 800a2bc:	0800c0b0 	.word	0x0800c0b0

0800a2c0 <std>:
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	b510      	push	{r4, lr}
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a2ca:	6083      	str	r3, [r0, #8]
 800a2cc:	8181      	strh	r1, [r0, #12]
 800a2ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a2d0:	81c2      	strh	r2, [r0, #14]
 800a2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2d6:	6183      	str	r3, [r0, #24]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	2208      	movs	r2, #8
 800a2dc:	305c      	adds	r0, #92	; 0x5c
 800a2de:	f7fd fc75 	bl	8007bcc <memset>
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <std+0x38>)
 800a2e4:	6263      	str	r3, [r4, #36]	; 0x24
 800a2e6:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <std+0x3c>)
 800a2e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2ea:	4b05      	ldr	r3, [pc, #20]	; (800a300 <std+0x40>)
 800a2ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2ee:	4b05      	ldr	r3, [pc, #20]	; (800a304 <std+0x44>)
 800a2f0:	6224      	str	r4, [r4, #32]
 800a2f2:	6323      	str	r3, [r4, #48]	; 0x30
 800a2f4:	bd10      	pop	{r4, pc}
 800a2f6:	bf00      	nop
 800a2f8:	0800b9c1 	.word	0x0800b9c1
 800a2fc:	0800b9e3 	.word	0x0800b9e3
 800a300:	0800ba1b 	.word	0x0800ba1b
 800a304:	0800ba3f 	.word	0x0800ba3f

0800a308 <_cleanup_r>:
 800a308:	4901      	ldr	r1, [pc, #4]	; (800a310 <_cleanup_r+0x8>)
 800a30a:	f000 b885 	b.w	800a418 <_fwalk_reent>
 800a30e:	bf00      	nop
 800a310:	0800bd59 	.word	0x0800bd59

0800a314 <__sfmoreglue>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	1e4a      	subs	r2, r1, #1
 800a318:	2568      	movs	r5, #104	; 0x68
 800a31a:	4355      	muls	r5, r2
 800a31c:	460e      	mov	r6, r1
 800a31e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a322:	f001 f851 	bl	800b3c8 <_malloc_r>
 800a326:	4604      	mov	r4, r0
 800a328:	b140      	cbz	r0, 800a33c <__sfmoreglue+0x28>
 800a32a:	2100      	movs	r1, #0
 800a32c:	e9c0 1600 	strd	r1, r6, [r0]
 800a330:	300c      	adds	r0, #12
 800a332:	60a0      	str	r0, [r4, #8]
 800a334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a338:	f7fd fc48 	bl	8007bcc <memset>
 800a33c:	4620      	mov	r0, r4
 800a33e:	bd70      	pop	{r4, r5, r6, pc}

0800a340 <__sinit>:
 800a340:	6983      	ldr	r3, [r0, #24]
 800a342:	b510      	push	{r4, lr}
 800a344:	4604      	mov	r4, r0
 800a346:	bb33      	cbnz	r3, 800a396 <__sinit+0x56>
 800a348:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a34c:	6503      	str	r3, [r0, #80]	; 0x50
 800a34e:	4b12      	ldr	r3, [pc, #72]	; (800a398 <__sinit+0x58>)
 800a350:	4a12      	ldr	r2, [pc, #72]	; (800a39c <__sinit+0x5c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6282      	str	r2, [r0, #40]	; 0x28
 800a356:	4298      	cmp	r0, r3
 800a358:	bf04      	itt	eq
 800a35a:	2301      	moveq	r3, #1
 800a35c:	6183      	streq	r3, [r0, #24]
 800a35e:	f000 f81f 	bl	800a3a0 <__sfp>
 800a362:	6060      	str	r0, [r4, #4]
 800a364:	4620      	mov	r0, r4
 800a366:	f000 f81b 	bl	800a3a0 <__sfp>
 800a36a:	60a0      	str	r0, [r4, #8]
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 f817 	bl	800a3a0 <__sfp>
 800a372:	2200      	movs	r2, #0
 800a374:	60e0      	str	r0, [r4, #12]
 800a376:	2104      	movs	r1, #4
 800a378:	6860      	ldr	r0, [r4, #4]
 800a37a:	f7ff ffa1 	bl	800a2c0 <std>
 800a37e:	2201      	movs	r2, #1
 800a380:	2109      	movs	r1, #9
 800a382:	68a0      	ldr	r0, [r4, #8]
 800a384:	f7ff ff9c 	bl	800a2c0 <std>
 800a388:	2202      	movs	r2, #2
 800a38a:	2112      	movs	r1, #18
 800a38c:	68e0      	ldr	r0, [r4, #12]
 800a38e:	f7ff ff97 	bl	800a2c0 <std>
 800a392:	2301      	movs	r3, #1
 800a394:	61a3      	str	r3, [r4, #24]
 800a396:	bd10      	pop	{r4, pc}
 800a398:	0800c020 	.word	0x0800c020
 800a39c:	0800a309 	.word	0x0800a309

0800a3a0 <__sfp>:
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <__sfp+0x70>)
 800a3a4:	681e      	ldr	r6, [r3, #0]
 800a3a6:	69b3      	ldr	r3, [r6, #24]
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	b913      	cbnz	r3, 800a3b2 <__sfp+0x12>
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f7ff ffc7 	bl	800a340 <__sinit>
 800a3b2:	3648      	adds	r6, #72	; 0x48
 800a3b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	d503      	bpl.n	800a3c4 <__sfp+0x24>
 800a3bc:	6833      	ldr	r3, [r6, #0]
 800a3be:	b133      	cbz	r3, 800a3ce <__sfp+0x2e>
 800a3c0:	6836      	ldr	r6, [r6, #0]
 800a3c2:	e7f7      	b.n	800a3b4 <__sfp+0x14>
 800a3c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3c8:	b16d      	cbz	r5, 800a3e6 <__sfp+0x46>
 800a3ca:	3468      	adds	r4, #104	; 0x68
 800a3cc:	e7f4      	b.n	800a3b8 <__sfp+0x18>
 800a3ce:	2104      	movs	r1, #4
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7ff ff9f 	bl	800a314 <__sfmoreglue>
 800a3d6:	6030      	str	r0, [r6, #0]
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d1f1      	bne.n	800a3c0 <__sfp+0x20>
 800a3dc:	230c      	movs	r3, #12
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e6:	4b0b      	ldr	r3, [pc, #44]	; (800a414 <__sfp+0x74>)
 800a3e8:	6665      	str	r5, [r4, #100]	; 0x64
 800a3ea:	e9c4 5500 	strd	r5, r5, [r4]
 800a3ee:	60a5      	str	r5, [r4, #8]
 800a3f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a3f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a400:	f7fd fbe4 	bl	8007bcc <memset>
 800a404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a40c:	e7e9      	b.n	800a3e2 <__sfp+0x42>
 800a40e:	bf00      	nop
 800a410:	0800c020 	.word	0x0800c020
 800a414:	ffff0001 	.word	0xffff0001

0800a418 <_fwalk_reent>:
 800a418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a41c:	4680      	mov	r8, r0
 800a41e:	4689      	mov	r9, r1
 800a420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a424:	2600      	movs	r6, #0
 800a426:	b914      	cbnz	r4, 800a42e <_fwalk_reent+0x16>
 800a428:	4630      	mov	r0, r6
 800a42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a42e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a432:	3f01      	subs	r7, #1
 800a434:	d501      	bpl.n	800a43a <_fwalk_reent+0x22>
 800a436:	6824      	ldr	r4, [r4, #0]
 800a438:	e7f5      	b.n	800a426 <_fwalk_reent+0xe>
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d907      	bls.n	800a450 <_fwalk_reent+0x38>
 800a440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a444:	3301      	adds	r3, #1
 800a446:	d003      	beq.n	800a450 <_fwalk_reent+0x38>
 800a448:	4629      	mov	r1, r5
 800a44a:	4640      	mov	r0, r8
 800a44c:	47c8      	blx	r9
 800a44e:	4306      	orrs	r6, r0
 800a450:	3568      	adds	r5, #104	; 0x68
 800a452:	e7ee      	b.n	800a432 <_fwalk_reent+0x1a>

0800a454 <rshift>:
 800a454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a456:	6906      	ldr	r6, [r0, #16]
 800a458:	114b      	asrs	r3, r1, #5
 800a45a:	429e      	cmp	r6, r3
 800a45c:	f100 0414 	add.w	r4, r0, #20
 800a460:	dd30      	ble.n	800a4c4 <rshift+0x70>
 800a462:	f011 011f 	ands.w	r1, r1, #31
 800a466:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a46a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a46e:	d108      	bne.n	800a482 <rshift+0x2e>
 800a470:	4621      	mov	r1, r4
 800a472:	42b2      	cmp	r2, r6
 800a474:	460b      	mov	r3, r1
 800a476:	d211      	bcs.n	800a49c <rshift+0x48>
 800a478:	f852 3b04 	ldr.w	r3, [r2], #4
 800a47c:	f841 3b04 	str.w	r3, [r1], #4
 800a480:	e7f7      	b.n	800a472 <rshift+0x1e>
 800a482:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a486:	f1c1 0c20 	rsb	ip, r1, #32
 800a48a:	40cd      	lsrs	r5, r1
 800a48c:	3204      	adds	r2, #4
 800a48e:	4623      	mov	r3, r4
 800a490:	42b2      	cmp	r2, r6
 800a492:	4617      	mov	r7, r2
 800a494:	d30c      	bcc.n	800a4b0 <rshift+0x5c>
 800a496:	601d      	str	r5, [r3, #0]
 800a498:	b105      	cbz	r5, 800a49c <rshift+0x48>
 800a49a:	3304      	adds	r3, #4
 800a49c:	1b1a      	subs	r2, r3, r4
 800a49e:	42a3      	cmp	r3, r4
 800a4a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4a4:	bf08      	it	eq
 800a4a6:	2300      	moveq	r3, #0
 800a4a8:	6102      	str	r2, [r0, #16]
 800a4aa:	bf08      	it	eq
 800a4ac:	6143      	streq	r3, [r0, #20]
 800a4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b0:	683f      	ldr	r7, [r7, #0]
 800a4b2:	fa07 f70c 	lsl.w	r7, r7, ip
 800a4b6:	433d      	orrs	r5, r7
 800a4b8:	f843 5b04 	str.w	r5, [r3], #4
 800a4bc:	f852 5b04 	ldr.w	r5, [r2], #4
 800a4c0:	40cd      	lsrs	r5, r1
 800a4c2:	e7e5      	b.n	800a490 <rshift+0x3c>
 800a4c4:	4623      	mov	r3, r4
 800a4c6:	e7e9      	b.n	800a49c <rshift+0x48>

0800a4c8 <__hexdig_fun>:
 800a4c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4cc:	2b09      	cmp	r3, #9
 800a4ce:	d802      	bhi.n	800a4d6 <__hexdig_fun+0xe>
 800a4d0:	3820      	subs	r0, #32
 800a4d2:	b2c0      	uxtb	r0, r0
 800a4d4:	4770      	bx	lr
 800a4d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4da:	2b05      	cmp	r3, #5
 800a4dc:	d801      	bhi.n	800a4e2 <__hexdig_fun+0x1a>
 800a4de:	3847      	subs	r0, #71	; 0x47
 800a4e0:	e7f7      	b.n	800a4d2 <__hexdig_fun+0xa>
 800a4e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4e6:	2b05      	cmp	r3, #5
 800a4e8:	d801      	bhi.n	800a4ee <__hexdig_fun+0x26>
 800a4ea:	3827      	subs	r0, #39	; 0x27
 800a4ec:	e7f1      	b.n	800a4d2 <__hexdig_fun+0xa>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	4770      	bx	lr

0800a4f2 <__gethex>:
 800a4f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f6:	b08b      	sub	sp, #44	; 0x2c
 800a4f8:	468a      	mov	sl, r1
 800a4fa:	9002      	str	r0, [sp, #8]
 800a4fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a4fe:	9306      	str	r3, [sp, #24]
 800a500:	4690      	mov	r8, r2
 800a502:	f000 fad0 	bl	800aaa6 <__localeconv_l>
 800a506:	6803      	ldr	r3, [r0, #0]
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7f5 fe60 	bl	80001d0 <strlen>
 800a510:	9b03      	ldr	r3, [sp, #12]
 800a512:	9001      	str	r0, [sp, #4]
 800a514:	4403      	add	r3, r0
 800a516:	f04f 0b00 	mov.w	fp, #0
 800a51a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a51e:	9307      	str	r3, [sp, #28]
 800a520:	f8da 3000 	ldr.w	r3, [sl]
 800a524:	3302      	adds	r3, #2
 800a526:	461f      	mov	r7, r3
 800a528:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a52c:	2830      	cmp	r0, #48	; 0x30
 800a52e:	d06c      	beq.n	800a60a <__gethex+0x118>
 800a530:	f7ff ffca 	bl	800a4c8 <__hexdig_fun>
 800a534:	4604      	mov	r4, r0
 800a536:	2800      	cmp	r0, #0
 800a538:	d16a      	bne.n	800a610 <__gethex+0x11e>
 800a53a:	9a01      	ldr	r2, [sp, #4]
 800a53c:	9903      	ldr	r1, [sp, #12]
 800a53e:	4638      	mov	r0, r7
 800a540:	f001 fa81 	bl	800ba46 <strncmp>
 800a544:	2800      	cmp	r0, #0
 800a546:	d166      	bne.n	800a616 <__gethex+0x124>
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	5cf8      	ldrb	r0, [r7, r3]
 800a54c:	18fe      	adds	r6, r7, r3
 800a54e:	f7ff ffbb 	bl	800a4c8 <__hexdig_fun>
 800a552:	2800      	cmp	r0, #0
 800a554:	d062      	beq.n	800a61c <__gethex+0x12a>
 800a556:	4633      	mov	r3, r6
 800a558:	7818      	ldrb	r0, [r3, #0]
 800a55a:	2830      	cmp	r0, #48	; 0x30
 800a55c:	461f      	mov	r7, r3
 800a55e:	f103 0301 	add.w	r3, r3, #1
 800a562:	d0f9      	beq.n	800a558 <__gethex+0x66>
 800a564:	f7ff ffb0 	bl	800a4c8 <__hexdig_fun>
 800a568:	fab0 f580 	clz	r5, r0
 800a56c:	096d      	lsrs	r5, r5, #5
 800a56e:	4634      	mov	r4, r6
 800a570:	f04f 0b01 	mov.w	fp, #1
 800a574:	463a      	mov	r2, r7
 800a576:	4616      	mov	r6, r2
 800a578:	3201      	adds	r2, #1
 800a57a:	7830      	ldrb	r0, [r6, #0]
 800a57c:	f7ff ffa4 	bl	800a4c8 <__hexdig_fun>
 800a580:	2800      	cmp	r0, #0
 800a582:	d1f8      	bne.n	800a576 <__gethex+0x84>
 800a584:	9a01      	ldr	r2, [sp, #4]
 800a586:	9903      	ldr	r1, [sp, #12]
 800a588:	4630      	mov	r0, r6
 800a58a:	f001 fa5c 	bl	800ba46 <strncmp>
 800a58e:	b950      	cbnz	r0, 800a5a6 <__gethex+0xb4>
 800a590:	b954      	cbnz	r4, 800a5a8 <__gethex+0xb6>
 800a592:	9b01      	ldr	r3, [sp, #4]
 800a594:	18f4      	adds	r4, r6, r3
 800a596:	4622      	mov	r2, r4
 800a598:	4616      	mov	r6, r2
 800a59a:	3201      	adds	r2, #1
 800a59c:	7830      	ldrb	r0, [r6, #0]
 800a59e:	f7ff ff93 	bl	800a4c8 <__hexdig_fun>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d1f8      	bne.n	800a598 <__gethex+0xa6>
 800a5a6:	b10c      	cbz	r4, 800a5ac <__gethex+0xba>
 800a5a8:	1ba4      	subs	r4, r4, r6
 800a5aa:	00a4      	lsls	r4, r4, #2
 800a5ac:	7833      	ldrb	r3, [r6, #0]
 800a5ae:	2b50      	cmp	r3, #80	; 0x50
 800a5b0:	d001      	beq.n	800a5b6 <__gethex+0xc4>
 800a5b2:	2b70      	cmp	r3, #112	; 0x70
 800a5b4:	d140      	bne.n	800a638 <__gethex+0x146>
 800a5b6:	7873      	ldrb	r3, [r6, #1]
 800a5b8:	2b2b      	cmp	r3, #43	; 0x2b
 800a5ba:	d031      	beq.n	800a620 <__gethex+0x12e>
 800a5bc:	2b2d      	cmp	r3, #45	; 0x2d
 800a5be:	d033      	beq.n	800a628 <__gethex+0x136>
 800a5c0:	1c71      	adds	r1, r6, #1
 800a5c2:	f04f 0900 	mov.w	r9, #0
 800a5c6:	7808      	ldrb	r0, [r1, #0]
 800a5c8:	f7ff ff7e 	bl	800a4c8 <__hexdig_fun>
 800a5cc:	1e43      	subs	r3, r0, #1
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b18      	cmp	r3, #24
 800a5d2:	d831      	bhi.n	800a638 <__gethex+0x146>
 800a5d4:	f1a0 0210 	sub.w	r2, r0, #16
 800a5d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5dc:	f7ff ff74 	bl	800a4c8 <__hexdig_fun>
 800a5e0:	1e43      	subs	r3, r0, #1
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b18      	cmp	r3, #24
 800a5e6:	d922      	bls.n	800a62e <__gethex+0x13c>
 800a5e8:	f1b9 0f00 	cmp.w	r9, #0
 800a5ec:	d000      	beq.n	800a5f0 <__gethex+0xfe>
 800a5ee:	4252      	negs	r2, r2
 800a5f0:	4414      	add	r4, r2
 800a5f2:	f8ca 1000 	str.w	r1, [sl]
 800a5f6:	b30d      	cbz	r5, 800a63c <__gethex+0x14a>
 800a5f8:	f1bb 0f00 	cmp.w	fp, #0
 800a5fc:	bf0c      	ite	eq
 800a5fe:	2706      	moveq	r7, #6
 800a600:	2700      	movne	r7, #0
 800a602:	4638      	mov	r0, r7
 800a604:	b00b      	add	sp, #44	; 0x2c
 800a606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60a:	f10b 0b01 	add.w	fp, fp, #1
 800a60e:	e78a      	b.n	800a526 <__gethex+0x34>
 800a610:	2500      	movs	r5, #0
 800a612:	462c      	mov	r4, r5
 800a614:	e7ae      	b.n	800a574 <__gethex+0x82>
 800a616:	463e      	mov	r6, r7
 800a618:	2501      	movs	r5, #1
 800a61a:	e7c7      	b.n	800a5ac <__gethex+0xba>
 800a61c:	4604      	mov	r4, r0
 800a61e:	e7fb      	b.n	800a618 <__gethex+0x126>
 800a620:	f04f 0900 	mov.w	r9, #0
 800a624:	1cb1      	adds	r1, r6, #2
 800a626:	e7ce      	b.n	800a5c6 <__gethex+0xd4>
 800a628:	f04f 0901 	mov.w	r9, #1
 800a62c:	e7fa      	b.n	800a624 <__gethex+0x132>
 800a62e:	230a      	movs	r3, #10
 800a630:	fb03 0202 	mla	r2, r3, r2, r0
 800a634:	3a10      	subs	r2, #16
 800a636:	e7cf      	b.n	800a5d8 <__gethex+0xe6>
 800a638:	4631      	mov	r1, r6
 800a63a:	e7da      	b.n	800a5f2 <__gethex+0x100>
 800a63c:	1bf3      	subs	r3, r6, r7
 800a63e:	3b01      	subs	r3, #1
 800a640:	4629      	mov	r1, r5
 800a642:	2b07      	cmp	r3, #7
 800a644:	dc49      	bgt.n	800a6da <__gethex+0x1e8>
 800a646:	9802      	ldr	r0, [sp, #8]
 800a648:	f000 fa63 	bl	800ab12 <_Balloc>
 800a64c:	9b01      	ldr	r3, [sp, #4]
 800a64e:	f100 0914 	add.w	r9, r0, #20
 800a652:	f04f 0b00 	mov.w	fp, #0
 800a656:	f1c3 0301 	rsb	r3, r3, #1
 800a65a:	4605      	mov	r5, r0
 800a65c:	f8cd 9010 	str.w	r9, [sp, #16]
 800a660:	46da      	mov	sl, fp
 800a662:	9308      	str	r3, [sp, #32]
 800a664:	42b7      	cmp	r7, r6
 800a666:	d33b      	bcc.n	800a6e0 <__gethex+0x1ee>
 800a668:	9804      	ldr	r0, [sp, #16]
 800a66a:	f840 ab04 	str.w	sl, [r0], #4
 800a66e:	eba0 0009 	sub.w	r0, r0, r9
 800a672:	1080      	asrs	r0, r0, #2
 800a674:	6128      	str	r0, [r5, #16]
 800a676:	0147      	lsls	r7, r0, #5
 800a678:	4650      	mov	r0, sl
 800a67a:	f000 fb0e 	bl	800ac9a <__hi0bits>
 800a67e:	f8d8 6000 	ldr.w	r6, [r8]
 800a682:	1a3f      	subs	r7, r7, r0
 800a684:	42b7      	cmp	r7, r6
 800a686:	dd64      	ble.n	800a752 <__gethex+0x260>
 800a688:	1bbf      	subs	r7, r7, r6
 800a68a:	4639      	mov	r1, r7
 800a68c:	4628      	mov	r0, r5
 800a68e:	f000 fe1d 	bl	800b2cc <__any_on>
 800a692:	4682      	mov	sl, r0
 800a694:	b178      	cbz	r0, 800a6b6 <__gethex+0x1c4>
 800a696:	1e7b      	subs	r3, r7, #1
 800a698:	1159      	asrs	r1, r3, #5
 800a69a:	f003 021f 	and.w	r2, r3, #31
 800a69e:	f04f 0a01 	mov.w	sl, #1
 800a6a2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a6a6:	fa0a f202 	lsl.w	r2, sl, r2
 800a6aa:	420a      	tst	r2, r1
 800a6ac:	d003      	beq.n	800a6b6 <__gethex+0x1c4>
 800a6ae:	4553      	cmp	r3, sl
 800a6b0:	dc46      	bgt.n	800a740 <__gethex+0x24e>
 800a6b2:	f04f 0a02 	mov.w	sl, #2
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	f7ff fecb 	bl	800a454 <rshift>
 800a6be:	443c      	add	r4, r7
 800a6c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6c4:	42a3      	cmp	r3, r4
 800a6c6:	da52      	bge.n	800a76e <__gethex+0x27c>
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	9802      	ldr	r0, [sp, #8]
 800a6cc:	f000 fa55 	bl	800ab7a <_Bfree>
 800a6d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	27a3      	movs	r7, #163	; 0xa3
 800a6d8:	e793      	b.n	800a602 <__gethex+0x110>
 800a6da:	3101      	adds	r1, #1
 800a6dc:	105b      	asrs	r3, r3, #1
 800a6de:	e7b0      	b.n	800a642 <__gethex+0x150>
 800a6e0:	1e73      	subs	r3, r6, #1
 800a6e2:	9305      	str	r3, [sp, #20]
 800a6e4:	9a07      	ldr	r2, [sp, #28]
 800a6e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d018      	beq.n	800a720 <__gethex+0x22e>
 800a6ee:	f1bb 0f20 	cmp.w	fp, #32
 800a6f2:	d107      	bne.n	800a704 <__gethex+0x212>
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	f8c3 a000 	str.w	sl, [r3]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	f04f 0a00 	mov.w	sl, #0
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	46d3      	mov	fp, sl
 800a704:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a708:	f7ff fede 	bl	800a4c8 <__hexdig_fun>
 800a70c:	f000 000f 	and.w	r0, r0, #15
 800a710:	fa00 f00b 	lsl.w	r0, r0, fp
 800a714:	ea4a 0a00 	orr.w	sl, sl, r0
 800a718:	f10b 0b04 	add.w	fp, fp, #4
 800a71c:	9b05      	ldr	r3, [sp, #20]
 800a71e:	e00d      	b.n	800a73c <__gethex+0x24a>
 800a720:	9b05      	ldr	r3, [sp, #20]
 800a722:	9a08      	ldr	r2, [sp, #32]
 800a724:	4413      	add	r3, r2
 800a726:	42bb      	cmp	r3, r7
 800a728:	d3e1      	bcc.n	800a6ee <__gethex+0x1fc>
 800a72a:	4618      	mov	r0, r3
 800a72c:	9a01      	ldr	r2, [sp, #4]
 800a72e:	9903      	ldr	r1, [sp, #12]
 800a730:	9309      	str	r3, [sp, #36]	; 0x24
 800a732:	f001 f988 	bl	800ba46 <strncmp>
 800a736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a738:	2800      	cmp	r0, #0
 800a73a:	d1d8      	bne.n	800a6ee <__gethex+0x1fc>
 800a73c:	461e      	mov	r6, r3
 800a73e:	e791      	b.n	800a664 <__gethex+0x172>
 800a740:	1eb9      	subs	r1, r7, #2
 800a742:	4628      	mov	r0, r5
 800a744:	f000 fdc2 	bl	800b2cc <__any_on>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d0b2      	beq.n	800a6b2 <__gethex+0x1c0>
 800a74c:	f04f 0a03 	mov.w	sl, #3
 800a750:	e7b1      	b.n	800a6b6 <__gethex+0x1c4>
 800a752:	da09      	bge.n	800a768 <__gethex+0x276>
 800a754:	1bf7      	subs	r7, r6, r7
 800a756:	4629      	mov	r1, r5
 800a758:	463a      	mov	r2, r7
 800a75a:	9802      	ldr	r0, [sp, #8]
 800a75c:	f000 fbd8 	bl	800af10 <__lshift>
 800a760:	1be4      	subs	r4, r4, r7
 800a762:	4605      	mov	r5, r0
 800a764:	f100 0914 	add.w	r9, r0, #20
 800a768:	f04f 0a00 	mov.w	sl, #0
 800a76c:	e7a8      	b.n	800a6c0 <__gethex+0x1ce>
 800a76e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a772:	42a0      	cmp	r0, r4
 800a774:	dd6a      	ble.n	800a84c <__gethex+0x35a>
 800a776:	1b04      	subs	r4, r0, r4
 800a778:	42a6      	cmp	r6, r4
 800a77a:	dc2e      	bgt.n	800a7da <__gethex+0x2e8>
 800a77c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d022      	beq.n	800a7ca <__gethex+0x2d8>
 800a784:	2b03      	cmp	r3, #3
 800a786:	d024      	beq.n	800a7d2 <__gethex+0x2e0>
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d115      	bne.n	800a7b8 <__gethex+0x2c6>
 800a78c:	42a6      	cmp	r6, r4
 800a78e:	d113      	bne.n	800a7b8 <__gethex+0x2c6>
 800a790:	2e01      	cmp	r6, #1
 800a792:	dc0b      	bgt.n	800a7ac <__gethex+0x2ba>
 800a794:	9a06      	ldr	r2, [sp, #24]
 800a796:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	2301      	movs	r3, #1
 800a79e:	612b      	str	r3, [r5, #16]
 800a7a0:	f8c9 3000 	str.w	r3, [r9]
 800a7a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7a6:	2762      	movs	r7, #98	; 0x62
 800a7a8:	601d      	str	r5, [r3, #0]
 800a7aa:	e72a      	b.n	800a602 <__gethex+0x110>
 800a7ac:	1e71      	subs	r1, r6, #1
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f000 fd8c 	bl	800b2cc <__any_on>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d1ed      	bne.n	800a794 <__gethex+0x2a2>
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	9802      	ldr	r0, [sp, #8]
 800a7bc:	f000 f9dd 	bl	800ab7a <_Bfree>
 800a7c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	2750      	movs	r7, #80	; 0x50
 800a7c8:	e71b      	b.n	800a602 <__gethex+0x110>
 800a7ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d0e1      	beq.n	800a794 <__gethex+0x2a2>
 800a7d0:	e7f2      	b.n	800a7b8 <__gethex+0x2c6>
 800a7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1dd      	bne.n	800a794 <__gethex+0x2a2>
 800a7d8:	e7ee      	b.n	800a7b8 <__gethex+0x2c6>
 800a7da:	1e67      	subs	r7, r4, #1
 800a7dc:	f1ba 0f00 	cmp.w	sl, #0
 800a7e0:	d131      	bne.n	800a846 <__gethex+0x354>
 800a7e2:	b127      	cbz	r7, 800a7ee <__gethex+0x2fc>
 800a7e4:	4639      	mov	r1, r7
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f000 fd70 	bl	800b2cc <__any_on>
 800a7ec:	4682      	mov	sl, r0
 800a7ee:	117a      	asrs	r2, r7, #5
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f007 071f 	and.w	r7, r7, #31
 800a7f6:	fa03 f707 	lsl.w	r7, r3, r7
 800a7fa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a7fe:	4621      	mov	r1, r4
 800a800:	421f      	tst	r7, r3
 800a802:	4628      	mov	r0, r5
 800a804:	bf18      	it	ne
 800a806:	f04a 0a02 	orrne.w	sl, sl, #2
 800a80a:	1b36      	subs	r6, r6, r4
 800a80c:	f7ff fe22 	bl	800a454 <rshift>
 800a810:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a814:	2702      	movs	r7, #2
 800a816:	f1ba 0f00 	cmp.w	sl, #0
 800a81a:	d048      	beq.n	800a8ae <__gethex+0x3bc>
 800a81c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d015      	beq.n	800a850 <__gethex+0x35e>
 800a824:	2b03      	cmp	r3, #3
 800a826:	d017      	beq.n	800a858 <__gethex+0x366>
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d109      	bne.n	800a840 <__gethex+0x34e>
 800a82c:	f01a 0f02 	tst.w	sl, #2
 800a830:	d006      	beq.n	800a840 <__gethex+0x34e>
 800a832:	f8d9 3000 	ldr.w	r3, [r9]
 800a836:	ea4a 0a03 	orr.w	sl, sl, r3
 800a83a:	f01a 0f01 	tst.w	sl, #1
 800a83e:	d10e      	bne.n	800a85e <__gethex+0x36c>
 800a840:	f047 0710 	orr.w	r7, r7, #16
 800a844:	e033      	b.n	800a8ae <__gethex+0x3bc>
 800a846:	f04f 0a01 	mov.w	sl, #1
 800a84a:	e7d0      	b.n	800a7ee <__gethex+0x2fc>
 800a84c:	2701      	movs	r7, #1
 800a84e:	e7e2      	b.n	800a816 <__gethex+0x324>
 800a850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a852:	f1c3 0301 	rsb	r3, r3, #1
 800a856:	9315      	str	r3, [sp, #84]	; 0x54
 800a858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0f0      	beq.n	800a840 <__gethex+0x34e>
 800a85e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a862:	f105 0314 	add.w	r3, r5, #20
 800a866:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a86a:	eb03 010a 	add.w	r1, r3, sl
 800a86e:	f04f 0c00 	mov.w	ip, #0
 800a872:	4618      	mov	r0, r3
 800a874:	f853 2b04 	ldr.w	r2, [r3], #4
 800a878:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a87c:	d01c      	beq.n	800a8b8 <__gethex+0x3c6>
 800a87e:	3201      	adds	r2, #1
 800a880:	6002      	str	r2, [r0, #0]
 800a882:	2f02      	cmp	r7, #2
 800a884:	f105 0314 	add.w	r3, r5, #20
 800a888:	d138      	bne.n	800a8fc <__gethex+0x40a>
 800a88a:	f8d8 2000 	ldr.w	r2, [r8]
 800a88e:	3a01      	subs	r2, #1
 800a890:	42b2      	cmp	r2, r6
 800a892:	d10a      	bne.n	800a8aa <__gethex+0x3b8>
 800a894:	1171      	asrs	r1, r6, #5
 800a896:	2201      	movs	r2, #1
 800a898:	f006 061f 	and.w	r6, r6, #31
 800a89c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8a0:	fa02 f606 	lsl.w	r6, r2, r6
 800a8a4:	421e      	tst	r6, r3
 800a8a6:	bf18      	it	ne
 800a8a8:	4617      	movne	r7, r2
 800a8aa:	f047 0720 	orr.w	r7, r7, #32
 800a8ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8b0:	601d      	str	r5, [r3, #0]
 800a8b2:	9b06      	ldr	r3, [sp, #24]
 800a8b4:	601c      	str	r4, [r3, #0]
 800a8b6:	e6a4      	b.n	800a602 <__gethex+0x110>
 800a8b8:	4299      	cmp	r1, r3
 800a8ba:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8be:	d8d8      	bhi.n	800a872 <__gethex+0x380>
 800a8c0:	68ab      	ldr	r3, [r5, #8]
 800a8c2:	4599      	cmp	r9, r3
 800a8c4:	db12      	blt.n	800a8ec <__gethex+0x3fa>
 800a8c6:	6869      	ldr	r1, [r5, #4]
 800a8c8:	9802      	ldr	r0, [sp, #8]
 800a8ca:	3101      	adds	r1, #1
 800a8cc:	f000 f921 	bl	800ab12 <_Balloc>
 800a8d0:	692a      	ldr	r2, [r5, #16]
 800a8d2:	3202      	adds	r2, #2
 800a8d4:	f105 010c 	add.w	r1, r5, #12
 800a8d8:	4683      	mov	fp, r0
 800a8da:	0092      	lsls	r2, r2, #2
 800a8dc:	300c      	adds	r0, #12
 800a8de:	f000 f90d 	bl	800aafc <memcpy>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	9802      	ldr	r0, [sp, #8]
 800a8e6:	f000 f948 	bl	800ab7a <_Bfree>
 800a8ea:	465d      	mov	r5, fp
 800a8ec:	692b      	ldr	r3, [r5, #16]
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a8f4:	612a      	str	r2, [r5, #16]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	615a      	str	r2, [r3, #20]
 800a8fa:	e7c2      	b.n	800a882 <__gethex+0x390>
 800a8fc:	692a      	ldr	r2, [r5, #16]
 800a8fe:	454a      	cmp	r2, r9
 800a900:	dd0b      	ble.n	800a91a <__gethex+0x428>
 800a902:	2101      	movs	r1, #1
 800a904:	4628      	mov	r0, r5
 800a906:	f7ff fda5 	bl	800a454 <rshift>
 800a90a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a90e:	3401      	adds	r4, #1
 800a910:	42a3      	cmp	r3, r4
 800a912:	f6ff aed9 	blt.w	800a6c8 <__gethex+0x1d6>
 800a916:	2701      	movs	r7, #1
 800a918:	e7c7      	b.n	800a8aa <__gethex+0x3b8>
 800a91a:	f016 061f 	ands.w	r6, r6, #31
 800a91e:	d0fa      	beq.n	800a916 <__gethex+0x424>
 800a920:	449a      	add	sl, r3
 800a922:	f1c6 0620 	rsb	r6, r6, #32
 800a926:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a92a:	f000 f9b6 	bl	800ac9a <__hi0bits>
 800a92e:	42b0      	cmp	r0, r6
 800a930:	dbe7      	blt.n	800a902 <__gethex+0x410>
 800a932:	e7f0      	b.n	800a916 <__gethex+0x424>

0800a934 <L_shift>:
 800a934:	f1c2 0208 	rsb	r2, r2, #8
 800a938:	0092      	lsls	r2, r2, #2
 800a93a:	b570      	push	{r4, r5, r6, lr}
 800a93c:	f1c2 0620 	rsb	r6, r2, #32
 800a940:	6843      	ldr	r3, [r0, #4]
 800a942:	6804      	ldr	r4, [r0, #0]
 800a944:	fa03 f506 	lsl.w	r5, r3, r6
 800a948:	432c      	orrs	r4, r5
 800a94a:	40d3      	lsrs	r3, r2
 800a94c:	6004      	str	r4, [r0, #0]
 800a94e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a952:	4288      	cmp	r0, r1
 800a954:	d3f4      	bcc.n	800a940 <L_shift+0xc>
 800a956:	bd70      	pop	{r4, r5, r6, pc}

0800a958 <__match>:
 800a958:	b530      	push	{r4, r5, lr}
 800a95a:	6803      	ldr	r3, [r0, #0]
 800a95c:	3301      	adds	r3, #1
 800a95e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a962:	b914      	cbnz	r4, 800a96a <__match+0x12>
 800a964:	6003      	str	r3, [r0, #0]
 800a966:	2001      	movs	r0, #1
 800a968:	bd30      	pop	{r4, r5, pc}
 800a96a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a96e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a972:	2d19      	cmp	r5, #25
 800a974:	bf98      	it	ls
 800a976:	3220      	addls	r2, #32
 800a978:	42a2      	cmp	r2, r4
 800a97a:	d0f0      	beq.n	800a95e <__match+0x6>
 800a97c:	2000      	movs	r0, #0
 800a97e:	e7f3      	b.n	800a968 <__match+0x10>

0800a980 <__hexnan>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	680b      	ldr	r3, [r1, #0]
 800a986:	6801      	ldr	r1, [r0, #0]
 800a988:	115f      	asrs	r7, r3, #5
 800a98a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a98e:	f013 031f 	ands.w	r3, r3, #31
 800a992:	b087      	sub	sp, #28
 800a994:	bf18      	it	ne
 800a996:	3704      	addne	r7, #4
 800a998:	2500      	movs	r5, #0
 800a99a:	1f3e      	subs	r6, r7, #4
 800a99c:	4682      	mov	sl, r0
 800a99e:	4690      	mov	r8, r2
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	f847 5c04 	str.w	r5, [r7, #-4]
 800a9a6:	46b1      	mov	r9, r6
 800a9a8:	4634      	mov	r4, r6
 800a9aa:	9502      	str	r5, [sp, #8]
 800a9ac:	46ab      	mov	fp, r5
 800a9ae:	784a      	ldrb	r2, [r1, #1]
 800a9b0:	1c4b      	adds	r3, r1, #1
 800a9b2:	9303      	str	r3, [sp, #12]
 800a9b4:	b342      	cbz	r2, 800aa08 <__hexnan+0x88>
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	9105      	str	r1, [sp, #20]
 800a9ba:	9204      	str	r2, [sp, #16]
 800a9bc:	f7ff fd84 	bl	800a4c8 <__hexdig_fun>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d143      	bne.n	800aa4c <__hexnan+0xcc>
 800a9c4:	9a04      	ldr	r2, [sp, #16]
 800a9c6:	9905      	ldr	r1, [sp, #20]
 800a9c8:	2a20      	cmp	r2, #32
 800a9ca:	d818      	bhi.n	800a9fe <__hexnan+0x7e>
 800a9cc:	9b02      	ldr	r3, [sp, #8]
 800a9ce:	459b      	cmp	fp, r3
 800a9d0:	dd13      	ble.n	800a9fa <__hexnan+0x7a>
 800a9d2:	454c      	cmp	r4, r9
 800a9d4:	d206      	bcs.n	800a9e4 <__hexnan+0x64>
 800a9d6:	2d07      	cmp	r5, #7
 800a9d8:	dc04      	bgt.n	800a9e4 <__hexnan+0x64>
 800a9da:	462a      	mov	r2, r5
 800a9dc:	4649      	mov	r1, r9
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7ff ffa8 	bl	800a934 <L_shift>
 800a9e4:	4544      	cmp	r4, r8
 800a9e6:	d944      	bls.n	800aa72 <__hexnan+0xf2>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f1a4 0904 	sub.w	r9, r4, #4
 800a9ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9f2:	f8cd b008 	str.w	fp, [sp, #8]
 800a9f6:	464c      	mov	r4, r9
 800a9f8:	461d      	mov	r5, r3
 800a9fa:	9903      	ldr	r1, [sp, #12]
 800a9fc:	e7d7      	b.n	800a9ae <__hexnan+0x2e>
 800a9fe:	2a29      	cmp	r2, #41	; 0x29
 800aa00:	d14a      	bne.n	800aa98 <__hexnan+0x118>
 800aa02:	3102      	adds	r1, #2
 800aa04:	f8ca 1000 	str.w	r1, [sl]
 800aa08:	f1bb 0f00 	cmp.w	fp, #0
 800aa0c:	d044      	beq.n	800aa98 <__hexnan+0x118>
 800aa0e:	454c      	cmp	r4, r9
 800aa10:	d206      	bcs.n	800aa20 <__hexnan+0xa0>
 800aa12:	2d07      	cmp	r5, #7
 800aa14:	dc04      	bgt.n	800aa20 <__hexnan+0xa0>
 800aa16:	462a      	mov	r2, r5
 800aa18:	4649      	mov	r1, r9
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7ff ff8a 	bl	800a934 <L_shift>
 800aa20:	4544      	cmp	r4, r8
 800aa22:	d928      	bls.n	800aa76 <__hexnan+0xf6>
 800aa24:	4643      	mov	r3, r8
 800aa26:	f854 2b04 	ldr.w	r2, [r4], #4
 800aa2a:	f843 2b04 	str.w	r2, [r3], #4
 800aa2e:	42a6      	cmp	r6, r4
 800aa30:	d2f9      	bcs.n	800aa26 <__hexnan+0xa6>
 800aa32:	2200      	movs	r2, #0
 800aa34:	f843 2b04 	str.w	r2, [r3], #4
 800aa38:	429e      	cmp	r6, r3
 800aa3a:	d2fb      	bcs.n	800aa34 <__hexnan+0xb4>
 800aa3c:	6833      	ldr	r3, [r6, #0]
 800aa3e:	b91b      	cbnz	r3, 800aa48 <__hexnan+0xc8>
 800aa40:	4546      	cmp	r6, r8
 800aa42:	d127      	bne.n	800aa94 <__hexnan+0x114>
 800aa44:	2301      	movs	r3, #1
 800aa46:	6033      	str	r3, [r6, #0]
 800aa48:	2005      	movs	r0, #5
 800aa4a:	e026      	b.n	800aa9a <__hexnan+0x11a>
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	2d08      	cmp	r5, #8
 800aa50:	f10b 0b01 	add.w	fp, fp, #1
 800aa54:	dd06      	ble.n	800aa64 <__hexnan+0xe4>
 800aa56:	4544      	cmp	r4, r8
 800aa58:	d9cf      	bls.n	800a9fa <__hexnan+0x7a>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa60:	2501      	movs	r5, #1
 800aa62:	3c04      	subs	r4, #4
 800aa64:	6822      	ldr	r2, [r4, #0]
 800aa66:	f000 000f 	and.w	r0, r0, #15
 800aa6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa6e:	6020      	str	r0, [r4, #0]
 800aa70:	e7c3      	b.n	800a9fa <__hexnan+0x7a>
 800aa72:	2508      	movs	r5, #8
 800aa74:	e7c1      	b.n	800a9fa <__hexnan+0x7a>
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0df      	beq.n	800aa3c <__hexnan+0xbc>
 800aa7c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa80:	f1c3 0320 	rsb	r3, r3, #32
 800aa84:	fa22 f303 	lsr.w	r3, r2, r3
 800aa88:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800aa8c:	401a      	ands	r2, r3
 800aa8e:	f847 2c04 	str.w	r2, [r7, #-4]
 800aa92:	e7d3      	b.n	800aa3c <__hexnan+0xbc>
 800aa94:	3e04      	subs	r6, #4
 800aa96:	e7d1      	b.n	800aa3c <__hexnan+0xbc>
 800aa98:	2004      	movs	r0, #4
 800aa9a:	b007      	add	sp, #28
 800aa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaa0 <__locale_ctype_ptr_l>:
 800aaa0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800aaa4:	4770      	bx	lr

0800aaa6 <__localeconv_l>:
 800aaa6:	30f0      	adds	r0, #240	; 0xf0
 800aaa8:	4770      	bx	lr
	...

0800aaac <_localeconv_r>:
 800aaac:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <_localeconv_r+0x14>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6a18      	ldr	r0, [r3, #32]
 800aab2:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <_localeconv_r+0x18>)
 800aab4:	2800      	cmp	r0, #0
 800aab6:	bf08      	it	eq
 800aab8:	4618      	moveq	r0, r3
 800aaba:	30f0      	adds	r0, #240	; 0xf0
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	2000000c 	.word	0x2000000c
 800aac4:	20000070 	.word	0x20000070

0800aac8 <malloc>:
 800aac8:	4b02      	ldr	r3, [pc, #8]	; (800aad4 <malloc+0xc>)
 800aaca:	4601      	mov	r1, r0
 800aacc:	6818      	ldr	r0, [r3, #0]
 800aace:	f000 bc7b 	b.w	800b3c8 <_malloc_r>
 800aad2:	bf00      	nop
 800aad4:	2000000c 	.word	0x2000000c

0800aad8 <__ascii_mbtowc>:
 800aad8:	b082      	sub	sp, #8
 800aada:	b901      	cbnz	r1, 800aade <__ascii_mbtowc+0x6>
 800aadc:	a901      	add	r1, sp, #4
 800aade:	b142      	cbz	r2, 800aaf2 <__ascii_mbtowc+0x1a>
 800aae0:	b14b      	cbz	r3, 800aaf6 <__ascii_mbtowc+0x1e>
 800aae2:	7813      	ldrb	r3, [r2, #0]
 800aae4:	600b      	str	r3, [r1, #0]
 800aae6:	7812      	ldrb	r2, [r2, #0]
 800aae8:	1c10      	adds	r0, r2, #0
 800aaea:	bf18      	it	ne
 800aaec:	2001      	movne	r0, #1
 800aaee:	b002      	add	sp, #8
 800aaf0:	4770      	bx	lr
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	e7fb      	b.n	800aaee <__ascii_mbtowc+0x16>
 800aaf6:	f06f 0001 	mvn.w	r0, #1
 800aafa:	e7f8      	b.n	800aaee <__ascii_mbtowc+0x16>

0800aafc <memcpy>:
 800aafc:	b510      	push	{r4, lr}
 800aafe:	1e43      	subs	r3, r0, #1
 800ab00:	440a      	add	r2, r1
 800ab02:	4291      	cmp	r1, r2
 800ab04:	d100      	bne.n	800ab08 <memcpy+0xc>
 800ab06:	bd10      	pop	{r4, pc}
 800ab08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab10:	e7f7      	b.n	800ab02 <memcpy+0x6>

0800ab12 <_Balloc>:
 800ab12:	b570      	push	{r4, r5, r6, lr}
 800ab14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab16:	4604      	mov	r4, r0
 800ab18:	460e      	mov	r6, r1
 800ab1a:	b93d      	cbnz	r5, 800ab2c <_Balloc+0x1a>
 800ab1c:	2010      	movs	r0, #16
 800ab1e:	f7ff ffd3 	bl	800aac8 <malloc>
 800ab22:	6260      	str	r0, [r4, #36]	; 0x24
 800ab24:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab28:	6005      	str	r5, [r0, #0]
 800ab2a:	60c5      	str	r5, [r0, #12]
 800ab2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ab2e:	68eb      	ldr	r3, [r5, #12]
 800ab30:	b183      	cbz	r3, 800ab54 <_Balloc+0x42>
 800ab32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab3a:	b9b8      	cbnz	r0, 800ab6c <_Balloc+0x5a>
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	fa01 f506 	lsl.w	r5, r1, r6
 800ab42:	1d6a      	adds	r2, r5, #5
 800ab44:	0092      	lsls	r2, r2, #2
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fbe1 	bl	800b30e <_calloc_r>
 800ab4c:	b160      	cbz	r0, 800ab68 <_Balloc+0x56>
 800ab4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ab52:	e00e      	b.n	800ab72 <_Balloc+0x60>
 800ab54:	2221      	movs	r2, #33	; 0x21
 800ab56:	2104      	movs	r1, #4
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fbd8 	bl	800b30e <_calloc_r>
 800ab5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab60:	60e8      	str	r0, [r5, #12]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e4      	bne.n	800ab32 <_Balloc+0x20>
 800ab68:	2000      	movs	r0, #0
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
 800ab6c:	6802      	ldr	r2, [r0, #0]
 800ab6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ab72:	2300      	movs	r3, #0
 800ab74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab78:	e7f7      	b.n	800ab6a <_Balloc+0x58>

0800ab7a <_Bfree>:
 800ab7a:	b570      	push	{r4, r5, r6, lr}
 800ab7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460d      	mov	r5, r1
 800ab82:	b93c      	cbnz	r4, 800ab94 <_Bfree+0x1a>
 800ab84:	2010      	movs	r0, #16
 800ab86:	f7ff ff9f 	bl	800aac8 <malloc>
 800ab8a:	6270      	str	r0, [r6, #36]	; 0x24
 800ab8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab90:	6004      	str	r4, [r0, #0]
 800ab92:	60c4      	str	r4, [r0, #12]
 800ab94:	b13d      	cbz	r5, 800aba6 <_Bfree+0x2c>
 800ab96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab98:	686a      	ldr	r2, [r5, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aba0:	6029      	str	r1, [r5, #0]
 800aba2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aba6:	bd70      	pop	{r4, r5, r6, pc}

0800aba8 <__multadd>:
 800aba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abac:	690d      	ldr	r5, [r1, #16]
 800abae:	461f      	mov	r7, r3
 800abb0:	4606      	mov	r6, r0
 800abb2:	460c      	mov	r4, r1
 800abb4:	f101 0c14 	add.w	ip, r1, #20
 800abb8:	2300      	movs	r3, #0
 800abba:	f8dc 0000 	ldr.w	r0, [ip]
 800abbe:	b281      	uxth	r1, r0
 800abc0:	fb02 7101 	mla	r1, r2, r1, r7
 800abc4:	0c0f      	lsrs	r7, r1, #16
 800abc6:	0c00      	lsrs	r0, r0, #16
 800abc8:	fb02 7000 	mla	r0, r2, r0, r7
 800abcc:	b289      	uxth	r1, r1
 800abce:	3301      	adds	r3, #1
 800abd0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800abd4:	429d      	cmp	r5, r3
 800abd6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800abda:	f84c 1b04 	str.w	r1, [ip], #4
 800abde:	dcec      	bgt.n	800abba <__multadd+0x12>
 800abe0:	b1d7      	cbz	r7, 800ac18 <__multadd+0x70>
 800abe2:	68a3      	ldr	r3, [r4, #8]
 800abe4:	42ab      	cmp	r3, r5
 800abe6:	dc12      	bgt.n	800ac0e <__multadd+0x66>
 800abe8:	6861      	ldr	r1, [r4, #4]
 800abea:	4630      	mov	r0, r6
 800abec:	3101      	adds	r1, #1
 800abee:	f7ff ff90 	bl	800ab12 <_Balloc>
 800abf2:	6922      	ldr	r2, [r4, #16]
 800abf4:	3202      	adds	r2, #2
 800abf6:	f104 010c 	add.w	r1, r4, #12
 800abfa:	4680      	mov	r8, r0
 800abfc:	0092      	lsls	r2, r2, #2
 800abfe:	300c      	adds	r0, #12
 800ac00:	f7ff ff7c 	bl	800aafc <memcpy>
 800ac04:	4621      	mov	r1, r4
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7ff ffb7 	bl	800ab7a <_Bfree>
 800ac0c:	4644      	mov	r4, r8
 800ac0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac12:	3501      	adds	r5, #1
 800ac14:	615f      	str	r7, [r3, #20]
 800ac16:	6125      	str	r5, [r4, #16]
 800ac18:	4620      	mov	r0, r4
 800ac1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac1e <__s2b>:
 800ac1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac22:	460c      	mov	r4, r1
 800ac24:	4615      	mov	r5, r2
 800ac26:	461f      	mov	r7, r3
 800ac28:	2209      	movs	r2, #9
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac32:	2100      	movs	r1, #0
 800ac34:	2201      	movs	r2, #1
 800ac36:	429a      	cmp	r2, r3
 800ac38:	db20      	blt.n	800ac7c <__s2b+0x5e>
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f7ff ff69 	bl	800ab12 <_Balloc>
 800ac40:	9b08      	ldr	r3, [sp, #32]
 800ac42:	6143      	str	r3, [r0, #20]
 800ac44:	2d09      	cmp	r5, #9
 800ac46:	f04f 0301 	mov.w	r3, #1
 800ac4a:	6103      	str	r3, [r0, #16]
 800ac4c:	dd19      	ble.n	800ac82 <__s2b+0x64>
 800ac4e:	f104 0809 	add.w	r8, r4, #9
 800ac52:	46c1      	mov	r9, r8
 800ac54:	442c      	add	r4, r5
 800ac56:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	3b30      	subs	r3, #48	; 0x30
 800ac5e:	220a      	movs	r2, #10
 800ac60:	4630      	mov	r0, r6
 800ac62:	f7ff ffa1 	bl	800aba8 <__multadd>
 800ac66:	45a1      	cmp	r9, r4
 800ac68:	d1f5      	bne.n	800ac56 <__s2b+0x38>
 800ac6a:	eb08 0405 	add.w	r4, r8, r5
 800ac6e:	3c08      	subs	r4, #8
 800ac70:	1b2d      	subs	r5, r5, r4
 800ac72:	1963      	adds	r3, r4, r5
 800ac74:	42bb      	cmp	r3, r7
 800ac76:	db07      	blt.n	800ac88 <__s2b+0x6a>
 800ac78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7c:	0052      	lsls	r2, r2, #1
 800ac7e:	3101      	adds	r1, #1
 800ac80:	e7d9      	b.n	800ac36 <__s2b+0x18>
 800ac82:	340a      	adds	r4, #10
 800ac84:	2509      	movs	r5, #9
 800ac86:	e7f3      	b.n	800ac70 <__s2b+0x52>
 800ac88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	3b30      	subs	r3, #48	; 0x30
 800ac90:	220a      	movs	r2, #10
 800ac92:	4630      	mov	r0, r6
 800ac94:	f7ff ff88 	bl	800aba8 <__multadd>
 800ac98:	e7eb      	b.n	800ac72 <__s2b+0x54>

0800ac9a <__hi0bits>:
 800ac9a:	0c02      	lsrs	r2, r0, #16
 800ac9c:	0412      	lsls	r2, r2, #16
 800ac9e:	4603      	mov	r3, r0
 800aca0:	b9b2      	cbnz	r2, 800acd0 <__hi0bits+0x36>
 800aca2:	0403      	lsls	r3, r0, #16
 800aca4:	2010      	movs	r0, #16
 800aca6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800acaa:	bf04      	itt	eq
 800acac:	021b      	lsleq	r3, r3, #8
 800acae:	3008      	addeq	r0, #8
 800acb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800acb4:	bf04      	itt	eq
 800acb6:	011b      	lsleq	r3, r3, #4
 800acb8:	3004      	addeq	r0, #4
 800acba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800acbe:	bf04      	itt	eq
 800acc0:	009b      	lsleq	r3, r3, #2
 800acc2:	3002      	addeq	r0, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	db06      	blt.n	800acd6 <__hi0bits+0x3c>
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	d503      	bpl.n	800acd4 <__hi0bits+0x3a>
 800accc:	3001      	adds	r0, #1
 800acce:	4770      	bx	lr
 800acd0:	2000      	movs	r0, #0
 800acd2:	e7e8      	b.n	800aca6 <__hi0bits+0xc>
 800acd4:	2020      	movs	r0, #32
 800acd6:	4770      	bx	lr

0800acd8 <__lo0bits>:
 800acd8:	6803      	ldr	r3, [r0, #0]
 800acda:	f013 0207 	ands.w	r2, r3, #7
 800acde:	4601      	mov	r1, r0
 800ace0:	d00b      	beq.n	800acfa <__lo0bits+0x22>
 800ace2:	07da      	lsls	r2, r3, #31
 800ace4:	d423      	bmi.n	800ad2e <__lo0bits+0x56>
 800ace6:	0798      	lsls	r0, r3, #30
 800ace8:	bf49      	itett	mi
 800acea:	085b      	lsrmi	r3, r3, #1
 800acec:	089b      	lsrpl	r3, r3, #2
 800acee:	2001      	movmi	r0, #1
 800acf0:	600b      	strmi	r3, [r1, #0]
 800acf2:	bf5c      	itt	pl
 800acf4:	600b      	strpl	r3, [r1, #0]
 800acf6:	2002      	movpl	r0, #2
 800acf8:	4770      	bx	lr
 800acfa:	b298      	uxth	r0, r3
 800acfc:	b9a8      	cbnz	r0, 800ad2a <__lo0bits+0x52>
 800acfe:	0c1b      	lsrs	r3, r3, #16
 800ad00:	2010      	movs	r0, #16
 800ad02:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad06:	bf04      	itt	eq
 800ad08:	0a1b      	lsreq	r3, r3, #8
 800ad0a:	3008      	addeq	r0, #8
 800ad0c:	071a      	lsls	r2, r3, #28
 800ad0e:	bf04      	itt	eq
 800ad10:	091b      	lsreq	r3, r3, #4
 800ad12:	3004      	addeq	r0, #4
 800ad14:	079a      	lsls	r2, r3, #30
 800ad16:	bf04      	itt	eq
 800ad18:	089b      	lsreq	r3, r3, #2
 800ad1a:	3002      	addeq	r0, #2
 800ad1c:	07da      	lsls	r2, r3, #31
 800ad1e:	d402      	bmi.n	800ad26 <__lo0bits+0x4e>
 800ad20:	085b      	lsrs	r3, r3, #1
 800ad22:	d006      	beq.n	800ad32 <__lo0bits+0x5a>
 800ad24:	3001      	adds	r0, #1
 800ad26:	600b      	str	r3, [r1, #0]
 800ad28:	4770      	bx	lr
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	e7e9      	b.n	800ad02 <__lo0bits+0x2a>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	4770      	bx	lr
 800ad32:	2020      	movs	r0, #32
 800ad34:	4770      	bx	lr

0800ad36 <__i2b>:
 800ad36:	b510      	push	{r4, lr}
 800ad38:	460c      	mov	r4, r1
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	f7ff fee9 	bl	800ab12 <_Balloc>
 800ad40:	2201      	movs	r2, #1
 800ad42:	6144      	str	r4, [r0, #20]
 800ad44:	6102      	str	r2, [r0, #16]
 800ad46:	bd10      	pop	{r4, pc}

0800ad48 <__multiply>:
 800ad48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	4614      	mov	r4, r2
 800ad4e:	690a      	ldr	r2, [r1, #16]
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	bfb8      	it	lt
 800ad56:	460b      	movlt	r3, r1
 800ad58:	4688      	mov	r8, r1
 800ad5a:	bfbc      	itt	lt
 800ad5c:	46a0      	movlt	r8, r4
 800ad5e:	461c      	movlt	r4, r3
 800ad60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad70:	eb07 0609 	add.w	r6, r7, r9
 800ad74:	42b3      	cmp	r3, r6
 800ad76:	bfb8      	it	lt
 800ad78:	3101      	addlt	r1, #1
 800ad7a:	f7ff feca 	bl	800ab12 <_Balloc>
 800ad7e:	f100 0514 	add.w	r5, r0, #20
 800ad82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ad86:	462b      	mov	r3, r5
 800ad88:	2200      	movs	r2, #0
 800ad8a:	4573      	cmp	r3, lr
 800ad8c:	d316      	bcc.n	800adbc <__multiply+0x74>
 800ad8e:	f104 0214 	add.w	r2, r4, #20
 800ad92:	f108 0114 	add.w	r1, r8, #20
 800ad96:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ad9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	9b00      	ldr	r3, [sp, #0]
 800ada2:	9201      	str	r2, [sp, #4]
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d80c      	bhi.n	800adc2 <__multiply+0x7a>
 800ada8:	2e00      	cmp	r6, #0
 800adaa:	dd03      	ble.n	800adb4 <__multiply+0x6c>
 800adac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d05d      	beq.n	800ae70 <__multiply+0x128>
 800adb4:	6106      	str	r6, [r0, #16]
 800adb6:	b003      	add	sp, #12
 800adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbc:	f843 2b04 	str.w	r2, [r3], #4
 800adc0:	e7e3      	b.n	800ad8a <__multiply+0x42>
 800adc2:	f8b2 b000 	ldrh.w	fp, [r2]
 800adc6:	f1bb 0f00 	cmp.w	fp, #0
 800adca:	d023      	beq.n	800ae14 <__multiply+0xcc>
 800adcc:	4689      	mov	r9, r1
 800adce:	46ac      	mov	ip, r5
 800add0:	f04f 0800 	mov.w	r8, #0
 800add4:	f859 4b04 	ldr.w	r4, [r9], #4
 800add8:	f8dc a000 	ldr.w	sl, [ip]
 800addc:	b2a3      	uxth	r3, r4
 800adde:	fa1f fa8a 	uxth.w	sl, sl
 800ade2:	fb0b a303 	mla	r3, fp, r3, sl
 800ade6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800adea:	f8dc 4000 	ldr.w	r4, [ip]
 800adee:	4443      	add	r3, r8
 800adf0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800adf4:	fb0b 840a 	mla	r4, fp, sl, r8
 800adf8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800adfc:	46e2      	mov	sl, ip
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae04:	454f      	cmp	r7, r9
 800ae06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae0a:	f84a 3b04 	str.w	r3, [sl], #4
 800ae0e:	d82b      	bhi.n	800ae68 <__multiply+0x120>
 800ae10:	f8cc 8004 	str.w	r8, [ip, #4]
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ae1a:	3204      	adds	r2, #4
 800ae1c:	f1ba 0f00 	cmp.w	sl, #0
 800ae20:	d020      	beq.n	800ae64 <__multiply+0x11c>
 800ae22:	682b      	ldr	r3, [r5, #0]
 800ae24:	4689      	mov	r9, r1
 800ae26:	46a8      	mov	r8, r5
 800ae28:	f04f 0b00 	mov.w	fp, #0
 800ae2c:	f8b9 c000 	ldrh.w	ip, [r9]
 800ae30:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ae34:	fb0a 440c 	mla	r4, sl, ip, r4
 800ae38:	445c      	add	r4, fp
 800ae3a:	46c4      	mov	ip, r8
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae42:	f84c 3b04 	str.w	r3, [ip], #4
 800ae46:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae4a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ae4e:	0c1b      	lsrs	r3, r3, #16
 800ae50:	fb0a b303 	mla	r3, sl, r3, fp
 800ae54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ae58:	454f      	cmp	r7, r9
 800ae5a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ae5e:	d805      	bhi.n	800ae6c <__multiply+0x124>
 800ae60:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae64:	3504      	adds	r5, #4
 800ae66:	e79b      	b.n	800ada0 <__multiply+0x58>
 800ae68:	46d4      	mov	ip, sl
 800ae6a:	e7b3      	b.n	800add4 <__multiply+0x8c>
 800ae6c:	46e0      	mov	r8, ip
 800ae6e:	e7dd      	b.n	800ae2c <__multiply+0xe4>
 800ae70:	3e01      	subs	r6, #1
 800ae72:	e799      	b.n	800ada8 <__multiply+0x60>

0800ae74 <__pow5mult>:
 800ae74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	4615      	mov	r5, r2
 800ae7a:	f012 0203 	ands.w	r2, r2, #3
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	d007      	beq.n	800ae94 <__pow5mult+0x20>
 800ae84:	3a01      	subs	r2, #1
 800ae86:	4c21      	ldr	r4, [pc, #132]	; (800af0c <__pow5mult+0x98>)
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae8e:	f7ff fe8b 	bl	800aba8 <__multadd>
 800ae92:	4607      	mov	r7, r0
 800ae94:	10ad      	asrs	r5, r5, #2
 800ae96:	d035      	beq.n	800af04 <__pow5mult+0x90>
 800ae98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae9a:	b93c      	cbnz	r4, 800aeac <__pow5mult+0x38>
 800ae9c:	2010      	movs	r0, #16
 800ae9e:	f7ff fe13 	bl	800aac8 <malloc>
 800aea2:	6270      	str	r0, [r6, #36]	; 0x24
 800aea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aea8:	6004      	str	r4, [r0, #0]
 800aeaa:	60c4      	str	r4, [r0, #12]
 800aeac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aeb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aeb4:	b94c      	cbnz	r4, 800aeca <__pow5mult+0x56>
 800aeb6:	f240 2171 	movw	r1, #625	; 0x271
 800aeba:	4630      	mov	r0, r6
 800aebc:	f7ff ff3b 	bl	800ad36 <__i2b>
 800aec0:	2300      	movs	r3, #0
 800aec2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aec6:	4604      	mov	r4, r0
 800aec8:	6003      	str	r3, [r0, #0]
 800aeca:	f04f 0800 	mov.w	r8, #0
 800aece:	07eb      	lsls	r3, r5, #31
 800aed0:	d50a      	bpl.n	800aee8 <__pow5mult+0x74>
 800aed2:	4639      	mov	r1, r7
 800aed4:	4622      	mov	r2, r4
 800aed6:	4630      	mov	r0, r6
 800aed8:	f7ff ff36 	bl	800ad48 <__multiply>
 800aedc:	4639      	mov	r1, r7
 800aede:	4681      	mov	r9, r0
 800aee0:	4630      	mov	r0, r6
 800aee2:	f7ff fe4a 	bl	800ab7a <_Bfree>
 800aee6:	464f      	mov	r7, r9
 800aee8:	106d      	asrs	r5, r5, #1
 800aeea:	d00b      	beq.n	800af04 <__pow5mult+0x90>
 800aeec:	6820      	ldr	r0, [r4, #0]
 800aeee:	b938      	cbnz	r0, 800af00 <__pow5mult+0x8c>
 800aef0:	4622      	mov	r2, r4
 800aef2:	4621      	mov	r1, r4
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff ff27 	bl	800ad48 <__multiply>
 800aefa:	6020      	str	r0, [r4, #0]
 800aefc:	f8c0 8000 	str.w	r8, [r0]
 800af00:	4604      	mov	r4, r0
 800af02:	e7e4      	b.n	800aece <__pow5mult+0x5a>
 800af04:	4638      	mov	r0, r7
 800af06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af0a:	bf00      	nop
 800af0c:	0800c220 	.word	0x0800c220

0800af10 <__lshift>:
 800af10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af14:	460c      	mov	r4, r1
 800af16:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af1a:	6923      	ldr	r3, [r4, #16]
 800af1c:	6849      	ldr	r1, [r1, #4]
 800af1e:	eb0a 0903 	add.w	r9, sl, r3
 800af22:	68a3      	ldr	r3, [r4, #8]
 800af24:	4607      	mov	r7, r0
 800af26:	4616      	mov	r6, r2
 800af28:	f109 0501 	add.w	r5, r9, #1
 800af2c:	42ab      	cmp	r3, r5
 800af2e:	db32      	blt.n	800af96 <__lshift+0x86>
 800af30:	4638      	mov	r0, r7
 800af32:	f7ff fdee 	bl	800ab12 <_Balloc>
 800af36:	2300      	movs	r3, #0
 800af38:	4680      	mov	r8, r0
 800af3a:	f100 0114 	add.w	r1, r0, #20
 800af3e:	461a      	mov	r2, r3
 800af40:	4553      	cmp	r3, sl
 800af42:	db2b      	blt.n	800af9c <__lshift+0x8c>
 800af44:	6920      	ldr	r0, [r4, #16]
 800af46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af4a:	f104 0314 	add.w	r3, r4, #20
 800af4e:	f016 021f 	ands.w	r2, r6, #31
 800af52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af5a:	d025      	beq.n	800afa8 <__lshift+0x98>
 800af5c:	f1c2 0e20 	rsb	lr, r2, #32
 800af60:	2000      	movs	r0, #0
 800af62:	681e      	ldr	r6, [r3, #0]
 800af64:	468a      	mov	sl, r1
 800af66:	4096      	lsls	r6, r2
 800af68:	4330      	orrs	r0, r6
 800af6a:	f84a 0b04 	str.w	r0, [sl], #4
 800af6e:	f853 0b04 	ldr.w	r0, [r3], #4
 800af72:	459c      	cmp	ip, r3
 800af74:	fa20 f00e 	lsr.w	r0, r0, lr
 800af78:	d814      	bhi.n	800afa4 <__lshift+0x94>
 800af7a:	6048      	str	r0, [r1, #4]
 800af7c:	b108      	cbz	r0, 800af82 <__lshift+0x72>
 800af7e:	f109 0502 	add.w	r5, r9, #2
 800af82:	3d01      	subs	r5, #1
 800af84:	4638      	mov	r0, r7
 800af86:	f8c8 5010 	str.w	r5, [r8, #16]
 800af8a:	4621      	mov	r1, r4
 800af8c:	f7ff fdf5 	bl	800ab7a <_Bfree>
 800af90:	4640      	mov	r0, r8
 800af92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af96:	3101      	adds	r1, #1
 800af98:	005b      	lsls	r3, r3, #1
 800af9a:	e7c7      	b.n	800af2c <__lshift+0x1c>
 800af9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800afa0:	3301      	adds	r3, #1
 800afa2:	e7cd      	b.n	800af40 <__lshift+0x30>
 800afa4:	4651      	mov	r1, sl
 800afa6:	e7dc      	b.n	800af62 <__lshift+0x52>
 800afa8:	3904      	subs	r1, #4
 800afaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800afae:	f841 2f04 	str.w	r2, [r1, #4]!
 800afb2:	459c      	cmp	ip, r3
 800afb4:	d8f9      	bhi.n	800afaa <__lshift+0x9a>
 800afb6:	e7e4      	b.n	800af82 <__lshift+0x72>

0800afb8 <__mcmp>:
 800afb8:	6903      	ldr	r3, [r0, #16]
 800afba:	690a      	ldr	r2, [r1, #16]
 800afbc:	1a9b      	subs	r3, r3, r2
 800afbe:	b530      	push	{r4, r5, lr}
 800afc0:	d10c      	bne.n	800afdc <__mcmp+0x24>
 800afc2:	0092      	lsls	r2, r2, #2
 800afc4:	3014      	adds	r0, #20
 800afc6:	3114      	adds	r1, #20
 800afc8:	1884      	adds	r4, r0, r2
 800afca:	4411      	add	r1, r2
 800afcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afd4:	4295      	cmp	r5, r2
 800afd6:	d003      	beq.n	800afe0 <__mcmp+0x28>
 800afd8:	d305      	bcc.n	800afe6 <__mcmp+0x2e>
 800afda:	2301      	movs	r3, #1
 800afdc:	4618      	mov	r0, r3
 800afde:	bd30      	pop	{r4, r5, pc}
 800afe0:	42a0      	cmp	r0, r4
 800afe2:	d3f3      	bcc.n	800afcc <__mcmp+0x14>
 800afe4:	e7fa      	b.n	800afdc <__mcmp+0x24>
 800afe6:	f04f 33ff 	mov.w	r3, #4294967295
 800afea:	e7f7      	b.n	800afdc <__mcmp+0x24>

0800afec <__mdiff>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	460d      	mov	r5, r1
 800aff2:	4607      	mov	r7, r0
 800aff4:	4611      	mov	r1, r2
 800aff6:	4628      	mov	r0, r5
 800aff8:	4614      	mov	r4, r2
 800affa:	f7ff ffdd 	bl	800afb8 <__mcmp>
 800affe:	1e06      	subs	r6, r0, #0
 800b000:	d108      	bne.n	800b014 <__mdiff+0x28>
 800b002:	4631      	mov	r1, r6
 800b004:	4638      	mov	r0, r7
 800b006:	f7ff fd84 	bl	800ab12 <_Balloc>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b014:	bfa4      	itt	ge
 800b016:	4623      	movge	r3, r4
 800b018:	462c      	movge	r4, r5
 800b01a:	4638      	mov	r0, r7
 800b01c:	6861      	ldr	r1, [r4, #4]
 800b01e:	bfa6      	itte	ge
 800b020:	461d      	movge	r5, r3
 800b022:	2600      	movge	r6, #0
 800b024:	2601      	movlt	r6, #1
 800b026:	f7ff fd74 	bl	800ab12 <_Balloc>
 800b02a:	692b      	ldr	r3, [r5, #16]
 800b02c:	60c6      	str	r6, [r0, #12]
 800b02e:	6926      	ldr	r6, [r4, #16]
 800b030:	f105 0914 	add.w	r9, r5, #20
 800b034:	f104 0214 	add.w	r2, r4, #20
 800b038:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b03c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b040:	f100 0514 	add.w	r5, r0, #20
 800b044:	f04f 0e00 	mov.w	lr, #0
 800b048:	f852 ab04 	ldr.w	sl, [r2], #4
 800b04c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b050:	fa1e f18a 	uxtah	r1, lr, sl
 800b054:	b2a3      	uxth	r3, r4
 800b056:	1ac9      	subs	r1, r1, r3
 800b058:	0c23      	lsrs	r3, r4, #16
 800b05a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b05e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b062:	b289      	uxth	r1, r1
 800b064:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b068:	45c8      	cmp	r8, r9
 800b06a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b06e:	4694      	mov	ip, r2
 800b070:	f845 3b04 	str.w	r3, [r5], #4
 800b074:	d8e8      	bhi.n	800b048 <__mdiff+0x5c>
 800b076:	45bc      	cmp	ip, r7
 800b078:	d304      	bcc.n	800b084 <__mdiff+0x98>
 800b07a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b07e:	b183      	cbz	r3, 800b0a2 <__mdiff+0xb6>
 800b080:	6106      	str	r6, [r0, #16]
 800b082:	e7c5      	b.n	800b010 <__mdiff+0x24>
 800b084:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b088:	fa1e f381 	uxtah	r3, lr, r1
 800b08c:	141a      	asrs	r2, r3, #16
 800b08e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b092:	b29b      	uxth	r3, r3
 800b094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b098:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b09c:	f845 3b04 	str.w	r3, [r5], #4
 800b0a0:	e7e9      	b.n	800b076 <__mdiff+0x8a>
 800b0a2:	3e01      	subs	r6, #1
 800b0a4:	e7e9      	b.n	800b07a <__mdiff+0x8e>
	...

0800b0a8 <__ulp>:
 800b0a8:	4b12      	ldr	r3, [pc, #72]	; (800b0f4 <__ulp+0x4c>)
 800b0aa:	ee10 2a90 	vmov	r2, s1
 800b0ae:	401a      	ands	r2, r3
 800b0b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dd04      	ble.n	800b0c2 <__ulp+0x1a>
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	ec41 0b10 	vmov	d0, r0, r1
 800b0c0:	4770      	bx	lr
 800b0c2:	425b      	negs	r3, r3
 800b0c4:	151b      	asrs	r3, r3, #20
 800b0c6:	2b13      	cmp	r3, #19
 800b0c8:	f04f 0000 	mov.w	r0, #0
 800b0cc:	f04f 0100 	mov.w	r1, #0
 800b0d0:	dc04      	bgt.n	800b0dc <__ulp+0x34>
 800b0d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0d6:	fa42 f103 	asr.w	r1, r2, r3
 800b0da:	e7ef      	b.n	800b0bc <__ulp+0x14>
 800b0dc:	3b14      	subs	r3, #20
 800b0de:	2b1e      	cmp	r3, #30
 800b0e0:	f04f 0201 	mov.w	r2, #1
 800b0e4:	bfda      	itte	le
 800b0e6:	f1c3 031f 	rsble	r3, r3, #31
 800b0ea:	fa02 f303 	lslle.w	r3, r2, r3
 800b0ee:	4613      	movgt	r3, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	e7e3      	b.n	800b0bc <__ulp+0x14>
 800b0f4:	7ff00000 	.word	0x7ff00000

0800b0f8 <__b2d>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	6905      	ldr	r5, [r0, #16]
 800b0fc:	f100 0714 	add.w	r7, r0, #20
 800b100:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b104:	1f2e      	subs	r6, r5, #4
 800b106:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b10a:	4620      	mov	r0, r4
 800b10c:	f7ff fdc5 	bl	800ac9a <__hi0bits>
 800b110:	f1c0 0320 	rsb	r3, r0, #32
 800b114:	280a      	cmp	r0, #10
 800b116:	600b      	str	r3, [r1, #0]
 800b118:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b190 <__b2d+0x98>
 800b11c:	dc14      	bgt.n	800b148 <__b2d+0x50>
 800b11e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b122:	fa24 f10e 	lsr.w	r1, r4, lr
 800b126:	42b7      	cmp	r7, r6
 800b128:	ea41 030c 	orr.w	r3, r1, ip
 800b12c:	bf34      	ite	cc
 800b12e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b132:	2100      	movcs	r1, #0
 800b134:	3015      	adds	r0, #21
 800b136:	fa04 f000 	lsl.w	r0, r4, r0
 800b13a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b13e:	ea40 0201 	orr.w	r2, r0, r1
 800b142:	ec43 2b10 	vmov	d0, r2, r3
 800b146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b148:	42b7      	cmp	r7, r6
 800b14a:	bf3a      	itte	cc
 800b14c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b150:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b154:	2100      	movcs	r1, #0
 800b156:	380b      	subs	r0, #11
 800b158:	d015      	beq.n	800b186 <__b2d+0x8e>
 800b15a:	4084      	lsls	r4, r0
 800b15c:	f1c0 0520 	rsb	r5, r0, #32
 800b160:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b164:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b168:	42be      	cmp	r6, r7
 800b16a:	fa21 fc05 	lsr.w	ip, r1, r5
 800b16e:	ea44 030c 	orr.w	r3, r4, ip
 800b172:	bf8c      	ite	hi
 800b174:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b178:	2400      	movls	r4, #0
 800b17a:	fa01 f000 	lsl.w	r0, r1, r0
 800b17e:	40ec      	lsrs	r4, r5
 800b180:	ea40 0204 	orr.w	r2, r0, r4
 800b184:	e7dd      	b.n	800b142 <__b2d+0x4a>
 800b186:	ea44 030c 	orr.w	r3, r4, ip
 800b18a:	460a      	mov	r2, r1
 800b18c:	e7d9      	b.n	800b142 <__b2d+0x4a>
 800b18e:	bf00      	nop
 800b190:	3ff00000 	.word	0x3ff00000

0800b194 <__d2b>:
 800b194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b198:	460e      	mov	r6, r1
 800b19a:	2101      	movs	r1, #1
 800b19c:	ec59 8b10 	vmov	r8, r9, d0
 800b1a0:	4615      	mov	r5, r2
 800b1a2:	f7ff fcb6 	bl	800ab12 <_Balloc>
 800b1a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1b0:	bb34      	cbnz	r4, 800b200 <__d2b+0x6c>
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	f1b8 0300 	subs.w	r3, r8, #0
 800b1b8:	d027      	beq.n	800b20a <__d2b+0x76>
 800b1ba:	a802      	add	r0, sp, #8
 800b1bc:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b1c0:	f7ff fd8a 	bl	800acd8 <__lo0bits>
 800b1c4:	9900      	ldr	r1, [sp, #0]
 800b1c6:	b1f0      	cbz	r0, 800b206 <__d2b+0x72>
 800b1c8:	9a01      	ldr	r2, [sp, #4]
 800b1ca:	f1c0 0320 	rsb	r3, r0, #32
 800b1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d2:	430b      	orrs	r3, r1
 800b1d4:	40c2      	lsrs	r2, r0
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	9201      	str	r2, [sp, #4]
 800b1da:	9b01      	ldr	r3, [sp, #4]
 800b1dc:	61bb      	str	r3, [r7, #24]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	bf14      	ite	ne
 800b1e2:	2102      	movne	r1, #2
 800b1e4:	2101      	moveq	r1, #1
 800b1e6:	6139      	str	r1, [r7, #16]
 800b1e8:	b1c4      	cbz	r4, 800b21c <__d2b+0x88>
 800b1ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b1ee:	4404      	add	r4, r0
 800b1f0:	6034      	str	r4, [r6, #0]
 800b1f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1f6:	6028      	str	r0, [r5, #0]
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	b003      	add	sp, #12
 800b1fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b204:	e7d5      	b.n	800b1b2 <__d2b+0x1e>
 800b206:	6179      	str	r1, [r7, #20]
 800b208:	e7e7      	b.n	800b1da <__d2b+0x46>
 800b20a:	a801      	add	r0, sp, #4
 800b20c:	f7ff fd64 	bl	800acd8 <__lo0bits>
 800b210:	9b01      	ldr	r3, [sp, #4]
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	2101      	movs	r1, #1
 800b216:	6139      	str	r1, [r7, #16]
 800b218:	3020      	adds	r0, #32
 800b21a:	e7e5      	b.n	800b1e8 <__d2b+0x54>
 800b21c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b220:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b224:	6030      	str	r0, [r6, #0]
 800b226:	6918      	ldr	r0, [r3, #16]
 800b228:	f7ff fd37 	bl	800ac9a <__hi0bits>
 800b22c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b230:	e7e1      	b.n	800b1f6 <__d2b+0x62>

0800b232 <__ratio>:
 800b232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b236:	4688      	mov	r8, r1
 800b238:	4669      	mov	r1, sp
 800b23a:	4681      	mov	r9, r0
 800b23c:	f7ff ff5c 	bl	800b0f8 <__b2d>
 800b240:	a901      	add	r1, sp, #4
 800b242:	4640      	mov	r0, r8
 800b244:	ec57 6b10 	vmov	r6, r7, d0
 800b248:	f7ff ff56 	bl	800b0f8 <__b2d>
 800b24c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b250:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b254:	eba3 0c02 	sub.w	ip, r3, r2
 800b258:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b25c:	1a9b      	subs	r3, r3, r2
 800b25e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b262:	ec5b ab10 	vmov	sl, fp, d0
 800b266:	2b00      	cmp	r3, #0
 800b268:	bfce      	itee	gt
 800b26a:	463a      	movgt	r2, r7
 800b26c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b270:	465a      	movle	r2, fp
 800b272:	4659      	mov	r1, fp
 800b274:	463d      	mov	r5, r7
 800b276:	bfd4      	ite	le
 800b278:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b27c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b280:	4630      	mov	r0, r6
 800b282:	ee10 2a10 	vmov	r2, s0
 800b286:	460b      	mov	r3, r1
 800b288:	4629      	mov	r1, r5
 800b28a:	f7f5 fadf 	bl	800084c <__aeabi_ddiv>
 800b28e:	ec41 0b10 	vmov	d0, r0, r1
 800b292:	b003      	add	sp, #12
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b298 <__copybits>:
 800b298:	3901      	subs	r1, #1
 800b29a:	b510      	push	{r4, lr}
 800b29c:	1149      	asrs	r1, r1, #5
 800b29e:	6914      	ldr	r4, [r2, #16]
 800b2a0:	3101      	adds	r1, #1
 800b2a2:	f102 0314 	add.w	r3, r2, #20
 800b2a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	d303      	bcc.n	800b2bc <__copybits+0x24>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	428a      	cmp	r2, r1
 800b2b8:	d305      	bcc.n	800b2c6 <__copybits+0x2e>
 800b2ba:	bd10      	pop	{r4, pc}
 800b2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c0:	f840 2b04 	str.w	r2, [r0], #4
 800b2c4:	e7f3      	b.n	800b2ae <__copybits+0x16>
 800b2c6:	f842 3b04 	str.w	r3, [r2], #4
 800b2ca:	e7f4      	b.n	800b2b6 <__copybits+0x1e>

0800b2cc <__any_on>:
 800b2cc:	f100 0214 	add.w	r2, r0, #20
 800b2d0:	6900      	ldr	r0, [r0, #16]
 800b2d2:	114b      	asrs	r3, r1, #5
 800b2d4:	4298      	cmp	r0, r3
 800b2d6:	b510      	push	{r4, lr}
 800b2d8:	db11      	blt.n	800b2fe <__any_on+0x32>
 800b2da:	dd0a      	ble.n	800b2f2 <__any_on+0x26>
 800b2dc:	f011 011f 	ands.w	r1, r1, #31
 800b2e0:	d007      	beq.n	800b2f2 <__any_on+0x26>
 800b2e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b2e6:	fa24 f001 	lsr.w	r0, r4, r1
 800b2ea:	fa00 f101 	lsl.w	r1, r0, r1
 800b2ee:	428c      	cmp	r4, r1
 800b2f0:	d10b      	bne.n	800b30a <__any_on+0x3e>
 800b2f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d803      	bhi.n	800b302 <__any_on+0x36>
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	bd10      	pop	{r4, pc}
 800b2fe:	4603      	mov	r3, r0
 800b300:	e7f7      	b.n	800b2f2 <__any_on+0x26>
 800b302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b306:	2900      	cmp	r1, #0
 800b308:	d0f5      	beq.n	800b2f6 <__any_on+0x2a>
 800b30a:	2001      	movs	r0, #1
 800b30c:	e7f6      	b.n	800b2fc <__any_on+0x30>

0800b30e <_calloc_r>:
 800b30e:	b538      	push	{r3, r4, r5, lr}
 800b310:	fb02 f401 	mul.w	r4, r2, r1
 800b314:	4621      	mov	r1, r4
 800b316:	f000 f857 	bl	800b3c8 <_malloc_r>
 800b31a:	4605      	mov	r5, r0
 800b31c:	b118      	cbz	r0, 800b326 <_calloc_r+0x18>
 800b31e:	4622      	mov	r2, r4
 800b320:	2100      	movs	r1, #0
 800b322:	f7fc fc53 	bl	8007bcc <memset>
 800b326:	4628      	mov	r0, r5
 800b328:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b32c <_free_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4605      	mov	r5, r0
 800b330:	2900      	cmp	r1, #0
 800b332:	d045      	beq.n	800b3c0 <_free_r+0x94>
 800b334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b338:	1f0c      	subs	r4, r1, #4
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	bfb8      	it	lt
 800b33e:	18e4      	addlt	r4, r4, r3
 800b340:	f000 fdc3 	bl	800beca <__malloc_lock>
 800b344:	4a1f      	ldr	r2, [pc, #124]	; (800b3c4 <_free_r+0x98>)
 800b346:	6813      	ldr	r3, [r2, #0]
 800b348:	4610      	mov	r0, r2
 800b34a:	b933      	cbnz	r3, 800b35a <_free_r+0x2e>
 800b34c:	6063      	str	r3, [r4, #4]
 800b34e:	6014      	str	r4, [r2, #0]
 800b350:	4628      	mov	r0, r5
 800b352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b356:	f000 bdb9 	b.w	800becc <__malloc_unlock>
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	d90c      	bls.n	800b378 <_free_r+0x4c>
 800b35e:	6821      	ldr	r1, [r4, #0]
 800b360:	1862      	adds	r2, r4, r1
 800b362:	4293      	cmp	r3, r2
 800b364:	bf04      	itt	eq
 800b366:	681a      	ldreq	r2, [r3, #0]
 800b368:	685b      	ldreq	r3, [r3, #4]
 800b36a:	6063      	str	r3, [r4, #4]
 800b36c:	bf04      	itt	eq
 800b36e:	1852      	addeq	r2, r2, r1
 800b370:	6022      	streq	r2, [r4, #0]
 800b372:	6004      	str	r4, [r0, #0]
 800b374:	e7ec      	b.n	800b350 <_free_r+0x24>
 800b376:	4613      	mov	r3, r2
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	b10a      	cbz	r2, 800b380 <_free_r+0x54>
 800b37c:	42a2      	cmp	r2, r4
 800b37e:	d9fa      	bls.n	800b376 <_free_r+0x4a>
 800b380:	6819      	ldr	r1, [r3, #0]
 800b382:	1858      	adds	r0, r3, r1
 800b384:	42a0      	cmp	r0, r4
 800b386:	d10b      	bne.n	800b3a0 <_free_r+0x74>
 800b388:	6820      	ldr	r0, [r4, #0]
 800b38a:	4401      	add	r1, r0
 800b38c:	1858      	adds	r0, r3, r1
 800b38e:	4282      	cmp	r2, r0
 800b390:	6019      	str	r1, [r3, #0]
 800b392:	d1dd      	bne.n	800b350 <_free_r+0x24>
 800b394:	6810      	ldr	r0, [r2, #0]
 800b396:	6852      	ldr	r2, [r2, #4]
 800b398:	605a      	str	r2, [r3, #4]
 800b39a:	4401      	add	r1, r0
 800b39c:	6019      	str	r1, [r3, #0]
 800b39e:	e7d7      	b.n	800b350 <_free_r+0x24>
 800b3a0:	d902      	bls.n	800b3a8 <_free_r+0x7c>
 800b3a2:	230c      	movs	r3, #12
 800b3a4:	602b      	str	r3, [r5, #0]
 800b3a6:	e7d3      	b.n	800b350 <_free_r+0x24>
 800b3a8:	6820      	ldr	r0, [r4, #0]
 800b3aa:	1821      	adds	r1, r4, r0
 800b3ac:	428a      	cmp	r2, r1
 800b3ae:	bf04      	itt	eq
 800b3b0:	6811      	ldreq	r1, [r2, #0]
 800b3b2:	6852      	ldreq	r2, [r2, #4]
 800b3b4:	6062      	str	r2, [r4, #4]
 800b3b6:	bf04      	itt	eq
 800b3b8:	1809      	addeq	r1, r1, r0
 800b3ba:	6021      	streq	r1, [r4, #0]
 800b3bc:	605c      	str	r4, [r3, #4]
 800b3be:	e7c7      	b.n	800b350 <_free_r+0x24>
 800b3c0:	bd38      	pop	{r3, r4, r5, pc}
 800b3c2:	bf00      	nop
 800b3c4:	2000020c 	.word	0x2000020c

0800b3c8 <_malloc_r>:
 800b3c8:	b570      	push	{r4, r5, r6, lr}
 800b3ca:	1ccd      	adds	r5, r1, #3
 800b3cc:	f025 0503 	bic.w	r5, r5, #3
 800b3d0:	3508      	adds	r5, #8
 800b3d2:	2d0c      	cmp	r5, #12
 800b3d4:	bf38      	it	cc
 800b3d6:	250c      	movcc	r5, #12
 800b3d8:	2d00      	cmp	r5, #0
 800b3da:	4606      	mov	r6, r0
 800b3dc:	db01      	blt.n	800b3e2 <_malloc_r+0x1a>
 800b3de:	42a9      	cmp	r1, r5
 800b3e0:	d903      	bls.n	800b3ea <_malloc_r+0x22>
 800b3e2:	230c      	movs	r3, #12
 800b3e4:	6033      	str	r3, [r6, #0]
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ea:	f000 fd6e 	bl	800beca <__malloc_lock>
 800b3ee:	4a21      	ldr	r2, [pc, #132]	; (800b474 <_malloc_r+0xac>)
 800b3f0:	6814      	ldr	r4, [r2, #0]
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	b991      	cbnz	r1, 800b41c <_malloc_r+0x54>
 800b3f6:	4c20      	ldr	r4, [pc, #128]	; (800b478 <_malloc_r+0xb0>)
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	b91b      	cbnz	r3, 800b404 <_malloc_r+0x3c>
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f000 facf 	bl	800b9a0 <_sbrk_r>
 800b402:	6020      	str	r0, [r4, #0]
 800b404:	4629      	mov	r1, r5
 800b406:	4630      	mov	r0, r6
 800b408:	f000 faca 	bl	800b9a0 <_sbrk_r>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d124      	bne.n	800b45a <_malloc_r+0x92>
 800b410:	230c      	movs	r3, #12
 800b412:	6033      	str	r3, [r6, #0]
 800b414:	4630      	mov	r0, r6
 800b416:	f000 fd59 	bl	800becc <__malloc_unlock>
 800b41a:	e7e4      	b.n	800b3e6 <_malloc_r+0x1e>
 800b41c:	680b      	ldr	r3, [r1, #0]
 800b41e:	1b5b      	subs	r3, r3, r5
 800b420:	d418      	bmi.n	800b454 <_malloc_r+0x8c>
 800b422:	2b0b      	cmp	r3, #11
 800b424:	d90f      	bls.n	800b446 <_malloc_r+0x7e>
 800b426:	600b      	str	r3, [r1, #0]
 800b428:	50cd      	str	r5, [r1, r3]
 800b42a:	18cc      	adds	r4, r1, r3
 800b42c:	4630      	mov	r0, r6
 800b42e:	f000 fd4d 	bl	800becc <__malloc_unlock>
 800b432:	f104 000b 	add.w	r0, r4, #11
 800b436:	1d23      	adds	r3, r4, #4
 800b438:	f020 0007 	bic.w	r0, r0, #7
 800b43c:	1ac3      	subs	r3, r0, r3
 800b43e:	d0d3      	beq.n	800b3e8 <_malloc_r+0x20>
 800b440:	425a      	negs	r2, r3
 800b442:	50e2      	str	r2, [r4, r3]
 800b444:	e7d0      	b.n	800b3e8 <_malloc_r+0x20>
 800b446:	428c      	cmp	r4, r1
 800b448:	684b      	ldr	r3, [r1, #4]
 800b44a:	bf16      	itet	ne
 800b44c:	6063      	strne	r3, [r4, #4]
 800b44e:	6013      	streq	r3, [r2, #0]
 800b450:	460c      	movne	r4, r1
 800b452:	e7eb      	b.n	800b42c <_malloc_r+0x64>
 800b454:	460c      	mov	r4, r1
 800b456:	6849      	ldr	r1, [r1, #4]
 800b458:	e7cc      	b.n	800b3f4 <_malloc_r+0x2c>
 800b45a:	1cc4      	adds	r4, r0, #3
 800b45c:	f024 0403 	bic.w	r4, r4, #3
 800b460:	42a0      	cmp	r0, r4
 800b462:	d005      	beq.n	800b470 <_malloc_r+0xa8>
 800b464:	1a21      	subs	r1, r4, r0
 800b466:	4630      	mov	r0, r6
 800b468:	f000 fa9a 	bl	800b9a0 <_sbrk_r>
 800b46c:	3001      	adds	r0, #1
 800b46e:	d0cf      	beq.n	800b410 <_malloc_r+0x48>
 800b470:	6025      	str	r5, [r4, #0]
 800b472:	e7db      	b.n	800b42c <_malloc_r+0x64>
 800b474:	2000020c 	.word	0x2000020c
 800b478:	20000210 	.word	0x20000210

0800b47c <__ssputs_r>:
 800b47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b480:	688e      	ldr	r6, [r1, #8]
 800b482:	429e      	cmp	r6, r3
 800b484:	4682      	mov	sl, r0
 800b486:	460c      	mov	r4, r1
 800b488:	4690      	mov	r8, r2
 800b48a:	4699      	mov	r9, r3
 800b48c:	d837      	bhi.n	800b4fe <__ssputs_r+0x82>
 800b48e:	898a      	ldrh	r2, [r1, #12]
 800b490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b494:	d031      	beq.n	800b4fa <__ssputs_r+0x7e>
 800b496:	6825      	ldr	r5, [r4, #0]
 800b498:	6909      	ldr	r1, [r1, #16]
 800b49a:	1a6f      	subs	r7, r5, r1
 800b49c:	6965      	ldr	r5, [r4, #20]
 800b49e:	2302      	movs	r3, #2
 800b4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b4a8:	f109 0301 	add.w	r3, r9, #1
 800b4ac:	443b      	add	r3, r7
 800b4ae:	429d      	cmp	r5, r3
 800b4b0:	bf38      	it	cc
 800b4b2:	461d      	movcc	r5, r3
 800b4b4:	0553      	lsls	r3, r2, #21
 800b4b6:	d530      	bpl.n	800b51a <__ssputs_r+0x9e>
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	f7ff ff85 	bl	800b3c8 <_malloc_r>
 800b4be:	4606      	mov	r6, r0
 800b4c0:	b950      	cbnz	r0, 800b4d8 <__ssputs_r+0x5c>
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	f8ca 3000 	str.w	r3, [sl]
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ce:	81a3      	strh	r3, [r4, #12]
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d8:	463a      	mov	r2, r7
 800b4da:	6921      	ldr	r1, [r4, #16]
 800b4dc:	f7ff fb0e 	bl	800aafc <memcpy>
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ea:	81a3      	strh	r3, [r4, #12]
 800b4ec:	6126      	str	r6, [r4, #16]
 800b4ee:	6165      	str	r5, [r4, #20]
 800b4f0:	443e      	add	r6, r7
 800b4f2:	1bed      	subs	r5, r5, r7
 800b4f4:	6026      	str	r6, [r4, #0]
 800b4f6:	60a5      	str	r5, [r4, #8]
 800b4f8:	464e      	mov	r6, r9
 800b4fa:	454e      	cmp	r6, r9
 800b4fc:	d900      	bls.n	800b500 <__ssputs_r+0x84>
 800b4fe:	464e      	mov	r6, r9
 800b500:	4632      	mov	r2, r6
 800b502:	4641      	mov	r1, r8
 800b504:	6820      	ldr	r0, [r4, #0]
 800b506:	f000 fcc7 	bl	800be98 <memmove>
 800b50a:	68a3      	ldr	r3, [r4, #8]
 800b50c:	1b9b      	subs	r3, r3, r6
 800b50e:	60a3      	str	r3, [r4, #8]
 800b510:	6823      	ldr	r3, [r4, #0]
 800b512:	441e      	add	r6, r3
 800b514:	6026      	str	r6, [r4, #0]
 800b516:	2000      	movs	r0, #0
 800b518:	e7dc      	b.n	800b4d4 <__ssputs_r+0x58>
 800b51a:	462a      	mov	r2, r5
 800b51c:	f000 fcd7 	bl	800bece <_realloc_r>
 800b520:	4606      	mov	r6, r0
 800b522:	2800      	cmp	r0, #0
 800b524:	d1e2      	bne.n	800b4ec <__ssputs_r+0x70>
 800b526:	6921      	ldr	r1, [r4, #16]
 800b528:	4650      	mov	r0, sl
 800b52a:	f7ff feff 	bl	800b32c <_free_r>
 800b52e:	e7c8      	b.n	800b4c2 <__ssputs_r+0x46>

0800b530 <_svfiprintf_r>:
 800b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	461d      	mov	r5, r3
 800b536:	898b      	ldrh	r3, [r1, #12]
 800b538:	061f      	lsls	r7, r3, #24
 800b53a:	b09d      	sub	sp, #116	; 0x74
 800b53c:	4680      	mov	r8, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	4616      	mov	r6, r2
 800b542:	d50f      	bpl.n	800b564 <_svfiprintf_r+0x34>
 800b544:	690b      	ldr	r3, [r1, #16]
 800b546:	b96b      	cbnz	r3, 800b564 <_svfiprintf_r+0x34>
 800b548:	2140      	movs	r1, #64	; 0x40
 800b54a:	f7ff ff3d 	bl	800b3c8 <_malloc_r>
 800b54e:	6020      	str	r0, [r4, #0]
 800b550:	6120      	str	r0, [r4, #16]
 800b552:	b928      	cbnz	r0, 800b560 <_svfiprintf_r+0x30>
 800b554:	230c      	movs	r3, #12
 800b556:	f8c8 3000 	str.w	r3, [r8]
 800b55a:	f04f 30ff 	mov.w	r0, #4294967295
 800b55e:	e0c8      	b.n	800b6f2 <_svfiprintf_r+0x1c2>
 800b560:	2340      	movs	r3, #64	; 0x40
 800b562:	6163      	str	r3, [r4, #20]
 800b564:	2300      	movs	r3, #0
 800b566:	9309      	str	r3, [sp, #36]	; 0x24
 800b568:	2320      	movs	r3, #32
 800b56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b56e:	2330      	movs	r3, #48	; 0x30
 800b570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b574:	9503      	str	r5, [sp, #12]
 800b576:	f04f 0b01 	mov.w	fp, #1
 800b57a:	4637      	mov	r7, r6
 800b57c:	463d      	mov	r5, r7
 800b57e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b582:	b10b      	cbz	r3, 800b588 <_svfiprintf_r+0x58>
 800b584:	2b25      	cmp	r3, #37	; 0x25
 800b586:	d13e      	bne.n	800b606 <_svfiprintf_r+0xd6>
 800b588:	ebb7 0a06 	subs.w	sl, r7, r6
 800b58c:	d00b      	beq.n	800b5a6 <_svfiprintf_r+0x76>
 800b58e:	4653      	mov	r3, sl
 800b590:	4632      	mov	r2, r6
 800b592:	4621      	mov	r1, r4
 800b594:	4640      	mov	r0, r8
 800b596:	f7ff ff71 	bl	800b47c <__ssputs_r>
 800b59a:	3001      	adds	r0, #1
 800b59c:	f000 80a4 	beq.w	800b6e8 <_svfiprintf_r+0x1b8>
 800b5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a2:	4453      	add	r3, sl
 800b5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a6:	783b      	ldrb	r3, [r7, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 809d 	beq.w	800b6e8 <_svfiprintf_r+0x1b8>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b8:	9304      	str	r3, [sp, #16]
 800b5ba:	9307      	str	r3, [sp, #28]
 800b5bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5c0:	931a      	str	r3, [sp, #104]	; 0x68
 800b5c2:	462f      	mov	r7, r5
 800b5c4:	2205      	movs	r2, #5
 800b5c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b5ca:	4850      	ldr	r0, [pc, #320]	; (800b70c <_svfiprintf_r+0x1dc>)
 800b5cc:	f7f4 fe08 	bl	80001e0 <memchr>
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	b9d0      	cbnz	r0, 800b60a <_svfiprintf_r+0xda>
 800b5d4:	06d9      	lsls	r1, r3, #27
 800b5d6:	bf44      	itt	mi
 800b5d8:	2220      	movmi	r2, #32
 800b5da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5de:	071a      	lsls	r2, r3, #28
 800b5e0:	bf44      	itt	mi
 800b5e2:	222b      	movmi	r2, #43	; 0x2b
 800b5e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5e8:	782a      	ldrb	r2, [r5, #0]
 800b5ea:	2a2a      	cmp	r2, #42	; 0x2a
 800b5ec:	d015      	beq.n	800b61a <_svfiprintf_r+0xea>
 800b5ee:	9a07      	ldr	r2, [sp, #28]
 800b5f0:	462f      	mov	r7, r5
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	250a      	movs	r5, #10
 800b5f6:	4639      	mov	r1, r7
 800b5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5fc:	3b30      	subs	r3, #48	; 0x30
 800b5fe:	2b09      	cmp	r3, #9
 800b600:	d94d      	bls.n	800b69e <_svfiprintf_r+0x16e>
 800b602:	b1b8      	cbz	r0, 800b634 <_svfiprintf_r+0x104>
 800b604:	e00f      	b.n	800b626 <_svfiprintf_r+0xf6>
 800b606:	462f      	mov	r7, r5
 800b608:	e7b8      	b.n	800b57c <_svfiprintf_r+0x4c>
 800b60a:	4a40      	ldr	r2, [pc, #256]	; (800b70c <_svfiprintf_r+0x1dc>)
 800b60c:	1a80      	subs	r0, r0, r2
 800b60e:	fa0b f000 	lsl.w	r0, fp, r0
 800b612:	4318      	orrs	r0, r3
 800b614:	9004      	str	r0, [sp, #16]
 800b616:	463d      	mov	r5, r7
 800b618:	e7d3      	b.n	800b5c2 <_svfiprintf_r+0x92>
 800b61a:	9a03      	ldr	r2, [sp, #12]
 800b61c:	1d11      	adds	r1, r2, #4
 800b61e:	6812      	ldr	r2, [r2, #0]
 800b620:	9103      	str	r1, [sp, #12]
 800b622:	2a00      	cmp	r2, #0
 800b624:	db01      	blt.n	800b62a <_svfiprintf_r+0xfa>
 800b626:	9207      	str	r2, [sp, #28]
 800b628:	e004      	b.n	800b634 <_svfiprintf_r+0x104>
 800b62a:	4252      	negs	r2, r2
 800b62c:	f043 0302 	orr.w	r3, r3, #2
 800b630:	9207      	str	r2, [sp, #28]
 800b632:	9304      	str	r3, [sp, #16]
 800b634:	783b      	ldrb	r3, [r7, #0]
 800b636:	2b2e      	cmp	r3, #46	; 0x2e
 800b638:	d10c      	bne.n	800b654 <_svfiprintf_r+0x124>
 800b63a:	787b      	ldrb	r3, [r7, #1]
 800b63c:	2b2a      	cmp	r3, #42	; 0x2a
 800b63e:	d133      	bne.n	800b6a8 <_svfiprintf_r+0x178>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	1d1a      	adds	r2, r3, #4
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	9203      	str	r2, [sp, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bfb8      	it	lt
 800b64c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b650:	3702      	adds	r7, #2
 800b652:	9305      	str	r3, [sp, #20]
 800b654:	4d2e      	ldr	r5, [pc, #184]	; (800b710 <_svfiprintf_r+0x1e0>)
 800b656:	7839      	ldrb	r1, [r7, #0]
 800b658:	2203      	movs	r2, #3
 800b65a:	4628      	mov	r0, r5
 800b65c:	f7f4 fdc0 	bl	80001e0 <memchr>
 800b660:	b138      	cbz	r0, 800b672 <_svfiprintf_r+0x142>
 800b662:	2340      	movs	r3, #64	; 0x40
 800b664:	1b40      	subs	r0, r0, r5
 800b666:	fa03 f000 	lsl.w	r0, r3, r0
 800b66a:	9b04      	ldr	r3, [sp, #16]
 800b66c:	4303      	orrs	r3, r0
 800b66e:	3701      	adds	r7, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	7839      	ldrb	r1, [r7, #0]
 800b674:	4827      	ldr	r0, [pc, #156]	; (800b714 <_svfiprintf_r+0x1e4>)
 800b676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b67a:	2206      	movs	r2, #6
 800b67c:	1c7e      	adds	r6, r7, #1
 800b67e:	f7f4 fdaf 	bl	80001e0 <memchr>
 800b682:	2800      	cmp	r0, #0
 800b684:	d038      	beq.n	800b6f8 <_svfiprintf_r+0x1c8>
 800b686:	4b24      	ldr	r3, [pc, #144]	; (800b718 <_svfiprintf_r+0x1e8>)
 800b688:	bb13      	cbnz	r3, 800b6d0 <_svfiprintf_r+0x1a0>
 800b68a:	9b03      	ldr	r3, [sp, #12]
 800b68c:	3307      	adds	r3, #7
 800b68e:	f023 0307 	bic.w	r3, r3, #7
 800b692:	3308      	adds	r3, #8
 800b694:	9303      	str	r3, [sp, #12]
 800b696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b698:	444b      	add	r3, r9
 800b69a:	9309      	str	r3, [sp, #36]	; 0x24
 800b69c:	e76d      	b.n	800b57a <_svfiprintf_r+0x4a>
 800b69e:	fb05 3202 	mla	r2, r5, r2, r3
 800b6a2:	2001      	movs	r0, #1
 800b6a4:	460f      	mov	r7, r1
 800b6a6:	e7a6      	b.n	800b5f6 <_svfiprintf_r+0xc6>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	3701      	adds	r7, #1
 800b6ac:	9305      	str	r3, [sp, #20]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	250a      	movs	r5, #10
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6b8:	3a30      	subs	r2, #48	; 0x30
 800b6ba:	2a09      	cmp	r2, #9
 800b6bc:	d903      	bls.n	800b6c6 <_svfiprintf_r+0x196>
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0c8      	beq.n	800b654 <_svfiprintf_r+0x124>
 800b6c2:	9105      	str	r1, [sp, #20]
 800b6c4:	e7c6      	b.n	800b654 <_svfiprintf_r+0x124>
 800b6c6:	fb05 2101 	mla	r1, r5, r1, r2
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4607      	mov	r7, r0
 800b6ce:	e7f0      	b.n	800b6b2 <_svfiprintf_r+0x182>
 800b6d0:	ab03      	add	r3, sp, #12
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	4b11      	ldr	r3, [pc, #68]	; (800b71c <_svfiprintf_r+0x1ec>)
 800b6d8:	a904      	add	r1, sp, #16
 800b6da:	4640      	mov	r0, r8
 800b6dc:	f7fc fb12 	bl	8007d04 <_printf_float>
 800b6e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b6e4:	4681      	mov	r9, r0
 800b6e6:	d1d6      	bne.n	800b696 <_svfiprintf_r+0x166>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	065b      	lsls	r3, r3, #25
 800b6ec:	f53f af35 	bmi.w	800b55a <_svfiprintf_r+0x2a>
 800b6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f2:	b01d      	add	sp, #116	; 0x74
 800b6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f8:	ab03      	add	r3, sp, #12
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4b07      	ldr	r3, [pc, #28]	; (800b71c <_svfiprintf_r+0x1ec>)
 800b700:	a904      	add	r1, sp, #16
 800b702:	4640      	mov	r0, r8
 800b704:	f7fc fdb4 	bl	8008270 <_printf_i>
 800b708:	e7ea      	b.n	800b6e0 <_svfiprintf_r+0x1b0>
 800b70a:	bf00      	nop
 800b70c:	0800c22c 	.word	0x0800c22c
 800b710:	0800c232 	.word	0x0800c232
 800b714:	0800c236 	.word	0x0800c236
 800b718:	08007d05 	.word	0x08007d05
 800b71c:	0800b47d 	.word	0x0800b47d

0800b720 <__sfputc_r>:
 800b720:	6893      	ldr	r3, [r2, #8]
 800b722:	3b01      	subs	r3, #1
 800b724:	2b00      	cmp	r3, #0
 800b726:	b410      	push	{r4}
 800b728:	6093      	str	r3, [r2, #8]
 800b72a:	da08      	bge.n	800b73e <__sfputc_r+0x1e>
 800b72c:	6994      	ldr	r4, [r2, #24]
 800b72e:	42a3      	cmp	r3, r4
 800b730:	db01      	blt.n	800b736 <__sfputc_r+0x16>
 800b732:	290a      	cmp	r1, #10
 800b734:	d103      	bne.n	800b73e <__sfputc_r+0x1e>
 800b736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b73a:	f000 b997 	b.w	800ba6c <__swbuf_r>
 800b73e:	6813      	ldr	r3, [r2, #0]
 800b740:	1c58      	adds	r0, r3, #1
 800b742:	6010      	str	r0, [r2, #0]
 800b744:	7019      	strb	r1, [r3, #0]
 800b746:	4608      	mov	r0, r1
 800b748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <__sfputs_r>:
 800b74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b750:	4606      	mov	r6, r0
 800b752:	460f      	mov	r7, r1
 800b754:	4614      	mov	r4, r2
 800b756:	18d5      	adds	r5, r2, r3
 800b758:	42ac      	cmp	r4, r5
 800b75a:	d101      	bne.n	800b760 <__sfputs_r+0x12>
 800b75c:	2000      	movs	r0, #0
 800b75e:	e007      	b.n	800b770 <__sfputs_r+0x22>
 800b760:	463a      	mov	r2, r7
 800b762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b766:	4630      	mov	r0, r6
 800b768:	f7ff ffda 	bl	800b720 <__sfputc_r>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d1f3      	bne.n	800b758 <__sfputs_r+0xa>
 800b770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b774 <_vfiprintf_r>:
 800b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	460c      	mov	r4, r1
 800b77a:	b09d      	sub	sp, #116	; 0x74
 800b77c:	4617      	mov	r7, r2
 800b77e:	461d      	mov	r5, r3
 800b780:	4606      	mov	r6, r0
 800b782:	b118      	cbz	r0, 800b78c <_vfiprintf_r+0x18>
 800b784:	6983      	ldr	r3, [r0, #24]
 800b786:	b90b      	cbnz	r3, 800b78c <_vfiprintf_r+0x18>
 800b788:	f7fe fdda 	bl	800a340 <__sinit>
 800b78c:	4b7c      	ldr	r3, [pc, #496]	; (800b980 <_vfiprintf_r+0x20c>)
 800b78e:	429c      	cmp	r4, r3
 800b790:	d158      	bne.n	800b844 <_vfiprintf_r+0xd0>
 800b792:	6874      	ldr	r4, [r6, #4]
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	0718      	lsls	r0, r3, #28
 800b798:	d55e      	bpl.n	800b858 <_vfiprintf_r+0xe4>
 800b79a:	6923      	ldr	r3, [r4, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d05b      	beq.n	800b858 <_vfiprintf_r+0xe4>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a4:	2320      	movs	r3, #32
 800b7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7aa:	2330      	movs	r3, #48	; 0x30
 800b7ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7b0:	9503      	str	r5, [sp, #12]
 800b7b2:	f04f 0b01 	mov.w	fp, #1
 800b7b6:	46b8      	mov	r8, r7
 800b7b8:	4645      	mov	r5, r8
 800b7ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7be:	b10b      	cbz	r3, 800b7c4 <_vfiprintf_r+0x50>
 800b7c0:	2b25      	cmp	r3, #37	; 0x25
 800b7c2:	d154      	bne.n	800b86e <_vfiprintf_r+0xfa>
 800b7c4:	ebb8 0a07 	subs.w	sl, r8, r7
 800b7c8:	d00b      	beq.n	800b7e2 <_vfiprintf_r+0x6e>
 800b7ca:	4653      	mov	r3, sl
 800b7cc:	463a      	mov	r2, r7
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff ffbc 	bl	800b74e <__sfputs_r>
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	f000 80c2 	beq.w	800b960 <_vfiprintf_r+0x1ec>
 800b7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7de:	4453      	add	r3, sl
 800b7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e2:	f898 3000 	ldrb.w	r3, [r8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f000 80ba 	beq.w	800b960 <_vfiprintf_r+0x1ec>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7f6:	9304      	str	r3, [sp, #16]
 800b7f8:	9307      	str	r3, [sp, #28]
 800b7fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b800:	46a8      	mov	r8, r5
 800b802:	2205      	movs	r2, #5
 800b804:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b808:	485e      	ldr	r0, [pc, #376]	; (800b984 <_vfiprintf_r+0x210>)
 800b80a:	f7f4 fce9 	bl	80001e0 <memchr>
 800b80e:	9b04      	ldr	r3, [sp, #16]
 800b810:	bb78      	cbnz	r0, 800b872 <_vfiprintf_r+0xfe>
 800b812:	06d9      	lsls	r1, r3, #27
 800b814:	bf44      	itt	mi
 800b816:	2220      	movmi	r2, #32
 800b818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b81c:	071a      	lsls	r2, r3, #28
 800b81e:	bf44      	itt	mi
 800b820:	222b      	movmi	r2, #43	; 0x2b
 800b822:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b826:	782a      	ldrb	r2, [r5, #0]
 800b828:	2a2a      	cmp	r2, #42	; 0x2a
 800b82a:	d02a      	beq.n	800b882 <_vfiprintf_r+0x10e>
 800b82c:	9a07      	ldr	r2, [sp, #28]
 800b82e:	46a8      	mov	r8, r5
 800b830:	2000      	movs	r0, #0
 800b832:	250a      	movs	r5, #10
 800b834:	4641      	mov	r1, r8
 800b836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b83a:	3b30      	subs	r3, #48	; 0x30
 800b83c:	2b09      	cmp	r3, #9
 800b83e:	d969      	bls.n	800b914 <_vfiprintf_r+0x1a0>
 800b840:	b360      	cbz	r0, 800b89c <_vfiprintf_r+0x128>
 800b842:	e024      	b.n	800b88e <_vfiprintf_r+0x11a>
 800b844:	4b50      	ldr	r3, [pc, #320]	; (800b988 <_vfiprintf_r+0x214>)
 800b846:	429c      	cmp	r4, r3
 800b848:	d101      	bne.n	800b84e <_vfiprintf_r+0xda>
 800b84a:	68b4      	ldr	r4, [r6, #8]
 800b84c:	e7a2      	b.n	800b794 <_vfiprintf_r+0x20>
 800b84e:	4b4f      	ldr	r3, [pc, #316]	; (800b98c <_vfiprintf_r+0x218>)
 800b850:	429c      	cmp	r4, r3
 800b852:	bf08      	it	eq
 800b854:	68f4      	ldreq	r4, [r6, #12]
 800b856:	e79d      	b.n	800b794 <_vfiprintf_r+0x20>
 800b858:	4621      	mov	r1, r4
 800b85a:	4630      	mov	r0, r6
 800b85c:	f000 f978 	bl	800bb50 <__swsetup_r>
 800b860:	2800      	cmp	r0, #0
 800b862:	d09d      	beq.n	800b7a0 <_vfiprintf_r+0x2c>
 800b864:	f04f 30ff 	mov.w	r0, #4294967295
 800b868:	b01d      	add	sp, #116	; 0x74
 800b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86e:	46a8      	mov	r8, r5
 800b870:	e7a2      	b.n	800b7b8 <_vfiprintf_r+0x44>
 800b872:	4a44      	ldr	r2, [pc, #272]	; (800b984 <_vfiprintf_r+0x210>)
 800b874:	1a80      	subs	r0, r0, r2
 800b876:	fa0b f000 	lsl.w	r0, fp, r0
 800b87a:	4318      	orrs	r0, r3
 800b87c:	9004      	str	r0, [sp, #16]
 800b87e:	4645      	mov	r5, r8
 800b880:	e7be      	b.n	800b800 <_vfiprintf_r+0x8c>
 800b882:	9a03      	ldr	r2, [sp, #12]
 800b884:	1d11      	adds	r1, r2, #4
 800b886:	6812      	ldr	r2, [r2, #0]
 800b888:	9103      	str	r1, [sp, #12]
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	db01      	blt.n	800b892 <_vfiprintf_r+0x11e>
 800b88e:	9207      	str	r2, [sp, #28]
 800b890:	e004      	b.n	800b89c <_vfiprintf_r+0x128>
 800b892:	4252      	negs	r2, r2
 800b894:	f043 0302 	orr.w	r3, r3, #2
 800b898:	9207      	str	r2, [sp, #28]
 800b89a:	9304      	str	r3, [sp, #16]
 800b89c:	f898 3000 	ldrb.w	r3, [r8]
 800b8a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b8a2:	d10e      	bne.n	800b8c2 <_vfiprintf_r+0x14e>
 800b8a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8aa:	d138      	bne.n	800b91e <_vfiprintf_r+0x1aa>
 800b8ac:	9b03      	ldr	r3, [sp, #12]
 800b8ae:	1d1a      	adds	r2, r3, #4
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	9203      	str	r2, [sp, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	bfb8      	it	lt
 800b8b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8bc:	f108 0802 	add.w	r8, r8, #2
 800b8c0:	9305      	str	r3, [sp, #20]
 800b8c2:	4d33      	ldr	r5, [pc, #204]	; (800b990 <_vfiprintf_r+0x21c>)
 800b8c4:	f898 1000 	ldrb.w	r1, [r8]
 800b8c8:	2203      	movs	r2, #3
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f7f4 fc88 	bl	80001e0 <memchr>
 800b8d0:	b140      	cbz	r0, 800b8e4 <_vfiprintf_r+0x170>
 800b8d2:	2340      	movs	r3, #64	; 0x40
 800b8d4:	1b40      	subs	r0, r0, r5
 800b8d6:	fa03 f000 	lsl.w	r0, r3, r0
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	4303      	orrs	r3, r0
 800b8de:	f108 0801 	add.w	r8, r8, #1
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	f898 1000 	ldrb.w	r1, [r8]
 800b8e8:	482a      	ldr	r0, [pc, #168]	; (800b994 <_vfiprintf_r+0x220>)
 800b8ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8ee:	2206      	movs	r2, #6
 800b8f0:	f108 0701 	add.w	r7, r8, #1
 800b8f4:	f7f4 fc74 	bl	80001e0 <memchr>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d037      	beq.n	800b96c <_vfiprintf_r+0x1f8>
 800b8fc:	4b26      	ldr	r3, [pc, #152]	; (800b998 <_vfiprintf_r+0x224>)
 800b8fe:	bb1b      	cbnz	r3, 800b948 <_vfiprintf_r+0x1d4>
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	3307      	adds	r3, #7
 800b904:	f023 0307 	bic.w	r3, r3, #7
 800b908:	3308      	adds	r3, #8
 800b90a:	9303      	str	r3, [sp, #12]
 800b90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b90e:	444b      	add	r3, r9
 800b910:	9309      	str	r3, [sp, #36]	; 0x24
 800b912:	e750      	b.n	800b7b6 <_vfiprintf_r+0x42>
 800b914:	fb05 3202 	mla	r2, r5, r2, r3
 800b918:	2001      	movs	r0, #1
 800b91a:	4688      	mov	r8, r1
 800b91c:	e78a      	b.n	800b834 <_vfiprintf_r+0xc0>
 800b91e:	2300      	movs	r3, #0
 800b920:	f108 0801 	add.w	r8, r8, #1
 800b924:	9305      	str	r3, [sp, #20]
 800b926:	4619      	mov	r1, r3
 800b928:	250a      	movs	r5, #10
 800b92a:	4640      	mov	r0, r8
 800b92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b930:	3a30      	subs	r2, #48	; 0x30
 800b932:	2a09      	cmp	r2, #9
 800b934:	d903      	bls.n	800b93e <_vfiprintf_r+0x1ca>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0c3      	beq.n	800b8c2 <_vfiprintf_r+0x14e>
 800b93a:	9105      	str	r1, [sp, #20]
 800b93c:	e7c1      	b.n	800b8c2 <_vfiprintf_r+0x14e>
 800b93e:	fb05 2101 	mla	r1, r5, r1, r2
 800b942:	2301      	movs	r3, #1
 800b944:	4680      	mov	r8, r0
 800b946:	e7f0      	b.n	800b92a <_vfiprintf_r+0x1b6>
 800b948:	ab03      	add	r3, sp, #12
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	4622      	mov	r2, r4
 800b94e:	4b13      	ldr	r3, [pc, #76]	; (800b99c <_vfiprintf_r+0x228>)
 800b950:	a904      	add	r1, sp, #16
 800b952:	4630      	mov	r0, r6
 800b954:	f7fc f9d6 	bl	8007d04 <_printf_float>
 800b958:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b95c:	4681      	mov	r9, r0
 800b95e:	d1d5      	bne.n	800b90c <_vfiprintf_r+0x198>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	065b      	lsls	r3, r3, #25
 800b964:	f53f af7e 	bmi.w	800b864 <_vfiprintf_r+0xf0>
 800b968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b96a:	e77d      	b.n	800b868 <_vfiprintf_r+0xf4>
 800b96c:	ab03      	add	r3, sp, #12
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	4622      	mov	r2, r4
 800b972:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <_vfiprintf_r+0x228>)
 800b974:	a904      	add	r1, sp, #16
 800b976:	4630      	mov	r0, r6
 800b978:	f7fc fc7a 	bl	8008270 <_printf_i>
 800b97c:	e7ec      	b.n	800b958 <_vfiprintf_r+0x1e4>
 800b97e:	bf00      	nop
 800b980:	0800c0e0 	.word	0x0800c0e0
 800b984:	0800c22c 	.word	0x0800c22c
 800b988:	0800c100 	.word	0x0800c100
 800b98c:	0800c0c0 	.word	0x0800c0c0
 800b990:	0800c232 	.word	0x0800c232
 800b994:	0800c236 	.word	0x0800c236
 800b998:	08007d05 	.word	0x08007d05
 800b99c:	0800b74f 	.word	0x0800b74f

0800b9a0 <_sbrk_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4c06      	ldr	r4, [pc, #24]	; (800b9bc <_sbrk_r+0x1c>)
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	f7f6 fe7c 	bl	80026a8 <_sbrk>
 800b9b0:	1c43      	adds	r3, r0, #1
 800b9b2:	d102      	bne.n	800b9ba <_sbrk_r+0x1a>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	b103      	cbz	r3, 800b9ba <_sbrk_r+0x1a>
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	20000550 	.word	0x20000550

0800b9c0 <__sread>:
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c8:	f000 faa8 	bl	800bf1c <_read_r>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	bfab      	itete	ge
 800b9d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9d4:	181b      	addge	r3, r3, r0
 800b9d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9da:	bfac      	ite	ge
 800b9dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9de:	81a3      	strhlt	r3, [r4, #12]
 800b9e0:	bd10      	pop	{r4, pc}

0800b9e2 <__swrite>:
 800b9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e6:	461f      	mov	r7, r3
 800b9e8:	898b      	ldrh	r3, [r1, #12]
 800b9ea:	05db      	lsls	r3, r3, #23
 800b9ec:	4605      	mov	r5, r0
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	4616      	mov	r6, r2
 800b9f2:	d505      	bpl.n	800ba00 <__swrite+0x1e>
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fc:	f000 f9d6 	bl	800bdac <_lseek_r>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba0a:	81a3      	strh	r3, [r4, #12]
 800ba0c:	4632      	mov	r2, r6
 800ba0e:	463b      	mov	r3, r7
 800ba10:	4628      	mov	r0, r5
 800ba12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba16:	f000 b889 	b.w	800bb2c <_write_r>

0800ba1a <__sseek>:
 800ba1a:	b510      	push	{r4, lr}
 800ba1c:	460c      	mov	r4, r1
 800ba1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba22:	f000 f9c3 	bl	800bdac <_lseek_r>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	bf15      	itete	ne
 800ba2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba36:	81a3      	strheq	r3, [r4, #12]
 800ba38:	bf18      	it	ne
 800ba3a:	81a3      	strhne	r3, [r4, #12]
 800ba3c:	bd10      	pop	{r4, pc}

0800ba3e <__sclose>:
 800ba3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba42:	f000 b8f3 	b.w	800bc2c <_close_r>

0800ba46 <strncmp>:
 800ba46:	b510      	push	{r4, lr}
 800ba48:	b16a      	cbz	r2, 800ba66 <strncmp+0x20>
 800ba4a:	3901      	subs	r1, #1
 800ba4c:	1884      	adds	r4, r0, r2
 800ba4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ba52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d103      	bne.n	800ba62 <strncmp+0x1c>
 800ba5a:	42a0      	cmp	r0, r4
 800ba5c:	d001      	beq.n	800ba62 <strncmp+0x1c>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1f5      	bne.n	800ba4e <strncmp+0x8>
 800ba62:	1a98      	subs	r0, r3, r2
 800ba64:	bd10      	pop	{r4, pc}
 800ba66:	4610      	mov	r0, r2
 800ba68:	e7fc      	b.n	800ba64 <strncmp+0x1e>
	...

0800ba6c <__swbuf_r>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	460e      	mov	r6, r1
 800ba70:	4614      	mov	r4, r2
 800ba72:	4605      	mov	r5, r0
 800ba74:	b118      	cbz	r0, 800ba7e <__swbuf_r+0x12>
 800ba76:	6983      	ldr	r3, [r0, #24]
 800ba78:	b90b      	cbnz	r3, 800ba7e <__swbuf_r+0x12>
 800ba7a:	f7fe fc61 	bl	800a340 <__sinit>
 800ba7e:	4b21      	ldr	r3, [pc, #132]	; (800bb04 <__swbuf_r+0x98>)
 800ba80:	429c      	cmp	r4, r3
 800ba82:	d12a      	bne.n	800bada <__swbuf_r+0x6e>
 800ba84:	686c      	ldr	r4, [r5, #4]
 800ba86:	69a3      	ldr	r3, [r4, #24]
 800ba88:	60a3      	str	r3, [r4, #8]
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	071a      	lsls	r2, r3, #28
 800ba8e:	d52e      	bpl.n	800baee <__swbuf_r+0x82>
 800ba90:	6923      	ldr	r3, [r4, #16]
 800ba92:	b363      	cbz	r3, 800baee <__swbuf_r+0x82>
 800ba94:	6923      	ldr	r3, [r4, #16]
 800ba96:	6820      	ldr	r0, [r4, #0]
 800ba98:	1ac0      	subs	r0, r0, r3
 800ba9a:	6963      	ldr	r3, [r4, #20]
 800ba9c:	b2f6      	uxtb	r6, r6
 800ba9e:	4283      	cmp	r3, r0
 800baa0:	4637      	mov	r7, r6
 800baa2:	dc04      	bgt.n	800baae <__swbuf_r+0x42>
 800baa4:	4621      	mov	r1, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	f000 f956 	bl	800bd58 <_fflush_r>
 800baac:	bb28      	cbnz	r0, 800bafa <__swbuf_r+0x8e>
 800baae:	68a3      	ldr	r3, [r4, #8]
 800bab0:	3b01      	subs	r3, #1
 800bab2:	60a3      	str	r3, [r4, #8]
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	6022      	str	r2, [r4, #0]
 800baba:	701e      	strb	r6, [r3, #0]
 800babc:	6963      	ldr	r3, [r4, #20]
 800babe:	3001      	adds	r0, #1
 800bac0:	4283      	cmp	r3, r0
 800bac2:	d004      	beq.n	800bace <__swbuf_r+0x62>
 800bac4:	89a3      	ldrh	r3, [r4, #12]
 800bac6:	07db      	lsls	r3, r3, #31
 800bac8:	d519      	bpl.n	800bafe <__swbuf_r+0x92>
 800baca:	2e0a      	cmp	r6, #10
 800bacc:	d117      	bne.n	800bafe <__swbuf_r+0x92>
 800bace:	4621      	mov	r1, r4
 800bad0:	4628      	mov	r0, r5
 800bad2:	f000 f941 	bl	800bd58 <_fflush_r>
 800bad6:	b190      	cbz	r0, 800bafe <__swbuf_r+0x92>
 800bad8:	e00f      	b.n	800bafa <__swbuf_r+0x8e>
 800bada:	4b0b      	ldr	r3, [pc, #44]	; (800bb08 <__swbuf_r+0x9c>)
 800badc:	429c      	cmp	r4, r3
 800bade:	d101      	bne.n	800bae4 <__swbuf_r+0x78>
 800bae0:	68ac      	ldr	r4, [r5, #8]
 800bae2:	e7d0      	b.n	800ba86 <__swbuf_r+0x1a>
 800bae4:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <__swbuf_r+0xa0>)
 800bae6:	429c      	cmp	r4, r3
 800bae8:	bf08      	it	eq
 800baea:	68ec      	ldreq	r4, [r5, #12]
 800baec:	e7cb      	b.n	800ba86 <__swbuf_r+0x1a>
 800baee:	4621      	mov	r1, r4
 800baf0:	4628      	mov	r0, r5
 800baf2:	f000 f82d 	bl	800bb50 <__swsetup_r>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d0cc      	beq.n	800ba94 <__swbuf_r+0x28>
 800bafa:	f04f 37ff 	mov.w	r7, #4294967295
 800bafe:	4638      	mov	r0, r7
 800bb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb02:	bf00      	nop
 800bb04:	0800c0e0 	.word	0x0800c0e0
 800bb08:	0800c100 	.word	0x0800c100
 800bb0c:	0800c0c0 	.word	0x0800c0c0

0800bb10 <__ascii_wctomb>:
 800bb10:	b149      	cbz	r1, 800bb26 <__ascii_wctomb+0x16>
 800bb12:	2aff      	cmp	r2, #255	; 0xff
 800bb14:	bf85      	ittet	hi
 800bb16:	238a      	movhi	r3, #138	; 0x8a
 800bb18:	6003      	strhi	r3, [r0, #0]
 800bb1a:	700a      	strbls	r2, [r1, #0]
 800bb1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb20:	bf98      	it	ls
 800bb22:	2001      	movls	r0, #1
 800bb24:	4770      	bx	lr
 800bb26:	4608      	mov	r0, r1
 800bb28:	4770      	bx	lr
	...

0800bb2c <_write_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4c07      	ldr	r4, [pc, #28]	; (800bb4c <_write_r+0x20>)
 800bb30:	4605      	mov	r5, r0
 800bb32:	4608      	mov	r0, r1
 800bb34:	4611      	mov	r1, r2
 800bb36:	2200      	movs	r2, #0
 800bb38:	6022      	str	r2, [r4, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f7f5 fe68 	bl	8001810 <_write>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	d102      	bne.n	800bb4a <_write_r+0x1e>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	b103      	cbz	r3, 800bb4a <_write_r+0x1e>
 800bb48:	602b      	str	r3, [r5, #0]
 800bb4a:	bd38      	pop	{r3, r4, r5, pc}
 800bb4c:	20000550 	.word	0x20000550

0800bb50 <__swsetup_r>:
 800bb50:	4b32      	ldr	r3, [pc, #200]	; (800bc1c <__swsetup_r+0xcc>)
 800bb52:	b570      	push	{r4, r5, r6, lr}
 800bb54:	681d      	ldr	r5, [r3, #0]
 800bb56:	4606      	mov	r6, r0
 800bb58:	460c      	mov	r4, r1
 800bb5a:	b125      	cbz	r5, 800bb66 <__swsetup_r+0x16>
 800bb5c:	69ab      	ldr	r3, [r5, #24]
 800bb5e:	b913      	cbnz	r3, 800bb66 <__swsetup_r+0x16>
 800bb60:	4628      	mov	r0, r5
 800bb62:	f7fe fbed 	bl	800a340 <__sinit>
 800bb66:	4b2e      	ldr	r3, [pc, #184]	; (800bc20 <__swsetup_r+0xd0>)
 800bb68:	429c      	cmp	r4, r3
 800bb6a:	d10f      	bne.n	800bb8c <__swsetup_r+0x3c>
 800bb6c:	686c      	ldr	r4, [r5, #4]
 800bb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	0715      	lsls	r5, r2, #28
 800bb76:	d42c      	bmi.n	800bbd2 <__swsetup_r+0x82>
 800bb78:	06d0      	lsls	r0, r2, #27
 800bb7a:	d411      	bmi.n	800bba0 <__swsetup_r+0x50>
 800bb7c:	2209      	movs	r2, #9
 800bb7e:	6032      	str	r2, [r6, #0]
 800bb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8a:	e03e      	b.n	800bc0a <__swsetup_r+0xba>
 800bb8c:	4b25      	ldr	r3, [pc, #148]	; (800bc24 <__swsetup_r+0xd4>)
 800bb8e:	429c      	cmp	r4, r3
 800bb90:	d101      	bne.n	800bb96 <__swsetup_r+0x46>
 800bb92:	68ac      	ldr	r4, [r5, #8]
 800bb94:	e7eb      	b.n	800bb6e <__swsetup_r+0x1e>
 800bb96:	4b24      	ldr	r3, [pc, #144]	; (800bc28 <__swsetup_r+0xd8>)
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	bf08      	it	eq
 800bb9c:	68ec      	ldreq	r4, [r5, #12]
 800bb9e:	e7e6      	b.n	800bb6e <__swsetup_r+0x1e>
 800bba0:	0751      	lsls	r1, r2, #29
 800bba2:	d512      	bpl.n	800bbca <__swsetup_r+0x7a>
 800bba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bba6:	b141      	cbz	r1, 800bbba <__swsetup_r+0x6a>
 800bba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbac:	4299      	cmp	r1, r3
 800bbae:	d002      	beq.n	800bbb6 <__swsetup_r+0x66>
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff fbbb 	bl	800b32c <_free_r>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	6363      	str	r3, [r4, #52]	; 0x34
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbc0:	81a3      	strh	r3, [r4, #12]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	6063      	str	r3, [r4, #4]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	f043 0308 	orr.w	r3, r3, #8
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	6923      	ldr	r3, [r4, #16]
 800bbd4:	b94b      	cbnz	r3, 800bbea <__swsetup_r+0x9a>
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbe0:	d003      	beq.n	800bbea <__swsetup_r+0x9a>
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f000 f917 	bl	800be18 <__smakebuf_r>
 800bbea:	89a2      	ldrh	r2, [r4, #12]
 800bbec:	f012 0301 	ands.w	r3, r2, #1
 800bbf0:	d00c      	beq.n	800bc0c <__swsetup_r+0xbc>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60a3      	str	r3, [r4, #8]
 800bbf6:	6963      	ldr	r3, [r4, #20]
 800bbf8:	425b      	negs	r3, r3
 800bbfa:	61a3      	str	r3, [r4, #24]
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	b953      	cbnz	r3, 800bc16 <__swsetup_r+0xc6>
 800bc00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bc08:	d1ba      	bne.n	800bb80 <__swsetup_r+0x30>
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	0792      	lsls	r2, r2, #30
 800bc0e:	bf58      	it	pl
 800bc10:	6963      	ldrpl	r3, [r4, #20]
 800bc12:	60a3      	str	r3, [r4, #8]
 800bc14:	e7f2      	b.n	800bbfc <__swsetup_r+0xac>
 800bc16:	2000      	movs	r0, #0
 800bc18:	e7f7      	b.n	800bc0a <__swsetup_r+0xba>
 800bc1a:	bf00      	nop
 800bc1c:	2000000c 	.word	0x2000000c
 800bc20:	0800c0e0 	.word	0x0800c0e0
 800bc24:	0800c100 	.word	0x0800c100
 800bc28:	0800c0c0 	.word	0x0800c0c0

0800bc2c <_close_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4c06      	ldr	r4, [pc, #24]	; (800bc48 <_close_r+0x1c>)
 800bc30:	2300      	movs	r3, #0
 800bc32:	4605      	mov	r5, r0
 800bc34:	4608      	mov	r0, r1
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	f7f6 fd01 	bl	800263e <_close>
 800bc3c:	1c43      	adds	r3, r0, #1
 800bc3e:	d102      	bne.n	800bc46 <_close_r+0x1a>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	b103      	cbz	r3, 800bc46 <_close_r+0x1a>
 800bc44:	602b      	str	r3, [r5, #0]
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	20000550 	.word	0x20000550

0800bc4c <__sflush_r>:
 800bc4c:	898a      	ldrh	r2, [r1, #12]
 800bc4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc52:	4605      	mov	r5, r0
 800bc54:	0710      	lsls	r0, r2, #28
 800bc56:	460c      	mov	r4, r1
 800bc58:	d458      	bmi.n	800bd0c <__sflush_r+0xc0>
 800bc5a:	684b      	ldr	r3, [r1, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	dc05      	bgt.n	800bc6c <__sflush_r+0x20>
 800bc60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	dc02      	bgt.n	800bc6c <__sflush_r+0x20>
 800bc66:	2000      	movs	r0, #0
 800bc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	d0f9      	beq.n	800bc66 <__sflush_r+0x1a>
 800bc72:	2300      	movs	r3, #0
 800bc74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc78:	682f      	ldr	r7, [r5, #0]
 800bc7a:	6a21      	ldr	r1, [r4, #32]
 800bc7c:	602b      	str	r3, [r5, #0]
 800bc7e:	d032      	beq.n	800bce6 <__sflush_r+0x9a>
 800bc80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc82:	89a3      	ldrh	r3, [r4, #12]
 800bc84:	075a      	lsls	r2, r3, #29
 800bc86:	d505      	bpl.n	800bc94 <__sflush_r+0x48>
 800bc88:	6863      	ldr	r3, [r4, #4]
 800bc8a:	1ac0      	subs	r0, r0, r3
 800bc8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc8e:	b10b      	cbz	r3, 800bc94 <__sflush_r+0x48>
 800bc90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc92:	1ac0      	subs	r0, r0, r3
 800bc94:	2300      	movs	r3, #0
 800bc96:	4602      	mov	r2, r0
 800bc98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc9a:	6a21      	ldr	r1, [r4, #32]
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	47b0      	blx	r6
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	d106      	bne.n	800bcb4 <__sflush_r+0x68>
 800bca6:	6829      	ldr	r1, [r5, #0]
 800bca8:	291d      	cmp	r1, #29
 800bcaa:	d848      	bhi.n	800bd3e <__sflush_r+0xf2>
 800bcac:	4a29      	ldr	r2, [pc, #164]	; (800bd54 <__sflush_r+0x108>)
 800bcae:	40ca      	lsrs	r2, r1
 800bcb0:	07d6      	lsls	r6, r2, #31
 800bcb2:	d544      	bpl.n	800bd3e <__sflush_r+0xf2>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	6062      	str	r2, [r4, #4]
 800bcb8:	04d9      	lsls	r1, r3, #19
 800bcba:	6922      	ldr	r2, [r4, #16]
 800bcbc:	6022      	str	r2, [r4, #0]
 800bcbe:	d504      	bpl.n	800bcca <__sflush_r+0x7e>
 800bcc0:	1c42      	adds	r2, r0, #1
 800bcc2:	d101      	bne.n	800bcc8 <__sflush_r+0x7c>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b903      	cbnz	r3, 800bcca <__sflush_r+0x7e>
 800bcc8:	6560      	str	r0, [r4, #84]	; 0x54
 800bcca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bccc:	602f      	str	r7, [r5, #0]
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	d0c9      	beq.n	800bc66 <__sflush_r+0x1a>
 800bcd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcd6:	4299      	cmp	r1, r3
 800bcd8:	d002      	beq.n	800bce0 <__sflush_r+0x94>
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7ff fb26 	bl	800b32c <_free_r>
 800bce0:	2000      	movs	r0, #0
 800bce2:	6360      	str	r0, [r4, #52]	; 0x34
 800bce4:	e7c0      	b.n	800bc68 <__sflush_r+0x1c>
 800bce6:	2301      	movs	r3, #1
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b0      	blx	r6
 800bcec:	1c41      	adds	r1, r0, #1
 800bcee:	d1c8      	bne.n	800bc82 <__sflush_r+0x36>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0c5      	beq.n	800bc82 <__sflush_r+0x36>
 800bcf6:	2b1d      	cmp	r3, #29
 800bcf8:	d001      	beq.n	800bcfe <__sflush_r+0xb2>
 800bcfa:	2b16      	cmp	r3, #22
 800bcfc:	d101      	bne.n	800bd02 <__sflush_r+0xb6>
 800bcfe:	602f      	str	r7, [r5, #0]
 800bd00:	e7b1      	b.n	800bc66 <__sflush_r+0x1a>
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd08:	81a3      	strh	r3, [r4, #12]
 800bd0a:	e7ad      	b.n	800bc68 <__sflush_r+0x1c>
 800bd0c:	690f      	ldr	r7, [r1, #16]
 800bd0e:	2f00      	cmp	r7, #0
 800bd10:	d0a9      	beq.n	800bc66 <__sflush_r+0x1a>
 800bd12:	0793      	lsls	r3, r2, #30
 800bd14:	680e      	ldr	r6, [r1, #0]
 800bd16:	bf08      	it	eq
 800bd18:	694b      	ldreq	r3, [r1, #20]
 800bd1a:	600f      	str	r7, [r1, #0]
 800bd1c:	bf18      	it	ne
 800bd1e:	2300      	movne	r3, #0
 800bd20:	eba6 0807 	sub.w	r8, r6, r7
 800bd24:	608b      	str	r3, [r1, #8]
 800bd26:	f1b8 0f00 	cmp.w	r8, #0
 800bd2a:	dd9c      	ble.n	800bc66 <__sflush_r+0x1a>
 800bd2c:	4643      	mov	r3, r8
 800bd2e:	463a      	mov	r2, r7
 800bd30:	6a21      	ldr	r1, [r4, #32]
 800bd32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd34:	4628      	mov	r0, r5
 800bd36:	47b0      	blx	r6
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	dc06      	bgt.n	800bd4a <__sflush_r+0xfe>
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd42:	81a3      	strh	r3, [r4, #12]
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295
 800bd48:	e78e      	b.n	800bc68 <__sflush_r+0x1c>
 800bd4a:	4407      	add	r7, r0
 800bd4c:	eba8 0800 	sub.w	r8, r8, r0
 800bd50:	e7e9      	b.n	800bd26 <__sflush_r+0xda>
 800bd52:	bf00      	nop
 800bd54:	20400001 	.word	0x20400001

0800bd58 <_fflush_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	690b      	ldr	r3, [r1, #16]
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	460c      	mov	r4, r1
 800bd60:	b1db      	cbz	r3, 800bd9a <_fflush_r+0x42>
 800bd62:	b118      	cbz	r0, 800bd6c <_fflush_r+0x14>
 800bd64:	6983      	ldr	r3, [r0, #24]
 800bd66:	b90b      	cbnz	r3, 800bd6c <_fflush_r+0x14>
 800bd68:	f7fe faea 	bl	800a340 <__sinit>
 800bd6c:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <_fflush_r+0x48>)
 800bd6e:	429c      	cmp	r4, r3
 800bd70:	d109      	bne.n	800bd86 <_fflush_r+0x2e>
 800bd72:	686c      	ldr	r4, [r5, #4]
 800bd74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd78:	b17b      	cbz	r3, 800bd9a <_fflush_r+0x42>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd82:	f7ff bf63 	b.w	800bc4c <__sflush_r>
 800bd86:	4b07      	ldr	r3, [pc, #28]	; (800bda4 <_fflush_r+0x4c>)
 800bd88:	429c      	cmp	r4, r3
 800bd8a:	d101      	bne.n	800bd90 <_fflush_r+0x38>
 800bd8c:	68ac      	ldr	r4, [r5, #8]
 800bd8e:	e7f1      	b.n	800bd74 <_fflush_r+0x1c>
 800bd90:	4b05      	ldr	r3, [pc, #20]	; (800bda8 <_fflush_r+0x50>)
 800bd92:	429c      	cmp	r4, r3
 800bd94:	bf08      	it	eq
 800bd96:	68ec      	ldreq	r4, [r5, #12]
 800bd98:	e7ec      	b.n	800bd74 <_fflush_r+0x1c>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	bd38      	pop	{r3, r4, r5, pc}
 800bd9e:	bf00      	nop
 800bda0:	0800c0e0 	.word	0x0800c0e0
 800bda4:	0800c100 	.word	0x0800c100
 800bda8:	0800c0c0 	.word	0x0800c0c0

0800bdac <_lseek_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4c07      	ldr	r4, [pc, #28]	; (800bdcc <_lseek_r+0x20>)
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	4608      	mov	r0, r1
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	6022      	str	r2, [r4, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f7f6 fc66 	bl	800268c <_lseek>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_lseek_r+0x1e>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_lseek_r+0x1e>
 800bdc8:	602b      	str	r3, [r5, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20000550 	.word	0x20000550

0800bdd0 <__swhatbuf_r>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	460e      	mov	r6, r1
 800bdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	b096      	sub	sp, #88	; 0x58
 800bddc:	4614      	mov	r4, r2
 800bdde:	461d      	mov	r5, r3
 800bde0:	da07      	bge.n	800bdf2 <__swhatbuf_r+0x22>
 800bde2:	2300      	movs	r3, #0
 800bde4:	602b      	str	r3, [r5, #0]
 800bde6:	89b3      	ldrh	r3, [r6, #12]
 800bde8:	061a      	lsls	r2, r3, #24
 800bdea:	d410      	bmi.n	800be0e <__swhatbuf_r+0x3e>
 800bdec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdf0:	e00e      	b.n	800be10 <__swhatbuf_r+0x40>
 800bdf2:	466a      	mov	r2, sp
 800bdf4:	f000 f8a4 	bl	800bf40 <_fstat_r>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	dbf2      	blt.n	800bde2 <__swhatbuf_r+0x12>
 800bdfc:	9a01      	ldr	r2, [sp, #4]
 800bdfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be06:	425a      	negs	r2, r3
 800be08:	415a      	adcs	r2, r3
 800be0a:	602a      	str	r2, [r5, #0]
 800be0c:	e7ee      	b.n	800bdec <__swhatbuf_r+0x1c>
 800be0e:	2340      	movs	r3, #64	; 0x40
 800be10:	2000      	movs	r0, #0
 800be12:	6023      	str	r3, [r4, #0]
 800be14:	b016      	add	sp, #88	; 0x58
 800be16:	bd70      	pop	{r4, r5, r6, pc}

0800be18 <__smakebuf_r>:
 800be18:	898b      	ldrh	r3, [r1, #12]
 800be1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be1c:	079d      	lsls	r5, r3, #30
 800be1e:	4606      	mov	r6, r0
 800be20:	460c      	mov	r4, r1
 800be22:	d507      	bpl.n	800be34 <__smakebuf_r+0x1c>
 800be24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	6123      	str	r3, [r4, #16]
 800be2c:	2301      	movs	r3, #1
 800be2e:	6163      	str	r3, [r4, #20]
 800be30:	b002      	add	sp, #8
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	ab01      	add	r3, sp, #4
 800be36:	466a      	mov	r2, sp
 800be38:	f7ff ffca 	bl	800bdd0 <__swhatbuf_r>
 800be3c:	9900      	ldr	r1, [sp, #0]
 800be3e:	4605      	mov	r5, r0
 800be40:	4630      	mov	r0, r6
 800be42:	f7ff fac1 	bl	800b3c8 <_malloc_r>
 800be46:	b948      	cbnz	r0, 800be5c <__smakebuf_r+0x44>
 800be48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4c:	059a      	lsls	r2, r3, #22
 800be4e:	d4ef      	bmi.n	800be30 <__smakebuf_r+0x18>
 800be50:	f023 0303 	bic.w	r3, r3, #3
 800be54:	f043 0302 	orr.w	r3, r3, #2
 800be58:	81a3      	strh	r3, [r4, #12]
 800be5a:	e7e3      	b.n	800be24 <__smakebuf_r+0xc>
 800be5c:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <__smakebuf_r+0x7c>)
 800be5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800be60:	89a3      	ldrh	r3, [r4, #12]
 800be62:	6020      	str	r0, [r4, #0]
 800be64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be68:	81a3      	strh	r3, [r4, #12]
 800be6a:	9b00      	ldr	r3, [sp, #0]
 800be6c:	6163      	str	r3, [r4, #20]
 800be6e:	9b01      	ldr	r3, [sp, #4]
 800be70:	6120      	str	r0, [r4, #16]
 800be72:	b15b      	cbz	r3, 800be8c <__smakebuf_r+0x74>
 800be74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be78:	4630      	mov	r0, r6
 800be7a:	f000 f873 	bl	800bf64 <_isatty_r>
 800be7e:	b128      	cbz	r0, 800be8c <__smakebuf_r+0x74>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	f023 0303 	bic.w	r3, r3, #3
 800be86:	f043 0301 	orr.w	r3, r3, #1
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	431d      	orrs	r5, r3
 800be90:	81a5      	strh	r5, [r4, #12]
 800be92:	e7cd      	b.n	800be30 <__smakebuf_r+0x18>
 800be94:	0800a309 	.word	0x0800a309

0800be98 <memmove>:
 800be98:	4288      	cmp	r0, r1
 800be9a:	b510      	push	{r4, lr}
 800be9c:	eb01 0302 	add.w	r3, r1, r2
 800bea0:	d807      	bhi.n	800beb2 <memmove+0x1a>
 800bea2:	1e42      	subs	r2, r0, #1
 800bea4:	4299      	cmp	r1, r3
 800bea6:	d00a      	beq.n	800bebe <memmove+0x26>
 800bea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beac:	f802 4f01 	strb.w	r4, [r2, #1]!
 800beb0:	e7f8      	b.n	800bea4 <memmove+0xc>
 800beb2:	4283      	cmp	r3, r0
 800beb4:	d9f5      	bls.n	800bea2 <memmove+0xa>
 800beb6:	1881      	adds	r1, r0, r2
 800beb8:	1ad2      	subs	r2, r2, r3
 800beba:	42d3      	cmn	r3, r2
 800bebc:	d100      	bne.n	800bec0 <memmove+0x28>
 800bebe:	bd10      	pop	{r4, pc}
 800bec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bec4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bec8:	e7f7      	b.n	800beba <memmove+0x22>

0800beca <__malloc_lock>:
 800beca:	4770      	bx	lr

0800becc <__malloc_unlock>:
 800becc:	4770      	bx	lr

0800bece <_realloc_r>:
 800bece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed0:	4607      	mov	r7, r0
 800bed2:	4614      	mov	r4, r2
 800bed4:	460e      	mov	r6, r1
 800bed6:	b921      	cbnz	r1, 800bee2 <_realloc_r+0x14>
 800bed8:	4611      	mov	r1, r2
 800beda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bede:	f7ff ba73 	b.w	800b3c8 <_malloc_r>
 800bee2:	b922      	cbnz	r2, 800beee <_realloc_r+0x20>
 800bee4:	f7ff fa22 	bl	800b32c <_free_r>
 800bee8:	4625      	mov	r5, r4
 800beea:	4628      	mov	r0, r5
 800beec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beee:	f000 f849 	bl	800bf84 <_malloc_usable_size_r>
 800bef2:	42a0      	cmp	r0, r4
 800bef4:	d20f      	bcs.n	800bf16 <_realloc_r+0x48>
 800bef6:	4621      	mov	r1, r4
 800bef8:	4638      	mov	r0, r7
 800befa:	f7ff fa65 	bl	800b3c8 <_malloc_r>
 800befe:	4605      	mov	r5, r0
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d0f2      	beq.n	800beea <_realloc_r+0x1c>
 800bf04:	4631      	mov	r1, r6
 800bf06:	4622      	mov	r2, r4
 800bf08:	f7fe fdf8 	bl	800aafc <memcpy>
 800bf0c:	4631      	mov	r1, r6
 800bf0e:	4638      	mov	r0, r7
 800bf10:	f7ff fa0c 	bl	800b32c <_free_r>
 800bf14:	e7e9      	b.n	800beea <_realloc_r+0x1c>
 800bf16:	4635      	mov	r5, r6
 800bf18:	e7e7      	b.n	800beea <_realloc_r+0x1c>
	...

0800bf1c <_read_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4c07      	ldr	r4, [pc, #28]	; (800bf3c <_read_r+0x20>)
 800bf20:	4605      	mov	r5, r0
 800bf22:	4608      	mov	r0, r1
 800bf24:	4611      	mov	r1, r2
 800bf26:	2200      	movs	r2, #0
 800bf28:	6022      	str	r2, [r4, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	f7f6 fb6a 	bl	8002604 <_read>
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	d102      	bne.n	800bf3a <_read_r+0x1e>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	b103      	cbz	r3, 800bf3a <_read_r+0x1e>
 800bf38:	602b      	str	r3, [r5, #0]
 800bf3a:	bd38      	pop	{r3, r4, r5, pc}
 800bf3c:	20000550 	.word	0x20000550

0800bf40 <_fstat_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4c07      	ldr	r4, [pc, #28]	; (800bf60 <_fstat_r+0x20>)
 800bf44:	2300      	movs	r3, #0
 800bf46:	4605      	mov	r5, r0
 800bf48:	4608      	mov	r0, r1
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	f7f6 fb82 	bl	8002656 <_fstat>
 800bf52:	1c43      	adds	r3, r0, #1
 800bf54:	d102      	bne.n	800bf5c <_fstat_r+0x1c>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	b103      	cbz	r3, 800bf5c <_fstat_r+0x1c>
 800bf5a:	602b      	str	r3, [r5, #0]
 800bf5c:	bd38      	pop	{r3, r4, r5, pc}
 800bf5e:	bf00      	nop
 800bf60:	20000550 	.word	0x20000550

0800bf64 <_isatty_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4c06      	ldr	r4, [pc, #24]	; (800bf80 <_isatty_r+0x1c>)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	4605      	mov	r5, r0
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	f7f6 fb81 	bl	8002676 <_isatty>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d102      	bne.n	800bf7e <_isatty_r+0x1a>
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	b103      	cbz	r3, 800bf7e <_isatty_r+0x1a>
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	20000550 	.word	0x20000550

0800bf84 <_malloc_usable_size_r>:
 800bf84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf88:	1f18      	subs	r0, r3, #4
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	bfbc      	itt	lt
 800bf8e:	580b      	ldrlt	r3, [r1, r0]
 800bf90:	18c0      	addlt	r0, r0, r3
 800bf92:	4770      	bx	lr

0800bf94 <_init>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr

0800bfa0 <_fini>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr
